[
  {
    "Id": 212910,
    "Description": "Run Generate Forecast",
    "Documentation": "define('o9.DemandPlanning.Dummy',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    var itemsplit=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\")\r\n        return itemdata\r\n    }\r\n    var ExtractMeasure=function(Query,Measure){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    const Profile={\r\n        \"mid\":\"\"\r\n    }\r\n\r\n    var GenSystemStat=function(Version,Iteration){\r\n        var queryModule=require('o9/data/query')\r\n        \r\n        EngineQuery='Select([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Forecast Engine]}) on column;'\r\n        Engine=ExtractMeasure(EngineQuery,'Forecast Engine')\r\n        \r\n        \r\n        if (Engine!=\"Stat\")\r\n        {\r\n            CurrentDateQuery='Select ([Version].[Version Name].['+Version+']*&AllLockedForecastIterations.['+Iteration+'] ) on row, ({Measure.[Training Start Date]}) on column;'\r\n            CurrentDate=ExtractMeasure(CurrentDateQuery,'Training Start Date')\r\n            nullQueries=['delete data for model [190 Stat System L1] where{[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',' delete data for model [511 ML System L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',' delete data for model [471 ML Driver Importance L1]  where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']}; '\r\n            \r\n            ]\r\n            Log.Info(\"Nulling Out ML Measure Groups\")\r\n            nullQueries.forEach(Query=>{\r\n                queryModule.select(Query)\r\n            })\r\n            \r\n            CMLPlugin='exec plugin instance [DP062CMLStat] for measures {Measure.[Stat Actual]} using scope (&AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"}) * &AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &AllStatL1Buckets.Filter(#.Key >= ToDateTime(\"'+CurrentDate+'\")) * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})) using arguments {(\"ForecastMeasureName\", \"Stat Fcst CML\") , (\"ExecutorMemory\", \"10g\") , (DriverMemory, \"10G\") , (NumExecutors, 4) , (DriverCores, 4), (ExecutorCores, 4),(\"Backtest_Mode\",\"False\"), (DataTransferMode, \"csv\"), (\"run_validation\",\"true\"), (\"ForecastMode\",\"train_predict\"),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            Log.Info(\"Running CML Stat\")\r\n            queryModule.select(CMLPlugin)\r\n            DriverData=[\r\n                'Scope :(&AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"})*&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &AllMLDrivers * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) );Measure.[Driver Importance L1] = if (coalesce(Measure.[Driver Importance Input L1],0) == 0) then Measure.[Driver Importance Input L1] else if (coalesce(Measure.[Driver Importance L1],0) != coalesce(Measure.[Driver Importance Input L1],0)) then Measure.[Driver Importance Input L1] else Measure.[Driver Importance L1];end scope;',\r\n                'Scope : (&AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"})*&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &AllMLDrivers * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) );Measure.[Driver Weight L1] = Measure.[Driver Importance L1] * Measure.[Stat Actual L6M];end scope;'\r\n            ]\r\n            Log.Info('Populate Driver Data')\r\n            DriverData.forEach(query=>{\r\n                queryModule.select(query)\r\n            })\r\n            \r\n        }\r\n\r\n        if(Engine!=\"ML\"){\r\n            \r\n            NullOutputs=[ 'delete data for model [193 Stat Validation L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                'delete data for model [194 Stat Models L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                'delete data for model [194 Stat Models L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};','delete data for model [196 Bestfit Algorithm System L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};']\r\n            Log.Info(\"Nulling Stat Outputs\")\r\n            NullOutputs.forEach(query=>{\r\n                queryModule.select(query)\r\n            })\r\n            SystemStat='EXEC plugin instance [DP015SystemStat] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],3000000000),(\"IncludeNullRows\", \"False\"),(AlgoListMeasure, \"Assigned Algorithm List\"),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 3), (ExecutorMemory, \"15G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            Log.Info(\"Generate System Stat\")\r\n            queryModule.select(SystemStat)\r\n            queryModule.select('Scope: ( &AllStatItem * &AllStatAccount*&AllStatChannel * &AllStatRegion * &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']);Measure.[System Ensemble Algorithm List]=null;end scope;')\r\n           \r\n        }\r\n\r\n    }\r\n    var IdentifyPopulate=function(Version,Iteration){\r\n\r\n        var queryModule=require('o9/data/query')\r\n        OutputChecks='EXEC plugin instance [DP056OutputChecks] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"20G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"10G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n        Log.Info(\"Output Checks\")\r\n        queryModule.select(OutputChecks)\r\n        IdentifyBestfit='EXEC plugin instance [DP015IdentifyBestFitModel] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"8G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n        Log.Info(\"Identify\")\r\n        queryModule.select(IdentifyBestfit)\r\n        StratQuery='Select([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Forecast Strategy]}) on column;'\r\n        Strategy=ExtractMeasure(StratQuery,'Forecast Strategy')\r\n        if(Strategy==\"Ensemble\")\r\n        {\r\n            Ensemble='EXEC plugin instance [DP069EnsembleFcst] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"8G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            if(Iteration==\"FI-4\")\r\n                Ensemble='EXEC plugin instance [DP069EnsembleFcst] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"25G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"10G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            Log.Info(\"Running Ensemble\")\r\n            queryModule.select(Ensemble)\r\n        }\r\n        PrePopulateQueries=[\r\n            'scope: (&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) * &AllLockedForecastIterations.filter(#.Name in{\"'+Iteration+'\"}));Measure.[Stat Fcst L1]=Measure.[Actual Cleansed];end scope;',\r\n            'scope: (&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) * &AllLockedForecastIterations.filter(#.Name in{\"'+Iteration+'\"}));Measure.[Planner Stat Fcst L1]=Measure.[Actual Cleansed];end scope;',\r\n            'scope: (&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) * &AllLockedForecastIterations.filter(#.Name in{\"'+Iteration+'\"}) ) ;Measure.[System Bestfit Algorithm Final]=Measure.[System Bestfit Algorithm];end scope;']\r\n        PrePopulateQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n        PopulateQuery='EXEC plugin instance [DP015PopulateBestFitForecast] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"8G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n        queryModule.select(PopulateQuery)\r\n        VolumeViolations=[\r\n            'Block Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel* &AllStatRegion* &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})* &AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"}) * [Stat Algorithm].[Stat Algorithm] * [Stat Rule].[Stat Rule] );Measure.[Straight Line Volume]=if(Measure.[Straight Line]==1) then Measure.[Volume L1] else 0;Measure.[COCC Violation Volume]=if(Measure.[COCC Violation]==1) then Measure.[Volume L1] else 0;Measure.[Level Violation Volume]=if(Measure.[Level Violation]==1) then Measure.[Volume L1] else 0;Measure.[Range Violation Volume]=if(Measure.[Range Violation]==1) then Measure.[Volume L1] else 0;Measure.[Seasonal Violation Volume]=if(Measure.[Seasonal Violation]==1) then Measure.[Volume L1] else 0;Measure.[Trend Violation Volume]=if(Measure.[Trend Violation]==1) then Measure.[Volume L1] else 0;Measure.[No Alerts Volume]=if(Measure.[No Alerts]==1) then Measure.[Volume L1] else 0;end scope;',\r\n            'Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel* &AllStatRegion* &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})* &AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"})  );Measure.[Algorithm Volume L1]=Measure.[Volume L1];end scope;',\r\n            'Cartesian Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel* &AllStatRegion* &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})* &AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"}) );Measure.[Ensemble Weights Flag]=if(~isnull(Measure.[Run Time])) then 1;end scope;'\r\n        ]\r\n        VolumeViolations.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n    }\r\n\r\n    var Segmentation=function(Version,Iteration)\r\n    {\r\n        var queryModule=require('o9/data/query')\r\n\r\n        nullQueries=['delete data for model [160 Stat Segment L1] where {[Version].[Version Name].['+Version+'] ,[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n        'delete data for model [155 Product Customer L1 Segment] where {[Version].[Version Name].['+Version+'] , [Forecast Iteration].[Forecast Iteration].['+Iteration+']};']\r\n        Log.Info(\"Nulling Segmentation Outputs\")\r\n        nullQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n        PluginQueries=[\r\n            'EXEC plugin instance [DP006StatSegmentL1] for measures {[Volume L1]} using scope ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\",\"False\"), (DriverMemory, \"10G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"3G\"), (ExecutorCores, 4) ,(\"SparkProfileConfig\", \"unsliced_medium\")};',\r\n            'EXEC plugin instance [DP037SeasonalityDetection] for measures {[Trend Strength L1]} using scope ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"10G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"5G\"), (ExecutorCores, 4) ,(\"SparkProfileConfig\", \"unsliced_high\"),([Param.o9_sys_log_level], \"INFO\"), (\"Param.slice_bucket_count\", 8)};'\r\n        ]\r\n        Log.Info(\"Running Segmentaiton Plugins\")\r\n        PluginQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n\r\n    }\r\n    var OutlierCorrection=function(Version,Iteration)\r\n    {\r\n        var queryModule=require('o9/data/query')\r\n        \r\n        BucketQuery='Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;';\r\n        var w='false';\r\n        var m='false';\r\n        var pm='false'\r\n        Bucket=ExtractMeasure(BucketQuery,'Forecast Generation Time Bucket')\r\n        if(Bucket==\"Week\")\r\n            w='true'\r\n        if(Bucket==\"Month\")\r\n            m='true'\r\n        if(Bucket=='Planning Month')\r\n            pm='true'\r\n        PreprocessQueries=[\r\n            'scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Actual L1 Minus Time]=if(~isnull(Measure.[Stat Actual])) then Measure.[Stat Actual];end scope;',\r\n            'delete data for model [172 Outlier Review System L1] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n            `scope:( &AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *&CWVAndScenarios.filter(#.Name in {\"${Version}\"}));Measure.[Outlier Method]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Method])) then \"Seasonal IQR\" else Measure.[Outlier Method]) ;Measure.[Outlier Correction]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Correction])) then \"Soft Limit\" else Measure.[Outlier Correction] );Measure.[Outlier Upper Threshold Limit]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Upper Threshold Limit])) then 3 else Measure.[Outlier Upper Threshold Limit] );Measure.[Outlier Lower Threshold Limit]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Lower Threshold Limit])) then 3 else Measure.[Outlier Lower Threshold Limit]) ;end scope;`,         \r\n            `scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * [Forecast Iteration].[Forecast Iteration].[${Iteration}] * &CWVAndScenarios.filter(#.Name in {\"${Version}\"}) );Measure.[Actual L1]=null;end scope;`,\r\n            'Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] * &StatL1HistoryBuckets ) ;Measure.[Abs Actual Cleansed vs Actual Gap]=null;end scope;',\r\n            'spread scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets.relatedmembers(['+Bucket+']) *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[Actual L1]=if(Measure.[Stat Actual]> 0) then Measure.[Stat Actual] else 0;end scope;'\r\n        ]\r\n\r\n        Log.Info(\"Preprocessing Outlier\")\r\n        PreprocessQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n\r\n        PluginQuery='EXEC plugin instance [DP009OutlierCleansing] for measures {[Actual Cleansed]} using scope (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true),([MaxSliceTableCells], 2000000000),(\"IncludeNullRows\", \"False\"),(DriverMemory, \"5G\"), (DriverCores, 1), (NumExecutors, 3), (ExecutorMemory, \"2G\"), (ExecutorCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};'\r\n        Log.Info(\"Outlier Plugin\")\r\n        queryModule.select(PluginQuery)\r\n        \r\n        PostProcessQueries=[\r\n            'Scope:(&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Time].[Partial Week] *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ;Measure.[Actual Cleansed System]=if (Measure.[Actual Cleansed System]>0) then Measure.[Actual Cleansed System] else 0;end scope;',\r\n            `scope: ([Forecast Iteration].[Forecast Iteration].[${Iteration}] *&AllStatItem * &AllStatAccount* &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * &CWVAndScenarios.filter(#.Name in{\"{{VersionName}}\"})); Measure.[Actual Cleansed Adjustment Profile]=Measure.[Actual Cleansed System];end scope;`\r\n        ]\r\n        PostProcessQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n       \r\n        })    \r\n    }\r\n    var AssignRules=function(Version,Iteration)\r\n    {\r\n        var queryModule=require('o9/data/query')\r\n       \r\n       Queries=[\r\n        'delete DATA FOR MODEL [180 Rule Assignment System L1] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n       'EXEC plugin instance [DP011AssignRuleAndAlgorithms] for measures {[Planner Algorithm List]} using scope ( [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\",\"False\"),(DriverMemory, \"10G\"), (DriverCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};',\r\n       'scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Assigned Rule]=if(~IsNull(Measure.[Planner Assigned Rule])) then Measure.[Planner Assigned Rule] else Measure.[System Assigned Rule];end scope;',\r\n       'Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Stat Parameter].[Stat Parameter]* [Stat Algorithm].[Stat Algorithm] *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[System Stat Parameter Association]=null;end scope;',\r\n       'Delete DATA FOR MODEL [184 System Stat Algorithm Association] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n       'scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );measure.[Rule Override Flag] = null;end scope;',\r\n      ' scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[Rule Override Flag] = True ;end scope;',\r\n       'scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );measure.[Algorithm List Override Flag] = null;end scope;',\r\n       'scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[Algorithm List Override Flag] = True ;end scope;',\r\n       'exec plugin instance [DP013OverridePlannerRuleLocalPy] for measures {Measure.[Actual Cleansed]} using scope ([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {(\"IncludeNullRows\", False),(DriverMemory, \"10G\"), (DriverCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};',\r\n       'scope:(&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Assigned Algorithm List]=if(~IsNull(Measure.[Planner Assigned Algorithm List])) then Measure.[Planner Assigned Algorithm List] else Measure.[System Assigned Algorithm List];end scope;',\r\n       'scope:(&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Assigned Algorithm List]= if (~isnull(Measure.[Planner Bestfit Algorithm])) then (if(~(Measure.[Assigned Algorithm List] contains tostring(Measure.[Planner Bestfit Algorithm]))) then tostring(Measure.[Assigned Algorithm List])+\",\"+tostring(Measure.[Planner Bestfit Algorithm]) else Measure.[Assigned Algorithm List] )else Measure.[Assigned Algorithm List];end scope;',\r\n       'exec plugin instance [DP012SetupAlgoAssociationPy] for measures {Measure.[Actual Cleansed]} using scope ([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) using arguments {(\"IncludeNullRows\", False),(DriverMemory, \"10G\"), (DriverCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};'\r\n       ]\r\n       Queries.forEach(query=>{\r\n        queryModule.select(query)\r\n       })\r\n    }\r\n\r\n    var DisaggregateStat=function(Version,Iteration)\r\n    {\r\n\r\n    }\r\n    var Reconcile=function(Version,Type){\r\n\r\n    }\r\n    var ExploratoryAnalysis=function(Version,Type){\r\n        var queryModule=require('o9/data/query')\r\n        nullQueries=[\r\n            `delete data for model [140 Input Checks Flags L1] where { &CWVAndScenarios.['+Version+'], [Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains '${Type}')};`,\r\n            `delete data for model [141 Input Checks L1] where  { &CWVAndScenarios.['+Version+'], [Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains '${Type}')};`\r\n        ]\r\n        nullQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n        PluginCall=`EXEC plugin instance [DP054InputChecks] for measures {[Actual Cleansed]} using scope ([Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains '${Type}') *&CWVAndScenarios.filter(#.Name in{{#ibplList VersionName}})&CWVAndScenarios.['+Version+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"5G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"3G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_low\")};`\r\n        queryModule.select(query)\r\n    }\r\n    \r\n\r\n        \r\n    \r\n    var FullScope=function(o9Params){\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var FcstIteration=parsedParams.Iteration\r\n        var Version=parsedParams.VersionName\r\n        var IterationType=parsedParams.IterationType\r\n        var PrerpocessData=parsedParams.TypeProcesses\r\n        var GenerateStat=parsedParams.IterationProcess\r\n\r\n        const PreprocessFuncs={\r\n            'Segmentation':Segmentation,\r\n            'OutlierCorrection':OutlierCorrection,\r\n            'AssignRules':AssignRules,\r\n            'ExploratoryAnalysis':ExploratoryAnalysis\r\n        }\r\n\r\n        const GenStatFuncs={\r\n            'GenerateFcst':GenSystemStat,\r\n            'PopulateFcst':IdentifyPopulate\r\n        }\r\n\r\n        const PostProcessFuncs={\r\n            'DisaggregateStat':DisaggregateStat,\r\n            'ReconcileFcst':Reconcile\r\n\r\n        }\r\n\r\n\r\n\r\n        \r\n        Log.Info(\"Starting Execution of Stat Workflows\")\r\n        Log.Info(\"Received Versions : \"+Version)\r\n        Log.Info(\"Received Iterations :\"+FcstIteration)\r\n        Log.Info(\"Received Processes:\"+PreprocessFuncs+\",\"+GenStatFuncs)\r\n       \r\n        \r\n\r\n        if(PrerpocessData){\r\n            PrerpocessData.forEach(Process=>{\r\n                Version.forEach(Version=>{\r\n                    FcstIteration.forEach(Iteration => {\r\n                        const func=PreprocessFuncs[Process]\r\n                        if(func){\r\n                        func(Version,Iteration)   \r\n                        } \r\n                    })\r\n                })\r\n               \r\n            })\r\n        }\r\n      \r\n        \r\n       \r\n           \r\n            if(GenerateStat)\r\n            {GenerateStat.forEach(Process=>{\r\n                Version.forEach(Version=>{\r\n                    FcstIteration.forEach(Iteration => {\r\n                        const func=GenStatFuncs[Process]\r\n                        if(func){\r\n                         func(Version,Iteration)   \r\n                        }\r\n                    })\r\n                   })\r\n               \r\n            })}\r\n       \r\n\r\n       \r\n      \r\n        \r\n    \r\n    \r\n    \r\n    }\r\nreturn {\r\nFullScope:FullScope\r\n}\r\n});",
    "Code": "define('o9.DemandPlanning.Dummy',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    var itemsplit=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\")\r\n        return itemdata\r\n    }\r\n    var ExtractMeasure=function(Query,Measure){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    const Profile={\r\n        \"mid\":\"\"\r\n    }\r\n\r\n    var GenSystemStat=function(Version,Iteration){\r\n        var queryModule=require('o9/data/query')\r\n        \r\n        EngineQuery='Select([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Forecast Engine]}) on column;'\r\n        Engine=ExtractMeasure(EngineQuery,'Forecast Engine')\r\n        \r\n        \r\n        if (Engine!=\"Stat\")\r\n        {\r\n            CurrentDateQuery='Select ([Version].[Version Name].['+Version+']*&AllLockedForecastIterations.['+Iteration+'] ) on row, ({Measure.[Training Start Date]}) on column;'\r\n            CurrentDate=ExtractMeasure(CurrentDateQuery,'Training Start Date')\r\n            nullQueries=['delete data for model [190 Stat System L1] where{[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',' delete data for model [511 ML System L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',' delete data for model [471 ML Driver Importance L1]  where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']}; '\r\n            \r\n            ]\r\n            Log.Info(\"Nulling Out ML Measure Groups\")\r\n            nullQueries.forEach(Query=>{\r\n                queryModule.select(Query)\r\n            })\r\n            \r\n            CMLPlugin='exec plugin instance [DP062CMLStat] for measures {Measure.[Stat Actual]} using scope (&AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"}) * &AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &AllStatL1Buckets.Filter(#.Key >= ToDateTime(\"'+CurrentDate+'\")) * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})) using arguments {(\"ForecastMeasureName\", \"Stat Fcst CML\") , (\"ExecutorMemory\", \"10g\") , (DriverMemory, \"10G\") , (NumExecutors, 4) , (DriverCores, 4), (ExecutorCores, 4),(\"Backtest_Mode\",\"False\"), (DataTransferMode, \"csv\"), (\"run_validation\",\"true\"), (\"ForecastMode\",\"train_predict\"),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            Log.Info(\"Running CML Stat\")\r\n            queryModule.select(CMLPlugin)\r\n            DriverData=[\r\n                'Scope :(&AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"})*&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &AllMLDrivers * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) );Measure.[Driver Importance L1] = if (coalesce(Measure.[Driver Importance Input L1],0) == 0) then Measure.[Driver Importance Input L1] else if (coalesce(Measure.[Driver Importance L1],0) != coalesce(Measure.[Driver Importance Input L1],0)) then Measure.[Driver Importance Input L1] else Measure.[Driver Importance L1];end scope;',\r\n                'Scope : (&AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"})*&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &AllMLDrivers * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) );Measure.[Driver Weight L1] = Measure.[Driver Importance L1] * Measure.[Stat Actual L6M];end scope;'\r\n            ]\r\n            Log.Info('Populate Driver Data')\r\n            DriverData.forEach(query=>{\r\n                queryModule.select(query)\r\n            })\r\n            \r\n        }\r\n\r\n        if(Engine!=\"ML\"){\r\n            \r\n            NullOutputs=[ 'delete data for model [193 Stat Validation L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                'delete data for model [194 Stat Models L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                'delete data for model [194 Stat Models L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};','delete data for model [196 Bestfit Algorithm System L1] where {[Version].[Version Name].['+Version+'], [Forecast Iteration].[Forecast Iteration].['+Iteration+']};']\r\n            Log.Info(\"Nulling Stat Outputs\")\r\n            NullOutputs.forEach(query=>{\r\n                queryModule.select(query)\r\n            })\r\n            SystemStat='EXEC plugin instance [DP015SystemStat] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],3000000000),(\"IncludeNullRows\", \"False\"),(AlgoListMeasure, \"Assigned Algorithm List\"),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 3), (ExecutorMemory, \"15G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            Log.Info(\"Generate System Stat\")\r\n            queryModule.select(SystemStat)\r\n            queryModule.select('Scope: ( &AllStatItem * &AllStatAccount*&AllStatChannel * &AllStatRegion * &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']);Measure.[System Ensemble Algorithm List]=null;end scope;')\r\n           \r\n        }\r\n\r\n    }\r\n    var IdentifyPopulate=function(Version,Iteration){\r\n\r\n        var queryModule=require('o9/data/query')\r\n        OutputChecks='EXEC plugin instance [DP056OutputChecks] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"20G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"10G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n        Log.Info(\"Output Checks\")\r\n        queryModule.select(OutputChecks)\r\n        IdentifyBestfit='EXEC plugin instance [DP015IdentifyBestFitModel] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"8G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n        Log.Info(\"Identify\")\r\n        queryModule.select(IdentifyBestfit)\r\n        StratQuery='Select([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Forecast Strategy]}) on column;'\r\n        Strategy=ExtractMeasure(StratQuery,'Forecast Strategy')\r\n        if(Strategy==\"Ensemble\")\r\n        {\r\n            Ensemble='EXEC plugin instance [DP069EnsembleFcst] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"8G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            if(Iteration==\"FI-4\")\r\n                Ensemble='EXEC plugin instance [DP069EnsembleFcst] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"25G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"10G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n            Log.Info(\"Running Ensemble\")\r\n            queryModule.select(Ensemble)\r\n        }\r\n        PrePopulateQueries=[\r\n            'scope: (&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) * &AllLockedForecastIterations.filter(#.Name in{\"'+Iteration+'\"}));Measure.[Stat Fcst L1]=Measure.[Actual Cleansed];end scope;',\r\n            'scope: (&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) * &AllLockedForecastIterations.filter(#.Name in{\"'+Iteration+'\"}));Measure.[Planner Stat Fcst L1]=Measure.[Actual Cleansed];end scope;',\r\n            'scope: (&AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) * &AllLockedForecastIterations.filter(#.Name in{\"'+Iteration+'\"}) ) ;Measure.[System Bestfit Algorithm Final]=Measure.[System Bestfit Algorithm];end scope;']\r\n        PrePopulateQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n        PopulateQuery='EXEC plugin instance [DP015PopulateBestFitForecast] for measures {[Actual Cleansed]} using scope ( &CWVAndScenarios.['+Version+'] * &AllLockedForecastIterations.['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),(DriverMemory, \"15G\"), (DriverCores, 3), (NumExecutors, 4), (ExecutorMemory, \"8G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_high\")};'\r\n        queryModule.select(PopulateQuery)\r\n        VolumeViolations=[\r\n            'Block Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel* &AllStatRegion* &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})* &AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"}) * [Stat Algorithm].[Stat Algorithm] * [Stat Rule].[Stat Rule] );Measure.[Straight Line Volume]=if(Measure.[Straight Line]==1) then Measure.[Volume L1] else 0;Measure.[COCC Violation Volume]=if(Measure.[COCC Violation]==1) then Measure.[Volume L1] else 0;Measure.[Level Violation Volume]=if(Measure.[Level Violation]==1) then Measure.[Volume L1] else 0;Measure.[Range Violation Volume]=if(Measure.[Range Violation]==1) then Measure.[Volume L1] else 0;Measure.[Seasonal Violation Volume]=if(Measure.[Seasonal Violation]==1) then Measure.[Volume L1] else 0;Measure.[Trend Violation Volume]=if(Measure.[Trend Violation]==1) then Measure.[Volume L1] else 0;Measure.[No Alerts Volume]=if(Measure.[No Alerts]==1) then Measure.[Volume L1] else 0;end scope;',\r\n            'Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel* &AllStatRegion* &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})* &AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"})  );Measure.[Algorithm Volume L1]=Measure.[Volume L1];end scope;',\r\n            'Cartesian Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel* &AllStatRegion* &AllStatPnL* &AllStatDemandDomain* &AllStatLocation * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"})* &AllLockedForecastIterations.filter(#.Name in {\"'+Iteration+'\"}) );Measure.[Ensemble Weights Flag]=if(~isnull(Measure.[Run Time])) then 1;end scope;'\r\n        ]\r\n        VolumeViolations.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n    }\r\n\r\n    var Segmentation=function(Version,Iteration)\r\n    {\r\n        var queryModule=require('o9/data/query')\r\n\r\n        nullQueries=['delete data for model [160 Stat Segment L1] where {[Version].[Version Name].['+Version+'] ,[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n        'delete data for model [155 Product Customer L1 Segment] where {[Version].[Version Name].['+Version+'] , [Forecast Iteration].[Forecast Iteration].['+Iteration+']};']\r\n        Log.Info(\"Nulling Segmentation Outputs\")\r\n        nullQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n        PluginQueries=[\r\n            'EXEC plugin instance [DP006StatSegmentL1] for measures {[Volume L1]} using scope ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\",\"False\"), (DriverMemory, \"10G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"3G\"), (ExecutorCores, 4) ,(\"SparkProfileConfig\", \"unsliced_medium\")};',\r\n            'EXEC plugin instance [DP037SeasonalityDetection] for measures {[Trend Strength L1]} using scope ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"10G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"5G\"), (ExecutorCores, 4) ,(\"SparkProfileConfig\", \"unsliced_high\"),([Param.o9_sys_log_level], \"INFO\"), (\"Param.slice_bucket_count\", 8)};'\r\n        ]\r\n        Log.Info(\"Running Segmentaiton Plugins\")\r\n        PluginQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n\r\n    }\r\n    var OutlierCorrection=function(Version,Iteration)\r\n    {\r\n        var queryModule=require('o9/data/query')\r\n        \r\n        BucketQuery='Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;';\r\n        var w='false';\r\n        var m='false';\r\n        var pm='false'\r\n        Bucket=ExtractMeasure(BucketQuery,'Forecast Generation Time Bucket')\r\n        if(Bucket==\"Week\")\r\n            w='true'\r\n        if(Bucket==\"Month\")\r\n            m='true'\r\n        if(Bucket=='Planning Month')\r\n            pm='true'\r\n        PreprocessQueries=[\r\n            'scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Actual L1 Minus Time]=if(~isnull(Measure.[Stat Actual])) then Measure.[Stat Actual];end scope;',\r\n            'delete data for model [172 Outlier Review System L1] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n            `scope:( &AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *&CWVAndScenarios.filter(#.Name in {\"${Version}\"}));Measure.[Outlier Method]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Method])) then \"Seasonal IQR\" else Measure.[Outlier Method]) ;Measure.[Outlier Correction]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Correction])) then \"Soft Limit\" else Measure.[Outlier Correction] );Measure.[Outlier Upper Threshold Limit]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Upper Threshold Limit])) then 3 else Measure.[Outlier Upper Threshold Limit] );Measure.[Outlier Lower Threshold Limit]= if (~isNull(Measure.[Actual L1 Minus Time])) then (if (isnull(Measure.[Outlier Lower Threshold Limit])) then 3 else Measure.[Outlier Lower Threshold Limit]) ;end scope;`,         \r\n            `scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * [Forecast Iteration].[Forecast Iteration].[${Iteration}] * &CWVAndScenarios.filter(#.Name in {\"${Version}\"}) );Measure.[Actual L1]=null;end scope;`,\r\n            'Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] * &StatL1HistoryBuckets ) ;Measure.[Abs Actual Cleansed vs Actual Gap]=null;end scope;',\r\n            'spread scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets.relatedmembers(['+Bucket+']) *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[Actual L1]=if(Measure.[Stat Actual]> 0) then Measure.[Stat Actual] else 0;end scope;'\r\n        ]\r\n\r\n        Log.Info(\"Preprocessing Outlier\")\r\n        PreprocessQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n\r\n        PluginQuery='EXEC plugin instance [DP009OutlierCleansing] for measures {[Actual Cleansed]} using scope (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true),([MaxSliceTableCells], 2000000000),(\"IncludeNullRows\", \"False\"),(DriverMemory, \"5G\"), (DriverCores, 1), (NumExecutors, 3), (ExecutorMemory, \"2G\"), (ExecutorCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};'\r\n        Log.Info(\"Outlier Plugin\")\r\n        queryModule.select(PluginQuery)\r\n        \r\n        PostProcessQueries=[\r\n            'Scope:(&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Time].[Partial Week] *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ;Measure.[Actual Cleansed System]=if (Measure.[Actual Cleansed System]>0) then Measure.[Actual Cleansed System] else 0;end scope;',\r\n            `scope: ([Forecast Iteration].[Forecast Iteration].[${Iteration}] *&AllStatItem * &AllStatAccount* &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * &StatL1HistoryBuckets * &CWVAndScenarios.filter(#.Name in{\"{{VersionName}}\"})); Measure.[Actual Cleansed Adjustment Profile]=Measure.[Actual Cleansed System];end scope;`\r\n        ]\r\n        PostProcessQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n       \r\n        })    \r\n    }\r\n    var AssignRules=function(Version,Iteration)\r\n    {\r\n        var queryModule=require('o9/data/query')\r\n       \r\n       Queries=[\r\n        'delete DATA FOR MODEL [180 Rule Assignment System L1] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n       'EXEC plugin instance [DP011AssignRuleAndAlgorithms] for measures {[Planner Algorithm List]} using scope ( [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\",\"False\"),(DriverMemory, \"10G\"), (DriverCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};',\r\n       'scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Assigned Rule]=if(~IsNull(Measure.[Planner Assigned Rule])) then Measure.[Planner Assigned Rule] else Measure.[System Assigned Rule];end scope;',\r\n       'Scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Stat Parameter].[Stat Parameter]* [Stat Algorithm].[Stat Algorithm] *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[System Stat Parameter Association]=null;end scope;',\r\n       'Delete DATA FOR MODEL [184 System Stat Algorithm Association] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n       'scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );measure.[Rule Override Flag] = null;end scope;',\r\n      ' scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[Rule Override Flag] = True ;end scope;',\r\n       'scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );measure.[Algorithm List Override Flag] = null;end scope;',\r\n       'scope :( &AllStatItem* &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation *[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] );Measure.[Algorithm List Override Flag] = True ;end scope;',\r\n       'exec plugin instance [DP013OverridePlannerRuleLocalPy] for measures {Measure.[Actual Cleansed]} using scope ([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) using arguments {(\"IncludeNullRows\", False),(DriverMemory, \"10G\"), (DriverCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};',\r\n       'scope:(&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Assigned Algorithm List]=if(~IsNull(Measure.[Planner Assigned Algorithm List])) then Measure.[Planner Assigned Algorithm List] else Measure.[System Assigned Algorithm List];end scope;',\r\n       'scope:(&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * [Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Assigned Algorithm List]= if (~isnull(Measure.[Planner Bestfit Algorithm])) then (if(~(Measure.[Assigned Algorithm List] contains tostring(Measure.[Planner Bestfit Algorithm]))) then tostring(Measure.[Assigned Algorithm List])+\",\"+tostring(Measure.[Planner Bestfit Algorithm]) else Measure.[Assigned Algorithm List] )else Measure.[Assigned Algorithm List];end scope;',\r\n       'exec plugin instance [DP012SetupAlgoAssociationPy] for measures {Measure.[Actual Cleansed]} using scope ([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) using arguments {(\"IncludeNullRows\", False),(DriverMemory, \"10G\"), (DriverCores, 2),(\"SparkProfileConfig\", \"sliced_medium\")};'\r\n       ]\r\n       Queries.forEach(query=>{\r\n        queryModule.select(query)\r\n       })\r\n    }\r\n\r\n    var DisaggregateStat=function(Version,Iteration)\r\n    {\r\n\r\n    }\r\n    var Reconcile=function(Version,Type){\r\n\r\n    }\r\n    var ExploratoryAnalysis=function(Version,Type){\r\n        var queryModule=require('o9/data/query')\r\n        nullQueries=[\r\n            `delete data for model [140 Input Checks Flags L1] where { &CWVAndScenarios.['+Version+'], [Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains '${Type}')};`,\r\n            `delete data for model [141 Input Checks L1] where  { &CWVAndScenarios.['+Version+'], [Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains '${Type}')};`\r\n        ]\r\n        nullQueries.forEach(query=>{\r\n            queryModule.select(query)\r\n        })\r\n        PluginCall=`EXEC plugin instance [DP054InputChecks] for measures {[Actual Cleansed]} using scope ([Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains '${Type}') *&CWVAndScenarios.filter(#.Name in{{#ibplList VersionName}})&CWVAndScenarios.['+Version+']) using arguments {([WriteOutputsConcurrently], false), (\"IncludeNullRows\", False),(DriverMemory, \"5G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"3G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_low\")};`\r\n        queryModule.select(query)\r\n    }\r\n    \r\n\r\n        \r\n    \r\n    var FullScope=function(o9Params){\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var FcstIteration=parsedParams.Iteration\r\n        var Version=parsedParams.VersionName\r\n        var IterationType=parsedParams.IterationType\r\n        var PrerpocessData=parsedParams.TypeProcesses\r\n        var GenerateStat=parsedParams.IterationProcess\r\n\r\n        const PreprocessFuncs={\r\n            'Segmentation':Segmentation,\r\n            'OutlierCorrection':OutlierCorrection,\r\n            'AssignRules':AssignRules,\r\n            'ExploratoryAnalysis':ExploratoryAnalysis\r\n        }\r\n\r\n        const GenStatFuncs={\r\n            'GenerateFcst':GenSystemStat,\r\n            'PopulateFcst':IdentifyPopulate\r\n        }\r\n\r\n        const PostProcessFuncs={\r\n            'DisaggregateStat':DisaggregateStat,\r\n            'ReconcileFcst':Reconcile\r\n\r\n        }\r\n\r\n\r\n\r\n        \r\n        Log.Info(\"Starting Execution of Stat Workflows\")\r\n        Log.Info(\"Received Versions : \"+Version)\r\n        Log.Info(\"Received Iterations :\"+FcstIteration)\r\n        Log.Info(\"Received Processes:\"+PreprocessFuncs+\",\"+GenStatFuncs)\r\n       \r\n        \r\n\r\n        if(PrerpocessData){\r\n            PrerpocessData.forEach(Process=>{\r\n                Version.forEach(Version=>{\r\n                    FcstIteration.forEach(Iteration => {\r\n                        const func=PreprocessFuncs[Process]\r\n                        if(func){\r\n                        func(Version,Iteration)   \r\n                        } \r\n                    })\r\n                })\r\n               \r\n            })\r\n        }\r\n      \r\n        \r\n       \r\n           \r\n            if(GenerateStat)\r\n            {GenerateStat.forEach(Process=>{\r\n                Version.forEach(Version=>{\r\n                    FcstIteration.forEach(Iteration => {\r\n                        const func=GenStatFuncs[Process]\r\n                        if(func){\r\n                         func(Version,Iteration)   \r\n                        }\r\n                    })\r\n                   })\r\n               \r\n            })}\r\n       \r\n\r\n       \r\n      \r\n        \r\n    \r\n    \r\n    \r\n    }\r\nreturn {\r\nFullScope:FullScope\r\n}\r\n});",
    "ModuleName": "o9.DemandPlanning.Dummy",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "c12e8d80-e96b-785a-afbf-a84ff2bcc151",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212911,
    "Description": "Validating Bestfit Frequency",
    "Documentation": "define('o9.DemandPlanning.BestfitFrequency',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\r\n\r\n\t\r\n\tLog.Info(\"o9 Params--\"+ o9Params);\r\n\r\n\tvar BesfitCalculationFrequency = parsedParams.BesfitCalculationFrequency;\r\n\tLog.Info(\"Bestfit Calculation Frequency=\" + BesfitCalculationFrequency);\r\n\tif(BesfitCalculationFrequency<0){\r\n\t\tLog.Error(\"Validation Error: Bestfit Calculation Frequency cannot be negative. Exiting...\");\r\n\t\tRuleOutputToUI =\r\n\t\t{\r\n\t\t\tStatus: 'Error',\r\n\t\t\tMessage: 'Bestfit Calculation Frequency cannot be negative. Please enter valid frequency value.'\r\n\t\t};\r\n\t}\r\n\tLog.Info(\"Validation Complete\");\r\n\r\n\r\n\r\n\t};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.BestfitFrequency',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\r\n\r\n\t\r\n\tLog.Info(\"o9 Params--\"+ o9Params);\r\n\r\n\tvar BesfitCalculationFrequency = parsedParams.BesfitCalculationFrequency;\r\n\tLog.Info(\"Bestfit Calculation Frequency=\" + BesfitCalculationFrequency);\r\n\tif(BesfitCalculationFrequency<0){\r\n\t\tLog.Error(\"Validation Error: Bestfit Calculation Frequency cannot be negative. Exiting...\");\r\n\t\tRuleOutputToUI =\r\n\t\t{\r\n\t\t\tStatus: 'Error',\r\n\t\t\tMessage: 'Bestfit Calculation Frequency cannot be negative. Please enter valid frequency value.'\r\n\t\t};\r\n\t}\r\n\tLog.Info(\"Validation Complete\");\r\n\r\n\r\n\r\n\t};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.BestfitFrequency",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4c306153-f697-eab3-1d29-145d936df542",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212912,
    "Description": "Populate Disaggregation Volume Loss",
    "Documentation": "define('o9.DemandPlanning.DisagExceptions',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        if (QueryCellset.rowCount==0)\r\n            return 0    \r\n        return QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))\r\n        \r\n    }\r\n    var PopulateDisagExceptions=function (o9Params)\r\n    {\r\n        \r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var ForecastIteration=parsedParams.Iteration\r\n        \r\n        var Version=parsedParams.VersionName\r\n        var PopulateDisag=parsedParams.PopulateDisag\r\n        if(!PopulateDisag)\r\n            return \r\n        \r\n        \r\n        ForecastIteration.forEach(Iteration =>{\r\n\r\n            queryModule.select('delete data for model [401 Stat Process Exception] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};')\r\n            var Dims=['Item','Account','Channel','Region','Location','PnL','Demand Domain']\r\n            var Levels={}\r\n            Dims.forEach(element=>{\r\n                var query='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] * ['+element+'].[Planning '+element+']) on row,({Measure.['+element+' Level]}) on column;'\r\n                Levels[element]=ExtractMeasure(query,element+' Level')\r\n            })\r\n            \r\n\r\n            var  ExpectQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] *[Forecast Iteration].[Forecast Iteration].['+Iteration+']  * [Location].[Stat Location] * [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] ) on row, ({Measure.[System Stat Fcst L1]}) on column ;'\r\n            var  ExpectCellset=cellsetModule.createCellSet(queryModule.select(ExpectQuery))\r\n            \r\n            \r\n            if(ExpectCellset.rowCount<1){\r\n                Log.Info('Actual Rows: '+ExpectCellset.rowCount)\r\n                return \r\n            } \r\n\r\n            \r\n            for(var i=0;i<ExpectCellset.rowCount;i++)\r\n                {\r\n                    \r\n                    var intersection={}\r\n                    Dims.forEach(element=>{intersection[element]=ExpectCellset.row(i).cell(ExpectCellset.memberColumnIndex(element,'Stat '+element)).Name})\r\n                    var ExpectValue=ExpectCellset.row(i).cell(ExpectCellset.measureColumnIndex('System Stat Fcst L1'))\r\n                    var actualQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Planning Region].relatedmembers(['+Levels['Region']+']).['+intersection['Region']+'] * [Item].[Planning Item].relatedmembers(['+Levels['Item']+']).['+intersection['Item']+'] * [PnL].[Planning PnL].relatedmembers(['+Levels['PnL']+']).['+intersection['PnL']+'] *[Forecast Iteration].[Forecast Iteration].['+Iteration+']  * [Location].[Planning Location].relatedmembers(['+Levels['Location']+']).['+intersection['Location']+']  * [Channel].[Planning Channel].relatedmembers(['+Levels['Channel']+']).['+intersection['Channel']+'] * [Demand Domain].[Planning Demand Domain].relatedmembers(['+Levels['Demand Domain']+']).['+intersection['Demand Domain']+'] * [Account].[Planning Account].relatedmembers(['+Levels['Account']+']).['+intersection['Account']+'] ) on row, ({Measure.[Stat Fcst PL]}) on column;'\r\n                    \r\n                    var actualCellset=cellsetModule.createCellSet(queryModule.select(actualQuery))\r\n                    var ActualValue=0\r\n                    if(actualCellset.rowCount>0)\r\n                        ActualValue=actualCellset.row(0).cell(actualCellset.measureColumnIndex('Stat Fcst PL'))\r\n                    ActualValue=!ActualValue?0:ActualValue\r\n                    ExpectValue=!ExpectValue?0:ExpectValue\r\n                    Log.Info(\"Current Intersection :\"+intersection['Item']+\", \"+intersection['Account']+\", \"+intersection['Channel']+\", \"+intersection['Region']+\", \"+intersection['Location']+\", \"+intersection['PnL']+\", \"+intersection['Demand Domain']+\" and Expect: \"+ExpectValue+\" Actual: \"+ActualValue)                   \r\n                    var loss=Math.round(ExpectValue-ActualValue)\r\n                    \r\n                    var populateQuery='Cartesian Scope: ([Version].[Version Name].['+Version+'] * [Region].[Stat Region].['+intersection['Region']+'] * [Item].[Stat Item].['+intersection['Item']+'] * [PnL].[Stat PnL].['+intersection['PnL']+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Location].[Stat Location].['+intersection['Location']+'] * [Channel].[Stat Channel].['+intersection['Channel']+'] * [Demand Domain].[Stat Demand Domain].['+intersection['Demand Domain']+'] * [Account].[Stat Account].['+intersection['Account']+'] );Measure.[Volume Loss PL]='+loss+';end scope;'\r\n                    \r\n                    if(loss>0)\r\n                    queryModule.select(populateQuery)\r\n                }\r\n        })         \r\n    }\r\n\r\n return{\r\n    PopulateDisagExceptions:PopulateDisagExceptions\r\n }\r\n\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.DisagExceptions',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        if (QueryCellset.rowCount==0)\r\n            return 0    \r\n        return QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))\r\n        \r\n    }\r\n    var PopulateDisagExceptions=function (o9Params)\r\n    {\r\n        \r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var ForecastIteration=parsedParams.Iteration\r\n        \r\n        var Version=parsedParams.VersionName\r\n        var PopulateDisag=parsedParams.PopulateDisag\r\n        if(!PopulateDisag)\r\n            return \r\n        \r\n        \r\n        ForecastIteration.forEach(Iteration =>{\r\n\r\n            queryModule.select('delete data for model [401 Stat Process Exception] where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};')\r\n            var Dims=['Item','Account','Channel','Region','Location','PnL','Demand Domain']\r\n            var Levels={}\r\n            Dims.forEach(element=>{\r\n                var query='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] * ['+element+'].[Planning '+element+']) on row,({Measure.['+element+' Level]}) on column;'\r\n                Levels[element]=ExtractMeasure(query,element+' Level')\r\n            })\r\n            \r\n\r\n            var  ExpectQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] *[Forecast Iteration].[Forecast Iteration].['+Iteration+']  * [Location].[Stat Location] * [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] ) on row, ({Measure.[System Stat Fcst L1]}) on column ;'\r\n            var  ExpectCellset=cellsetModule.createCellSet(queryModule.select(ExpectQuery))\r\n            \r\n            \r\n            if(ExpectCellset.rowCount<1){\r\n                Log.Info('Actual Rows: '+ExpectCellset.rowCount)\r\n                return \r\n            } \r\n\r\n            \r\n            for(var i=0;i<ExpectCellset.rowCount;i++)\r\n                {\r\n                    \r\n                    var intersection={}\r\n                    Dims.forEach(element=>{intersection[element]=ExpectCellset.row(i).cell(ExpectCellset.memberColumnIndex(element,'Stat '+element)).Name})\r\n                    var ExpectValue=ExpectCellset.row(i).cell(ExpectCellset.measureColumnIndex('System Stat Fcst L1'))\r\n                    var actualQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Planning Region].relatedmembers(['+Levels['Region']+']).['+intersection['Region']+'] * [Item].[Planning Item].relatedmembers(['+Levels['Item']+']).['+intersection['Item']+'] * [PnL].[Planning PnL].relatedmembers(['+Levels['PnL']+']).['+intersection['PnL']+'] *[Forecast Iteration].[Forecast Iteration].['+Iteration+']  * [Location].[Planning Location].relatedmembers(['+Levels['Location']+']).['+intersection['Location']+']  * [Channel].[Planning Channel].relatedmembers(['+Levels['Channel']+']).['+intersection['Channel']+'] * [Demand Domain].[Planning Demand Domain].relatedmembers(['+Levels['Demand Domain']+']).['+intersection['Demand Domain']+'] * [Account].[Planning Account].relatedmembers(['+Levels['Account']+']).['+intersection['Account']+'] ) on row, ({Measure.[Stat Fcst PL]}) on column;'\r\n                    \r\n                    var actualCellset=cellsetModule.createCellSet(queryModule.select(actualQuery))\r\n                    var ActualValue=0\r\n                    if(actualCellset.rowCount>0)\r\n                        ActualValue=actualCellset.row(0).cell(actualCellset.measureColumnIndex('Stat Fcst PL'))\r\n                    ActualValue=!ActualValue?0:ActualValue\r\n                    ExpectValue=!ExpectValue?0:ExpectValue\r\n                    Log.Info(\"Current Intersection :\"+intersection['Item']+\", \"+intersection['Account']+\", \"+intersection['Channel']+\", \"+intersection['Region']+\", \"+intersection['Location']+\", \"+intersection['PnL']+\", \"+intersection['Demand Domain']+\" and Expect: \"+ExpectValue+\" Actual: \"+ActualValue)                   \r\n                    var loss=Math.round(ExpectValue-ActualValue)\r\n                    \r\n                    var populateQuery='Cartesian Scope: ([Version].[Version Name].['+Version+'] * [Region].[Stat Region].['+intersection['Region']+'] * [Item].[Stat Item].['+intersection['Item']+'] * [PnL].[Stat PnL].['+intersection['PnL']+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Location].[Stat Location].['+intersection['Location']+'] * [Channel].[Stat Channel].['+intersection['Channel']+'] * [Demand Domain].[Stat Demand Domain].['+intersection['Demand Domain']+'] * [Account].[Stat Account].['+intersection['Account']+'] );Measure.[Volume Loss PL]='+loss+';end scope;'\r\n                    \r\n                    if(loss>0)\r\n                    queryModule.select(populateQuery)\r\n                }\r\n        })         \r\n    }\r\n\r\n return{\r\n    PopulateDisagExceptions:PopulateDisagExceptions\r\n }\r\n\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.DisagExceptions",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "33f2886a-1a13-196c-bf07-18f64961ebe1",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212913,
    "Description": "Ensemble Weights Violation",
    "Documentation": "define('o9.DemandPlanning.EnsembleWeightsValidation', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    \r\n       \r\n    var Validation = function(o9Params){ \r\n                    var queryModule = require('o9/data/query');\r\n                    var cellsetModule = require('o9/data/cellset');\r\n                    var parsedParams = JSON.parse(o9Params);\r\n                    var VersionName = parsedParams.VersionName;\r\n                    var ForecastIteration=parsedParams.ForecastIteration;\r\n                  \r\n                    VersionName.forEach(Version => {\r\n                        ForecastIteration.forEach(Iteration =>{\r\n                            var Method='Select ([Version].[Version Name].['+Version+']  * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) on row, ({Measure.[Forecast Strategy]}) on column;'\r\n                            // var weights='Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Planner Ensemble Weight]}) on column;'\r\n                            var Method_df=cellsetModule.createCellSet(queryModule.select(Method));\r\n                            var Strategy=Method_df.row(0).cell(Method_df.measureColumnIndex('Forecast Strategy'))\r\n                            // var Weights_df=cellsetModule.createCellSet(queryModule.select(weights));\r\n                               if(Strategy==\"Bestfit\" )//&& Weights_df.rowCount>0)\r\n                               { RuleOutputToUI =\r\n                                   {\r\n                                       Status: 'Error',\r\n                                       Message: 'Ensemble Forecast can only be generated if Forecast Strategy is Ensemble for Version : ['+Version+'] & Iteration : ['+Iteration+']'\r\n                                   };\r\n                                var NullStatement='Scope:([Version].[Version Name].['+Version+']  * [Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Planner Ensemble Weight]=null;end scope;'\r\n                                   queryModule.select(NullStatement)\r\n                            }\r\n                        })\r\n                        \r\n                    });\r\n                    return;\r\n                     \r\n    \r\n        \r\n    }\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n    return{\r\n     Validation:Validation\r\n    }\r\n });",
    "Code": "define('o9.DemandPlanning.EnsembleWeightsValidation', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    \r\n       \r\n    var Validation = function(o9Params){ \r\n                    var queryModule = require('o9/data/query');\r\n                    var cellsetModule = require('o9/data/cellset');\r\n                    var parsedParams = JSON.parse(o9Params);\r\n                    var VersionName = parsedParams.VersionName;\r\n                    var ForecastIteration=parsedParams.ForecastIteration;\r\n                  \r\n                    VersionName.forEach(Version => {\r\n                        ForecastIteration.forEach(Iteration =>{\r\n                            var Method='Select ([Version].[Version Name].['+Version+']  * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) on row, ({Measure.[Forecast Strategy]}) on column;'\r\n                            // var weights='Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Planner Ensemble Weight]}) on column;'\r\n                            var Method_df=cellsetModule.createCellSet(queryModule.select(Method));\r\n                            var Strategy=Method_df.row(0).cell(Method_df.measureColumnIndex('Forecast Strategy'))\r\n                            // var Weights_df=cellsetModule.createCellSet(queryModule.select(weights));\r\n                               if(Strategy==\"Bestfit\" )//&& Weights_df.rowCount>0)\r\n                               { RuleOutputToUI =\r\n                                   {\r\n                                       Status: 'Error',\r\n                                       Message: 'Ensemble Forecast can only be generated if Forecast Strategy is Ensemble for Version : ['+Version+'] & Iteration : ['+Iteration+']'\r\n                                   };\r\n                                var NullStatement='Scope:([Version].[Version Name].['+Version+']  * [Forecast Iteration].[Forecast Iteration].['+Iteration+']);Measure.[Planner Ensemble Weight]=null;end scope;'\r\n                                   queryModule.select(NullStatement)\r\n                            }\r\n                        })\r\n                        \r\n                    });\r\n                    return;\r\n                     \r\n    \r\n        \r\n    }\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n    return{\r\n     Validation:Validation\r\n    }\r\n });",
    "ModuleName": "o9.DemandPlanning.EnsembleWeightsValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "0661c716-6da6-9cc9-c2fa-4d8fc15c56e1",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212914,
    "Description": "o9.DemandPlanning.BackTestML",
    "Documentation": "define('o9.DemandPlanning.BackTestML', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t\t var queryModule= require('o9/data/query');\r\n\t\t var BackTestML = function (o9Params)\r\n\t\t {\r\n\t\t    Log.Info(\"**********************Start**********************\" );\r\n\r\n\t\t\t// passing params from AB to JS variables\r\n\t\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\tvar Version = parsedParams.VersionName;\r\n\t\t\tvar CustomerGroup = parsedParams.SalesDomain;\r\n\t\t\tvar Location = parsedParams.Location;\r\n\t\t\tvar Item = parsedParams.Item;\r\n\t\t\tvar RID = parsedParams.RID;\r\n\t\t\tvar TID = parsedParams.TID;\r\n\t\t\tvar cycles = parsedParams.PredictNoOfCycles;\r\n\t\t\tvar Lags = parsedParams.NoOfLags;\r\n\t\t\tvar ForecastGenerationTimeLevel = parsedParams.ForecastGenerationTimeLevel;\r\n\t\t\tvar queryModule= require('o9/data/query');\r\n\t\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\t\r\n\t\t\t// converting passed params to required form\r\n\t\t\tLog.Info(\" O9 PARAMS ---\" + JSON.stringify(o9Params));\r\n\t\t\tvar VersionInput = \"\\\"\" + Version.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar CustomerGroupInput = \"\\\"\" + CustomerGroup.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar ItemInput = \"\\\"\" + Item.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar LocationInput = \"\\\"\" + Location.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\t\r\n\t\t\tif (ForecastGenerationTimeLevel == 'Planning Month'){\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllPlanningMonths.filter(#.Key >= &CurrentPlanningMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentPlanningMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllPlanningMonths); Measure.[ML PM Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Planning Month\" ;\r\n\t\t\t\tvar LagColumn = \"ML PM Lag\" ;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Month') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllMonths.filter(#.Key >= &CurrentMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllMonths); Measure.[ML M Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Month\" ;\r\n\t\t\t\tvar LagColumn = \"ML M Lag\" ;\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Week') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllWeeks.filter(#.Key >= &CurrentWeek.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentWeek.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllWeeks); Measure.[ML W Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Week\" ;\r\n\t\t\t\tvar LagColumn = \"ML W Lag\" ;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tLog.Info(\"Unknown Forecast Generation Time Bucket : \" + ForecastGenerationTimeLevel);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<cycles;i++)\r\n\t\t\t{\r\n\t\t\t\tLog.Info(\"Started Backtest Cycle : \" + i);\r\n\t\t\t\tDimTimeTableQuery = DimTimeTableQueryRaw + '.element(' + (parseInt(i)) + ').Name;'\r\n\t\t\t\tLog.Info(\"DimTimeTableQuery ...\" + DimTimeTableQuery);\r\n\t\t\t\tvar lsResponse = queryModule.select(DimTimeTableQuery);\r\n\t\t\t\tvar CurrentPeriod = lsResponse.Result;\r\n\t\t\t\tLog.Info(\"CurrentPeriod ...\" + CurrentPeriod);\r\n\t\t\t\tLog.Info(\"LagColumn ...\" + LagColumn);\r\n\t\t\t\tLog.Info(\"QueryColumn ...\" + QueryColumn);\r\n\t\t\t\t\r\n\t\t\t\t// AI predict Plugin invocation\r\n\t\t\t\tvar pluginStartTime = Date.now();\r\n\t\t\t\tvar pluginquery = 'exec plugin instance [DP032AIPredictMLAtL1Level] for measures {Measure.[System ML Fcst L1]} using scope ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'})*[Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * &AllStatL1Buckets * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) ) using arguments {(\"ForecastMeasureName\", \"System ML Fcst L1\"), (\"IgnoreMissingOutputs\", true) , (\"ExecutorMemory\", \"5g\") , (DriverMemory, \"5G\") , (NumExecutors, 2) , (DriverCores, 4), (ExecutorCores, 4), (\"ForecastTournamentId\", \"'+TID+'\"),(\"ForecastRecipeId\", \"'+RID+'\"),(\"ForecastCurrentPeriod\", \"'+CurrentPeriod+'\"),(\"SkipRecipeValidation\", true), (\"ForecastPeriods\", '+(parseInt(Lags)+1)+'), ([AiPredictMode], \"Training\")};';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"**********************ExecQuery**********************\" );\r\n\r\n\t\t\t\tLog.Info(\"Query to be executed ... \" + pluginquery);\r\n\t\t\t\tqueryModule.update(pluginquery);\r\n\t\t\t\tvar pluginEndTime = Date.now();\r\n\t\t\t\tLog.Info('Time Taken for AI Predict plugin execution ' + (pluginEndTime - pluginStartTime) + 'ms');\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// Populating ML Fcst measure via evaluate member\r\n\t\t\t\tvar populateStartTime = Date.now();\r\n\t\t\t\tfor(let j=0; j<=Lags;j++){\r\n\t\t\t\t\tLog.Info(\"Lag \" + j);\r\n\t\t\t\t\tvar evaluateStartTime = Date.now();\r\n\t\t\t\t\tvar evaluatememberquery = 'evaluatemember scope: ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Time].[' + QueryColumn + '].['+CurrentPeriod+ '].leadoffset('+ j +') * [Lag].[Lag].[' + j +'] )' + ';' + 'Measure.[' + LagColumn + '] = if (Lag.#.Name == \"'+ j +'\" && Time.#.Key == [Time].[' + QueryColumn + '].['+CurrentPeriod+'].leadoffset('+ j +').Key) then Measure.[System ML Fcst L1]@(Time.#.LeadOffset('+ -1* j +')) else Measure.[' + LagColumn + ']' + ';' + 'end scope;';\r\n\t\t\t\t\tLog.Info(\"**********************EVALQuery**********************\" );\r\n\r\n\t\t\t\t\tLog.Info(\"Query to Populate Lags : \" + evaluatememberquery);\r\n\t\t\t\t\tqueryModule.update(evaluatememberquery);\r\n\t\t\t\t\tvar evaluateEndTime = Date.now();\r\n\t\t\t\t\tLog.Info('Time Taken for evalaute query ' + (evaluateEndTime - evaluateStartTime) + 'ms');\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.Info(\"**********************End**********************\");\r\n\t\t\t\r\n\t};\t\t\t\r\n    return {\r\n        BackTestML : BackTestML\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.BackTestML', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t\t var queryModule= require('o9/data/query');\r\n\t\t var BackTestML = function (o9Params)\r\n\t\t {\r\n\t\t    Log.Info(\"**********************Start**********************\" );\r\n\r\n\t\t\t// passing params from AB to JS variables\r\n\t\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\tvar Version = parsedParams.VersionName;\r\n\t\t\tvar CustomerGroup = parsedParams.SalesDomain;\r\n\t\t\tvar Location = parsedParams.Location;\r\n\t\t\tvar Item = parsedParams.Item;\r\n\t\t\tvar RID = parsedParams.RID;\r\n\t\t\tvar TID = parsedParams.TID;\r\n\t\t\tvar cycles = parsedParams.PredictNoOfCycles;\r\n\t\t\tvar Lags = parsedParams.NoOfLags;\r\n\t\t\tvar ForecastGenerationTimeLevel = parsedParams.ForecastGenerationTimeLevel;\r\n\t\t\tvar queryModule= require('o9/data/query');\r\n\t\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\t\r\n\t\t\t// converting passed params to required form\r\n\t\t\tLog.Info(\" O9 PARAMS ---\" + JSON.stringify(o9Params));\r\n\t\t\tvar VersionInput = \"\\\"\" + Version.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar CustomerGroupInput = \"\\\"\" + CustomerGroup.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar ItemInput = \"\\\"\" + Item.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar LocationInput = \"\\\"\" + Location.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\t\r\n\t\t\tif (ForecastGenerationTimeLevel == 'Planning Month'){\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllPlanningMonths.filter(#.Key >= &CurrentPlanningMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentPlanningMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllPlanningMonths); Measure.[ML PM Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Planning Month\" ;\r\n\t\t\t\tvar LagColumn = \"ML PM Lag\" ;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Month') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllMonths.filter(#.Key >= &CurrentMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllMonths); Measure.[ML M Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Month\" ;\r\n\t\t\t\tvar LagColumn = \"ML M Lag\" ;\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Week') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllWeeks.filter(#.Key >= &CurrentWeek.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentWeek.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllWeeks); Measure.[ML W Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Week\" ;\r\n\t\t\t\tvar LagColumn = \"ML W Lag\" ;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tLog.Info(\"Unknown Forecast Generation Time Bucket : \" + ForecastGenerationTimeLevel);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<cycles;i++)\r\n\t\t\t{\r\n\t\t\t\tLog.Info(\"Started Backtest Cycle : \" + i);\r\n\t\t\t\tDimTimeTableQuery = DimTimeTableQueryRaw + '.element(' + (parseInt(i)) + ').Name;'\r\n\t\t\t\tLog.Info(\"DimTimeTableQuery ...\" + DimTimeTableQuery);\r\n\t\t\t\tvar lsResponse = queryModule.select(DimTimeTableQuery);\r\n\t\t\t\tvar CurrentPeriod = lsResponse.Result;\r\n\t\t\t\tLog.Info(\"CurrentPeriod ...\" + CurrentPeriod);\r\n\t\t\t\tLog.Info(\"LagColumn ...\" + LagColumn);\r\n\t\t\t\tLog.Info(\"QueryColumn ...\" + QueryColumn);\r\n\t\t\t\t\r\n\t\t\t\t// AI predict Plugin invocation\r\n\t\t\t\tvar pluginStartTime = Date.now();\r\n\t\t\t\tvar pluginquery = 'exec plugin instance [DP032AIPredictMLAtL1Level] for measures {Measure.[System ML Fcst L1]} using scope ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'})*[Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * &AllStatL1Buckets * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) ) using arguments {(\"ForecastMeasureName\", \"System ML Fcst L1\"), (\"IgnoreMissingOutputs\", true) , (\"ExecutorMemory\", \"5g\") , (DriverMemory, \"5G\") , (NumExecutors, 2) , (DriverCores, 4), (ExecutorCores, 4), (\"ForecastTournamentId\", \"'+TID+'\"),(\"ForecastRecipeId\", \"'+RID+'\"),(\"ForecastCurrentPeriod\", \"'+CurrentPeriod+'\"),(\"SkipRecipeValidation\", true), (\"ForecastPeriods\", '+(parseInt(Lags)+1)+'), ([AiPredictMode], \"Training\")};';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"**********************ExecQuery**********************\" );\r\n\r\n\t\t\t\tLog.Info(\"Query to be executed ... \" + pluginquery);\r\n\t\t\t\tqueryModule.update(pluginquery);\r\n\t\t\t\tvar pluginEndTime = Date.now();\r\n\t\t\t\tLog.Info('Time Taken for AI Predict plugin execution ' + (pluginEndTime - pluginStartTime) + 'ms');\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// Populating ML Fcst measure via evaluate member\r\n\t\t\t\tvar populateStartTime = Date.now();\r\n\t\t\t\tfor(let j=0; j<=Lags;j++){\r\n\t\t\t\t\tLog.Info(\"Lag \" + j);\r\n\t\t\t\t\tvar evaluateStartTime = Date.now();\r\n\t\t\t\t\tvar evaluatememberquery = 'evaluatemember scope: ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Time].[' + QueryColumn + '].['+CurrentPeriod+ '].leadoffset('+ j +') * [Lag].[Lag].[' + j +'] )' + ';' + 'Measure.[' + LagColumn + '] = if (Lag.#.Name == \"'+ j +'\" && Time.#.Key == [Time].[' + QueryColumn + '].['+CurrentPeriod+'].leadoffset('+ j +').Key) then Measure.[System ML Fcst L1]@(Time.#.LeadOffset('+ -1* j +')) else Measure.[' + LagColumn + ']' + ';' + 'end scope;';\r\n\t\t\t\t\tLog.Info(\"**********************EVALQuery**********************\" );\r\n\r\n\t\t\t\t\tLog.Info(\"Query to Populate Lags : \" + evaluatememberquery);\r\n\t\t\t\t\tqueryModule.update(evaluatememberquery);\r\n\t\t\t\t\tvar evaluateEndTime = Date.now();\r\n\t\t\t\t\tLog.Info('Time Taken for evalaute query ' + (evaluateEndTime - evaluateStartTime) + 'ms');\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.Info(\"**********************End**********************\");\r\n\t\t\t\r\n\t};\t\t\t\r\n    return {\r\n        BackTestML : BackTestML\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.BackTestML",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4b02d1c7-f9fe-4647-a660-55c5f26c50df",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212915,
    "Description": "Runs procedure to sync ML Periods",
    "Documentation": "define('o9.DemandPlanning.SyncMLPeriods', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    \r\n\t\r\n\tvar SyncMLPeriods = function (o9Params) {\r\n\t    \r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n        var VersionName = itemize(parsedParams.VersionName);\r\n        \r\n        var DefaultIterationML  = 'Select ([Forecast Iteration].[Forecast Iteration].[FI-Default] * [Forecast Iteration].[Forecast Iteration Type]);';\r\n        var DefaultIterationMLData = cellsetModule.createCellSet(queryModule.select(DefaultIterationML));\r\n        Log.Info(\"FI-Default and Type :\"+JSON.stringify(DefaultIterationMLData));\r\n        Log.Info(DefaultIterationMLData);\r\n        var IterationType = DefaultIterationMLData.attributeMembers(\"Forecast Iteration\",\"Forecast Iteration Type\");\r\n        Log.Info(\"IterationType \"+ JSON.stringify(IterationType));\r\n        \r\n        var IterationTypeVal = DefaultIterationMLData.row(0).cell(1);\r\n        Log.Info(\"IterationTypeVal Json \"+JSON.stringify(IterationTypeVal));\r\n        var jsonstoreiteration = JSON.parse(JSON.stringify(IterationTypeVal));\r\n        var iterationname = jsonstoreiteration.Name\r\n        Log.Info(\"Iteration Type \"+ iterationname);\r\n        if (iterationname == \"ML\"){\r\n            query='exec procedure o9DP501PopulateMLDates {\"VersionName\":['+VersionName+'],\"ForecastIterationType\":\"ML\"};'\r\n            Log.Info(\"Executing procedure : \"+query);\r\n            queryModule.select(query);\r\n        }\r\n        else if((iterationname == \"Mid Term\")){\r\n            query='exec procedure o9DP501PopulateMLDates {\"VersionName\":['+VersionName+'],\"ForecastIterationType\":\"Mid Term\"};'\r\n            Log.Info(\"Executing procedure : \"+query);\r\n            queryModule.select(query);\r\n        }\r\n\r\n\r\n\t};\r\n    return {\r\n       SyncMLPeriods:SyncMLPeriods,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.SyncMLPeriods', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    \r\n\t\r\n\tvar SyncMLPeriods = function (o9Params) {\r\n\t    \r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n        var VersionName = itemize(parsedParams.VersionName);\r\n        \r\n        var DefaultIterationML  = 'Select ([Forecast Iteration].[Forecast Iteration].[FI-Default] * [Forecast Iteration].[Forecast Iteration Type]);';\r\n        var DefaultIterationMLData = cellsetModule.createCellSet(queryModule.select(DefaultIterationML));\r\n        Log.Info(\"FI-Default and Type :\"+JSON.stringify(DefaultIterationMLData));\r\n        Log.Info(DefaultIterationMLData);\r\n        var IterationType = DefaultIterationMLData.attributeMembers(\"Forecast Iteration\",\"Forecast Iteration Type\");\r\n        Log.Info(\"IterationType \"+ JSON.stringify(IterationType));\r\n        \r\n        var IterationTypeVal = DefaultIterationMLData.row(0).cell(1);\r\n        Log.Info(\"IterationTypeVal Json \"+JSON.stringify(IterationTypeVal));\r\n        var jsonstoreiteration = JSON.parse(JSON.stringify(IterationTypeVal));\r\n        var iterationname = jsonstoreiteration.Name\r\n        Log.Info(\"Iteration Type \"+ iterationname);\r\n        if (iterationname == \"ML\"){\r\n            query='exec procedure o9DP501PopulateMLDates {\"VersionName\":['+VersionName+'],\"ForecastIterationType\":\"ML\"};'\r\n            Log.Info(\"Executing procedure : \"+query);\r\n            queryModule.select(query);\r\n        }\r\n        else if((iterationname == \"Mid Term\")){\r\n            query='exec procedure o9DP501PopulateMLDates {\"VersionName\":['+VersionName+'],\"ForecastIterationType\":\"Mid Term\"};'\r\n            Log.Info(\"Executing procedure : \"+query);\r\n            queryModule.select(query);\r\n        }\r\n\r\n\r\n\t};\r\n    return {\r\n       SyncMLPeriods:SyncMLPeriods,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.SyncMLPeriods",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "1ba1610a-e173-5c67-e385-1715bd7020f2",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212916,
    "Description": "Backtest Module for Attention Model in ML Workflow",
    "Documentation": "define('o9.DemandPlanning.BackTestAttention', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t\t var queryModule= require('o9/data/query');\r\n\t\t var BackTestAttention = function (o9Params)\r\n\t\t {\r\n\t\t    Log.Info(\"**********************Start**********************\" );\r\n\r\n\t\t\t// passing params from AB to JS variables\r\n\t\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\tvar Version = parsedParams.VersionName;\r\n\t\t\tvar CustomerGroup = parsedParams.SalesDomain;\r\n\t\t\tvar Location = parsedParams.Location;\r\n\t\t\tvar Item = parsedParams.Item;\r\n\t\t\tvar RID = parsedParams.RID;\r\n\t\t\tvar TID = parsedParams.TID;\r\n\t\t\tvar cycles = parsedParams.PredictNoOfCycles;\r\n\t\t\tvar Lags = parsedParams.NoOfLags;\r\n\t\t\tvar ForecastGenerationTimeLevel = parsedParams.ForecastGenerationTimeLevel;\r\n\t\t\tvar queryModule= require('o9/data/query');\r\n\t\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\t\r\n\t\t\t// converting passed params to required form\r\n\t\t\tLog.Info(\" O9 PARAMS ---\" + JSON.stringify(o9Params));\r\n\t\t\tvar VersionInput = \"\\\"\" + Version.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar CustomerGroupInput = \"\\\"\" + CustomerGroup.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar ItemInput = \"\\\"\" + Item.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar LocationInput = \"\\\"\" + Location.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\t\r\n\t\t\tif (ForecastGenerationTimeLevel == 'Planning Month'){\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllPlanningMonths.filter(#.Key >= &CurrentPlanningMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentPlanningMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllPlanningMonths); Measure.[Attention PM Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Planning Month\" ;\r\n\t\t\t\tvar LagColumn = \"Attention PM Lag\" ;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Month') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllMonths.filter(#.Key >= &CurrentMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllMonths); Measure.[Attention M Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Month\" ;\r\n\t\t\t\tvar LagColumn = \"Attention M Lag\" ;\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Week') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllWeeks.filter(#.Key >= &CurrentWeek.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentWeek.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllWeeks); Measure.[Attention W Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Week\" ;\r\n\t\t\t\tvar LagColumn = \"Attention W Lag\" ;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tLog.Info(\"Unknown Forecast Generation Time Bucket : \" + ForecastGenerationTimeLevel);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<cycles;i++)\r\n\t\t\t{\r\n\t\t\t\tLog.Info(\"Started Backtest Cycle : \" + i);\r\n\t\t\t\tDimTimeTableQuery = DimTimeTableQueryRaw + '.element(' + (parseInt(i)) + ').Name;'\r\n\t\t\t\tLog.Info(\"DimTimeTableQuery ...\" + DimTimeTableQuery);\r\n\t\t\t\tvar lsResponse = queryModule.select(DimTimeTableQuery);\r\n\t\t\t\tvar CurrentPeriod = lsResponse.Result;\r\n\t\t\t\tLog.Info(\"CurrentPeriod ...\" + CurrentPeriod);\r\n\t\t\t\tLog.Info(\"LagColumn ...\" + LagColumn);\r\n\t\t\t\tLog.Info(\"QueryColumn ...\" + QueryColumn);\r\n\t\t\t\t\r\n\t\t\t\t// AI predict Plugin invocation\r\n\t\t\t\tvar pluginStartTime = Date.now();\r\n\t\t\t\tvar pluginquery = 'exec plugin instance [DP033AIPredictAttentionAtL1Level] for measures {Measure.[System Attention Fcst L1]} using scope ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'})*[Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * &AllStatL1Buckets * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) ) using arguments {(\"ForecastMeasureName\", \"System Attention Fcst L1\"), (\"IgnoreMissingOutputs\", true) , (\"ExecutorMemory\", \"5g\") , (DriverMemory, \"5G\") , (NumExecutors, 2) , (DriverCores, 4), (ExecutorCores, 4), (\"ForecastTournamentId\", \"'+TID+'\"),(\"ForecastRecipeId\", \"'+RID+'\"),(\"ForecastCurrentPeriod\", \"'+CurrentPeriod+'\"),(\"SkipRecipeValidation\", true), (\"ForecastPeriods\", '+(parseInt(Lags)+1)+'), ([AiPredictMode], \"Training\")};';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"**********************ExecQuery**********************\" );\r\n\r\n\t\t\t\tLog.Info(\"Query to be executed ... \" + pluginquery);\r\n\t\t\t\tqueryModule.update(pluginquery);\r\n\t\t\t\tvar pluginEndTime = Date.now();\r\n\t\t\t\tLog.Info('Time Taken for AI Predict plugin execution ' + (pluginEndTime - pluginStartTime) + 'ms');\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// Populating Attention Fcst measure via evaluate member\r\n\t\t\t\tvar populateStartTime = Date.now();\r\n\t\t\t\tfor(let j=0; j<=Lags;j++){\r\n\t\t\t\t\tLog.Info(\"Lag \" + j);\r\n\t\t\t\t\tvar evaluateStartTime = Date.now();\r\n\t\t\t\t\tvar evaluatememberquery = 'evaluatemember scope: ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Time].[' + QueryColumn + '].['+CurrentPeriod+ '].leadoffset('+ j +') * [Lag].[Lag].[' + j +'] )' + ';' + 'Measure.[' + LagColumn + '] = if (Lag.#.Name == \"'+ j +'\" && Time.#.Key == [Time].[' + QueryColumn + '].['+CurrentPeriod+'].leadoffset('+ j +').Key) then Measure.[System Attention Fcst L1] else Measure.[' + LagColumn + ']' + ';' + 'end scope;';\r\n\t\t\t\t\tLog.Info(\"**********************EVALQuery**********************\" );\r\n\r\n\t\t\t\t\tLog.Info(\"Query to Populate Lags : \" + evaluatememberquery);\r\n\t\t\t\t\tqueryModule.update(evaluatememberquery);\r\n\t\t\t\t\tvar evaluateEndTime = Date.now();\r\n\t\t\t\t\tLog.Info('Time Taken for evalaute query ' + (evaluateEndTime - evaluateStartTime) + 'ms');\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.Info(\"**********************End**********************\");\r\n\t\t\t\r\n\t};\t\t\t\r\n    return {\r\n        BackTestAttention : BackTestAttention\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.BackTestAttention', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t\t var queryModule= require('o9/data/query');\r\n\t\t var BackTestAttention = function (o9Params)\r\n\t\t {\r\n\t\t    Log.Info(\"**********************Start**********************\" );\r\n\r\n\t\t\t// passing params from AB to JS variables\r\n\t\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\tvar Version = parsedParams.VersionName;\r\n\t\t\tvar CustomerGroup = parsedParams.SalesDomain;\r\n\t\t\tvar Location = parsedParams.Location;\r\n\t\t\tvar Item = parsedParams.Item;\r\n\t\t\tvar RID = parsedParams.RID;\r\n\t\t\tvar TID = parsedParams.TID;\r\n\t\t\tvar cycles = parsedParams.PredictNoOfCycles;\r\n\t\t\tvar Lags = parsedParams.NoOfLags;\r\n\t\t\tvar ForecastGenerationTimeLevel = parsedParams.ForecastGenerationTimeLevel;\r\n\t\t\tvar queryModule= require('o9/data/query');\r\n\t\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\t\r\n\t\t\t// converting passed params to required form\r\n\t\t\tLog.Info(\" O9 PARAMS ---\" + JSON.stringify(o9Params));\r\n\t\t\tvar VersionInput = \"\\\"\" + Version.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar CustomerGroupInput = \"\\\"\" + CustomerGroup.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar ItemInput = \"\\\"\" + Item.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\tvar LocationInput = \"\\\"\" + Location.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t\t\r\n\t\t\tif (ForecastGenerationTimeLevel == 'Planning Month'){\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllPlanningMonths.filter(#.Key >= &CurrentPlanningMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentPlanningMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllPlanningMonths); Measure.[Attention PM Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Planning Month\" ;\r\n\t\t\t\tvar LagColumn = \"Attention PM Lag\" ;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Month') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllMonths.filter(#.Key >= &CurrentMonth.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentMonth.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllMonths); Measure.[Attention M Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Month\" ;\r\n\t\t\t\tvar LagColumn = \"Attention M Lag\" ;\r\n\t\t\t}\r\n\t\t\telse if (ForecastGenerationTimeLevel == 'Week') {\r\n\t\t\t\tvar DimTimeTableQueryRaw = \"select &AllWeeks.filter(#.Key >= &CurrentWeek.element(0).LeadOffset(\" + (parseInt(-1*cycles)) + \").Key && #.Key <= &CurrentWeek.element(0).LeadOffset(-1).Key)\" ;\r\n\t\t\t\t\r\n\t\t\t\t// Nulling Out Existing Lag Outputs\r\n\t\t\t\tvar pluginquerynull = 'scope:([Lag].[Lag] * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'})* [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * &AllWeeks); Measure.[Attention W Lag]=Null; end scope;';\r\n\t\t\t\t\r\n\t\t\t\tvar QueryColumn = \"Week\" ;\r\n\t\t\t\tvar LagColumn = \"Attention W Lag\" ;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tLog.Info(\"Unknown Forecast Generation Time Bucket : \" + ForecastGenerationTimeLevel);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<cycles;i++)\r\n\t\t\t{\r\n\t\t\t\tLog.Info(\"Started Backtest Cycle : \" + i);\r\n\t\t\t\tDimTimeTableQuery = DimTimeTableQueryRaw + '.element(' + (parseInt(i)) + ').Name;'\r\n\t\t\t\tLog.Info(\"DimTimeTableQuery ...\" + DimTimeTableQuery);\r\n\t\t\t\tvar lsResponse = queryModule.select(DimTimeTableQuery);\r\n\t\t\t\tvar CurrentPeriod = lsResponse.Result;\r\n\t\t\t\tLog.Info(\"CurrentPeriod ...\" + CurrentPeriod);\r\n\t\t\t\tLog.Info(\"LagColumn ...\" + LagColumn);\r\n\t\t\t\tLog.Info(\"QueryColumn ...\" + QueryColumn);\r\n\t\t\t\t\r\n\t\t\t\t// AI predict Plugin invocation\r\n\t\t\t\tvar pluginStartTime = Date.now();\r\n\t\t\t\tvar pluginquery = 'exec plugin instance [DP033AIPredictAttentionAtL1Level] for measures {Measure.[System Attention Fcst L1]} using scope ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'})*[Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * &AllStatL1Buckets * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) ) using arguments {(\"ForecastMeasureName\", \"System Attention Fcst L1\"), (\"IgnoreMissingOutputs\", true) , (\"ExecutorMemory\", \"5g\") , (DriverMemory, \"5G\") , (NumExecutors, 2) , (DriverCores, 4), (ExecutorCores, 4), (\"ForecastTournamentId\", \"'+TID+'\"),(\"ForecastRecipeId\", \"'+RID+'\"),(\"ForecastCurrentPeriod\", \"'+CurrentPeriod+'\"),(\"SkipRecipeValidation\", true), (\"ForecastPeriods\", '+(parseInt(Lags)+1)+'), ([AiPredictMode], \"Training\")};';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"**********************ExecQuery**********************\" );\r\n\r\n\t\t\t\tLog.Info(\"Query to be executed ... \" + pluginquery);\r\n\t\t\t\tqueryModule.update(pluginquery);\r\n\t\t\t\tvar pluginEndTime = Date.now();\r\n\t\t\t\tLog.Info('Time Taken for AI Predict plugin execution ' + (pluginEndTime - pluginStartTime) + 'ms');\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// Populating Attention Fcst measure via evaluate member\r\n\t\t\t\tvar populateStartTime = Date.now();\r\n\t\t\t\tfor(let j=0; j<=Lags;j++){\r\n\t\t\t\t\tLog.Info(\"Lag \" + j);\r\n\t\t\t\t\tvar evaluateStartTime = Date.now();\r\n\t\t\t\t\tvar evaluatememberquery = 'evaluatemember scope: ([Location].[Stat Location].filter(#.Name in{'+LocationInput+'}) * [Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Sales Domain].[Stat Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Item].[Stat Item].filter(#.Name in{'+ItemInput+'}) * [Time].[' + QueryColumn + '].['+CurrentPeriod+ '].leadoffset('+ j +') * [Lag].[Lag].[' + j +'] )' + ';' + 'Measure.[' + LagColumn + '] = if (Lag.#.Name == \"'+ j +'\" && Time.#.Key == [Time].[' + QueryColumn + '].['+CurrentPeriod+'].leadoffset('+ j +').Key) then Measure.[System Attention Fcst L1] else Measure.[' + LagColumn + ']' + ';' + 'end scope;';\r\n\t\t\t\t\tLog.Info(\"**********************EVALQuery**********************\" );\r\n\r\n\t\t\t\t\tLog.Info(\"Query to Populate Lags : \" + evaluatememberquery);\r\n\t\t\t\t\tqueryModule.update(evaluatememberquery);\r\n\t\t\t\t\tvar evaluateEndTime = Date.now();\r\n\t\t\t\t\tLog.Info('Time Taken for evalaute query ' + (evaluateEndTime - evaluateStartTime) + 'ms');\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.Info(\"**********************End**********************\");\r\n\t\t\t\r\n\t};\t\t\t\r\n    return {\r\n        BackTestAttention : BackTestAttention\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.BackTestAttention",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "1dbc2809-2bdc-496b-bc4f-3b19021eb037",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212917,
    "Description": "Stat Process Selection",
    "Documentation": "define('o9.DemandPlanning.StatProcesses',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n        \r\n    const cellsetModule = require('o9/data/cellset');\r\n    const queryModule=require('o9/data/query')\r\n\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"[\"+i+\"]\")\r\n        return itemdata\r\n    }\r\n\r\n    var Processes=[\r\n        'Generate Stat Actuals',\r\n        'Generate Segmentation',\r\n        'Generate Outlier Cleansing',\r\n        'Generate Assigned Rules',\r\n        'Generate System Stat',\r\n        'Populate Analysis Cockpit',\r\n        'Identify Bestfit Algorithm',\r\n        'Populate Stat Fcst',\r\n        'Disaggregate Stat',\r\n        'Forecast Reconciliation',\r\n        'Stat Accuracy Calculation',\r\n        'Planning Accuracy Calculation',\r\n    ]\r\n    \r\n    var Cycles=function(o9Params){\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var IterationTypes=parsedParams.ForecastIterationType;\r\n        var ExecutionMode=parsedParams.ExecutionMode;\r\n\r\n        var PlanningCycles=[]\r\n        IterationTypes.forEach(IterationType => {\r\n            var Query ='Select ( &CWV * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] ) on row, ({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n            var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n            \r\n            if (QueryCellset.rowCount==0)\r\n                return 0 \r\n    \r\n            var GenBucket = QueryCellset.row(0).cell(QueryCellset.measureColumnIndex('Forecast Generation Time Bucket'))   \r\n            if(GenBucket=='Week'){\r\n                TimeQuery='Select( [Time].[Week].filter(#.Key>&CurrentWeek.element(0).leadoffset(-6).Key && #.Key<=&CurrentWeek.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentWeek);'\r\n                \r\n            }\r\n            else if(GenBucket=='Month'){\r\n                TimeQuery='Select( [Time].[Month].filter(#.Key>&CurrentMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentMonth.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentMonth);'\r\n            }\r\n            else if(GenBucket=='Planning Month'){\r\n                TimeQuery='Select( [Time].[Planning Month].filter(#.Key>&CurrentPlanningMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningMonth.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentPlanningMonth);'\r\n            }\r\n            else if(GenBucket=='Quarter'){\r\n                TimeQuery='Select( [Time].[Quarter].filter(#.Key>&CurrentQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentQuarter.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentQuarter);'\r\n            }\r\n            else if(GenBucket=='Planning Quarter'){\r\n                TimeQuery='Select( [Time].[Planning Quarter].filter(#.Key>&CurrentPlanningQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningQuarter.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentPlanningQuarter);'\r\n            }\r\n\r\n\r\n\r\n            Log.Info('Execution Mode : '+ExecutionMode)\r\n            if(ExecutionMode=='Prod'){\r\n                \r\n                Log.Info( ' Query Here : '+CurrentPeriodQuery)\r\n                TimeQueryCellset=cellsetModule.createCellSet(queryModule.select(CurrentPeriodQuery))\r\n    \r\n                Log.Info('TimeQueryCellset Here : '+TimeQueryCellset)\r\n                var FutureCycles=TimeQueryCellset.attributeMembers(\"Time\",GenBucket).map(function (item) {\r\n                return item['Key'];\r\n                })\r\n    \r\n                Log.Info('FutureCycles Here : '+FutureCycles)\r\n                FutureCycles=FutureCycles.map(i=>\"todatetime(\\\"\"+i+\"\\\")\")\r\n    \r\n                Log.Info('Here :'+FutureCycles)\r\n                PlanningCycles= [...PlanningCycles, ...FutureCycles];\r\n                return;\r\n            }\r\n            \r\n\r\n            var TimeQueryCellset=cellsetModule.createCellSet(queryModule.select(TimeQuery))\r\n\r\n        \r\n            var FutureCycles=TimeQueryCellset.attributeMembers(\"Time\",GenBucket).map(function (item) {\r\n                return item['Key'];\r\n            })\r\n            FutureCycles=FutureCycles.map(i=>\"todatetime(\\\"\"+i+\"\\\")\")\r\n            PlanningCycles= [...PlanningCycles, ...FutureCycles];\r\n\r\n\r\n\r\n        });\r\n\r\n        parsedParams['Cycles']=PlanningCycles.toString();\r\n\r\n        \r\n        return parsedParams;\r\n\r\n    }\r\n\r\n\r\n    var Process=function(o9Params){\r\n\r\n        parsedParams = JSON.parse(o9Params);\r\n        var processesList=parsedParams.Processes;\r\n        var ExecutionMode=parsedParams.ExecutionMode;\r\n        var VersionName=parsedParams.VersionName;\r\n        var IterationType=parsedParams.ForecastIterationType;\r\n        var FinalProcesses=[]\r\n\r\n\r\n        \r\n        if(ExecutionMode=='Dev')\r\n        {\r\n            Log.Info(\"In Dev\");\r\n            FinalProcesses=[...FinalProcesses,...Processes]\r\n            \r\n            var InputStreams=[]\r\n       \r\n            IterationType.forEach(Type=>{\r\n                \r\n                InputStreams=[...InputStreams,Type.split('_')[1]]\r\n                \r\n            })\r\n           \r\n            InputStreams=[...new Set(InputStreams)]\r\n            var Recon=false;\r\n            VersionName.forEach(Version=>{\r\n                InputStreams.forEach(InputStream=>{\r\n                    var Iterations=[]\r\n                    IterationType.forEach(Type=>{\r\n                        if(Type.includes(InputStream))\r\n                            Iterations=[...Iterations,Type]\r\n                    })\r\n                    var ReconListQuery=\"Select([Version].[Version Name].[\"+Version+\"]*[Data Stream].[Data Stream Type].[\"+InputStream+\"] ) on row,({Measure.[Forecast Reconciliation]}) on column;\"        \r\n                    var ReconListCellSet=cellsetModule.createCellSet(queryModule.select(ReconListQuery))\r\n                    var ReconList=ReconListCellSet.row(0).cell(ReconListCellSet.measureColumnIndex('Forecast Reconciliation'))\r\n                    ReconList=ReconList.split(',')\r\n\r\n                    if(ReconList.every(item => Iterations.includes(item)))\r\n                        Recon=true;\r\n\r\n                })\r\n\r\n            })\r\n            if(Recon)\r\n            FinalProcesses=[...FinalProcesses,'Reconciliation']\r\n        }\r\n        else\r\n        {\r\n            Log.Info(\"In Prod\");\r\n            processesList.forEach(Process=>{\r\n                \r\n                Process=Process.replace(/[\\[\\]]/g, '').trim();\r\n                Log.Info('Process is :'+Process)\r\n               if(Process==\"Generate Slice Association\"||Process==\"Generate Stat Actuals\")\r\n                FinalProcesses=[...FinalProcesses,\"Generate Stat Actuals\"]\r\n               if(Process==\"Generate Segmentation\"||Process== \"Seasonality Detection\")\r\n                FinalProcesses=[...FinalProcesses,\"Generate Segmentation\"]\r\n               if(Process==\"Generate System Stat\"||Process==\"Generate Outlier Cleansing\"||Process==\"Generate Assigned Rules\"||Process==\"Populate Analysis Cockpit\"||Process==\"Identify Bestfit Algorithm\"||Process==\"Populate Stat Fcst\"||Process==\"Forecast Reconciliation\"||Process==\"Stat Accuracy Calculation\"||Process==\"Planning Accuracy Calculation\")\r\n                FinalProcesses=[...FinalProcesses,Process]\r\n               if(Process==\"PL Count Validation\"||Process==\"PL Volume Loss Validation\"||Process==\"TL Count Validation\"||Process==\"TL Volume Loss Validation\"||Process==\"Disaggregate Stat\")\r\n                FinalProcesses=[...FinalProcesses,'Disaggregate Stat']\r\n               if(Process==\"Generate Ensemble Fcst\"||Process==\"Generate CML Fcst\")\r\n                FinalProcesses=[...FinalProcesses,'Generate System Stat']\r\n               \r\n            })\r\n        }\r\n\r\n        var StatProcesses= [...new Set(FinalProcesses)];\r\n\r\n        StatProcesses=StatProcesses.map(i=>\"[\"+i+\"]\")\r\n        parsedParams['StatProcesses']=StatProcesses.toString();\r\n        return parsedParams;\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    }\r\n\r\n\r\n\r\n    return {\r\n        Cycles:Cycles,\r\n        Process:Process\r\n\r\n\r\n    }\r\n})",
    "Code": "define('o9.DemandPlanning.StatProcesses',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n        \r\n    const cellsetModule = require('o9/data/cellset');\r\n    const queryModule=require('o9/data/query')\r\n\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"[\"+i+\"]\")\r\n        return itemdata\r\n    }\r\n\r\n    var Processes=[\r\n        'Generate Stat Actuals',\r\n        'Generate Segmentation',\r\n        'Generate Outlier Cleansing',\r\n        'Generate Assigned Rules',\r\n        'Generate System Stat',\r\n        'Populate Analysis Cockpit',\r\n        'Identify Bestfit Algorithm',\r\n        'Populate Stat Fcst',\r\n        'Disaggregate Stat',\r\n        'Forecast Reconciliation',\r\n        'Stat Accuracy Calculation',\r\n        'Planning Accuracy Calculation',\r\n    ]\r\n    \r\n    var Cycles=function(o9Params){\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var IterationTypes=parsedParams.ForecastIterationType;\r\n        var ExecutionMode=parsedParams.ExecutionMode;\r\n\r\n        var PlanningCycles=[]\r\n        IterationTypes.forEach(IterationType => {\r\n            var Query ='Select ( &CWV * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] ) on row, ({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n            var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n            \r\n            if (QueryCellset.rowCount==0)\r\n                return 0 \r\n    \r\n            var GenBucket = QueryCellset.row(0).cell(QueryCellset.measureColumnIndex('Forecast Generation Time Bucket'))   \r\n            if(GenBucket=='Week'){\r\n                TimeQuery='Select( [Time].[Week].filter(#.Key>&CurrentWeek.element(0).leadoffset(-6).Key && #.Key<=&CurrentWeek.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentWeek);'\r\n                \r\n            }\r\n            else if(GenBucket=='Month'){\r\n                TimeQuery='Select( [Time].[Month].filter(#.Key>&CurrentMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentMonth.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentMonth);'\r\n            }\r\n            else if(GenBucket=='Planning Month'){\r\n                TimeQuery='Select( [Time].[Planning Month].filter(#.Key>&CurrentPlanningMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningMonth.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentPlanningMonth);'\r\n            }\r\n            else if(GenBucket=='Quarter'){\r\n                TimeQuery='Select( [Time].[Quarter].filter(#.Key>&CurrentQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentQuarter.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentQuarter);'\r\n            }\r\n            else if(GenBucket=='Planning Quarter'){\r\n                TimeQuery='Select( [Time].[Planning Quarter].filter(#.Key>&CurrentPlanningQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningQuarter.element(0).leadoffset(6).Key));'\r\n                CurrentPeriodQuery='Select(&CurrentPlanningQuarter);'\r\n            }\r\n\r\n\r\n\r\n            Log.Info('Execution Mode : '+ExecutionMode)\r\n            if(ExecutionMode=='Prod'){\r\n                \r\n                Log.Info( ' Query Here : '+CurrentPeriodQuery)\r\n                TimeQueryCellset=cellsetModule.createCellSet(queryModule.select(CurrentPeriodQuery))\r\n    \r\n                Log.Info('TimeQueryCellset Here : '+TimeQueryCellset)\r\n                var FutureCycles=TimeQueryCellset.attributeMembers(\"Time\",GenBucket).map(function (item) {\r\n                return item['Key'];\r\n                })\r\n    \r\n                Log.Info('FutureCycles Here : '+FutureCycles)\r\n                FutureCycles=FutureCycles.map(i=>\"todatetime(\\\"\"+i+\"\\\")\")\r\n    \r\n                Log.Info('Here :'+FutureCycles)\r\n                PlanningCycles= [...PlanningCycles, ...FutureCycles];\r\n                return;\r\n            }\r\n            \r\n\r\n            var TimeQueryCellset=cellsetModule.createCellSet(queryModule.select(TimeQuery))\r\n\r\n        \r\n            var FutureCycles=TimeQueryCellset.attributeMembers(\"Time\",GenBucket).map(function (item) {\r\n                return item['Key'];\r\n            })\r\n            FutureCycles=FutureCycles.map(i=>\"todatetime(\\\"\"+i+\"\\\")\")\r\n            PlanningCycles= [...PlanningCycles, ...FutureCycles];\r\n\r\n\r\n\r\n        });\r\n\r\n        parsedParams['Cycles']=PlanningCycles.toString();\r\n\r\n        \r\n        return parsedParams;\r\n\r\n    }\r\n\r\n\r\n    var Process=function(o9Params){\r\n\r\n        parsedParams = JSON.parse(o9Params);\r\n        var processesList=parsedParams.Processes;\r\n        var ExecutionMode=parsedParams.ExecutionMode;\r\n        var VersionName=parsedParams.VersionName;\r\n        var IterationType=parsedParams.ForecastIterationType;\r\n        var FinalProcesses=[]\r\n\r\n\r\n        \r\n        if(ExecutionMode=='Dev')\r\n        {\r\n            Log.Info(\"In Dev\");\r\n            FinalProcesses=[...FinalProcesses,...Processes]\r\n            \r\n            var InputStreams=[]\r\n       \r\n            IterationType.forEach(Type=>{\r\n                \r\n                InputStreams=[...InputStreams,Type.split('_')[1]]\r\n                \r\n            })\r\n           \r\n            InputStreams=[...new Set(InputStreams)]\r\n            var Recon=false;\r\n            VersionName.forEach(Version=>{\r\n                InputStreams.forEach(InputStream=>{\r\n                    var Iterations=[]\r\n                    IterationType.forEach(Type=>{\r\n                        if(Type.includes(InputStream))\r\n                            Iterations=[...Iterations,Type]\r\n                    })\r\n                    var ReconListQuery=\"Select([Version].[Version Name].[\"+Version+\"]*[Data Stream].[Data Stream Type].[\"+InputStream+\"] ) on row,({Measure.[Forecast Reconciliation]}) on column;\"        \r\n                    var ReconListCellSet=cellsetModule.createCellSet(queryModule.select(ReconListQuery))\r\n                    var ReconList=ReconListCellSet.row(0).cell(ReconListCellSet.measureColumnIndex('Forecast Reconciliation'))\r\n                    ReconList=ReconList.split(',')\r\n\r\n                    if(ReconList.every(item => Iterations.includes(item)))\r\n                        Recon=true;\r\n\r\n                })\r\n\r\n            })\r\n            if(Recon)\r\n            FinalProcesses=[...FinalProcesses,'Reconciliation']\r\n        }\r\n        else\r\n        {\r\n            Log.Info(\"In Prod\");\r\n            processesList.forEach(Process=>{\r\n                \r\n                Process=Process.replace(/[\\[\\]]/g, '').trim();\r\n                Log.Info('Process is :'+Process)\r\n               if(Process==\"Generate Slice Association\"||Process==\"Generate Stat Actuals\")\r\n                FinalProcesses=[...FinalProcesses,\"Generate Stat Actuals\"]\r\n               if(Process==\"Generate Segmentation\"||Process== \"Seasonality Detection\")\r\n                FinalProcesses=[...FinalProcesses,\"Generate Segmentation\"]\r\n               if(Process==\"Generate System Stat\"||Process==\"Generate Outlier Cleansing\"||Process==\"Generate Assigned Rules\"||Process==\"Populate Analysis Cockpit\"||Process==\"Identify Bestfit Algorithm\"||Process==\"Populate Stat Fcst\"||Process==\"Forecast Reconciliation\"||Process==\"Stat Accuracy Calculation\"||Process==\"Planning Accuracy Calculation\")\r\n                FinalProcesses=[...FinalProcesses,Process]\r\n               if(Process==\"PL Count Validation\"||Process==\"PL Volume Loss Validation\"||Process==\"TL Count Validation\"||Process==\"TL Volume Loss Validation\"||Process==\"Disaggregate Stat\")\r\n                FinalProcesses=[...FinalProcesses,'Disaggregate Stat']\r\n               if(Process==\"Generate Ensemble Fcst\"||Process==\"Generate CML Fcst\")\r\n                FinalProcesses=[...FinalProcesses,'Generate System Stat']\r\n               \r\n            })\r\n        }\r\n\r\n        var StatProcesses= [...new Set(FinalProcesses)];\r\n\r\n        StatProcesses=StatProcesses.map(i=>\"[\"+i+\"]\")\r\n        parsedParams['StatProcesses']=StatProcesses.toString();\r\n        return parsedParams;\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    }\r\n\r\n\r\n\r\n    return {\r\n        Cycles:Cycles,\r\n        Process:Process\r\n\r\n\r\n    }\r\n})",
    "ModuleName": "o9.DemandPlanning.StatProcesses",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "8312bed5-88e6-5b12-dae4-43c107be2b38",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212918,
    "Description": "Stat Actual Validation",
    "Documentation": "define('o9.DemandPlanning.StatActualValidation', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    \r\n       \r\n   var Validation = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ValidationQuery='Select( &AllForecastIterations.filter(#.[IsLocked] == 1))'\r\n                   var ValidationCellSet=cellsetModule.createCellSet(queryModule.select(ValidationQuery))\r\n                   if(ValidationCellSet.rowCount>0)\r\n                 RuleOutputToUI =\r\n                   {\r\n                       Status: 'Error',\r\n                       Message: 'Cannot perform this function as Stat Actuals are generated'\r\n                   };\r\n   \r\n       \r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   return{\r\n    Validation:Validation\r\n   }\r\n});",
    "Code": "define('o9.DemandPlanning.StatActualValidation', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    \r\n       \r\n   var Validation = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ValidationQuery='Select( &AllForecastIterations.filter(#.[IsLocked] == 1))'\r\n                   var ValidationCellSet=cellsetModule.createCellSet(queryModule.select(ValidationQuery))\r\n                   if(ValidationCellSet.rowCount>0)\r\n                 RuleOutputToUI =\r\n                   {\r\n                       Status: 'Error',\r\n                       Message: 'Cannot perform this function as Stat Actuals are generated'\r\n                   };\r\n   \r\n       \r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   return{\r\n    Validation:Validation\r\n   }\r\n});",
    "ModuleName": "o9.DemandPlanning.StatActualValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "97c50376-2bb9-aff2-4994-3c157987f552",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212919,
    "Description": "Run Stat Batch",
    "Documentation": "define('o9.DemandPlanning.RunStatBatch',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n    const cellsetModule = require('o9/data/cellset');\r\n    const queryModule=require('o9/data/query')\r\n\r\n    // List of overarching processes that are being executed\r\n    const StatProcesses= [\r\n       \r\n        // 'Generate Stat Actuals',\r\n        'Accuracy Calculation',\r\n        'Generate Segmentation',\r\n        'Generate Outlier Cleansing',\r\n        'Generate Assigned Rules',\r\n        'Generate System Stat',\r\n        'Populate Analysis Cockpit',\r\n        'Identify Bestfit Algorithm',\r\n        'Populate Stat Fcst',\r\n        'Disaggregate Stat',\r\n        'Forecast Reconciliation',\r\n        'Populate Lag Model'\r\n    ]\r\n \r\n    //List of procedures being called \r\n    const BatchProcs={\r\n        'DailyRefresh': 'o9DP010DailyRefresh',\r\n        'Segmentation' : 'o9DP0900GenerateSegmentation',\r\n        'OutlierCorrection' : 'o9DP0901OutlierCorrection',\r\n        'BestfitFlag': 'o9DP0906UpdateBestfitFlagAttribute',\r\n        'AssignRuleAndAlgo':'o9DP0152AssignRuleAndAlgoGlobal',\r\n        'SeasonalIndices':'o9DP0154GenerateSeasonalIndices',\r\n        'PreprocessSystemStat':'o9DP0903PreprocessSystemStat',\r\n        'GenerateSystemStat' :'o9DP0904GenerateSystemStat',\r\n        'GenerateSystemML':'o9DP0904GenerateSystemML',\r\n        'GenerateFastStat':'o9DP0904GenerateFastStat',\r\n        'GenerateSystemStatUsingBestfitLC':'o9DP0905GenerateSystemStatUsingBestfitLC',\r\n        'GenerateFastStatUsingBestfitLC':'o9DP0905GenerateFastStatUsingBestfitLC ',\r\n        'OutputChecks':'o9DP0909OutputChecks',\r\n        'IdentifyBestfitModel':'o9DP0907IdentifyBestFitModel',\r\n        'EnsembleFit':'o9DP0907EnsembleFit',\r\n        'PopulateBestFitForecast':'o9DP0908PopulateBestFitForecast',\r\n        'DisaggregateStat':'o9DP0910DisaggregateStat',\r\n        'PopulateLagModel':'o9DP005PopulateLags',\r\n        'Reconciliation':'o9DP0916GenerateReconciledForecast',\r\n        'PopulateHistory':'o9DP002PopulateHistoryFullScope',\r\n        'CalculateAccuracyStat':'o9DP005PopulateAccuracyStat'\r\n    }\r\n\r\n    //Assortment Measure per Input Stream\r\n    const AssortmentMeasure = {\r\n        \"Actual\": \"Assortment Stat\",\r\n        \"Sell Out Actual\": \"Sell Out Actual\"\r\n    };\r\n\r\n\r\n    //Function that handles all conditions being checked in the code\r\n    var CheckCondition= function(Version,Itype,Check)\r\n    {\r\n        var ForecastEngineQuery='Select ([Forecast Iteration].[Forecast Iteration Type].['+Itype+'].relatedmembers([Forecast Iteration]) * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Forecast Engine],Measure.[Forecast Strategy],Measure.[Assigned Algorithm List]}) on column;'\r\n\r\n        var Iteration=Itype.split('_');\r\n        Type=Iteration[0]\r\n        BestfitItemsQuery=' select([Item].[Segmentation LOB].filter(#.[Bestfit Flag '+Type+'] == 1).relatedmembers([Stat Item]));'\r\n     \r\n        var BestfitCellset=cellsetModule.createCellSet(queryModule.select(BestfitItemsQuery))\r\n\r\n\r\n\r\n        var ForecastEngineCellset=cellsetModule.createCellSet(queryModule.select(ForecastEngineQuery))\r\n        var ForecastEngine = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Engine'))\r\n        var ForecastStrategy = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Strategy'))\r\n        var AssignedAlgorithmList = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Assigned Algorithm List'))\r\n\r\n        var FastStatQuery='Select ([Version].[Version Name].['+Version+'] ) on row,({Measure.[Stat Archetype]}) on column;'\r\n        var FastStatCellset=cellsetModule.createCellSet(queryModule.select(FastStatQuery))\r\n        var Container=false\r\n        if(FastStatCellset.rowCount>0)\r\n            {\r\n                var ContainerVal=FastStatCellset.row(0).cell(FastStatCellset.measureColumnIndex('Stat Archetype'))\r\n                if(ContainerVal=='Container')\r\n                    Container=true\r\n            }\r\n\r\n\r\n        //Checks if Forecast Engine is only ML\r\n        if(Check=='ML' && ForecastEngine.toString()=='ML')\r\n                return true\r\n        \r\n        //Checks if Forecast Engine contains ML\r\n        if(Check=='GenML' && ForecastEngine.toString().includes('ML'))\r\n                return true\r\n        //Checks if Forecast Engine contains Stat    \r\n        if(Check=='GenStat' && ForecastEngine.toString().includes('Stat'))\r\n                return true\r\n\r\n        //Checks if Assigned Algorithm list contains SCHM\r\n        if(Check=='SCHM' && AssignedAlgorithmList.toString().includes('SCHM'))\r\n            return true\r\n\r\n\r\n        //Checks if Forecast Strategy is Ensemble\r\n        if(Check=='Ensemble' && ForecastStrategy.toString().includes('Ensemble'))\r\n                return true\r\n\r\n        //Checks if BEstfit Items Exists\r\n        if(Check=='BestfitItems' && BestfitCellset.rowCount>0)\r\n            return true\r\n\r\n        //Checks if Stat Archetype is Container\r\n        if(Check=='FastStat' && Container)\r\n            return true\r\n\r\n\r\n    }\r\n\r\n    //Function that executes all processes\r\n    var ProcessProcesses=function(Process,Version,IType,GenBucket,save=false){\r\n      \r\n\r\n        IterationType=IType.split('_');\r\n        InputStream = IterationType[1];\r\n        let Type=IterationType[0];\r\n        Log.Info('Input Stream :' +InputStream)\r\n\r\n        var BatchParams1='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\":\"'+Type+'\",\"InputStream\":[\"'+InputStream+'\"]};'\r\n\r\n        var BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": true,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};' \r\n        if(GenBucket=='Month')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":true,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(GenBucket=='Planning Month')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":false,\"PlanningMonth\":true, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(GenBucket=='Quarter')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":true,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(GenBucket=='Planning Quarter')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":true,\"InputStream\":[\"'+InputStream+'\"]};'\r\n\r\n\r\n        var BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":true , \"MidTerm\":false, \"LongTerm\":false, \"VeryShortTerm\":false ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Mid Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":true, \"LongTerm\":false, \"VeryShortTerm\":false ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Long Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":false, \"LongTerm\":true, \"VeryShortTerm\":false ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Very Short Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":false, \"LongTerm\":false, \"VeryShortTerm\":true ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Very Long Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":false, \"LongTerm\":false, \"VeryShortTerm\":false ,\"VeryLongTerm\":true ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        \r\n        if(Process=='Generate Stat Actuals'){\r\n            \r\n            GenerateStatActuals(Version,IType)\r\n        }\r\n        if(Process=='Accuracy Calculation')\t{\r\n            var AccuracyQuery= 'exec procedure '+BatchProcs['CalculateAccuracyStat'] + ' {\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+Type+'\", \"Week\": true,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n            Log.Info('Running Accuracy Calculation for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(AccuracyQuery)\r\n        }\r\n        if(Process=='Generate Segmentation')\r\n        {\r\n\r\n            condition=CheckCondition(Version,IType,'ML')\r\n            if(condition)\r\n                return;\r\n            \r\n            var SegementationQuery='exec procedure '+BatchProcs['Segmentation']+BatchParams1 \r\n            if(CheckCondition(Version,IType,'FastStat'))\r\n                SegmentationQuery='exec procedure o9DP0900GenerateSegmentationFastStat'+BatchParams1\r\n\r\n            Log.Info('Running Segmentation for Version :'+Version)\r\n            \r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n\r\n          \r\n\r\n            queryModule.select(SegementationQuery)\r\n\r\n        }\r\n\r\n        if(Process=='Generate Outlier Cleansing')\r\n        {\r\n            condition=CheckCondition(Version,IType,'ML')\r\n            if(condition)\r\n                return;\r\n\r\n            var OutlierQuery='exec procedure '+BatchProcs['OutlierCorrection']+BatchParams2 \r\n            Log.Info('Running Outlier Correction for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)    \r\n            queryModule.select(OutlierQuery)\r\n\r\n            if(save)\r\n                queryModule.select('save();');\r\n        }\r\n        if(Process=='Generate Assigned Rules')\r\n        {\r\n            var UpdateBestfitQuery='exec procedure '+BatchProcs['BestfitFlag']+BatchParams2 \r\n            var AssignRuleQuery='exec procedure '+BatchProcs['AssignRuleAndAlgo']+BatchParams1 \r\n\r\n            Log.Info('Running Assign Rule and Algo for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(AssignRuleQuery)\r\n            condition=CheckCondition(Version,IType,'ML')\r\n            if(condition)\r\n                return;\r\n            condition=CheckCondition(Version,IType,'SCHM')\r\n            if(condition)\r\n            {\r\n                Log.Info('Running Seasonal Indices for Version :'+Version)\r\n                var SeasonalQuery='exec procedure '+BatchProcs['SeasonalIndices']+BatchParams1 \r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(SeasonalQuery)\r\n            }\r\n\r\n            Log.Info('Running Update Bestfit Flag for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(UpdateBestfitQuery)\r\n\r\n\r\n            var PreProcessQuery='exec procedure '+BatchProcs['PreprocessSystemStat']+BatchParams3 \r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(PreProcessQuery);\r\n        }\r\n\r\n        if(Process=='Generate System Stat')\r\n        {\r\n            var condition=CheckCondition(Version,IType,'GenML')\r\n            if(condition){\r\n                var SystemStatQuery='exec procedure '+BatchProcs['GenerateSystemML']+BatchParams1 \r\n                Log.Info('Running Generate System ML for Version :'+Version)\r\n                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                    PopulateStartTime(Version,IType,'Generate System Stat')\r\n                    queryModule.select(SystemStatQuery)\r\n                    PopulateEndTime(Version,IType,'Generate System Stat')\r\n            }\r\n\r\n            condition=CheckCondition(Version,IType,'GenStat')\r\n            if(condition){\r\n                var BestfitCondition = CheckCondition(Version,IType,'BestfitItems')\r\n                var FastStatCondition = CheckCondition(Version,IType,'FastStat')\r\n\r\n                var NoLCBestfitItems='Select([Item].[Segmentation LOB].filter(isNull(#.[Bestfit Flag '+Type+'])));'\r\n                var NoLCBestfitCellset=cellsetModule.createCellSet(queryModule.select(NoLCBestfitItems))\r\n              \r\n            \r\n                PopulateStartTime(Version,IType,'Generate System Stat')\r\n                if(BestfitCondition||NoLCBestfitCellset.rowCount>0){\r\n                    \r\n                    if(FastStatCondition){\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateFastStat']+BatchParams3 \r\n                        Log.Info('Running Generate System Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                    else{\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateSystemStat']+BatchParams3 \r\n                        Log.Info('Running Generate Fast Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                   \r\n                }\r\n                else{\r\n                    if(FastStatCondition){\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateFastStatUsingBestfitLC']+BatchParams3 \r\n                        Log.Info('Running Generate System Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                    else{\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateSystemStatUsingBestfitLC']+BatchParams3 \r\n                        Log.Info('Running Generate Fast Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                    \r\n                }\r\n                PopulateEndTime(Version,IType,'Generate System Stat')\r\n            }\r\n            if(save)\r\n                queryModule.select('save();');\r\n\r\n\r\n        }\r\n\r\n        if(Process=='Output Checks')\r\n        {\r\n            var OutputChecksQuery='exec procedure '+BatchProcs['OutputChecks']+BatchParams2 \r\n            Log.Info('Running Output Checks for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(OutputChecksQuery)\r\n        }\r\n\r\n        if(Process=='Identify Bestfit Algorithm')\r\n        {\r\n            condition=CheckCondition(Version,IType,'Ensemble')\r\n            if(condition){\r\n                var OutputChecksQuery='exec procedure '+BatchProcs['OutputChecks']+BatchParams2 \r\n                Log.Info('Running Output Checks for Version :'+Version)\r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(OutputChecksQuery)\r\n            }\r\n            var BestfitQuery='exec procedure '+BatchProcs['IdentifyBestfitModel']+BatchParams1 \r\n            Log.Info('Running Identify Bestfit Model for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(BestfitQuery)\r\n            \r\n            if(condition){\r\n                var EnsembleQuery='exec procedure '+BatchProcs['EnsembleFit']+BatchParams1 \r\n                Log.Info('Running Ensemble Fit for Version :'+Version)\r\n                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(EnsembleQuery)\r\n            }\r\n\r\n            if(save)\r\n                queryModule.select('save();');\r\n\r\n        }\r\n        if(Process=='Populate Stat Fcst')\r\n        {\r\n            var PopulateStatQuery='exec procedure '+BatchProcs['PopulateBestFitForecast']+BatchParams3 \r\n            Log.Info('Running Populate Bestfit Forecast for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(PopulateStatQuery)\r\n            // var L1LagModel='EXEC plugin instance [DP220CalculateLagModelL1] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"5G\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n            // queryModule.select(L1LagModel)\r\n        }\r\n        if(Process=='Disaggregate Stat')\r\n        {\r\n            var DisaggregateQuery='exec procedure '+BatchProcs['DisaggregateStat']+BatchParams1 \r\n            if(CheckCondition(Version,IType,'FastStat'))\r\n                DisaggregateQuery='exec procedure o9DP0910DisaggregateFastStat'+BatchParams1\r\n            Log.Info('Running Disaggregate Stat for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(DisaggregateQuery)\r\n\r\n            if(save)\r\n                queryModule.select('save();');\r\n\r\n        }\r\n        if(Process=='Populate Lag Model')\r\n        {\r\n            var LagModelQuery='exec procedure '+BatchProcs['PopulateLagModel']+' {\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+Type+'\", \"Week\": true,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n            Log.Info('Running Lag Model for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(LagModelQuery)\r\n        }\r\n        if(Process == 'Reconcile')\r\n        {\r\n            var ReconcileQuery='exec procedure '+BatchProcs['Reconciliation']+'{\"VersionName\" : \"'+Version+'\"};'\r\n            Log.Info('Running Reconciliation for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(ReconcileQuery)  \r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    var PopulateStartTime=function(Version,IType,Process){\r\n        \r\n        let StartQuery='cartesian Scope:([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) * [Process].[Process].['+Process+'] );Measure.[Stat Process Start Time]=now();end scope;'\r\n        queryModule.select(StartQuery)\r\n    }\r\n    var PopulateEndTime=function(Version,IType,Process){\r\n        \r\n        let EndQuery='cartesian Scope:([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) * [Process].[Process].['+Process+'] );Measure.[Stat Process End Time]=now();end scope;'\r\n        queryModule.select(EndQuery)\r\n    }\r\n\r\n    //Function that handles stat actuals refresh and generation\r\n    var GenerateStatActuals=function(Version,IType){\r\n\r\n        \r\n\r\n\r\n            var InputStream=IType.split('_')[1]\r\n            var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].['+IType+']);';\r\n            var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n            var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n            var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n\r\n            \r\n            ForecastIterationDatalist.forEach(function(ForecastIteration) {\r\n            Log.Info(\"ForecastIterationValue:\" +ForecastIteration )\r\n            if (ForecastIteration == 'FI-Default') {\r\n        \r\n                var MasterIterationScope = 'cartesian scope: (Version.[Version Name].['+Version+'] * &AllForecastIterationTypes.['+IType+'] * [Item].[Planning Item] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Region].[Planning Region] * [Location].[Location] * [Demand Domain].[Planning Demand Domain] * [PnL].[Planning PnL]);Measure.[Forecast Iteration Selection] = if (~isnull(Measure.['+AssortmentMeasure[InputStream]+'])) then \"FI-Default\" else null;end scope;';\r\n                queryModule.select(MasterIterationScope)\t\r\n            \r\n                    \r\n            }\r\n            else{\r\n                    \r\n                ScopeQuery = 'Select ([Version].[Version Name].['+Version+'] * &AllForecastIterationTypes.['+IType+']) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;'\r\n\r\n                var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n                var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n                var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n                var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n                var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n                var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n                var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n\r\n                var SelectionScope=`(Select ([Version].[Version Name].[${Version}] * [Forecast Iteration].[Forecast Iteration Type].[${IType}] * [Account].[${AccountScope}] * [Channel].[${ChannelScope}] * [Demand Domain].[${DemandDomainScope}] * [Item].[${ItemScope}] * [PnL].[${PnLScope}] * [Region].[${RegionScope}] * [Location].[${LocationScope}] ) on row, ({Measure.[Forecast Iteration Selection]}) on column).filter(Measure.[Forecast Iteration Selection] == \"${ForecastIteration}\");`\r\n\r\n                const SelectionCellset= cellsetModule.createCellSet(queryModule.select(SelectionScope));\r\n                var ItemList=SelectionCellset.attributeMembers('Item',ItemScope).map(function (item) {\r\n                    return item['Name'];\r\n                });\r\n                ItemList=ItemList.map(element => `\"${element}\"`)\r\n                var AccountList=SelectionCellset.attributeMembers('Account',AccountScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                AccountList=AccountList.map(element => `\"${element}\"`)\r\n                var ChannelList=SelectionCellset.attributeMembers('Channel',ChannelScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                ChannelList=ChannelList.map(element => `\"${element}\"`)\r\n                var RegionList=SelectionCellset.attributeMembers('Region',RegionScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                RegionList=RegionList.map(element => `\"${element}\"`)\r\n                var LocationList=SelectionCellset.attributeMembers('Location',LocationScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                LocationList=LocationList.map(element => `\"${element}\"`)\r\n                var PnLList=SelectionCellset.attributeMembers('PnL',PnLScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                PnLList=PnLList.map(element => `\"${element}\"`)\r\n                var DemandDomainList=SelectionCellset.attributeMembers('Demand Domain',DemandDomainScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                DemandDomainList=DemandDomainList.map(element => `\"${element}\"`)\r\n\r\n\r\n\r\n                var Scope = `cartesian scope: (Version.[Version Name].[${Version}] * [Forecast Iteration].[Forecast Iteration Type].[${IType}] * [Item].[${ItemScope}].filter(#.Name in {${ItemList}}).relatedmembers([Planning Item]) * [Account].[${AccountScope}].filter(#.Name in {${AccountList}}).relatedmembers([Planning Account]) * [Channel].[${ChannelScope}].filter(#.Name in {${ChannelList}}).relatedmembers([Planning Channel]) * [Region].[${RegionScope}].filter(#.Name in {${RegionList}}).relatedmembers([Planning Region]) * [Location].[${LocationScope}].filter(#.Name in {${LocationList}}).relatedmembers([Location]) * [Demand Domain].[${DemandDomainScope}].filter(#.Name in {${DemandDomainList}}).relatedmembers([Planning Demand Domain]) * [PnL].[${PnLScope}].filter(#.Name in {${PnLList}}).relatedmembers([Planning PnL]));Measure.[Forecast Iteration Selection] = if (~isnull(Measure.[${AssortmentMeasure[InputStream]}])) then \"${ForecastIteration}\" else null;end scope;`\r\n\r\n\r\n                queryModule.select(Scope)\r\n            }\r\n                \r\n            \r\n                var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+Version+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\": false};'\r\n                queryModule.select(createmember)\r\n                if(ForecastIteration == 'FI-PL'){\r\n                    Log.Info(\"Passed Iteration is FI PL \")\r\n                    var Preprocess = 'exec procedure o9DP013PreprocessPLScope{\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+IType+'\"};'\r\n                    Log.Info(\"PreprocessForPL :\"+Preprocess)\r\n                    queryModule.select(Preprocess)\r\n                }\r\n\r\n\r\n\r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n        \r\n                var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n               \r\n                PopulateStartTime(Version,IType,'Generate Stat Actuals')\r\n                queryModule.select(RunStatActual)\r\n                PopulateEndTime(Version,IType,'Generate Stat Actuals')\r\n                Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n     \r\n\t\t\t\tif(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t   var PostProcessPL = 'exec procedure o9DP014PostprocessPLScope {\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+TypeData+'\"};'\r\n\t\t\t\t    queryModule.select(PostProcessPL)\r\n\t\t\t\t}\r\n\r\n\r\n\r\n                var BucketWeigtNull='scope:(&AllStatBuckets * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) );Measure.[Stat Bucket Weight]= NULL;end scope;'\r\n                \r\n\r\n                var DimCountNull='scope : (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}));Measure.[Account L1 Count] = NULL ;Measure.[Account L2 Count] = NULL ;Measure.[Account L3 Count] = NULL ;Measure.[Account L4 Count] = NULL ;Measure.[Actual At Version] = NULL ;Measure.[Channel L1 Count] = NULL ;Measure.[Channel L2 Count] = NULL ;Measure.[Demand Domain L1 Count] = NULL ;Measure.[Demand Domain L2 Count] = NULL ;Measure.[Demand Domain L3 Count] = NULL ;Measure.[Demand Domain L4 Count] = NULL ;Measure.[L1 Count] = NULL ;Measure.[L2 Count] = NULL ;Measure.[L3 Count] = NULL ;Measure.[L4 Count] = NULL ;Measure.[L5 Count] = NULL ;Measure.[L6 Count] = NULL ;Measure.[Location Country Count] = NULL ;Measure.[Location Region Count] = NULL;Measure.[Location Type Count] = NULL ;Measure.[Planning Account Count] = NULL ;Measure.[Planning Channel Count] = NULL ;Measure.[Planning Demand Domain Count] = NULL ;Measure.[Planning Item Count] = NULL ;Measure.[Planning Location Count] = NULL ;Measure.[Planning PnL Count] = NULL ;Measure.[Planning Region Count] = NULL ;Measure.[PnL L1 Count] = NULL ;Measure.[PnL L2 Count] = NULL ;Measure.[PnL L3 Count] = NULL ;Measure.[PnL L4 Count] = NULL ;Measure.[Region L1 Count] = NULL ;Measure.[Region L2 Count] = NULL ;Measure.[Region L3 Count] = NULL ;Measure.[Region L4 Count] = NULL ;Measure.[Reporting Location Count] = NULL ;Measure.[Stat Account Count] = NULL ;Measure.[Stat Channel Count] = NULL ;Measure.[Stat Demand Domain Count] = NULL ;Measure.[Stat Item Count] = NULL ;Measure.[Stat Location Count] = NULL ;Measure.[Stat PnL Count] = NULL ;Measure.[Stat Region Count] = NULL ;end scope ;'\r\n\r\n                var BucketWeight='Exec plugin instance [DP046PopulatePWDisaggProfile] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                var DimCount ='Exec plugin instance [DP051PopulateDimAttributeCount] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                var SliceAssocNull='delete data for model [860 Slice Association Stat] where {&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [870 Slice Association TL] where {&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [880 Slice Association PL] where {&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}),&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};'\r\n\r\n                var SliceAssoc='EXEC plugin instance [DP041PopulateSliceAssociation] for measures {[Trend Strength L1]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                queryModule.select(BucketWeigtNull)\r\n                queryModule.select(DimCountNull)\r\n                queryModule.select(SliceAssocNull)    \r\n                queryModule.select(BucketWeight)\r\n                queryModule.select(DimCount)\r\n                PopulateStartTime(Version,IType,'Generate Slice Association')\r\n                queryModule.select(SliceAssoc)\r\n                PopulateEndTime(Version,IType,'Generate Slice Association')\r\n\r\n\r\n                // var AccuracyQuery='EXEC plugin instance [DP212CalculateRollOverAccuracyIteration] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']*[Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration])) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),(DriverMemory, \"10G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"3G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_low\"),(DataTransferMode,\"csv\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n                \r\n                // PopulateStartTime(Version,IType,'Stat Accuracy Calculation')\r\n                // queryModule.select(AccuracyQuery)\r\n                // PopulateEndTime(Version,IType,'Stat Accuracy Calculation')  \r\n\r\n\r\n              \r\n          \r\n\r\n\r\n            })  \r\n    \r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    var PopulateMeasures=function(type,process,Iteration,value,Version)\r\n    {\r\n            \r\n        var queryModule=require('o9/data/query')\r\n        Log.Info(process+\" \"+type+\" Count: \"+value)\r\n        if(type==\"expect\")\r\n            {\r\n                var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Expected Output]='+value+'; end scope;'\r\n                queryModule.select(scopeQuery)\r\n            }\r\n        else if(type==\"actual\")\r\n            {\r\n                var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Actual Output]='+value+'; end scope;'\r\n                queryModule.select(scopeQuery)\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n  \r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n\r\n\r\n    const Grains ='[Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] * [Channel].[Stat Channel]'\r\n    \r\n\r\n\r\n\r\n    \r\n    var ExecuteProcesses = function(Version,IType,GenBucket,FullScope,Processes=StatProcesses,save=false){\r\n\r\n        var CompletedVersions=[]\r\n      \r\n        \r\n    \r\n       Version.forEach(Version => {\r\n        \r\n       \r\n            IterationType=IType.split('_');\r\n            InputStream = IterationType[1];\r\n            let Type=IterationType[0];\r\n\t\t    Log.Info('Input Stream :' +InputStream)\r\n\r\n            \r\n\r\n            \r\n            var CompletedProcesses=[]\r\n\r\n            if(FullScope){\r\n\r\n                \r\n                let deleteDashboard='delete data for model [400 Stat Process] where {&CWVAndScenarios.filter(#.Name in {\"'+Version+'\"}),[Forecast Iteration].[Forecast Iteration Type].filter(#.Name in {\"'+IType+'\"}).relatedmembers([Forecast Iteration])};'\r\n                queryModule.select(deleteDashboard)\r\n                var BatchStartQuery='Scope: ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) );Measure.[Stat Batch Start Time]=now();end scope;'\r\n\r\n                Log.Info('Populating Batch Start Time for Version :'+Version)\r\n                queryModule.select(BatchStartQuery)\r\n\r\n                let LastCycleQuery='Scope: (&CWVAndScenarios.filter(#.Name in {\"'+Version+'\"}) * [Forecast Iteration].[Forecast Iteration Type].filter(#.Name in {\"'+IType+'\"}).relatedmembers([Forecast Iteration]) * [Region].[Stat Region] * [Location].[Stat Location] * [Channel].[Stat Channel] * [PnL].[Stat PnL] * [Item].[Stat Item] * [Demand Domain].[Stat Demand Domain] * [Time].[Partial Week] * [Account].[Stat Account] );Measure.[Stat Fcst L1 LC]=Measure.[Stat Fcst L1];end scope;'\r\n                queryModule.select(LastCycleQuery)\r\n             \r\n            }\r\n\r\n            \r\n            Processes.forEach(Process => {\r\n                Log.Info('Completed Versions :'+CompletedVersions.toString()  + ', Completed Processes :'+CompletedProcesses.toString())\r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n               \r\n\r\n                ProcessProcesses(Process,Version,IType,GenBucket,save)\r\n                \r\n                FlagQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) ) ; Measure.[Stat Process Flag]=if(~isnull(Measure.[Stat Process Expected Output])) then 1;end scope;'\r\n                queryModule.select(FlagQ)\r\n    \r\n                //Populate Process Status\r\n                ProcessQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] *  [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration])  ) ; Measure.[Stat Process Status]=if(Measure.[Actual vs Expected Stat Process Output Gap %]<0.05 && Measure.[Actual vs Expected Stat Process Output Gap %]>=0) then 1; end scope;'\r\n                queryModule.select(ProcessQ)\r\n\r\n\r\n                var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].filter(#.Name startswith(['+IType+'])));';\r\n                var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n                var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n                var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n                    return item['Name'];\r\n                 });\r\n                ForecastIterationDatalist.forEach(Iteration=>{\r\n                                  \r\n                    var HistoryQuery='Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[History Period]}) on column;'\r\n                    var HistroyPeriod=ExtractMeasure(HistoryQuery,'History Period')\r\n                    var HistoryNamedset='[Time].[Week].filter(#.Key<&CurrentWeek.element(0).Key && #.Key>=&CurrentWeek.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                    if(GenBucket==\"Week\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Week].filter(#.Key<&CurrentWeek.element(0).Key && #.Key>=&CurrentWeek.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Month\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Month].filter(#.Key<&CurrentMonth.element(0).Key && #.Key>=&CurrentMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Month\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Planning Month].filter(#.Key<&CurrentPlanningMonth.element(0).Key && #.Key>=&CurrentPlanningMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Quarter\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Quarter].filter(#.Key<&CurrentQuarter.element(0).Key && #.Key>=&CurrentQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Quarter\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Planning Quarter].filter(#.Key<&CurrentPlanningQuarter.element(0).Key && #.Key>=&CurrentPlanningQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    let SummaryQueries= {\r\n                    \"Generate Stat Actuals\":{query:'Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) on row, ({Measure.[Stat Actual]}) on column;'},\r\n                    \"Stat Actuals\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Stat Actual]>0}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Slice Association\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Slice Association Stat])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Segmentation\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[PLC Status L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Seasonality Detection\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Seasonality L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Outlier Cleansing\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Actual Cleansed])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Assigned Rules\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Assigned Algorithm List])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate System Stat\":{\r\n                            expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                            \r\n                            disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                            nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                            query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Time])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n\r\n                        \r\n                        },\r\n                    \"Identify Bestfit Algorithm\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Bestfit Algorithm])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Populate Stat Fcst\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Stat Fcst L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Populate Analysis Cockpit\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Count])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"PL Count Validation\":{\r\n                        query:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL])} ) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']}; ',\r\n                        \r\n                        expect:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n            \r\n                    \"TL Count Validation\":{\r\n                \r\n                        query:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst TL])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        expect:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"Stat Accuracy Calculation\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"Planning Accuracy Calculation\":{\r\n                        expect:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"CML Count Validation\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst CML])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"Ensemble Count Validation\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst Ensemble])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    }\r\n                \r\n                    }\r\n\r\n\r\n                if(Process=='Generate Stat Actuals')\r\n                {\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query,'Stat Actual'),Version)\r\n                    let ExpectQuery='Select ([Version].[Version Name].['+Version+']  ) on row,({Measure.[Stat Actual L0],Measure.[Forecast Iteration Selection]}) on column where {Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"};'\r\n                    PopulateMeasures('expect',Process,Iteration,ExtractMeasure(ExpectQuery,'Stat Actual L0'),Version)\r\n                     \r\n                    ExpectQuery='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    PopulateMeasures('expect','Generate Slice Association',Iteration,ExtractMeasure(ExpectQuery),Version)\r\n                    PopulateMeasures('actual','Generate Slice Association',Iteration,ExtractMeasure(SummaryQueries['Generate Slice Association'].query),Version)\r\n                }\r\n                if(Process=='Generate Segmentation'){\r\n                    condition=CheckCondition(Version,IType,'ML')\r\n                    if(condition){\r\n                        PopulateMeasures('expect',Process,Iteration,'0',Version)\r\n                        PopulateMeasures('actual',Process,Iteration,'0',Version)\r\n                        PopulateMeasures('expect','Seasonality Detection',Iteration,'0',Version)\r\n                        PopulateMeasures('actual','Seasonality Detection',Iteration,'0',Version)    \r\n                    return;\r\n                    }\r\n                    \r\n                    let ExpectQuery=SummaryQueries['Stat Actuals'].query\r\n                    PopulateMeasures('expect',Process,Iteration,ExtractMeasure(ExpectQuery),Version)\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect','Seasonality Detection',Iteration,ExtractMeasure(SummaryQueries['Seasonality Detection'].query),Version)\r\n                    PopulateMeasures('actual','Seasonality Detection',Iteration,ExtractMeasure(SummaryQueries['Seasonality Detection'].query),Version)\r\n\r\n                }\r\n        \r\n               \r\n                if(Process=='Generate Assigned Rules'||Process=='Generate Outlier Cleansing'){\r\n                    condition=CheckCondition(Version,IType,'ML')\r\n                    if(condition){\r\n                        PopulateMeasures('expect',Process,Iteration,'0',Version)\r\n                        PopulateMeasures('actual',Process,Iteration,'0',Version)  \r\n                    return;\r\n                    }\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExtractMeasure(SummaryQueries['Stat Actuals'].query),Version)\r\n\r\n                }\r\n                if(Process=='Generate System Stat'){\r\n\r\n                    var CMLExpect=0;\r\n                    var CMLActual=0;\r\n                    \r\n                    if(CheckCondition(Version,IType,'GenML')){\r\n                        CMLExpect=ExtractMeasure(SummaryQueries['CML Count Validation'].expect)\r\n                        CMLActual=ExtractMeasure(SummaryQueries['CML Count Validation'].actual)\r\n\r\n                    }\r\n                    \r\n\r\n\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries[Process].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries[Process].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries[Process].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries[Process].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n                    \r\n                    PopulateMeasures('actual',Process,Iteration,ActualValue,Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    PopulateMeasures('expect','Generate CML Fcst',Iteration,CMLExpect-noStatIntersections,Version)\r\n                    PopulateMeasures('actual','Generate CML Fcst',Iteration,CMLActual-noStatIntersections,Version)\r\n                   \r\n\r\n                }\r\n                if(Process=='Identify Bestfit Algorithm'){\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries['Generate System Stat'].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries['Generate System Stat'].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries['Generate System Stat'].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries['Generate System Stat'].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    PopulateMeasures('actual','Populate Analysis Cockpit',Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect','Populate Analysis Cockpit',Iteration,ExpectValue,Version)\r\n\r\n                }\r\n                if(Process=='Populate Stat Fcst'){\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries['Generate System Stat'].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries['Generate System Stat'].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries['Generate System Stat'].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries['Generate System Stat'].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n                    var EnsembleExpect=0;\r\n                    var EnsembleActual=0;\r\n                    if(CheckCondition(Version,IType,'Ensemble')){\r\n                        EnsembleExpect=ExtractMeasure(SummaryQueries['Ensemble Count Validation'].expect)\r\n                        EnsembleActual=ExtractMeasure(SummaryQueries['Ensemble Count Validation'].actual)\r\n                    }\r\n                    if(EnsembleActual!=EnsembleExpect)\r\n                        if(EnsembleActual+DiscoValue==EnsembleExpect)\r\n                            EnsembleExpect=EnsembleActual   \r\n                    PopulateMeasures('expect','Generate Ensemble Fcst',Iteration,EnsembleExpect-noStatIntersections,Version)\r\n                    PopulateMeasures('actual','Generate Ensemble Fcst',Iteration,EnsembleActual-noStatIntersections,Version)\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    \r\n                }\r\n                if(Process=='Populate Analysis Cockpit'){\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries['Generate System Stat'].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries['Generate System Stat'].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries['Generate System Stat'].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries['Generate System Stat'].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    \r\n                }\r\n\r\n                \r\n                if(Process=='Accuracy Calculation')\r\n                {\r\n                    PopulateMeasures('actual','Stat Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Stat Accuracy Calculation'].actual),Version)\r\n                    PopulateMeasures('expect','Stat Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Stat Accuracy Calculation'].expect),Version)\r\n                    PopulateMeasures('actual','Planning Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Planning Accuracy Calculation'].actual),Version)\r\n                    PopulateMeasures('expect','Planning Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Planning Accuracy Calculation'].expect),Version)\r\n               \r\n                }\r\n                if(Process=='Disaggregate Stat'){\r\n\r\n                    var FutureNamedSet='&CurrentandFuturePartialWeeks'\r\n                    if(GenBucket==\"Week\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Week].filter(#.Key>=&CurrentWeek.element(0).Key )'\r\n                        }\r\n                    if(GenBucket==\"Month\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Month].filter(#.Key>=&CurrentMonth.element(0).Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Month\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Planning Month].filter(#.Key>=&CurrentPlanningMonth.element(0).Key)'\r\n                        }\r\n                    if(GenBucket==\"Quarter\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Quarter].filter(#.Key>=&CurrentQuarter.element(0).Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Quarter\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Planning Quarter].filter(#.Key>=&CurrentPlanningQuarter.element(0).Key)'\r\n                        }\r\n\r\n                    var DisagIntersections=0\r\n                    var VolumeActual=0\r\n                    var VolumeExpect=0\r\n                    var TLVolumeActual=0\r\n                    var DisagType=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Disaggregation Type]}) on column;','Disaggregation Type')\r\n        \r\n        \r\n                    if(DisagType==\"No Forecast\")\r\n                        {\r\n                        DisagIntersections=DisagIntersections+ExtractMeasure('Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&&Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration Type].['+IterationType+']};')\r\n                        \r\n                        }\r\n                        else\r\n                        {\r\n                            VolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst PL]}) on column;','Stat Fcst PL')\r\n                            VolumeExpect=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst L1]}) on column where {'+FutureNamedSet+'};','Stat Fcst L1')\r\n                            TLVolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst TL]}) on column where {'+FutureNamedSet+'};','Stat Fcst TL')\r\n                        }  \r\n\r\n                        var Dims=['Item','Account','Channel','Region','Location','PnL','Demand Domain']\r\n                        var Levels={}\r\n                        Dims.forEach(element=>{\r\n                        var query='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] * ['+element+'].[Planning '+element+']) on row,({Measure.['+element+' Level]}) on column;'\r\n                        Levels[element]=ExtractMeasure(query,element+' Level')\r\n                        })  \r\n            \r\n                        var noStatQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Location].[Stat Location] * [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] ) on row, ({Measure.[Assigned Algorithm List]}) on column where {Measure.[Assigned Algorithm List] contains \"No Forecast\"};'\r\n                        var items={}\r\n                        var nostatCellset=cellsetModule.createCellSet(queryModule.select(noStatQuery))\r\n                        Dims.forEach(element=>{\r\n                            items[element]=[]   \r\n                            for(var j=0;j<nostatCellset.rowCount;j++)\r\n                                {\r\n                                    items[element].push(nostatCellset.row(j).cell(nostatCellset.memberColumnIndex(element,'Stat '+element)).Name)\r\n                                }\r\n                            items[element]=itemize(items[element])\r\n                        })\r\n            \r\n                        var nostatPLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Planning Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Planning Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst PL]}) on column).filter(isnull(Measure.[Stat Fcst PL]));'\r\n                        var nostatPLCellSet=cellsetModule.createCellSet(queryModule.select(nostatPLQuery))\r\n                        var nostatPLcols=nostatPLCellSet.rowCount\r\n                        var nostatTLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Transition Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Transition Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst TL]}) on column).filter(isnull(Measure.[Stat Fcst TL]));'\r\n                        var nostatTLCellSet=cellsetModule.createCellSet(queryModule.select(nostatTLQuery))\r\n                        var nostatTLcols=nostatTLCellSet.rowCount\r\n                        \r\n                        Log.Info('NoStat PL: '+nostatPLcols+' NoStat TL: '+nostatTLcols)\r\n\r\n                        PopulateMeasures('actual','PL Volume Loss Validation',Iteration,VolumeActual,Version)\r\n                        PopulateMeasures('expect','PL Volume Loss Validation',Iteration,VolumeExpect,Version)\r\n                        PopulateMeasures('actual','TL Volume Loss Validation',Iteration,TLVolumeActual,Version)\r\n                        PopulateMeasures('expect','TL Volume Loss Validation',Iteration,VolumeExpect,Version)\r\n\r\n\r\n                        ActualValue=ExtractMeasure(SummaryQueries['PL Count Validation'].query)\r\n                        ExpectValue=ExtractMeasure(SummaryQueries['PL Count Validation'].expect)\r\n                        if(ActualValue+DisagIntersections+nostatPLcols==ExpectValue)\r\n                        ExpectValue=ActualValue\r\n                        else\r\n                        ExpectValue=ExpectValue-nostatPLcols\r\n                        PopulateMeasures('actual','PL Count Validation',Iteration,ActualValue,Version)\r\n                        let finalCount=ActualValue\r\n                        PopulateMeasures('expect','PL Count Validation',Iteration,ExpectValue,Version)\r\n\r\n                        ActualValue=ExtractMeasure(SummaryQueries['TL Count Validation'].query)\r\n                        ExpectValue=ExtractMeasure(SummaryQueries['TL Count Validation'].expect)\r\n                        if(ActualValue+DisagIntersections+nostatTLcols==ExpectValue)\r\n                            ExpectValue=ActualValue\r\n                        else\r\n                        ExpectValue=ExpectValue-nostatTLcols\r\n                        PopulateMeasures('actual','TL Count Validation',Iteration,ActualValue,Version)\r\n                        PopulateMeasures('expect','TL Count Validation',Iteration,ExpectValue,Version)\r\n\r\n                        PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                        PopulateMeasures('actual',Process,Iteration,finalCount,Version)\r\n\r\n  \r\n                    \r\n                }\r\n                \r\n\r\n                FlagQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Flag]=if(~isnull(Measure.[Stat Process Expected Output])) then 1;end scope;'\r\n                queryModule.select(FlagQ)\r\n    \r\n                //Populate Process Status\r\n                ProcessQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Status]=if(Measure.[Actual vs Expected Stat Process Output Gap %]<0.05 && Measure.[Actual vs Expected Stat Process Output Gap %]>=0) then 1; end scope;'\r\n                queryModule.select(ProcessQ)\r\n\r\n\r\n                })\r\n                \r\n                \r\n            \r\n                CompletedProcesses.push(Process)\r\n\r\n            })\r\n            \r\n\r\n            if(FullScope){\r\n                \r\n                \r\n                \r\n                var BatchEndQuery='Scope: ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) );Measure.[Stat Batch End Time]=now();end scope;'\r\n\r\n                Log.Info('Populating Batch Start Time for Version :'+Version)\r\n                queryModule.select(BatchEndQuery)\r\n            \r\n            \r\n            \r\n            }\r\n            \r\n\r\n            CompletedVersions.push(Version)\r\n       })\r\n       \r\n       \r\n\r\n    }\r\n\r\n\r\n\r\n    var RunBatch = function(o9Params){\r\n\r\n        parsedParams = JSON.parse(o9Params)\r\n        var VersionName=parsedParams.VersionName\r\n        var Types=parsedParams.ForecastIterationType\r\n        var Cycles=parsedParams.PlanningCycles;\r\n        var ExecutionMode=parsedParams.ExecutionMode\r\n        var save=parsedParams.Save\r\n\r\n\r\n        CompletedCycles=[]\r\n\r\n        if(ExecutionMode=='Prod')\r\n        {\r\n            {\r\n                var UserProcesses=parsedParams.StatProcesses\r\n                if (UserProcesses.includes('Forecast Reconciliation')) {\r\n                    UserProcesses = UserProcesses.filter(process => process !== 'Forecast Reconciliation');\r\n                    UserProcesses.push('Reconcile')\r\n                }\r\n\r\n                if (UserProcesses.includes('Stat Accuracy Calculation') || UserProcesses.includes('Planning Accuracy Calculation')) {\r\n                    UserProcesses = UserProcesses.filter(process => process !== 'Stat Accuracy Calculation' && process !== 'Planning Accuracy Calculation');\r\n                    UserProcesses.unshift('Accuracy Calculation');\r\n                }\r\n                Types.forEach(Type=>{\r\n                    var Query='Select (&CWV * [Forecast Iteration].[Forecast Iteration Type].['+Type+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n                    var Cellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n                    var GenBucket=Cellset.row(0).cell(Cellset.measureColumnIndex('Forecast Generation Time Bucket'))\r\n                    Log.Info(\"TEST : EXECUTING SPECIFIC PROCESSES\")\r\n                    \r\n                ExecuteProcesses(VersionName,Type,GenBucket,false,UserProcesses)\r\n                })\r\n            }\r\n        }\r\n        else{\r\n\r\n                var ShortCycles={}\r\n                var MidCycles={}\r\n                var LongCycles={}\r\n                var VeryShortCycles={}\r\n                var VeryLongCycles={}\r\n\r\n                var InputStreams=[]\r\n                Types.forEach(IterationType=>{\r\n                    let InputStream=IterationType.split('_')[1];\r\n                    if (!InputStreams.includes(InputStream)) {\r\n                        InputStreams.push(InputStream);\r\n                    }\r\n                    ShortCycles[InputStream] = [];\r\n                    MidCycles[InputStream] = [];\r\n                    LongCycles[InputStream] = [];\r\n                    VeryShortCycles[InputStream] = [];\r\n                    VeryLongCycles[InputStream] = [];\r\n\r\n                })\r\n\r\n            \r\n                var WTimeQuery='Select( [Time].[Week].filter(#.Key>&CurrentWeek.element(0).leadoffset(-6).Key && #.Key<=&CurrentWeek.element(0).leadoffset(6).Key));'\r\n                var MTimeQuery='Select( [Time].[Month].filter(#.Key>&CurrentMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentMonth.element(0).leadoffset(6).Key));'\r\n                var PMTimeQuery='Select( [Time].[Planning Month].filter(#.Key>&CurrentPlanningMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningMonth.element(0).leadoffset(6).Key));'\r\n                var QTimeQuery='Select( [Time].[Quarter].filter(#.Key>&CurrentQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentQuarter.element(0).leadoffset(6).Key));'\r\n                var PQTimeQuery='Select( [Time].[Planning Quarter].filter(#.Key>&CurrentPlanningQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningQuarter.element(0).leadoffset(6).Key));'\r\n                \r\n               \r\n                Types.forEach(IterationType=>{\r\n                    let InputStream=IterationType.split('_')[1];\r\n               \r\n\r\n                    var Query='Select (&CWV * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n                    var Cellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n                    var GenBucket=Cellset.row(0).cell(Cellset.measureColumnIndex('Forecast Generation Time Bucket'))\r\n\r\n                    var TimeCellset=[]\r\n                    if(GenBucket=='Week')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(WTimeQuery))\r\n                    if(GenBucket=='Month')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(MTimeQuery))\r\n                    if(GenBucket=='Planning Month')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(PMTimeQuery))\r\n                    if(GenBucket=='Quarter')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(QTimeQuery))\r\n                    if(GenBucket=='Planning Quarter')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(PQTimeQuery))\r\n\r\n                    var TypeCycles=TimeCellset.attributeMembers(\"Time\",GenBucket).map(function (item) {\r\n                        return 'todatetime(\"'+item['Key']+'\")';\r\n                        })\r\n                    \r\n                    var CyclesQuery='Select([Time].[Day].filter(#.Key in {'+TypeCycles+'}));'\r\n                    var CyclesCellset=cellsetModule.createCellSet(queryModule.select(CyclesQuery))\r\n                    TypeCycles=CyclesCellset.attributeMembers(\"Time\",\"Day\").map(function (item) {\r\n                        return item['Name'];\r\n                        })\r\n\r\n                    \r\n                    Log.Info('Cycles for '+IterationType+' :'+TypeCycles)   \r\n                    if(IterationType.includes('Very Short'))\r\n                        VeryShortCycles[InputStream]=[...VeryShortCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Short'))\r\n                        ShortCycles[InputStream]=[...ShortCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Mid'))\r\n                        MidCycles[InputStream]=[...MidCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Very Long'))\r\n                        VeryLongCycles[InputStream]=[...VeryLongCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Long'))\r\n                        LongCycles[InputStream]=[...LongCycles[InputStream],...TypeCycles]   \r\n             \r\n                    \r\n                })\r\n\r\n            var STCycles={}    \r\n            var MTCycles ={}\r\n            var LTCycles ={}\r\n            var VSTCycles ={}\r\n            var VLTCycles ={}\r\n\r\n\r\n            \r\n\r\n            InputStreams.forEach(InputStream=>{\r\n              \r\n    \r\n            \r\n            \r\n            STCycles[InputStream] =[...new Set(Cycles.filter(item => ShortCycles[InputStream].includes(item)))];\r\n        \r\n            MTCycles[InputStream]= [...new Set(Cycles.filter(item => MidCycles[InputStream].includes(item)))];\r\n            \r\n            LTCycles[InputStream] = [...new Set(Cycles.filter(item => LongCycles[InputStream].includes(item)))];\r\n\r\n            VSTCycles[InputStream] = [...new Set(Cycles.filter(item => VeryShortCycles[InputStream].includes(item)))];\r\n            VLTCycles[InputStream] = [...new Set(Cycles.filter(item => VeryLongCycles[InputStream].includes(item)))];\r\n            })\r\n\r\n            Log.Info('Selected Cycles :'+JSON.stringify(Cycles))\r\n            Log.Info('Short Term Cycles :'+JSON.stringify(STCycles))\t\r\n            Log.Info('Mid Term Cycles :'+JSON.stringify(MTCycles))\r\n            Log.Info('Long Term Cycles :'+JSON.stringify(LTCycles))\r\n            Log.Info('Very Short Term Cycles :'+JSON.stringify(VSTCycles))\r\n            Log.Info('Very Long Term Cycles :'+JSON.stringify(VLTCycles))\r\n\r\n\r\n            Cycles.sort((a, b) => new Date(a) - new Date(b));\r\n            var Recon=false;\r\n            VersionName.forEach(Version=>{\r\n                InputStreams.forEach(InputStream=>{\r\n                    var Iterations=[]\r\n                    Types.forEach(Type=>{\r\n                        if(Type.includes(InputStream))\r\n                            Iterations=[...Iterations,Type]\r\n                    })\r\n                    var ReconListQuery=\"Select([Version].[Version Name].[\"+Version+\"]*[Data Stream].[Data Stream Type].[\"+InputStream+\"] ) on row,({Measure.[Forecast Reconciliation]}) on column;\"        \r\n                    var ReconListCellSet=cellsetModule.createCellSet(queryModule.select(ReconListQuery))\r\n                    var ReconList=ReconListCellSet.row(0).cell(ReconListCellSet.measureColumnIndex('Forecast Reconciliation'))\r\n                    ReconList=ReconList.split(',')\r\n\r\n                    if(ReconList.every(item => Iterations.includes(item)))\r\n                        Recon=true;\r\n\r\n                })\r\n\r\n            })\r\n\r\n            \r\n            \r\n            while(Cycles.length>0)\r\n            {\r\n\r\n\r\n                Log.Info(\"Completed Cycles: \"+ CompletedCycles.toString())\r\n                Log.Info(\"Remaining Cycles: \"+ Cycles.toString())\r\n                \r\n                let CurrentCycle=Cycles.shift()\r\n                Log.Info('Current Cycle :'+CurrentCycle)\r\n                \r\n                var UpdateTimeQuery='updatemember(Time.[Day]= {,\"'+CurrentCycle+'\" }, Time.[Day$IsCurrent]= {\"true\",});'\r\n                    \r\n\r\n                if(save){\r\n                    queryModule.select('save();')\r\n                    queryModule.select('disable plan;')\r\n                    queryModule.update(UpdateTimeQuery)\r\n                    queryModule.select('enable plan;')\r\n                }\r\n                else\r\n                queryModule.update(UpdateTimeQuery)\r\n               \r\n\r\n                \r\n                // var HistoryQuery='exec procedure '+BatchProcs['PopulateHistory']+';'\r\n                // queryModule.select(HistoryQuery)\r\n\r\n                // var DailyRefreshQuery='exec procedure '+BatchProcs['DailyRefresh']+';' \r\n                // queryModule.select(DailyRefreshQuery)\r\n\r\n               \r\n                \r\n                Types.forEach(IterationType=>{\r\n\r\n                            var Query='Select (&CWV * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n                            var Cellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n                            var GenBucket=Cellset.row(0).cell(Cellset.measureColumnIndex('Forecast Generation Time Bucket'))\r\n\r\n\r\n                            Stream=IterationType.split('_')[1]\r\n                            Type=IterationType.split('_')[0]\r\n\r\n                            if(Type.includes('Very Short'))\r\n                            {\r\n                                if(VSTCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                            }\r\n                            else if(Type.includes('Very Long'))\r\n                            {\r\n                                if(VLTCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                            }\r\n                            else if(Type.includes('Short'))\r\n                            {\r\n                                if(STCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                            }\r\n                            else if(Type.includes('Mid'))\r\n                            {\r\n                                if(MTCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                                }\r\n                            else if(Type.includes('Long'))\r\n                                {\r\n                                    if(LTCycles[Stream].includes(CurrentCycle))\r\n                                    {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                    }\r\n                                }\r\n\r\n                        })\r\n\r\n\r\n                \r\n                VersionName.forEach(Version=>{\r\n\r\n\r\n\r\n                    \r\n\r\n\r\n                    if(Recon)\r\n                        {\r\n                            \r\n                    \r\n                                var PlanningLevelAccQuery='EXEC plugin instance [DP213CalculateRollOverAccuracy] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"5G\"),(\"Lags\",\"0,1\"),(DataTransferMode,\"csv\"),([Param.o9_sys_log_level], \"INFO\"),(TimeLevel, \"Week\")};';\r\n                                Types.forEach(Type=>{\r\n                                PopulateStartTime(Version,Type,'Planning Accuracy Calculation')\r\n                                })\r\n                                queryModule.select(PlanningLevelAccQuery)\r\n\r\n                   \r\n                            Types.forEach(Type=>{\r\n                                PopulateStartTime(Version,Type,'Forecast Reconciliation')\r\n                            })\r\n                           \r\n                            reconQuery='exec procedure '+BatchProcs['Reconciliation'] +'{\"VersionName\" : \"'+Version+'\"};'\r\n                            queryModule.select(reconQuery)\r\n                            Types.forEach(Type=>{\r\n\r\n                                let ExpectCount=cellsetModule.createCellSet(queryModule.select('Select (&CWVAndScenarios.['+Version+'] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Region].[Planning Region] * [Location].[Planning Location] ) on row,({Measure.[Actual]}) on column;'))\r\n                                var scopeQuery='cartesian scope: (&CWVAndScenarios.['+Version+']* [Process].[Process].[Forecast Reconciliation] * [Forecast Iteration].[Forecast Iteration Type].['+Type+'].relatedmembers([Forecast Iteration])); Measure.[Stat Process Expected Output]='+ExpectCount.rowCount+'; end scope;'\r\n                                queryModule.select(scopeQuery)\r\n                                let ActualCount=cellsetModule.createCellSet(queryModule.select('Select (&CWVAndScenarios.['+Version+'] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Region].[Planning Region] * [Location].[Planning Location] ) on row,({Measure.[Stat Fcst]}) on column;'))\r\n                                var scopeQuery='cartesian scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].[Forecast Reconciliation] * [Forecast Iteration].[Forecast Iteration Type].['+Type+'].relatedmembers([Forecast Iteration])); Measure.[Stat Process Actual Output]='+ActualCount.rowCount+'; end scope;'\r\n                                queryModule.select(scopeQuery)\r\n          \r\n                                PopulateEndTime(Version,Type,'Forecast Reconciliation')\r\n                           \r\n                  \r\n                           \r\n                            })\r\n\r\n\r\n                            var CalculatePLLagModel='EXEC plugin instance [DP221CalculateLagModel] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"5G\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n                            queryModule.select(CalculatePLLagModel)\r\n\r\n                           \r\n                        }\r\n                    \r\n        \r\n                \r\n                })\r\n                \r\n\r\n                CompletedCycles.push(CurrentCycle)\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\nreturn{\r\n        RunBatch:RunBatch\r\n    }\r\n})",
    "Code": "define('o9.DemandPlanning.RunStatBatch',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n    const cellsetModule = require('o9/data/cellset');\r\n    const queryModule=require('o9/data/query')\r\n\r\n    // List of overarching processes that are being executed\r\n    const StatProcesses= [\r\n       \r\n        // 'Generate Stat Actuals',\r\n        'Accuracy Calculation',\r\n        'Generate Segmentation',\r\n        'Generate Outlier Cleansing',\r\n        'Generate Assigned Rules',\r\n        'Generate System Stat',\r\n        'Populate Analysis Cockpit',\r\n        'Identify Bestfit Algorithm',\r\n        'Populate Stat Fcst',\r\n        'Disaggregate Stat',\r\n        'Forecast Reconciliation',\r\n        'Populate Lag Model'\r\n    ]\r\n \r\n    //List of procedures being called \r\n    const BatchProcs={\r\n        'DailyRefresh': 'o9DP010DailyRefresh',\r\n        'Segmentation' : 'o9DP0900GenerateSegmentation',\r\n        'OutlierCorrection' : 'o9DP0901OutlierCorrection',\r\n        'BestfitFlag': 'o9DP0906UpdateBestfitFlagAttribute',\r\n        'AssignRuleAndAlgo':'o9DP0152AssignRuleAndAlgoGlobal',\r\n        'SeasonalIndices':'o9DP0154GenerateSeasonalIndices',\r\n        'PreprocessSystemStat':'o9DP0903PreprocessSystemStat',\r\n        'GenerateSystemStat' :'o9DP0904GenerateSystemStat',\r\n        'GenerateSystemML':'o9DP0904GenerateSystemML',\r\n        'GenerateFastStat':'o9DP0904GenerateFastStat',\r\n        'GenerateSystemStatUsingBestfitLC':'o9DP0905GenerateSystemStatUsingBestfitLC',\r\n        'GenerateFastStatUsingBestfitLC':'o9DP0905GenerateFastStatUsingBestfitLC ',\r\n        'OutputChecks':'o9DP0909OutputChecks',\r\n        'IdentifyBestfitModel':'o9DP0907IdentifyBestFitModel',\r\n        'EnsembleFit':'o9DP0907EnsembleFit',\r\n        'PopulateBestFitForecast':'o9DP0908PopulateBestFitForecast',\r\n        'DisaggregateStat':'o9DP0910DisaggregateStat',\r\n        'PopulateLagModel':'o9DP005PopulateLags',\r\n        'Reconciliation':'o9DP0916GenerateReconciledForecast',\r\n        'PopulateHistory':'o9DP002PopulateHistoryFullScope',\r\n        'CalculateAccuracyStat':'o9DP005PopulateAccuracyStat'\r\n    }\r\n\r\n    //Assortment Measure per Input Stream\r\n    const AssortmentMeasure = {\r\n        \"Actual\": \"Assortment Stat\",\r\n        \"Sell Out Actual\": \"Sell Out Actual\"\r\n    };\r\n\r\n\r\n    //Function that handles all conditions being checked in the code\r\n    var CheckCondition= function(Version,Itype,Check)\r\n    {\r\n        var ForecastEngineQuery='Select ([Forecast Iteration].[Forecast Iteration Type].['+Itype+'].relatedmembers([Forecast Iteration]) * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Forecast Engine],Measure.[Forecast Strategy],Measure.[Assigned Algorithm List]}) on column;'\r\n\r\n        var Iteration=Itype.split('_');\r\n        Type=Iteration[0]\r\n        BestfitItemsQuery=' select([Item].[Segmentation LOB].filter(#.[Bestfit Flag '+Type+'] == 1).relatedmembers([Stat Item]));'\r\n     \r\n        var BestfitCellset=cellsetModule.createCellSet(queryModule.select(BestfitItemsQuery))\r\n\r\n\r\n\r\n        var ForecastEngineCellset=cellsetModule.createCellSet(queryModule.select(ForecastEngineQuery))\r\n        var ForecastEngine = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Engine'))\r\n        var ForecastStrategy = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Strategy'))\r\n        var AssignedAlgorithmList = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Assigned Algorithm List'))\r\n\r\n        var FastStatQuery='Select ([Version].[Version Name].['+Version+'] ) on row,({Measure.[Stat Archetype]}) on column;'\r\n        var FastStatCellset=cellsetModule.createCellSet(queryModule.select(FastStatQuery))\r\n        var Container=false\r\n        if(FastStatCellset.rowCount>0)\r\n            {\r\n                var ContainerVal=FastStatCellset.row(0).cell(FastStatCellset.measureColumnIndex('Stat Archetype'))\r\n                if(ContainerVal=='Container')\r\n                    Container=true\r\n            }\r\n\r\n\r\n        //Checks if Forecast Engine is only ML\r\n        if(Check=='ML' && ForecastEngine.toString()=='ML')\r\n                return true\r\n        \r\n        //Checks if Forecast Engine contains ML\r\n        if(Check=='GenML' && ForecastEngine.toString().includes('ML'))\r\n                return true\r\n        //Checks if Forecast Engine contains Stat    \r\n        if(Check=='GenStat' && ForecastEngine.toString().includes('Stat'))\r\n                return true\r\n\r\n        //Checks if Assigned Algorithm list contains SCHM\r\n        if(Check=='SCHM' && AssignedAlgorithmList.toString().includes('SCHM'))\r\n            return true\r\n\r\n\r\n        //Checks if Forecast Strategy is Ensemble\r\n        if(Check=='Ensemble' && ForecastStrategy.toString().includes('Ensemble'))\r\n                return true\r\n\r\n        //Checks if BEstfit Items Exists\r\n        if(Check=='BestfitItems' && BestfitCellset.rowCount>0)\r\n            return true\r\n\r\n        //Checks if Stat Archetype is Container\r\n        if(Check=='FastStat' && Container)\r\n            return true\r\n\r\n\r\n    }\r\n\r\n    //Function that executes all processes\r\n    var ProcessProcesses=function(Process,Version,IType,GenBucket,save=false){\r\n      \r\n\r\n        IterationType=IType.split('_');\r\n        InputStream = IterationType[1];\r\n        let Type=IterationType[0];\r\n        Log.Info('Input Stream :' +InputStream)\r\n\r\n        var BatchParams1='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\":\"'+Type+'\",\"InputStream\":[\"'+InputStream+'\"]};'\r\n\r\n        var BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": true,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};' \r\n        if(GenBucket=='Month')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":true,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(GenBucket=='Planning Month')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":false,\"PlanningMonth\":true, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(GenBucket=='Quarter')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":true,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(GenBucket=='Planning Quarter')\r\n            BatchParams2=' {\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\", \"Week\": false,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":true,\"InputStream\":[\"'+InputStream+'\"]};'\r\n\r\n\r\n        var BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":true , \"MidTerm\":false, \"LongTerm\":false, \"VeryShortTerm\":false ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Mid Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":true, \"LongTerm\":false, \"VeryShortTerm\":false ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Long Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":false, \"LongTerm\":true, \"VeryShortTerm\":false ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Very Short Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":false, \"LongTerm\":false, \"VeryShortTerm\":true ,\"VeryLongTerm\":false ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        if(Type=='Very Long Term')\r\n            BatchParams3='{\"VersionName\" : \"'+Version+'\", \"ForecastIterationType\" : \"'+Type+'\",\"ShortTerm\":false , \"MidTerm\":false, \"LongTerm\":false, \"VeryShortTerm\":false ,\"VeryLongTerm\":true ,\"InputStream\":[\"'+InputStream+'\"]};'\r\n        \r\n        if(Process=='Generate Stat Actuals'){\r\n            \r\n            GenerateStatActuals(Version,IType)\r\n        }\r\n        if(Process=='Accuracy Calculation')\t{\r\n            var AccuracyQuery= 'exec procedure '+BatchProcs['CalculateAccuracyStat'] + ' {\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+Type+'\", \"Week\": true,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n            Log.Info('Running Accuracy Calculation for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(AccuracyQuery)\r\n        }\r\n        if(Process=='Generate Segmentation')\r\n        {\r\n\r\n            condition=CheckCondition(Version,IType,'ML')\r\n            if(condition)\r\n                return;\r\n            \r\n            var SegementationQuery='exec procedure '+BatchProcs['Segmentation']+BatchParams1 \r\n            if(CheckCondition(Version,IType,'FastStat'))\r\n                SegmentationQuery='exec procedure o9DP0900GenerateSegmentationFastStat'+BatchParams1\r\n\r\n            Log.Info('Running Segmentation for Version :'+Version)\r\n            \r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n\r\n          \r\n\r\n            queryModule.select(SegementationQuery)\r\n\r\n        }\r\n\r\n        if(Process=='Generate Outlier Cleansing')\r\n        {\r\n            condition=CheckCondition(Version,IType,'ML')\r\n            if(condition)\r\n                return;\r\n\r\n            var OutlierQuery='exec procedure '+BatchProcs['OutlierCorrection']+BatchParams2 \r\n            Log.Info('Running Outlier Correction for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)    \r\n            queryModule.select(OutlierQuery)\r\n\r\n            if(save)\r\n                queryModule.select('save();');\r\n        }\r\n        if(Process=='Generate Assigned Rules')\r\n        {\r\n            var UpdateBestfitQuery='exec procedure '+BatchProcs['BestfitFlag']+BatchParams2 \r\n            var AssignRuleQuery='exec procedure '+BatchProcs['AssignRuleAndAlgo']+BatchParams1 \r\n\r\n            Log.Info('Running Assign Rule and Algo for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(AssignRuleQuery)\r\n            condition=CheckCondition(Version,IType,'ML')\r\n            if(condition)\r\n                return;\r\n            condition=CheckCondition(Version,IType,'SCHM')\r\n            if(condition)\r\n            {\r\n                Log.Info('Running Seasonal Indices for Version :'+Version)\r\n                var SeasonalQuery='exec procedure '+BatchProcs['SeasonalIndices']+BatchParams1 \r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(SeasonalQuery)\r\n            }\r\n\r\n            Log.Info('Running Update Bestfit Flag for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(UpdateBestfitQuery)\r\n\r\n\r\n            var PreProcessQuery='exec procedure '+BatchProcs['PreprocessSystemStat']+BatchParams3 \r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(PreProcessQuery);\r\n        }\r\n\r\n        if(Process=='Generate System Stat')\r\n        {\r\n            var condition=CheckCondition(Version,IType,'GenML')\r\n            if(condition){\r\n                var SystemStatQuery='exec procedure '+BatchProcs['GenerateSystemML']+BatchParams1 \r\n                Log.Info('Running Generate System ML for Version :'+Version)\r\n                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                    PopulateStartTime(Version,IType,'Generate System Stat')\r\n                    queryModule.select(SystemStatQuery)\r\n                    PopulateEndTime(Version,IType,'Generate System Stat')\r\n            }\r\n\r\n            condition=CheckCondition(Version,IType,'GenStat')\r\n            if(condition){\r\n                var BestfitCondition = CheckCondition(Version,IType,'BestfitItems')\r\n                var FastStatCondition = CheckCondition(Version,IType,'FastStat')\r\n\r\n                var NoLCBestfitItems='Select([Item].[Segmentation LOB].filter(isNull(#.[Bestfit Flag '+Type+'])));'\r\n                var NoLCBestfitCellset=cellsetModule.createCellSet(queryModule.select(NoLCBestfitItems))\r\n              \r\n            \r\n                PopulateStartTime(Version,IType,'Generate System Stat')\r\n                if(BestfitCondition||NoLCBestfitCellset.rowCount>0){\r\n                    \r\n                    if(FastStatCondition){\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateFastStat']+BatchParams3 \r\n                        Log.Info('Running Generate System Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                    else{\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateSystemStat']+BatchParams3 \r\n                        Log.Info('Running Generate Fast Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                   \r\n                }\r\n                else{\r\n                    if(FastStatCondition){\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateFastStatUsingBestfitLC']+BatchParams3 \r\n                        Log.Info('Running Generate System Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                    else{\r\n                        var SystemStatQuery='exec procedure '+BatchProcs['GenerateSystemStatUsingBestfitLC']+BatchParams3 \r\n                        Log.Info('Running Generate Fast Stat for Version :'+Version)\r\n                                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                        queryModule.select(SystemStatQuery)\r\n                    }\r\n                    \r\n                }\r\n                PopulateEndTime(Version,IType,'Generate System Stat')\r\n            }\r\n            if(save)\r\n                queryModule.select('save();');\r\n\r\n\r\n        }\r\n\r\n        if(Process=='Output Checks')\r\n        {\r\n            var OutputChecksQuery='exec procedure '+BatchProcs['OutputChecks']+BatchParams2 \r\n            Log.Info('Running Output Checks for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(OutputChecksQuery)\r\n        }\r\n\r\n        if(Process=='Identify Bestfit Algorithm')\r\n        {\r\n            condition=CheckCondition(Version,IType,'Ensemble')\r\n            if(condition){\r\n                var OutputChecksQuery='exec procedure '+BatchProcs['OutputChecks']+BatchParams2 \r\n                Log.Info('Running Output Checks for Version :'+Version)\r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(OutputChecksQuery)\r\n            }\r\n            var BestfitQuery='exec procedure '+BatchProcs['IdentifyBestfitModel']+BatchParams1 \r\n            Log.Info('Running Identify Bestfit Model for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(BestfitQuery)\r\n            \r\n            if(condition){\r\n                var EnsembleQuery='exec procedure '+BatchProcs['EnsembleFit']+BatchParams1 \r\n                Log.Info('Running Ensemble Fit for Version :'+Version)\r\n                    Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n                queryModule.select(EnsembleQuery)\r\n            }\r\n\r\n            if(save)\r\n                queryModule.select('save();');\r\n\r\n        }\r\n        if(Process=='Populate Stat Fcst')\r\n        {\r\n            var PopulateStatQuery='exec procedure '+BatchProcs['PopulateBestFitForecast']+BatchParams3 \r\n            Log.Info('Running Populate Bestfit Forecast for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(PopulateStatQuery)\r\n            // var L1LagModel='EXEC plugin instance [DP220CalculateLagModelL1] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"5G\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n            // queryModule.select(L1LagModel)\r\n        }\r\n        if(Process=='Disaggregate Stat')\r\n        {\r\n            var DisaggregateQuery='exec procedure '+BatchProcs['DisaggregateStat']+BatchParams1 \r\n            if(CheckCondition(Version,IType,'FastStat'))\r\n                DisaggregateQuery='exec procedure o9DP0910DisaggregateFastStat'+BatchParams1\r\n            Log.Info('Running Disaggregate Stat for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(DisaggregateQuery)\r\n\r\n            if(save)\r\n                queryModule.select('save();');\r\n\r\n        }\r\n        if(Process=='Populate Lag Model')\r\n        {\r\n            var LagModelQuery='exec procedure '+BatchProcs['PopulateLagModel']+' {\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+Type+'\", \"Week\": true,\"Month\":false,\"PlanningMonth\":false, \"Quarter\":false,\"PlanningQuarter\":false,\"InputStream\":[\"'+InputStream+'\"]};'\r\n            Log.Info('Running Lag Model for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(LagModelQuery)\r\n        }\r\n        if(Process == 'Reconcile')\r\n        {\r\n            var ReconcileQuery='exec procedure '+BatchProcs['Reconciliation']+'{\"VersionName\" : \"'+Version+'\"};'\r\n            Log.Info('Running Reconciliation for Version :'+Version)\r\n            Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n            queryModule.select(ReconcileQuery)  \r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    var PopulateStartTime=function(Version,IType,Process){\r\n        \r\n        let StartQuery='cartesian Scope:([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) * [Process].[Process].['+Process+'] );Measure.[Stat Process Start Time]=now();end scope;'\r\n        queryModule.select(StartQuery)\r\n    }\r\n    var PopulateEndTime=function(Version,IType,Process){\r\n        \r\n        let EndQuery='cartesian Scope:([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) * [Process].[Process].['+Process+'] );Measure.[Stat Process End Time]=now();end scope;'\r\n        queryModule.select(EndQuery)\r\n    }\r\n\r\n    //Function that handles stat actuals refresh and generation\r\n    var GenerateStatActuals=function(Version,IType){\r\n\r\n        \r\n\r\n\r\n            var InputStream=IType.split('_')[1]\r\n            var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].['+IType+']);';\r\n            var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n            var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n            var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n\r\n            \r\n            ForecastIterationDatalist.forEach(function(ForecastIteration) {\r\n            Log.Info(\"ForecastIterationValue:\" +ForecastIteration )\r\n            if (ForecastIteration == 'FI-Default') {\r\n        \r\n                var MasterIterationScope = 'cartesian scope: (Version.[Version Name].['+Version+'] * &AllForecastIterationTypes.['+IType+'] * [Item].[Planning Item] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Region].[Planning Region] * [Location].[Location] * [Demand Domain].[Planning Demand Domain] * [PnL].[Planning PnL]);Measure.[Forecast Iteration Selection] = if (~isnull(Measure.['+AssortmentMeasure[InputStream]+'])) then \"FI-Default\" else null;end scope;';\r\n                queryModule.select(MasterIterationScope)\t\r\n            \r\n                    \r\n            }\r\n            else{\r\n                    \r\n                ScopeQuery = 'Select ([Version].[Version Name].['+Version+'] * &AllForecastIterationTypes.['+IType+']) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;'\r\n\r\n                var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n                var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n                var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n                var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n                var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n                var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n                var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n\r\n                var SelectionScope=`(Select ([Version].[Version Name].[${Version}] * [Forecast Iteration].[Forecast Iteration Type].[${IType}] * [Account].[${AccountScope}] * [Channel].[${ChannelScope}] * [Demand Domain].[${DemandDomainScope}] * [Item].[${ItemScope}] * [PnL].[${PnLScope}] * [Region].[${RegionScope}] * [Location].[${LocationScope}] ) on row, ({Measure.[Forecast Iteration Selection]}) on column).filter(Measure.[Forecast Iteration Selection] == \"${ForecastIteration}\");`\r\n\r\n                const SelectionCellset= cellsetModule.createCellSet(queryModule.select(SelectionScope));\r\n                var ItemList=SelectionCellset.attributeMembers('Item',ItemScope).map(function (item) {\r\n                    return item['Name'];\r\n                });\r\n                ItemList=ItemList.map(element => `\"${element}\"`)\r\n                var AccountList=SelectionCellset.attributeMembers('Account',AccountScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                AccountList=AccountList.map(element => `\"${element}\"`)\r\n                var ChannelList=SelectionCellset.attributeMembers('Channel',ChannelScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                ChannelList=ChannelList.map(element => `\"${element}\"`)\r\n                var RegionList=SelectionCellset.attributeMembers('Region',RegionScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                RegionList=RegionList.map(element => `\"${element}\"`)\r\n                var LocationList=SelectionCellset.attributeMembers('Location',LocationScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                LocationList=LocationList.map(element => `\"${element}\"`)\r\n                var PnLList=SelectionCellset.attributeMembers('PnL',PnLScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                PnLList=PnLList.map(element => `\"${element}\"`)\r\n                var DemandDomainList=SelectionCellset.attributeMembers('Demand Domain',DemandDomainScope).map(function (item) {\r\n                                return item['Name'];\r\n                            });\r\n                DemandDomainList=DemandDomainList.map(element => `\"${element}\"`)\r\n\r\n\r\n\r\n                var Scope = `cartesian scope: (Version.[Version Name].[${Version}] * [Forecast Iteration].[Forecast Iteration Type].[${IType}] * [Item].[${ItemScope}].filter(#.Name in {${ItemList}}).relatedmembers([Planning Item]) * [Account].[${AccountScope}].filter(#.Name in {${AccountList}}).relatedmembers([Planning Account]) * [Channel].[${ChannelScope}].filter(#.Name in {${ChannelList}}).relatedmembers([Planning Channel]) * [Region].[${RegionScope}].filter(#.Name in {${RegionList}}).relatedmembers([Planning Region]) * [Location].[${LocationScope}].filter(#.Name in {${LocationList}}).relatedmembers([Location]) * [Demand Domain].[${DemandDomainScope}].filter(#.Name in {${DemandDomainList}}).relatedmembers([Planning Demand Domain]) * [PnL].[${PnLScope}].filter(#.Name in {${PnLList}}).relatedmembers([Planning PnL]));Measure.[Forecast Iteration Selection] = if (~isnull(Measure.[${AssortmentMeasure[InputStream]}])) then \"${ForecastIteration}\" else null;end scope;`\r\n\r\n\r\n                queryModule.select(Scope)\r\n            }\r\n                \r\n            \r\n                var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+Version+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\": false};'\r\n                queryModule.select(createmember)\r\n                if(ForecastIteration == 'FI-PL'){\r\n                    Log.Info(\"Passed Iteration is FI PL \")\r\n                    var Preprocess = 'exec procedure o9DP013PreprocessPLScope{\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+IType+'\"};'\r\n                    Log.Info(\"PreprocessForPL :\"+Preprocess)\r\n                    queryModule.select(Preprocess)\r\n                }\r\n\r\n\r\n\r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n        \r\n                var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n               \r\n                PopulateStartTime(Version,IType,'Generate Stat Actuals')\r\n                queryModule.select(RunStatActual)\r\n                PopulateEndTime(Version,IType,'Generate Stat Actuals')\r\n                Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n     \r\n\t\t\t\tif(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t   var PostProcessPL = 'exec procedure o9DP014PostprocessPLScope {\"VersionName\" : [\"'+Version+'\"], \"ForecastIterationType\" : \"'+TypeData+'\"};'\r\n\t\t\t\t    queryModule.select(PostProcessPL)\r\n\t\t\t\t}\r\n\r\n\r\n\r\n                var BucketWeigtNull='scope:(&AllStatBuckets * &CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) );Measure.[Stat Bucket Weight]= NULL;end scope;'\r\n                \r\n\r\n                var DimCountNull='scope : (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}));Measure.[Account L1 Count] = NULL ;Measure.[Account L2 Count] = NULL ;Measure.[Account L3 Count] = NULL ;Measure.[Account L4 Count] = NULL ;Measure.[Actual At Version] = NULL ;Measure.[Channel L1 Count] = NULL ;Measure.[Channel L2 Count] = NULL ;Measure.[Demand Domain L1 Count] = NULL ;Measure.[Demand Domain L2 Count] = NULL ;Measure.[Demand Domain L3 Count] = NULL ;Measure.[Demand Domain L4 Count] = NULL ;Measure.[L1 Count] = NULL ;Measure.[L2 Count] = NULL ;Measure.[L3 Count] = NULL ;Measure.[L4 Count] = NULL ;Measure.[L5 Count] = NULL ;Measure.[L6 Count] = NULL ;Measure.[Location Country Count] = NULL ;Measure.[Location Region Count] = NULL;Measure.[Location Type Count] = NULL ;Measure.[Planning Account Count] = NULL ;Measure.[Planning Channel Count] = NULL ;Measure.[Planning Demand Domain Count] = NULL ;Measure.[Planning Item Count] = NULL ;Measure.[Planning Location Count] = NULL ;Measure.[Planning PnL Count] = NULL ;Measure.[Planning Region Count] = NULL ;Measure.[PnL L1 Count] = NULL ;Measure.[PnL L2 Count] = NULL ;Measure.[PnL L3 Count] = NULL ;Measure.[PnL L4 Count] = NULL ;Measure.[Region L1 Count] = NULL ;Measure.[Region L2 Count] = NULL ;Measure.[Region L3 Count] = NULL ;Measure.[Region L4 Count] = NULL ;Measure.[Reporting Location Count] = NULL ;Measure.[Stat Account Count] = NULL ;Measure.[Stat Channel Count] = NULL ;Measure.[Stat Demand Domain Count] = NULL ;Measure.[Stat Item Count] = NULL ;Measure.[Stat Location Count] = NULL ;Measure.[Stat PnL Count] = NULL ;Measure.[Stat Region Count] = NULL ;end scope ;'\r\n\r\n                var BucketWeight='Exec plugin instance [DP046PopulatePWDisaggProfile] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                var DimCount ='Exec plugin instance [DP051PopulateDimAttributeCount] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                var SliceAssocNull='delete data for model [860 Slice Association Stat] where {&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [870 Slice Association TL] where {&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [880 Slice Association PL] where {&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}),&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};'\r\n\r\n                var SliceAssoc='EXEC plugin instance [DP041PopulateSliceAssociation] for measures {[Trend Strength L1]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+Version+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                queryModule.select(BucketWeigtNull)\r\n                queryModule.select(DimCountNull)\r\n                queryModule.select(SliceAssocNull)    \r\n                queryModule.select(BucketWeight)\r\n                queryModule.select(DimCount)\r\n                PopulateStartTime(Version,IType,'Generate Slice Association')\r\n                queryModule.select(SliceAssoc)\r\n                PopulateEndTime(Version,IType,'Generate Slice Association')\r\n\r\n\r\n                // var AccuracyQuery='EXEC plugin instance [DP212CalculateRollOverAccuracyIteration] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']*[Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration])) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),(DriverMemory, \"10G\"), (DriverCores, 2), (NumExecutors, 3), (ExecutorMemory, \"3G\"), (ExecutorCores, 4),(\"SparkProfileConfig\", \"sliced_low\"),(DataTransferMode,\"csv\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n                \r\n                // PopulateStartTime(Version,IType,'Stat Accuracy Calculation')\r\n                // queryModule.select(AccuracyQuery)\r\n                // PopulateEndTime(Version,IType,'Stat Accuracy Calculation')  \r\n\r\n\r\n              \r\n          \r\n\r\n\r\n            })  \r\n    \r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    var PopulateMeasures=function(type,process,Iteration,value,Version)\r\n    {\r\n            \r\n        var queryModule=require('o9/data/query')\r\n        Log.Info(process+\" \"+type+\" Count: \"+value)\r\n        if(type==\"expect\")\r\n            {\r\n                var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Expected Output]='+value+'; end scope;'\r\n                queryModule.select(scopeQuery)\r\n            }\r\n        else if(type==\"actual\")\r\n            {\r\n                var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Actual Output]='+value+'; end scope;'\r\n                queryModule.select(scopeQuery)\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n  \r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n\r\n\r\n    const Grains ='[Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] * [Channel].[Stat Channel]'\r\n    \r\n\r\n\r\n\r\n    \r\n    var ExecuteProcesses = function(Version,IType,GenBucket,FullScope,Processes=StatProcesses,save=false){\r\n\r\n        var CompletedVersions=[]\r\n      \r\n        \r\n    \r\n       Version.forEach(Version => {\r\n        \r\n       \r\n            IterationType=IType.split('_');\r\n            InputStream = IterationType[1];\r\n            let Type=IterationType[0];\r\n\t\t    Log.Info('Input Stream :' +InputStream)\r\n\r\n            \r\n\r\n            \r\n            var CompletedProcesses=[]\r\n\r\n            if(FullScope){\r\n\r\n                \r\n                let deleteDashboard='delete data for model [400 Stat Process] where {&CWVAndScenarios.filter(#.Name in {\"'+Version+'\"}),[Forecast Iteration].[Forecast Iteration Type].filter(#.Name in {\"'+IType+'\"}).relatedmembers([Forecast Iteration])};'\r\n                queryModule.select(deleteDashboard)\r\n                var BatchStartQuery='Scope: ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) );Measure.[Stat Batch Start Time]=now();end scope;'\r\n\r\n                Log.Info('Populating Batch Start Time for Version :'+Version)\r\n                queryModule.select(BatchStartQuery)\r\n\r\n                let LastCycleQuery='Scope: (&CWVAndScenarios.filter(#.Name in {\"'+Version+'\"}) * [Forecast Iteration].[Forecast Iteration Type].filter(#.Name in {\"'+IType+'\"}).relatedmembers([Forecast Iteration]) * [Region].[Stat Region] * [Location].[Stat Location] * [Channel].[Stat Channel] * [PnL].[Stat PnL] * [Item].[Stat Item] * [Demand Domain].[Stat Demand Domain] * [Time].[Partial Week] * [Account].[Stat Account] );Measure.[Stat Fcst L1 LC]=Measure.[Stat Fcst L1];end scope;'\r\n                queryModule.select(LastCycleQuery)\r\n             \r\n            }\r\n\r\n            \r\n            Processes.forEach(Process => {\r\n                Log.Info('Completed Versions :'+CompletedVersions.toString()  + ', Completed Processes :'+CompletedProcesses.toString())\r\n                Log.Info('Current Version :'+Version  + ', Current Process :'+Process)\r\n               \r\n\r\n                ProcessProcesses(Process,Version,IType,GenBucket,save)\r\n                \r\n                FlagQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) ) ; Measure.[Stat Process Flag]=if(~isnull(Measure.[Stat Process Expected Output])) then 1;end scope;'\r\n                queryModule.select(FlagQ)\r\n    \r\n                //Populate Process Status\r\n                ProcessQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] *  [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration])  ) ; Measure.[Stat Process Status]=if(Measure.[Actual vs Expected Stat Process Output Gap %]<0.05 && Measure.[Actual vs Expected Stat Process Output Gap %]>=0) then 1; end scope;'\r\n                queryModule.select(ProcessQ)\r\n\r\n\r\n                var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].filter(#.Name startswith(['+IType+'])));';\r\n                var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n                var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n                var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n                    return item['Name'];\r\n                 });\r\n                ForecastIterationDatalist.forEach(Iteration=>{\r\n                                  \r\n                    var HistoryQuery='Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[History Period]}) on column;'\r\n                    var HistroyPeriod=ExtractMeasure(HistoryQuery,'History Period')\r\n                    var HistoryNamedset='[Time].[Week].filter(#.Key<&CurrentWeek.element(0).Key && #.Key>=&CurrentWeek.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                    if(GenBucket==\"Week\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Week].filter(#.Key<&CurrentWeek.element(0).Key && #.Key>=&CurrentWeek.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Month\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Month].filter(#.Key<&CurrentMonth.element(0).Key && #.Key>=&CurrentMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Month\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Planning Month].filter(#.Key<&CurrentPlanningMonth.element(0).Key && #.Key>=&CurrentPlanningMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Quarter\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Quarter].filter(#.Key<&CurrentQuarter.element(0).Key && #.Key>=&CurrentQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Quarter\")\r\n                        {\r\n                            HistoryNamedset='[Time].[Planning Quarter].filter(#.Key<&CurrentPlanningQuarter.element(0).Key && #.Key>=&CurrentPlanningQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                        }\r\n                    let SummaryQueries= {\r\n                    \"Generate Stat Actuals\":{query:'Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) on row, ({Measure.[Stat Actual]}) on column;'},\r\n                    \"Stat Actuals\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Stat Actual]>0}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Slice Association\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Slice Association Stat])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Segmentation\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[PLC Status L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Seasonality Detection\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Seasonality L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Outlier Cleansing\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Actual Cleansed])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate Assigned Rules\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Assigned Algorithm List])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Generate System Stat\":{\r\n                            expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                            \r\n                            disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                            nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                            query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Time])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n\r\n                        \r\n                        },\r\n                    \"Identify Bestfit Algorithm\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Bestfit Algorithm])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Populate Stat Fcst\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Stat Fcst L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"Populate Analysis Cockpit\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Count])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'},\r\n                    \"PL Count Validation\":{\r\n                        query:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL])} ) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']}; ',\r\n                        \r\n                        expect:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n            \r\n                    \"TL Count Validation\":{\r\n                \r\n                        query:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst TL])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        expect:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"Stat Accuracy Calculation\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"Planning Accuracy Calculation\":{\r\n                        expect:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"CML Count Validation\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst CML])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    },\r\n                    \"Ensemble Count Validation\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                        actual:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst Ensemble])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    }\r\n                \r\n                    }\r\n\r\n\r\n                if(Process=='Generate Stat Actuals')\r\n                {\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query,'Stat Actual'),Version)\r\n                    let ExpectQuery='Select ([Version].[Version Name].['+Version+']  ) on row,({Measure.[Stat Actual L0],Measure.[Forecast Iteration Selection]}) on column where {Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"};'\r\n                    PopulateMeasures('expect',Process,Iteration,ExtractMeasure(ExpectQuery,'Stat Actual L0'),Version)\r\n                     \r\n                    ExpectQuery='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                    PopulateMeasures('expect','Generate Slice Association',Iteration,ExtractMeasure(ExpectQuery),Version)\r\n                    PopulateMeasures('actual','Generate Slice Association',Iteration,ExtractMeasure(SummaryQueries['Generate Slice Association'].query),Version)\r\n                }\r\n                if(Process=='Generate Segmentation'){\r\n                    condition=CheckCondition(Version,IType,'ML')\r\n                    if(condition){\r\n                        PopulateMeasures('expect',Process,Iteration,'0',Version)\r\n                        PopulateMeasures('actual',Process,Iteration,'0',Version)\r\n                        PopulateMeasures('expect','Seasonality Detection',Iteration,'0',Version)\r\n                        PopulateMeasures('actual','Seasonality Detection',Iteration,'0',Version)    \r\n                    return;\r\n                    }\r\n                    \r\n                    let ExpectQuery=SummaryQueries['Stat Actuals'].query\r\n                    PopulateMeasures('expect',Process,Iteration,ExtractMeasure(ExpectQuery),Version)\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect','Seasonality Detection',Iteration,ExtractMeasure(SummaryQueries['Seasonality Detection'].query),Version)\r\n                    PopulateMeasures('actual','Seasonality Detection',Iteration,ExtractMeasure(SummaryQueries['Seasonality Detection'].query),Version)\r\n\r\n                }\r\n        \r\n               \r\n                if(Process=='Generate Assigned Rules'||Process=='Generate Outlier Cleansing'){\r\n                    condition=CheckCondition(Version,IType,'ML')\r\n                    if(condition){\r\n                        PopulateMeasures('expect',Process,Iteration,'0',Version)\r\n                        PopulateMeasures('actual',Process,Iteration,'0',Version)  \r\n                    return;\r\n                    }\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExtractMeasure(SummaryQueries['Stat Actuals'].query),Version)\r\n\r\n                }\r\n                if(Process=='Generate System Stat'){\r\n\r\n                    var CMLExpect=0;\r\n                    var CMLActual=0;\r\n                    \r\n                    if(CheckCondition(Version,IType,'GenML')){\r\n                        CMLExpect=ExtractMeasure(SummaryQueries['CML Count Validation'].expect)\r\n                        CMLActual=ExtractMeasure(SummaryQueries['CML Count Validation'].actual)\r\n\r\n                    }\r\n                    \r\n\r\n\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries[Process].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries[Process].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries[Process].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries[Process].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n                    \r\n                    PopulateMeasures('actual',Process,Iteration,ActualValue,Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    PopulateMeasures('expect','Generate CML Fcst',Iteration,CMLExpect-noStatIntersections,Version)\r\n                    PopulateMeasures('actual','Generate CML Fcst',Iteration,CMLActual-noStatIntersections,Version)\r\n                   \r\n\r\n                }\r\n                if(Process=='Identify Bestfit Algorithm'){\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries['Generate System Stat'].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries['Generate System Stat'].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries['Generate System Stat'].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries['Generate System Stat'].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    PopulateMeasures('actual','Populate Analysis Cockpit',Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect','Populate Analysis Cockpit',Iteration,ExpectValue,Version)\r\n\r\n                }\r\n                if(Process=='Populate Stat Fcst'){\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries['Generate System Stat'].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries['Generate System Stat'].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries['Generate System Stat'].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries['Generate System Stat'].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n                    var EnsembleExpect=0;\r\n                    var EnsembleActual=0;\r\n                    if(CheckCondition(Version,IType,'Ensemble')){\r\n                        EnsembleExpect=ExtractMeasure(SummaryQueries['Ensemble Count Validation'].expect)\r\n                        EnsembleActual=ExtractMeasure(SummaryQueries['Ensemble Count Validation'].actual)\r\n                    }\r\n                    if(EnsembleActual!=EnsembleExpect)\r\n                        if(EnsembleActual+DiscoValue==EnsembleExpect)\r\n                            EnsembleExpect=EnsembleActual   \r\n                    PopulateMeasures('expect','Generate Ensemble Fcst',Iteration,EnsembleExpect-noStatIntersections,Version)\r\n                    PopulateMeasures('actual','Generate Ensemble Fcst',Iteration,EnsembleActual-noStatIntersections,Version)\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    \r\n                }\r\n                if(Process=='Populate Analysis Cockpit'){\r\n                    let CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n\r\n                    let CMLCount=ExtractMeasure(CMLIntersections)\r\n                    let DiscoValue=ExtractMeasure(SummaryQueries['Generate System Stat'].disco)\r\n                    let noStatIntersections=ExtractMeasure(SummaryQueries['Generate System Stat'].nostat)\r\n                    let ExpectValue=ExtractMeasure(SummaryQueries['Generate System Stat'].expect)-noStatIntersections\r\n                    let ActualValue=ExtractMeasure(SummaryQueries['Generate System Stat'].query)+CMLCount\r\n                    if(ActualValue!=ExpectValue)\r\n                        if(ActualValue+DiscoValue==ExpectValue)\r\n                            ExpectValue=ActualValue   \r\n\r\n                    PopulateMeasures('actual',Process,Iteration,ExtractMeasure(SummaryQueries[Process].query),Version)\r\n                    PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                    \r\n                }\r\n\r\n                \r\n                if(Process=='Accuracy Calculation')\r\n                {\r\n                    PopulateMeasures('actual','Stat Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Stat Accuracy Calculation'].actual),Version)\r\n                    PopulateMeasures('expect','Stat Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Stat Accuracy Calculation'].expect),Version)\r\n                    PopulateMeasures('actual','Planning Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Planning Accuracy Calculation'].actual),Version)\r\n                    PopulateMeasures('expect','Planning Accuracy Calculation',Iteration,ExtractMeasure(SummaryQueries['Planning Accuracy Calculation'].expect),Version)\r\n               \r\n                }\r\n                if(Process=='Disaggregate Stat'){\r\n\r\n                    var FutureNamedSet='&CurrentandFuturePartialWeeks'\r\n                    if(GenBucket==\"Week\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Week].filter(#.Key>=&CurrentWeek.element(0).Key )'\r\n                        }\r\n                    if(GenBucket==\"Month\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Month].filter(#.Key>=&CurrentMonth.element(0).Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Month\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Planning Month].filter(#.Key>=&CurrentPlanningMonth.element(0).Key)'\r\n                        }\r\n                    if(GenBucket==\"Quarter\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Quarter].filter(#.Key>=&CurrentQuarter.element(0).Key)'\r\n                        }\r\n                    if(GenBucket==\"Planning Quarter\")\r\n                        {\r\n                            FutureNamedSet='[Time].[Planning Quarter].filter(#.Key>=&CurrentPlanningQuarter.element(0).Key)'\r\n                        }\r\n\r\n                    var DisagIntersections=0\r\n                    var VolumeActual=0\r\n                    var VolumeExpect=0\r\n                    var TLVolumeActual=0\r\n                    var DisagType=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Disaggregation Type]}) on column;','Disaggregation Type')\r\n        \r\n        \r\n                    if(DisagType==\"No Forecast\")\r\n                        {\r\n                        DisagIntersections=DisagIntersections+ExtractMeasure('Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&&Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration Type].['+IterationType+']};')\r\n                        \r\n                        }\r\n                        else\r\n                        {\r\n                            VolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst PL]}) on column;','Stat Fcst PL')\r\n                            VolumeExpect=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst L1]}) on column where {'+FutureNamedSet+'};','Stat Fcst L1')\r\n                            TLVolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst TL]}) on column where {'+FutureNamedSet+'};','Stat Fcst TL')\r\n                        }  \r\n\r\n                        var Dims=['Item','Account','Channel','Region','Location','PnL','Demand Domain']\r\n                        var Levels={}\r\n                        Dims.forEach(element=>{\r\n                        var query='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] * ['+element+'].[Planning '+element+']) on row,({Measure.['+element+' Level]}) on column;'\r\n                        Levels[element]=ExtractMeasure(query,element+' Level')\r\n                        })  \r\n            \r\n                        var noStatQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Location].[Stat Location] * [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] ) on row, ({Measure.[Assigned Algorithm List]}) on column where {Measure.[Assigned Algorithm List] contains \"No Forecast\"};'\r\n                        var items={}\r\n                        var nostatCellset=cellsetModule.createCellSet(queryModule.select(noStatQuery))\r\n                        Dims.forEach(element=>{\r\n                            items[element]=[]   \r\n                            for(var j=0;j<nostatCellset.rowCount;j++)\r\n                                {\r\n                                    items[element].push(nostatCellset.row(j).cell(nostatCellset.memberColumnIndex(element,'Stat '+element)).Name)\r\n                                }\r\n                            items[element]=itemize(items[element])\r\n                        })\r\n            \r\n                        var nostatPLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Planning Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Planning Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst PL]}) on column).filter(isnull(Measure.[Stat Fcst PL]));'\r\n                        var nostatPLCellSet=cellsetModule.createCellSet(queryModule.select(nostatPLQuery))\r\n                        var nostatPLcols=nostatPLCellSet.rowCount\r\n                        var nostatTLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Transition Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Transition Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst TL]}) on column).filter(isnull(Measure.[Stat Fcst TL]));'\r\n                        var nostatTLCellSet=cellsetModule.createCellSet(queryModule.select(nostatTLQuery))\r\n                        var nostatTLcols=nostatTLCellSet.rowCount\r\n                        \r\n                        Log.Info('NoStat PL: '+nostatPLcols+' NoStat TL: '+nostatTLcols)\r\n\r\n                        PopulateMeasures('actual','PL Volume Loss Validation',Iteration,VolumeActual,Version)\r\n                        PopulateMeasures('expect','PL Volume Loss Validation',Iteration,VolumeExpect,Version)\r\n                        PopulateMeasures('actual','TL Volume Loss Validation',Iteration,TLVolumeActual,Version)\r\n                        PopulateMeasures('expect','TL Volume Loss Validation',Iteration,VolumeExpect,Version)\r\n\r\n\r\n                        ActualValue=ExtractMeasure(SummaryQueries['PL Count Validation'].query)\r\n                        ExpectValue=ExtractMeasure(SummaryQueries['PL Count Validation'].expect)\r\n                        if(ActualValue+DisagIntersections+nostatPLcols==ExpectValue)\r\n                        ExpectValue=ActualValue\r\n                        else\r\n                        ExpectValue=ExpectValue-nostatPLcols\r\n                        PopulateMeasures('actual','PL Count Validation',Iteration,ActualValue,Version)\r\n                        let finalCount=ActualValue\r\n                        PopulateMeasures('expect','PL Count Validation',Iteration,ExpectValue,Version)\r\n\r\n                        ActualValue=ExtractMeasure(SummaryQueries['TL Count Validation'].query)\r\n                        ExpectValue=ExtractMeasure(SummaryQueries['TL Count Validation'].expect)\r\n                        if(ActualValue+DisagIntersections+nostatTLcols==ExpectValue)\r\n                            ExpectValue=ActualValue\r\n                        else\r\n                        ExpectValue=ExpectValue-nostatTLcols\r\n                        PopulateMeasures('actual','TL Count Validation',Iteration,ActualValue,Version)\r\n                        PopulateMeasures('expect','TL Count Validation',Iteration,ExpectValue,Version)\r\n\r\n                        PopulateMeasures('expect',Process,Iteration,ExpectValue,Version)\r\n                        PopulateMeasures('actual',Process,Iteration,finalCount,Version)\r\n\r\n  \r\n                    \r\n                }\r\n                \r\n\r\n                FlagQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Flag]=if(~isnull(Measure.[Stat Process Expected Output])) then 1;end scope;'\r\n                queryModule.select(FlagQ)\r\n    \r\n                //Populate Process Status\r\n                ProcessQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+Process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Status]=if(Measure.[Actual vs Expected Stat Process Output Gap %]<0.05 && Measure.[Actual vs Expected Stat Process Output Gap %]>=0) then 1; end scope;'\r\n                queryModule.select(ProcessQ)\r\n\r\n\r\n                })\r\n                \r\n                \r\n            \r\n                CompletedProcesses.push(Process)\r\n\r\n            })\r\n            \r\n\r\n            if(FullScope){\r\n                \r\n                \r\n                \r\n                var BatchEndQuery='Scope: ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration Type].['+IType+'].relatedmembers([Forecast Iteration]) );Measure.[Stat Batch End Time]=now();end scope;'\r\n\r\n                Log.Info('Populating Batch Start Time for Version :'+Version)\r\n                queryModule.select(BatchEndQuery)\r\n            \r\n            \r\n            \r\n            }\r\n            \r\n\r\n            CompletedVersions.push(Version)\r\n       })\r\n       \r\n       \r\n\r\n    }\r\n\r\n\r\n\r\n    var RunBatch = function(o9Params){\r\n\r\n        parsedParams = JSON.parse(o9Params)\r\n        var VersionName=parsedParams.VersionName\r\n        var Types=parsedParams.ForecastIterationType\r\n        var Cycles=parsedParams.PlanningCycles;\r\n        var ExecutionMode=parsedParams.ExecutionMode\r\n        var save=parsedParams.Save\r\n\r\n\r\n        CompletedCycles=[]\r\n\r\n        if(ExecutionMode=='Prod')\r\n        {\r\n            {\r\n                var UserProcesses=parsedParams.StatProcesses\r\n                if (UserProcesses.includes('Forecast Reconciliation')) {\r\n                    UserProcesses = UserProcesses.filter(process => process !== 'Forecast Reconciliation');\r\n                    UserProcesses.push('Reconcile')\r\n                }\r\n\r\n                if (UserProcesses.includes('Stat Accuracy Calculation') || UserProcesses.includes('Planning Accuracy Calculation')) {\r\n                    UserProcesses = UserProcesses.filter(process => process !== 'Stat Accuracy Calculation' && process !== 'Planning Accuracy Calculation');\r\n                    UserProcesses.unshift('Accuracy Calculation');\r\n                }\r\n                Types.forEach(Type=>{\r\n                    var Query='Select (&CWV * [Forecast Iteration].[Forecast Iteration Type].['+Type+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n                    var Cellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n                    var GenBucket=Cellset.row(0).cell(Cellset.measureColumnIndex('Forecast Generation Time Bucket'))\r\n                    Log.Info(\"TEST : EXECUTING SPECIFIC PROCESSES\")\r\n                    \r\n                ExecuteProcesses(VersionName,Type,GenBucket,false,UserProcesses)\r\n                })\r\n            }\r\n        }\r\n        else{\r\n\r\n                var ShortCycles={}\r\n                var MidCycles={}\r\n                var LongCycles={}\r\n                var VeryShortCycles={}\r\n                var VeryLongCycles={}\r\n\r\n                var InputStreams=[]\r\n                Types.forEach(IterationType=>{\r\n                    let InputStream=IterationType.split('_')[1];\r\n                    if (!InputStreams.includes(InputStream)) {\r\n                        InputStreams.push(InputStream);\r\n                    }\r\n                    ShortCycles[InputStream] = [];\r\n                    MidCycles[InputStream] = [];\r\n                    LongCycles[InputStream] = [];\r\n                    VeryShortCycles[InputStream] = [];\r\n                    VeryLongCycles[InputStream] = [];\r\n\r\n                })\r\n\r\n            \r\n                var WTimeQuery='Select( [Time].[Week].filter(#.Key>&CurrentWeek.element(0).leadoffset(-6).Key && #.Key<=&CurrentWeek.element(0).leadoffset(6).Key));'\r\n                var MTimeQuery='Select( [Time].[Month].filter(#.Key>&CurrentMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentMonth.element(0).leadoffset(6).Key));'\r\n                var PMTimeQuery='Select( [Time].[Planning Month].filter(#.Key>&CurrentPlanningMonth.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningMonth.element(0).leadoffset(6).Key));'\r\n                var QTimeQuery='Select( [Time].[Quarter].filter(#.Key>&CurrentQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentQuarter.element(0).leadoffset(6).Key));'\r\n                var PQTimeQuery='Select( [Time].[Planning Quarter].filter(#.Key>&CurrentPlanningQuarter.element(0).leadoffset(-6).Key && #.Key<=&CurrentPlanningQuarter.element(0).leadoffset(6).Key));'\r\n                \r\n               \r\n                Types.forEach(IterationType=>{\r\n                    let InputStream=IterationType.split('_')[1];\r\n               \r\n\r\n                    var Query='Select (&CWV * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n                    var Cellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n                    var GenBucket=Cellset.row(0).cell(Cellset.measureColumnIndex('Forecast Generation Time Bucket'))\r\n\r\n                    var TimeCellset=[]\r\n                    if(GenBucket=='Week')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(WTimeQuery))\r\n                    if(GenBucket=='Month')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(MTimeQuery))\r\n                    if(GenBucket=='Planning Month')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(PMTimeQuery))\r\n                    if(GenBucket=='Quarter')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(QTimeQuery))\r\n                    if(GenBucket=='Planning Quarter')\r\n                        TimeCellset=cellsetModule.createCellSet(queryModule.select(PQTimeQuery))\r\n\r\n                    var TypeCycles=TimeCellset.attributeMembers(\"Time\",GenBucket).map(function (item) {\r\n                        return 'todatetime(\"'+item['Key']+'\")';\r\n                        })\r\n                    \r\n                    var CyclesQuery='Select([Time].[Day].filter(#.Key in {'+TypeCycles+'}));'\r\n                    var CyclesCellset=cellsetModule.createCellSet(queryModule.select(CyclesQuery))\r\n                    TypeCycles=CyclesCellset.attributeMembers(\"Time\",\"Day\").map(function (item) {\r\n                        return item['Name'];\r\n                        })\r\n\r\n                    \r\n                    Log.Info('Cycles for '+IterationType+' :'+TypeCycles)   \r\n                    if(IterationType.includes('Very Short'))\r\n                        VeryShortCycles[InputStream]=[...VeryShortCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Short'))\r\n                        ShortCycles[InputStream]=[...ShortCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Mid'))\r\n                        MidCycles[InputStream]=[...MidCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Very Long'))\r\n                        VeryLongCycles[InputStream]=[...VeryLongCycles[InputStream],...TypeCycles]\r\n                    else if(IterationType.includes('Long'))\r\n                        LongCycles[InputStream]=[...LongCycles[InputStream],...TypeCycles]   \r\n             \r\n                    \r\n                })\r\n\r\n            var STCycles={}    \r\n            var MTCycles ={}\r\n            var LTCycles ={}\r\n            var VSTCycles ={}\r\n            var VLTCycles ={}\r\n\r\n\r\n            \r\n\r\n            InputStreams.forEach(InputStream=>{\r\n              \r\n    \r\n            \r\n            \r\n            STCycles[InputStream] =[...new Set(Cycles.filter(item => ShortCycles[InputStream].includes(item)))];\r\n        \r\n            MTCycles[InputStream]= [...new Set(Cycles.filter(item => MidCycles[InputStream].includes(item)))];\r\n            \r\n            LTCycles[InputStream] = [...new Set(Cycles.filter(item => LongCycles[InputStream].includes(item)))];\r\n\r\n            VSTCycles[InputStream] = [...new Set(Cycles.filter(item => VeryShortCycles[InputStream].includes(item)))];\r\n            VLTCycles[InputStream] = [...new Set(Cycles.filter(item => VeryLongCycles[InputStream].includes(item)))];\r\n            })\r\n\r\n            Log.Info('Selected Cycles :'+JSON.stringify(Cycles))\r\n            Log.Info('Short Term Cycles :'+JSON.stringify(STCycles))\t\r\n            Log.Info('Mid Term Cycles :'+JSON.stringify(MTCycles))\r\n            Log.Info('Long Term Cycles :'+JSON.stringify(LTCycles))\r\n            Log.Info('Very Short Term Cycles :'+JSON.stringify(VSTCycles))\r\n            Log.Info('Very Long Term Cycles :'+JSON.stringify(VLTCycles))\r\n\r\n\r\n            Cycles.sort((a, b) => new Date(a) - new Date(b));\r\n            var Recon=false;\r\n            VersionName.forEach(Version=>{\r\n                InputStreams.forEach(InputStream=>{\r\n                    var Iterations=[]\r\n                    Types.forEach(Type=>{\r\n                        if(Type.includes(InputStream))\r\n                            Iterations=[...Iterations,Type]\r\n                    })\r\n                    var ReconListQuery=\"Select([Version].[Version Name].[\"+Version+\"]*[Data Stream].[Data Stream Type].[\"+InputStream+\"] ) on row,({Measure.[Forecast Reconciliation]}) on column;\"        \r\n                    var ReconListCellSet=cellsetModule.createCellSet(queryModule.select(ReconListQuery))\r\n                    var ReconList=ReconListCellSet.row(0).cell(ReconListCellSet.measureColumnIndex('Forecast Reconciliation'))\r\n                    ReconList=ReconList.split(',')\r\n\r\n                    if(ReconList.every(item => Iterations.includes(item)))\r\n                        Recon=true;\r\n\r\n                })\r\n\r\n            })\r\n\r\n            \r\n            \r\n            while(Cycles.length>0)\r\n            {\r\n\r\n\r\n                Log.Info(\"Completed Cycles: \"+ CompletedCycles.toString())\r\n                Log.Info(\"Remaining Cycles: \"+ Cycles.toString())\r\n                \r\n                let CurrentCycle=Cycles.shift()\r\n                Log.Info('Current Cycle :'+CurrentCycle)\r\n                \r\n                var UpdateTimeQuery='updatemember(Time.[Day]= {,\"'+CurrentCycle+'\" }, Time.[Day$IsCurrent]= {\"true\",});'\r\n                    \r\n\r\n                if(save){\r\n                    queryModule.select('save();')\r\n                    queryModule.select('disable plan;')\r\n                    queryModule.update(UpdateTimeQuery)\r\n                    queryModule.select('enable plan;')\r\n                }\r\n                else\r\n                queryModule.update(UpdateTimeQuery)\r\n               \r\n\r\n                \r\n                // var HistoryQuery='exec procedure '+BatchProcs['PopulateHistory']+';'\r\n                // queryModule.select(HistoryQuery)\r\n\r\n                // var DailyRefreshQuery='exec procedure '+BatchProcs['DailyRefresh']+';' \r\n                // queryModule.select(DailyRefreshQuery)\r\n\r\n               \r\n                \r\n                Types.forEach(IterationType=>{\r\n\r\n                            var Query='Select (&CWV * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+']) on row,({Measure.[Forecast Generation Time Bucket]}) on column;'\r\n                            var Cellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n                            var GenBucket=Cellset.row(0).cell(Cellset.measureColumnIndex('Forecast Generation Time Bucket'))\r\n\r\n\r\n                            Stream=IterationType.split('_')[1]\r\n                            Type=IterationType.split('_')[0]\r\n\r\n                            if(Type.includes('Very Short'))\r\n                            {\r\n                                if(VSTCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                            }\r\n                            else if(Type.includes('Very Long'))\r\n                            {\r\n                                if(VLTCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                            }\r\n                            else if(Type.includes('Short'))\r\n                            {\r\n                                if(STCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                            }\r\n                            else if(Type.includes('Mid'))\r\n                            {\r\n                                if(MTCycles[Stream].includes(CurrentCycle))\r\n                                {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                }\r\n                                }\r\n                            else if(Type.includes('Long'))\r\n                                {\r\n                                    if(LTCycles[Stream].includes(CurrentCycle))\r\n                                    {\r\n                                    ExecuteProcesses(VersionName,IterationType,GenBucket,true)\r\n                                    }\r\n                                }\r\n\r\n                        })\r\n\r\n\r\n                \r\n                VersionName.forEach(Version=>{\r\n\r\n\r\n\r\n                    \r\n\r\n\r\n                    if(Recon)\r\n                        {\r\n                            \r\n                    \r\n                                var PlanningLevelAccQuery='EXEC plugin instance [DP213CalculateRollOverAccuracy] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"5G\"),(\"Lags\",\"0,1\"),(DataTransferMode,\"csv\"),([Param.o9_sys_log_level], \"INFO\"),(TimeLevel, \"Week\")};';\r\n                                Types.forEach(Type=>{\r\n                                PopulateStartTime(Version,Type,'Planning Accuracy Calculation')\r\n                                })\r\n                                queryModule.select(PlanningLevelAccQuery)\r\n\r\n                   \r\n                            Types.forEach(Type=>{\r\n                                PopulateStartTime(Version,Type,'Forecast Reconciliation')\r\n                            })\r\n                           \r\n                            reconQuery='exec procedure '+BatchProcs['Reconciliation'] +'{\"VersionName\" : \"'+Version+'\"};'\r\n                            queryModule.select(reconQuery)\r\n                            Types.forEach(Type=>{\r\n\r\n                                let ExpectCount=cellsetModule.createCellSet(queryModule.select('Select (&CWVAndScenarios.['+Version+'] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Region].[Planning Region] * [Location].[Planning Location] ) on row,({Measure.[Actual]}) on column;'))\r\n                                var scopeQuery='cartesian scope: (&CWVAndScenarios.['+Version+']* [Process].[Process].[Forecast Reconciliation] * [Forecast Iteration].[Forecast Iteration Type].['+Type+'].relatedmembers([Forecast Iteration])); Measure.[Stat Process Expected Output]='+ExpectCount.rowCount+'; end scope;'\r\n                                queryModule.select(scopeQuery)\r\n                                let ActualCount=cellsetModule.createCellSet(queryModule.select('Select (&CWVAndScenarios.['+Version+'] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Region].[Planning Region] * [Location].[Planning Location] ) on row,({Measure.[Stat Fcst]}) on column;'))\r\n                                var scopeQuery='cartesian scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].[Forecast Reconciliation] * [Forecast Iteration].[Forecast Iteration Type].['+Type+'].relatedmembers([Forecast Iteration])); Measure.[Stat Process Actual Output]='+ActualCount.rowCount+'; end scope;'\r\n                                queryModule.select(scopeQuery)\r\n          \r\n                                PopulateEndTime(Version,Type,'Forecast Reconciliation')\r\n                           \r\n                  \r\n                           \r\n                            })\r\n\r\n\r\n                            var CalculatePLLagModel='EXEC plugin instance [DP221CalculateLagModel] for measures {[Actual Cleansed]} using scope (&CWVAndScenarios.['+Version+']) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"), (DriverMemory, \"5G\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n                            queryModule.select(CalculatePLLagModel)\r\n\r\n                           \r\n                        }\r\n                    \r\n        \r\n                \r\n                })\r\n                \r\n\r\n                CompletedCycles.push(CurrentCycle)\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\nreturn{\r\n        RunBatch:RunBatch\r\n    }\r\n})",
    "ModuleName": "o9.DemandPlanning.RunStatBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "76ce22f7-9c37-27a1-c167-4f6ced422125",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212920,
    "Description": "Validated if Stat Bucket Weight is created & populated using Time Bucket Setup",
    "Documentation": "define('o9.DemandPlanning.ValidateTimeBucketSetup',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\n    var itemize=function(item){\n        var itemdata=''+item+''\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\n        return itemdata\n    }\n     var validation = function(o9Params){\n     var parsedParams = JSON.parse(o9Params);\n     var queryModule = require('o9/data/query');\n     var cellsetModule = require('o9/data/cellset');\n \n     //Log method logs to the webapi log\n \n \tvar VersionInput = itemize(parsedParams.VersionName);\n \tvar Iteration=itemize(parsedParams.ForecastIteration);\n \tLog.Info(\"Proceeding to validate if Time Bucket Setup was done before this action... \");\n    var test=Iteration.map(i=>{\n    var queryForFactData = 'Select ([Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Time].[Partial Week] * [Forecast Iteration].[Forecast Iteration].filter(#.Name in{'+i+'})   ) on row, ({Measure.[Stat Bucket Weight]}) on column;';\n \n \tvar getFactData = queryModule.select(queryForFactData);\n \tvar FetchFactDataCount = cellsetModule.createCellSet(getFactData);\n \tLog.Info(\"Count of Rows returned for Stat Bucket Weight is \" + FetchFactDataCount.rowCount);\n \n  \tif (FetchFactDataCount.rowCount<1){\n         \n        Log.Error(\"VALIDATION ERROR : Stat Bucket Weight is empty. First configure the Time Bucket Setup in Common Admin as a precursor to Stat Workflow. Exiting...\");\n  \t  RuleOutputToUI =\n  \t  {\n  \t  Status: 'Error',\n  \t  Message: 'Time Bucket Setup has not been done for iteration \"'+i+'\"! Please check Common Admin -> Forecast Iteration Setup.'    \n  \t  };\n       \n       \n  }\n\n })\n     Log.Info(\"Validation Complete\");\n \n     };\n     return {\n         validation : validation\n     };\n });",
    "Code": "define('o9.DemandPlanning.ValidateTimeBucketSetup',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\n    var itemize=function(item){\n        var itemdata=''+item+''\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\n        return itemdata\n    }\n     var validation = function(o9Params){\n     var parsedParams = JSON.parse(o9Params);\n     var queryModule = require('o9/data/query');\n     var cellsetModule = require('o9/data/cellset');\n \n     //Log method logs to the webapi log\n \n \tvar VersionInput = itemize(parsedParams.VersionName);\n \tvar Iteration=itemize(parsedParams.ForecastIteration);\n \tLog.Info(\"Proceeding to validate if Time Bucket Setup was done before this action... \");\n    var test=Iteration.map(i=>{\n    var queryForFactData = 'Select ([Version].[Version Name].filter(#.Name in{'+VersionInput+'}) * [Time].[Partial Week] * [Forecast Iteration].[Forecast Iteration].filter(#.Name in{'+i+'})   ) on row, ({Measure.[Stat Bucket Weight]}) on column;';\n \n \tvar getFactData = queryModule.select(queryForFactData);\n \tvar FetchFactDataCount = cellsetModule.createCellSet(getFactData);\n \tLog.Info(\"Count of Rows returned for Stat Bucket Weight is \" + FetchFactDataCount.rowCount);\n \n  \tif (FetchFactDataCount.rowCount<1){\n         \n        Log.Error(\"VALIDATION ERROR : Stat Bucket Weight is empty. First configure the Time Bucket Setup in Common Admin as a precursor to Stat Workflow. Exiting...\");\n  \t  RuleOutputToUI =\n  \t  {\n  \t  Status: 'Error',\n  \t  Message: 'Time Bucket Setup has not been done for iteration \"'+i+'\"! Please check Common Admin -> Forecast Iteration Setup.'    \n  \t  };\n       \n       \n  }\n\n })\n     Log.Info(\"Validation Complete\");\n \n     };\n     return {\n         validation : validation\n     };\n });",
    "ModuleName": "o9.DemandPlanning.ValidateTimeBucketSetup",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "54580fa1-3493-9461-c1ec-ec4a251e9c9c",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212921,
    "Description": "Disaggregate System Stat",
    "Documentation": "define('o9.DemandPlanning.DisaggregateStat',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    \r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n    \r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    var GetMembers=function(Query,Dimension){\r\n        \r\n        QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        var list = QueryCellset.attributeMembers(Dimension,'Planning '+Dimension).map(function (item) {\r\n                        var element= item['Name'];\r\n                        element = \"\\\"\"+element+\"\\\"\"\r\n                        return element\r\n                    });\r\n        return list\r\n\r\n    }\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    var DisaggregateStat  = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    \r\n    var VersionName = parsedParams.VersionName\r\n    var ForecastIteration=parsedParams.ForecastIteration\r\n    //Log method logs to the webapi log\r\n\r\n    var Item = itemize(parsedParams.Item)\r\n    var Account = itemize(parsedParams.Account)\r\n    var Channel = itemize(parsedParams.Channel)\r\n    var Region = itemize(parsedParams.Region)\r\n    var Location = itemize(parsedParams.Location)\r\n    var PnL = itemize(parsedParams.PnL)\r\n    var DemandDomain = itemize(parsedParams.DemandDomain)\r\n\r\n    var isBottomUp=parsedParams.IsBottomUp\r\n    var Type=parsedParams.Type\r\n    var MW = parsedParams.MediumWeight\r\n    \r\n    var LevelQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+']) on row, ({Measure.[Item Level], Measure.[Account Level], Measure.[Channel Level], Measure.[PnL Level], Measure.[Region Level], Measure.[Demand Domain Level], Measure.[Location Level]}) on column;'\r\n\r\n    var ItemLevel=ExtractMeasure(LevelQuery,'Item Level');\r\n    var AccountLevel=ExtractMeasure(LevelQuery,'Account Level');\r\n    var ChannelLevel=ExtractMeasure(LevelQuery,'Channel Level');\r\n    var RegionLevel=ExtractMeasure(LevelQuery,'Region Level');\r\n    var LocationLevel=ExtractMeasure(LevelQuery,'Location Level');\r\n    var PnLLevel=ExtractMeasure(LevelQuery,'PnL Level');\r\n    var DemandDomainLevel=ExtractMeasure(LevelQuery,'Demand Domain Level');\r\n   \r\n   \r\n   isBottomUp = (isBottomUp === 'true');\r\n  \r\n    if(isBottomUp)\r\n    {\r\n        Log.Info('ISBOTOMUP:'+isBottomUp)\r\n   \r\n        Query='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].[FI-PL] * [Region].['+RegionLevel+'].filter(#.Name in {'+Region.toString()+'}).relatedmembers([Planning Region]) * [Location].['+LocationLevel+'].filter(#.Name in {'+Location.toString()+'}).relatedmembers([Planning Location]) * [Channel].['+ChannelLevel+'].filter(#.Name in {'+Channel.toString()+'}).relatedmembers([Planning Channel]) * [PnL].['+PnLLevel+'].filter(#.Name in {'+PnL.toString()+'}).relatedmembers([Planning PnL]) * [Item].['+ItemLevel+'].filter(#.Name in {'+Item.toString()+'}).relatedmembers([Planning Item])* [Demand Domain].['+DemandDomainLevel+'].filter(#.Name in {'+DemandDomain.toString()+'}).relatedmembers([Planning Demand Domain]) * [Account].['+AccountLevel+'].filter(#.Name in {'+Account.toString()+'}).relatedmembers([Planning Account]) ) on row, ({Measure.[Stat Actual L0]}) on column;'\r\n        QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        if(QueryCellset.rowCount==0)\r\n        {\r\n            RuleOutputToUI = {Status: 'Error',Message:`Stat Fcst L1 for PL does not exist`};\r\n            return\r\n        }\r\n        \r\n        var PlanningItemList=GetMembers(Query,'Item')\r\n        \r\n        var PlanningAccountList=GetMembers(Query,'Account')\r\n        \r\n        var PlanningChannelList=GetMembers(Query,'Channel')\r\n        \r\n        var PlanningRegionList=GetMembers(Query,'Region')\r\n        \r\n        var PlanningLocationList=GetMembers(Query,'Location')\r\n        \r\n        var PlanningPnLList=GetMembers(Query,'PnL')\r\n        \r\n        var PlanningDemandDomainList=GetMembers(Query,'Demand Domain')\r\n\r\n        Item.push(...PlanningItemList);\r\n        Account.push(...PlanningAccountList);\r\n        Channel.push(...PlanningChannelList);\r\n        Region.push(...PlanningRegionList);\r\n        Location.push(...PlanningLocationList);\r\n        PnL.push(...PlanningPnLList);\r\n        DemandDomain.push(...PlanningDemandDomainList);\r\n\r\n        Log.Info(`Lists are as follows \\n Item : ${Item}\\n Account : ${Account}\\n Channel : ${Channel}\\n Region : ${Region}\\n Location : ${Location}\\n PnL : ${PnL}\\n DemandDomain : ${DemandDomain}`)\r\n        \r\n\r\n\r\n    } \r\n\r\n    DisagQuery='exec procedure o9DP0158DisaggregateStat {\"VersionName\" : [\"'+VersionName+'\"], \"Type\" : \"'+Type+'\",\"ForecastIteration\": \"'+ForecastIteration+'\",\"MediumWeight\" : '+MW+',\"BottomUp\":'+(isBottomUp ? \"true\" : \"false\") +',\"Item\":['+Item.toString()+'],\"ItemLevel\":\"'+ItemLevel+'\",\"Account\":['+Account.toString()+'],\"AccountLevel\":\"'+AccountLevel+'\",\"Channel\":['+Channel.toString()+'],\"ChannelLevel\":\"'+ChannelLevel+'\",\"Region\":['+Region.toString()+'],\"RegionLevel\":\"'+RegionLevel+'\",\"Location\":['+Location.toString()+'],\"LocationLevel\":\"'+LocationLevel+'\",\"PnL\":['+PnL.toString()+'],\"PnLLevel\":\"'+PnLLevel+'\",\"DemandDomain\":['+DemandDomain.toString()+'],\"DemandDomainLevel\":\"'+DemandDomainLevel+'\"};'\r\n\r\n    queryModule.select(DisagQuery)\r\n\r\n\r\n\r\n\r\n};\r\n    return {\r\n        DisaggregateStat : DisaggregateStat\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.DisaggregateStat',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    \r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n    \r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    var GetMembers=function(Query,Dimension){\r\n        \r\n        QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        var list = QueryCellset.attributeMembers(Dimension,'Planning '+Dimension).map(function (item) {\r\n                        var element= item['Name'];\r\n                        element = \"\\\"\"+element+\"\\\"\"\r\n                        return element\r\n                    });\r\n        return list\r\n\r\n    }\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    var DisaggregateStat  = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    \r\n    var VersionName = parsedParams.VersionName\r\n    var ForecastIteration=parsedParams.ForecastIteration\r\n    //Log method logs to the webapi log\r\n\r\n    var Item = itemize(parsedParams.Item)\r\n    var Account = itemize(parsedParams.Account)\r\n    var Channel = itemize(parsedParams.Channel)\r\n    var Region = itemize(parsedParams.Region)\r\n    var Location = itemize(parsedParams.Location)\r\n    var PnL = itemize(parsedParams.PnL)\r\n    var DemandDomain = itemize(parsedParams.DemandDomain)\r\n\r\n    var isBottomUp=parsedParams.IsBottomUp\r\n    var Type=parsedParams.Type\r\n    var MW = parsedParams.MediumWeight\r\n    \r\n    var LevelQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+']) on row, ({Measure.[Item Level], Measure.[Account Level], Measure.[Channel Level], Measure.[PnL Level], Measure.[Region Level], Measure.[Demand Domain Level], Measure.[Location Level]}) on column;'\r\n\r\n    var ItemLevel=ExtractMeasure(LevelQuery,'Item Level');\r\n    var AccountLevel=ExtractMeasure(LevelQuery,'Account Level');\r\n    var ChannelLevel=ExtractMeasure(LevelQuery,'Channel Level');\r\n    var RegionLevel=ExtractMeasure(LevelQuery,'Region Level');\r\n    var LocationLevel=ExtractMeasure(LevelQuery,'Location Level');\r\n    var PnLLevel=ExtractMeasure(LevelQuery,'PnL Level');\r\n    var DemandDomainLevel=ExtractMeasure(LevelQuery,'Demand Domain Level');\r\n   \r\n   \r\n   isBottomUp = (isBottomUp === 'true');\r\n  \r\n    if(isBottomUp)\r\n    {\r\n        Log.Info('ISBOTOMUP:'+isBottomUp)\r\n   \r\n        Query='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].[FI-PL] * [Region].['+RegionLevel+'].filter(#.Name in {'+Region.toString()+'}).relatedmembers([Planning Region]) * [Location].['+LocationLevel+'].filter(#.Name in {'+Location.toString()+'}).relatedmembers([Planning Location]) * [Channel].['+ChannelLevel+'].filter(#.Name in {'+Channel.toString()+'}).relatedmembers([Planning Channel]) * [PnL].['+PnLLevel+'].filter(#.Name in {'+PnL.toString()+'}).relatedmembers([Planning PnL]) * [Item].['+ItemLevel+'].filter(#.Name in {'+Item.toString()+'}).relatedmembers([Planning Item])* [Demand Domain].['+DemandDomainLevel+'].filter(#.Name in {'+DemandDomain.toString()+'}).relatedmembers([Planning Demand Domain]) * [Account].['+AccountLevel+'].filter(#.Name in {'+Account.toString()+'}).relatedmembers([Planning Account]) ) on row, ({Measure.[Stat Actual L0]}) on column;'\r\n        QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        if(QueryCellset.rowCount==0)\r\n        {\r\n            RuleOutputToUI = {Status: 'Error',Message:`Stat Fcst L1 for PL does not exist`};\r\n            return\r\n        }\r\n        \r\n        var PlanningItemList=GetMembers(Query,'Item')\r\n        \r\n        var PlanningAccountList=GetMembers(Query,'Account')\r\n        \r\n        var PlanningChannelList=GetMembers(Query,'Channel')\r\n        \r\n        var PlanningRegionList=GetMembers(Query,'Region')\r\n        \r\n        var PlanningLocationList=GetMembers(Query,'Location')\r\n        \r\n        var PlanningPnLList=GetMembers(Query,'PnL')\r\n        \r\n        var PlanningDemandDomainList=GetMembers(Query,'Demand Domain')\r\n\r\n        Item.push(...PlanningItemList);\r\n        Account.push(...PlanningAccountList);\r\n        Channel.push(...PlanningChannelList);\r\n        Region.push(...PlanningRegionList);\r\n        Location.push(...PlanningLocationList);\r\n        PnL.push(...PlanningPnLList);\r\n        DemandDomain.push(...PlanningDemandDomainList);\r\n\r\n        Log.Info(`Lists are as follows \\n Item : ${Item}\\n Account : ${Account}\\n Channel : ${Channel}\\n Region : ${Region}\\n Location : ${Location}\\n PnL : ${PnL}\\n DemandDomain : ${DemandDomain}`)\r\n        \r\n\r\n\r\n    } \r\n\r\n    DisagQuery='exec procedure o9DP0158DisaggregateStat {\"VersionName\" : [\"'+VersionName+'\"], \"Type\" : \"'+Type+'\",\"ForecastIteration\": \"'+ForecastIteration+'\",\"MediumWeight\" : '+MW+',\"BottomUp\":'+(isBottomUp ? \"true\" : \"false\") +',\"Item\":['+Item.toString()+'],\"ItemLevel\":\"'+ItemLevel+'\",\"Account\":['+Account.toString()+'],\"AccountLevel\":\"'+AccountLevel+'\",\"Channel\":['+Channel.toString()+'],\"ChannelLevel\":\"'+ChannelLevel+'\",\"Region\":['+Region.toString()+'],\"RegionLevel\":\"'+RegionLevel+'\",\"Location\":['+Location.toString()+'],\"LocationLevel\":\"'+LocationLevel+'\",\"PnL\":['+PnL.toString()+'],\"PnLLevel\":\"'+PnLLevel+'\",\"DemandDomain\":['+DemandDomain.toString()+'],\"DemandDomainLevel\":\"'+DemandDomainLevel+'\"};'\r\n\r\n    queryModule.select(DisagQuery)\r\n\r\n\r\n\r\n\r\n};\r\n    return {\r\n        DisaggregateStat : DisaggregateStat\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.DisaggregateStat",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "c9a50b12-16bd-07e4-122f-93ec7074c7cb",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212922,
    "Description": "populates Stat process summary measures",
    "Documentation": "define('o9.DemandPlanning.StatProcessSummary',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    var itemsplit=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\")\r\n        return itemdata\r\n    }\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n\r\n\r\n    var PopulateMeasures=function(type,process,Iteration,value,Version)\r\n        {\r\n                \r\n            var queryModule=require('o9/data/query')\r\n            Log.Info(process+\" \"+type+\" Count: \"+value)\r\n            if(type==\"expect\")\r\n                {\r\n                    var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Expected Output]='+value+'; end scope;'\r\n                    queryModule.select(scopeQuery)\r\n                }\r\n            else if(type==\"actual\")\r\n                {\r\n                    var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Actual Output]='+value+'; end scope;'\r\n                    queryModule.select(scopeQuery)\r\n                }\r\n\r\n        }\r\n\r\n    \r\n\r\n\r\n        \r\n    \r\n    var Summary=function(o9Params){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var FcstIteration=parsedParams.Iteration\r\n        var processesList=itemsplit(parsedParams.Processes)\r\n        var Version=parsedParams.VersionName\r\n\r\n        FcstIteration.forEach(Iteration => {\r\n                var Dims=['Item','Account','Channel','Region','Location','PnL','Demand Domain']\r\n            var Levels={}\r\n            Dims.forEach(element=>{\r\n            var query='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] * ['+element+'].[Planning '+element+']) on row,({Measure.['+element+' Level]}) on column;'\r\n            Levels[element]=ExtractMeasure(query,element+' Level')\r\n            })  \r\n\r\n            var noStatQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Location].[Stat Location] * [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] ) on row, ({Measure.[Assigned Algorithm List]}) on column where {Measure.[Assigned Algorithm List] contains \"No Forecast\"};'\r\n            var items={}\r\n            var nostatCellset=cellsetModule.createCellSet(queryModule.select(noStatQuery))\r\n            Dims.forEach(element=>{\r\n                items[element]=[]   \r\n                for(var j=0;j<nostatCellset.rowCount;j++)\r\n                    {\r\n                        items[element].push(nostatCellset.row(j).cell(nostatCellset.memberColumnIndex(element,'Stat '+element)).Name)\r\n                    }\r\n                items[element]=itemize(items[element])\r\n            })\r\n\r\n            var nostatPLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Planning Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Planning Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst PL]}) on column).filter(isnull(Measure.[Stat Fcst PL]));'\r\n            var nostatPLCellSet=cellsetModule.createCellSet(queryModule.select(nostatPLQuery))\r\n            var nostatPLcols=nostatPLCellSet.rowCount\r\n            var nostatTLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Transition Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Transition Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst TL]}) on column).filter(isnull(Measure.[Stat Fcst TL]));'\r\n            var nostatTLCellSet=cellsetModule.createCellSet(queryModule.select(nostatTLQuery))\r\n            var nostatTLcols=nostatTLCellSet.rowCount\r\n            \r\n            Log.Info('NoStat PL: '+nostatPLcols+' NoStat TL: '+nostatTLcols)\r\n\r\n\r\n\r\n\r\n\r\n            var IterationsQuery='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'].relatedmembers([Forecast Iteration Type]));'\r\n            var IterationCellset=cellsetModule.createCellSet(queryModule.select(IterationsQuery))\r\n            var IterationType=IterationCellset.row(0).cell(IterationCellset.memberColumnIndex('Forecast Iteration','Forecast Iteration Type')).Name;\r\n            var DisagType=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Disaggregation Type]}) on column;','Disaggregation Type')\r\n        \r\n            var HistoryQuery='Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[History Period], Measure.[Forecast Generation Time Bucket],Measure.[Forecast Period]}) on column;'\r\n            var HistroyPeriod=ExtractMeasure(HistoryQuery,'History Period')\r\n            var HistoryBucket=ExtractMeasure(HistoryQuery,'Forecast Generation Time Bucket')\r\n            var ForecastPeriod=ExtractMeasure(HistoryQuery,'Forecast Period')\r\n            var ForecastHorizon='[Time].[Week].filter(#.Key>=&CurrentWeek.element(0).Key && #.Key<&CurrentWeek.element(0).leadoffset(-'+ForecastPeriod+').Key)'\r\n            var HistoryNamedset='&Last36PlanningMonths'\r\n            var FutureNamedSet='&CurrentandFuturePartialWeeks'\r\n            if(HistoryBucket==\"Week\")\r\n                {\r\n                    HistoryNamedset='[Time].[Week].filter(#.Key<&CurrentWeek.element(0).Key && #.Key>=&CurrentWeek.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Month\")\r\n                {\r\n                    HistoryNamedset='[Time].[Month].filter(#.Key<&CurrentMonth.element(0).Key && #.Key>=&CurrentMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Month\")\r\n                {\r\n                    HistoryNamedset='[Time].[Planning Month].filter(#.Key<&CurrentPlanningMonth.element(0).Key && #.Key>=&CurrentPlanningMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Quarter\")\r\n                {\r\n                    HistoryNamedset='[Time].[Quarter].filter(#.Key<&CurrentQuarter.element(0).Key && #.Key>=&CurrentQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Quarter\")\r\n                {\r\n                    HistoryNamedset='[Time].[Planning Quarter].filter(#.Key<&CurrentPlanningQuarter.element(0).Key && #.Key>=&CurrentPlanningQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n                \r\n            if(HistoryBucket==\"Week\")\r\n                {\r\n                    FutureNamedSet='[Time].[Week].filter(#.Key>=&CurrentWeek.element(0).Key )'\r\n                }\r\n            if(HistoryBucket==\"Month\")\r\n                {\r\n                    FutureNamedSet='[Time].[Month].filter(#.Key>=&CurrentMonth.element(0).Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Month\")\r\n                {\r\n                    FutureNamedSet='[Time].[Planning Month].filter(#.Key>=&CurrentPlanningMonth.element(0).Key)'\r\n                }\r\n            if(HistoryBucket==\"Quarter\")\r\n                {\r\n                    FutureNamedSet='[Time].[Quarter].filter(#.Key>=&CurrentQuarter.element(0).Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Quarter\")\r\n                {\r\n                    FutureNamedSet='[Time].[Planning Quarter].filter(#.Key>=&CurrentPlanningQuarter.element(0).Key)'\r\n                }\r\n            \r\n            \r\n            var Grains ='[Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] * [Channel].[Stat Channel]'\r\n            var IType='Very Short Term'\r\n            if (IterationType.includes(\"Very Short Term\")) {\r\n                IType = \"Very Short Term\";\r\n            } else if( IterationType.includes(\"Short Term\")) {\r\n                IType = \"Short Term\";\r\n            }else if(IterationType.includes(\"Very Long Term\")) {\r\n                IType= \"Very Long Term\";\r\n            } else if (IterationType.includes(\"Mid Term\")) {\r\n                IType = \"Mid Term\";\r\n            } else if (IterationType.includes(\"Long Term\")) {\r\n                IType = \"Long Term\";\r\n            }\r\n\r\n\r\n\r\n\r\n            var BestfitNamedSet='[Item].[Segmentation LOB].filter(#.[Bestfit Flag '+IType+'] == 1)'\r\n            var BestfitLCNamedSet='[Item].[Segmentation LOB].filter(#.[Bestfit Flag '+IType+'] == 0)'\r\n            var NoLCBestfitNamedset='[Item].[Segmentation LOB].filter(isNull(#.[Bestfit Flag '+IType+']))'\r\n            var NoLCBestfitNamedsetquery='Select('+NoLCBestfitNamedset+');'\r\n            var NoLCBestfitCellset=cellsetModule.createCellSet(queryModule.select(NoLCBestfitNamedsetquery))\r\n            var CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n            \r\n            const Process= {\r\n                \"Generate Stat Actuals\":{query:'Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) on row, ({Measure.[Stat Actual]}) on column;',key:1},\r\n                \"Stat Actuals\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Stat Actual]>0}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:0},\r\n                \"Generate Slice Association\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Slice Association Stat])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:2},\r\n                \"Generate Segmentation\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[PLC Status L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:3},\r\n                \"Seasonality Detection\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Seasonality L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:4},\r\n                \"Generate Outlier Cleansing\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Actual Cleansed])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:5},\r\n                \"Generate Assigned Rules\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Assigned Algorithm List])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:6},\r\n                \"Generate System Stat\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n                        key:7,\r\n                        disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n                        nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n                        query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Time])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n\r\n                    \r\n                    },\r\n                \"Generate System Stat using Bestfit LC\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};',\r\n                        key:8,\r\n                        disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};',\r\n                        nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};',\r\n                        query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Time])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};'   \r\n                        },\r\n                \"Identify Bestfit Algorithm\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Bestfit Algorithm])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:9},\r\n                \"Populate Stat Fcst\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Stat Fcst L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:10},\r\n                \"Populate Analysis Cockpit\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Count])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:11},\r\n                \"PL Count Validation\":{\r\n                    query:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL])} ) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']}; ',\r\n                    key:12,\r\n                    expect:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                },\r\n                \"PL Volume Loss Validation\":{\r\n                    key:14,\r\n                },\r\n                \"TL Count Validation\":{\r\n                    key:13,\r\n                    query:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst TL])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    expect:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                },\r\n                \"TL Volume Loss Validation\":{\r\n                    key:15\r\n                },\r\n                \"Generate CML Fcst\":{\r\n\r\n                    key:16,\r\n                    query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst CML])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                    expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                    disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                   \r\n                },\r\n                \"Generate Ensemble Fcst\":{\r\n                    key:17,\r\n                    query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst Ensemble])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                    expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                \t\r\n                    disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                   \r\n                },\r\n                \"Disaggregate Stat\":{\r\n                    key:18\r\n\r\n                },\r\n                \"Forecast Reconciliation\":{\r\n                    expect:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+'};',\r\n                    query:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+'};',\r\n                    key:19\r\n                },\r\n                \"Stat Accuracy Calculation\":{\r\n                    expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    key:20\r\n                },\r\n                \"Planning Accuracy Calculation\":{\r\n                    expect:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    query:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    key:21\r\n                }\r\n\r\n\r\n\r\n            \r\n            }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n            \r\n        \r\n            \r\n            var DisagIntersections=0\r\n            var VolumeActual=0\r\n            var VolumeExpect=0\r\n            var TLVolumeActual=0\r\n\r\n            if(DisagType==\"No Forecast\")\r\n                {\r\n                DisagIntersections=DisagIntersections+ExtractMeasure('Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&&Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration Type].['+IterationType+']};')\r\n                \r\n                }\r\n                else\r\n                {\r\n                    VolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst PL]}) on column;','Stat Fcst PL')\r\n                    VolumeExpect=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst L1]}) on column where {'+FutureNamedSet+'};','Stat Fcst L1')\r\n                    TLVolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst TL]}) on column where {'+FutureNamedSet+'};','Stat Fcst TL')\r\n                }  \r\n        \r\n\r\n                \r\n\r\n            var statIntersectionCount=0\r\n            \r\n            processesList.forEach(element => {\r\n               \r\n                if(Process[element].key==1)\r\n                {\r\n                    PopulateMeasures('actual',element,Iteration,ExtractMeasure(Process[element].query,'Stat Actual'),Version)\r\n                    var ExpectQuery='Select ([Version].[Version Name].['+Version+']  ) on row,({Measure.[Stat Actual L0],Measure.[Forecast Iteration Selection]}) on column where {Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"};'\r\n                    PopulateMeasures('expect',element,Iteration,ExtractMeasure(ExpectQuery,'Stat Actual L0'),Version)\r\n                    return \r\n                    }\r\n                if(Process[element].key==14)\r\n                    {\r\n                        PopulateMeasures('actual',element,Iteration,VolumeActual,Version)\r\n                        PopulateMeasures('expect',element,Iteration,VolumeExpect,Version)\r\n                        return \r\n                    }\r\n                if(Process[element].key==15)\r\n                    {\r\n                        PopulateMeasures('actual',element,Iteration,TLVolumeActual,Version)\r\n                        PopulateMeasures('expect',element,Iteration,VolumeExpect,Version)\r\n                        return \r\n                    }\r\n                var actualQuery = Process[element].query\r\n                var ExpectQuery=Process['Stat Actuals'].query\r\n                if(Process[element].key==2)\r\n                    ExpectQuery='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                if(Process[element].key<18){\r\n                var ActualValue=ExtractMeasure(actualQuery,'RecordCount')\r\n                var ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n            }\r\n                ActualValue=(!ActualValue)?0:ActualValue\r\n                ExpectValue=(!ExpectValue)?-1:ExpectValue \r\n                    \r\n                \r\n                if(Process[element].key>6)\r\n                    {   \r\n                        var CMLCount=ExtractMeasure(CMLIntersections)\r\n\r\n                        if(Process[element].key==7||Process[element].key==8||Process[element].key==16||Process[element].key==17)\r\n                            {\r\n                           \r\n                            ExpectQuery=Process[element].expect   \r\n                            var CMLCount=ExtractMeasure(CMLIntersections)\r\n                            ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n                            var discoQuery= Process[element].disco\r\n                            var DiscoValue=ExtractMeasure(discoQuery,'RecordCount')\r\n                            var BestfitQuery= (Process[element].key==7)?'Select('+BestfitNamedSet+');':'Select('+BestfitLCNamedSet+');';\r\n                            var noStatIntersections=ExtractMeasure(Process[element].nostat)\r\n                            var BestfitCellset=cellsetModule.createCellSet(queryModule.select(BestfitQuery))\r\n\r\n\r\n                            if(Process[element].key==16||Process[element].key==17)\r\n                                \r\n                            {\r\n                                var ForecastEngineQuery='Select ([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Forecast Engine],Measure.[Forecast Strategy],Measure.[Assigned Algorithm List]}) on column;'\r\n                                var ForecastEngineCellset=cellsetModule.createCellSet(queryModule.select(ForecastEngineQuery))\r\n                                var ForecastEngine = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Engine'))\r\n                                var ForecastStrategy = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Strategy'))\r\n                                Log.Info('Expect Qeury: '+Process[element].expect)\r\n                                ExpectQuery=Process[element].expect\r\n                                ExpectValue=0\r\n                                if(Process[element].key==16 && ForecastEngine.toString().includes('ML'))\r\n                                ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n                                if(Process[element].key==17 && ForecastStrategy.toString().includes('Ensemble'))\r\n                                ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n                                Log.Info('Forecast Engine: '+ForecastEngine+' Forecast Strategy: '+ForecastStrategy)\r\n                                Log.Info('Actual Query: '+Process[element].query)\r\n                                ActualQuery=Process[element].query\r\n                                ActualValue=ExtractMeasure(ActualQuery,'RecordCount')\r\n                                if(ActualValue!=ExpectValue)\r\n                                    if(ActualValue+DiscoValue==ExpectValue)\r\n                                        ExpectValue=ActualValue   \r\n\r\n                                \r\n\r\n                               \r\n                                PopulateMeasures('actual',element,Iteration,ActualValue,Version)\r\n                                PopulateMeasures('expect',element,Iteration,ExpectValue,Version)\r\n                                return\r\n\r\n                            }\r\n                            if(NoLCBestfitCellset.rowCount>0)\r\n                                {\r\n                                    ExpectQuery='Select([Region].[Stat Region] * '+NoLCBestfitNamedset+'.relatedmembers([Stat Item]) * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] * [Channel].[Stat Channel]*[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row,({Measure.[PLC Status L1]}) on column;'\r\n                                    ExpectQueryCellSet=cellsetModule.createCellSet(queryModule.select(ExpectQuery))\r\n                                    ExpectValue=ExpectValue+ExpectQueryCellSet.rowCount\r\n                                    actualQuery='Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * '+NoLCBestfitNamedset+'.relatedmembers([Stat Item]) * [Account].[Stat Account] * [Channel].[Stat Channel] * [Region].[Stat Region] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain]  ) on row, ({Measure.[Run Time]}) on column;'\r\n                                    ActualQueryCellSet=cellsetModule.createCellSet(queryModule.select(actualQuery))\r\n\r\n                                    ActualValue=ActualValue+ActualQueryCellSet.rowCount+CMLCount\r\n                                }\r\n                            if(Process[element].key==8&&NoLCBestfitCellset.rowCount>0)\r\n                                return\r\n                            if(BestfitCellset.rowCount===0&&NoLCBestfitCellset.rowCount==0)\r\n                                {\r\n                                    ActualValue=0\r\n                                    ExpectValue=0\r\n                                }\r\n                            \r\n                            else\r\n                                {\r\n                                    ExpectValue=(!ExpectValue)?-1:ExpectValue-noStatIntersections\r\n                                    DiscoValue=(!DiscoValue)?0:DiscoValue\r\n                                    Log.Info('Test '+element +' Actual: '+ActualValue+' Expect: '+ExpectValue + ' No Stat: '+noStatIntersections)\r\n                                    if(ActualValue!=ExpectValue)\r\n                                        if(ActualValue+DiscoValue==ExpectValue)\r\n                                            ExpectValue=ActualValue   \r\n                                }\r\n                                statIntersectionCount = (ExpectValue=== -1) ? -1 : statIntersectionCount + ExpectValue;  \r\n                            \r\n                            \r\n                            \r\n                            }\r\n                    \r\n                            if(Process[element].key==9||Process[element].key==10||Process[element].key==11)\r\n                                ExpectValue=statIntersectionCount\r\n\r\n                            if(Process[element].key==12)\r\n                                {\r\n                                    ExpectValue=ExtractMeasure(Process[element].expect)\r\n                                    if(ActualValue+DisagIntersections+nostatPLcols==ExpectValue)\r\n                                    ExpectValue=ActualValue\r\n                                    else\r\n                                    ExpectValue=ExpectValue-nostatPLcols\r\n                                }\r\n                            if(Process[element].key==13)\r\n                                {\r\n                                    ExpectValue=ExtractMeasure(Process[element].expect)\r\n                                    if(ActualValue+DisagIntersections+nostatTLcols==ExpectValue)\r\n                                        ExpectValue=ActualValue\r\n                                    else\r\n                                    ExpectValue=ExpectValue-nostatTLcols\r\n                                }\r\n\r\n                            if(Process[element].key==18)\r\n                            {\r\n                                ActualValue=ExtractMeasure(Process['TL Count Validation'].query)\r\n                                ExpectValue=ExtractMeasure(Process['PL Count Validation'].expect)\r\n                                if(ActualValue+DisagIntersections==ExpectValue)\r\n                                    ExpectValue=ActualValue\r\n                                else\r\n                                    ExpectValue=ExpectValue-DisagIntersections\r\n                            }\r\n\r\n                                            \r\n                        }\r\n                    if(Process[element].key==20||Process[element].key==21||Process[element].key==19)\r\n                        {\r\n                            ActualValue=ExtractMeasure(Process[element].query,'RecordCount')\r\n                            ExpectValue=ExtractMeasure(Process[element].expect,'RecordCount')\r\n                            ActualValue=(!ActualValue)?0:ActualValue\r\n                            ExpectValue=(!ExpectValue)?0:ExpectValue\r\n                            \r\n                              \r\n                        }\r\n                    \r\n\r\n                PopulateMeasures('actual',element,Iteration,ActualValue,Version)\r\n                PopulateMeasures('expect',element,Iteration,ExpectValue,Version)\r\n               var FlagQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+element+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Flag]=if(~isnull(Measure.[Stat Process Expected Output])) then 1;end scope;'\r\n                queryModule.select(FlagQ)\r\n    \r\n                //Populate Process Status\r\n               var ProcessQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+element+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Status]=if(Measure.[Actual vs Expected Stat Process Output Gap %]<0.05 && Measure.[Actual vs Expected Stat Process Output Gap %]>=0) then 1; end scope;'\r\n                queryModule.select(ProcessQ)\r\n            });\r\n\r\n            //Populate Process Flag\r\n          \r\n        });\r\n        \r\n    \r\n    \r\n    \r\n    }\r\nreturn {\r\nSummary:Summary\r\n}\r\n});",
    "Code": "define('o9.DemandPlanning.StatProcessSummary',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n\r\n    var itemize=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\").map(i=>\"\\\"\"+i+\"\\\"\")\r\n        return itemdata\r\n    }\r\n    var itemsplit=function(item){\r\n        var itemdata=''+item+''\r\n        itemdata=itemdata.split(\",\")\r\n        return itemdata\r\n    }\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n\r\n\r\n    var PopulateMeasures=function(type,process,Iteration,value,Version)\r\n        {\r\n                \r\n            var queryModule=require('o9/data/query')\r\n            Log.Info(process+\" \"+type+\" Count: \"+value)\r\n            if(type==\"expect\")\r\n                {\r\n                    var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Expected Output]='+value+'; end scope;'\r\n                    queryModule.select(scopeQuery)\r\n                }\r\n            else if(type==\"actual\")\r\n                {\r\n                    var scopeQuery='cartesian scope: ([Version].[Version Name].['+Version+'] * [Process].[Process].['+process+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+']); Measure.[Stat Process Actual Output]='+value+'; end scope;'\r\n                    queryModule.select(scopeQuery)\r\n                }\r\n\r\n        }\r\n\r\n    \r\n\r\n\r\n        \r\n    \r\n    var Summary=function(o9Params){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var FcstIteration=parsedParams.Iteration\r\n        var processesList=itemsplit(parsedParams.Processes)\r\n        var Version=parsedParams.VersionName\r\n\r\n        FcstIteration.forEach(Iteration => {\r\n                var Dims=['Item','Account','Channel','Region','Location','PnL','Demand Domain']\r\n            var Levels={}\r\n            Dims.forEach(element=>{\r\n            var query='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] * ['+element+'].[Planning '+element+']) on row,({Measure.['+element+' Level]}) on column;'\r\n            Levels[element]=ExtractMeasure(query,element+' Level')\r\n            })  \r\n\r\n            var noStatQuery='Select ([Version].[Version Name].['+Version+'] * [Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Location].[Stat Location] * [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] ) on row, ({Measure.[Assigned Algorithm List]}) on column where {Measure.[Assigned Algorithm List] contains \"No Forecast\"};'\r\n            var items={}\r\n            var nostatCellset=cellsetModule.createCellSet(queryModule.select(noStatQuery))\r\n            Dims.forEach(element=>{\r\n                items[element]=[]   \r\n                for(var j=0;j<nostatCellset.rowCount;j++)\r\n                    {\r\n                        items[element].push(nostatCellset.row(j).cell(nostatCellset.memberColumnIndex(element,'Stat '+element)).Name)\r\n                    }\r\n                items[element]=itemize(items[element])\r\n            })\r\n\r\n            var nostatPLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Planning Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Planning Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst PL]}) on column).filter(isnull(Measure.[Stat Fcst PL]));'\r\n            var nostatPLCellSet=cellsetModule.createCellSet(queryModule.select(nostatPLQuery))\r\n            var nostatPLcols=nostatPLCellSet.rowCount\r\n            var nostatTLQuery='(Select([Version].[Version Name].['+Version+']* [Forecast Iteration].[Forecast Iteration].['+Iteration+']* [Region].['+Levels['Region']+'].filter(#.Name in {'+items['Region']+'}).relatedmembers([Planning Region])*[Item].['+Levels['Item']+'].filter(#.Name in {'+items['Item']+'}).relatedmembers([Transition Item])*[Account].['+Levels['Account']+'].filter(#.Name in {'+items['Account']+'}).relatedmembers([Planning Account])*[Channel].['+Levels['Channel']+'].filter(#.Name in {'+items['Channel']+'}).relatedmembers([Planning Channel])*[Location].['+Levels['Location']+'].filter(#.Name in {'+items['Location']+'}).relatedmembers([Planning Location])*[PnL].['+Levels['PnL']+'].filter(#.Name in {'+items['PnL']+'}).relatedmembers([Planning PnL])*[Demand Domain].['+Levels['Demand Domain']+'].filter(#.Name in {'+items['Demand Domain']+'}).relatedmembers([Transition Demand Domain])) on row, ({Measure.[Stat Actual L0],Measure.[Stat Fcst TL]}) on column).filter(isnull(Measure.[Stat Fcst TL]));'\r\n            var nostatTLCellSet=cellsetModule.createCellSet(queryModule.select(nostatTLQuery))\r\n            var nostatTLcols=nostatTLCellSet.rowCount\r\n            \r\n            Log.Info('NoStat PL: '+nostatPLcols+' NoStat TL: '+nostatTLcols)\r\n\r\n\r\n\r\n\r\n\r\n            var IterationsQuery='Select([Forecast Iteration].[Forecast Iteration].['+Iteration+'].relatedmembers([Forecast Iteration Type]));'\r\n            var IterationCellset=cellsetModule.createCellSet(queryModule.select(IterationsQuery))\r\n            var IterationType=IterationCellset.row(0).cell(IterationCellset.memberColumnIndex('Forecast Iteration','Forecast Iteration Type')).Name;\r\n            var DisagType=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Disaggregation Type]}) on column;','Disaggregation Type')\r\n        \r\n            var HistoryQuery='Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[History Period], Measure.[Forecast Generation Time Bucket],Measure.[Forecast Period]}) on column;'\r\n            var HistroyPeriod=ExtractMeasure(HistoryQuery,'History Period')\r\n            var HistoryBucket=ExtractMeasure(HistoryQuery,'Forecast Generation Time Bucket')\r\n            var ForecastPeriod=ExtractMeasure(HistoryQuery,'Forecast Period')\r\n            var ForecastHorizon='[Time].[Week].filter(#.Key>=&CurrentWeek.element(0).Key && #.Key<&CurrentWeek.element(0).leadoffset(-'+ForecastPeriod+').Key)'\r\n            var HistoryNamedset='&Last36PlanningMonths'\r\n            var FutureNamedSet='&CurrentandFuturePartialWeeks'\r\n            if(HistoryBucket==\"Week\")\r\n                {\r\n                    HistoryNamedset='[Time].[Week].filter(#.Key<&CurrentWeek.element(0).Key && #.Key>=&CurrentWeek.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Month\")\r\n                {\r\n                    HistoryNamedset='[Time].[Month].filter(#.Key<&CurrentMonth.element(0).Key && #.Key>=&CurrentMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Month\")\r\n                {\r\n                    HistoryNamedset='[Time].[Planning Month].filter(#.Key<&CurrentPlanningMonth.element(0).Key && #.Key>=&CurrentPlanningMonth.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Quarter\")\r\n                {\r\n                    HistoryNamedset='[Time].[Quarter].filter(#.Key<&CurrentQuarter.element(0).Key && #.Key>=&CurrentQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Quarter\")\r\n                {\r\n                    HistoryNamedset='[Time].[Planning Quarter].filter(#.Key<&CurrentPlanningQuarter.element(0).Key && #.Key>=&CurrentPlanningQuarter.element(0).leadoffset(-'+HistroyPeriod+').Key)'\r\n                }\r\n                \r\n            if(HistoryBucket==\"Week\")\r\n                {\r\n                    FutureNamedSet='[Time].[Week].filter(#.Key>=&CurrentWeek.element(0).Key )'\r\n                }\r\n            if(HistoryBucket==\"Month\")\r\n                {\r\n                    FutureNamedSet='[Time].[Month].filter(#.Key>=&CurrentMonth.element(0).Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Month\")\r\n                {\r\n                    FutureNamedSet='[Time].[Planning Month].filter(#.Key>=&CurrentPlanningMonth.element(0).Key)'\r\n                }\r\n            if(HistoryBucket==\"Quarter\")\r\n                {\r\n                    FutureNamedSet='[Time].[Quarter].filter(#.Key>=&CurrentQuarter.element(0).Key)'\r\n                }\r\n            if(HistoryBucket==\"Planning Quarter\")\r\n                {\r\n                    FutureNamedSet='[Time].[Planning Quarter].filter(#.Key>=&CurrentPlanningQuarter.element(0).Key)'\r\n                }\r\n            \r\n            \r\n            var Grains ='[Region].[Stat Region] * [Item].[Stat Item] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] * [Channel].[Stat Channel]'\r\n            var IType='Very Short Term'\r\n            if (IterationType.includes(\"Very Short Term\")) {\r\n                IType = \"Very Short Term\";\r\n            } else if( IterationType.includes(\"Short Term\")) {\r\n                IType = \"Short Term\";\r\n            }else if(IterationType.includes(\"Very Long Term\")) {\r\n                IType= \"Very Long Term\";\r\n            } else if (IterationType.includes(\"Mid Term\")) {\r\n                IType = \"Mid Term\";\r\n            } else if (IterationType.includes(\"Long Term\")) {\r\n                IType = \"Long Term\";\r\n            }\r\n\r\n\r\n\r\n\r\n            var BestfitNamedSet='[Item].[Segmentation LOB].filter(#.[Bestfit Flag '+IType+'] == 1)'\r\n            var BestfitLCNamedSet='[Item].[Segmentation LOB].filter(#.[Bestfit Flag '+IType+'] == 0)'\r\n            var NoLCBestfitNamedset='[Item].[Segmentation LOB].filter(isNull(#.[Bestfit Flag '+IType+']))'\r\n            var NoLCBestfitNamedsetquery='Select('+NoLCBestfitNamedset+');'\r\n            var NoLCBestfitCellset=cellsetModule.createCellSet(queryModule.select(NoLCBestfitNamedsetquery))\r\n            var CMLIntersections='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[System Bestfit Algorithm]==\"CML\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n            \r\n            const Process= {\r\n                \"Generate Stat Actuals\":{query:'Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) on row, ({Measure.[Stat Actual]}) on column;',key:1},\r\n                \"Stat Actuals\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Stat Actual]>0}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:0},\r\n                \"Generate Slice Association\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Slice Association Stat])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:2},\r\n                \"Generate Segmentation\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[PLC Status L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:3},\r\n                \"Seasonality Detection\":{query: 'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Seasonality L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:4},\r\n                \"Generate Outlier Cleansing\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Actual Cleansed])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:5},\r\n                \"Generate Assigned Rules\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Assigned Algorithm List])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:6},\r\n                \"Generate System Stat\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n                        key:7,\r\n                        disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n                        nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n                        query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Time])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitNamedSet+'};',\r\n\r\n                    \r\n                    },\r\n                \"Generate System Stat using Bestfit LC\":{\r\n                        expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'], '+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};',\r\n                        key:8,\r\n                        disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};',\r\n                        nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};',\r\n                        query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Time])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+'],'+BestfitLCNamedSet+'};'   \r\n                        },\r\n                \"Identify Bestfit Algorithm\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Bestfit Algorithm])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:9},\r\n                \"Populate Stat Fcst\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[System Stat Fcst L1])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:10},\r\n                \"Populate Analysis Cockpit\":{query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Run Count])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',key:11},\r\n                \"PL Count Validation\":{\r\n                    query:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL])} ) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']}; ',\r\n                    key:12,\r\n                    expect:'Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                },\r\n                \"PL Volume Loss Validation\":{\r\n                    key:14,\r\n                },\r\n                \"TL Count Validation\":{\r\n                    key:13,\r\n                    query:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst TL])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    expect:'Select({DistinctCount( [Region].[Planning Region] * [Item].[Transition Item] * [PnL].[Planning PnL] *[Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Transition Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&& Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                },\r\n                \"TL Volume Loss Validation\":{\r\n                    key:15\r\n                },\r\n                \"Generate CML Fcst\":{\r\n\r\n                    key:16,\r\n                    query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst CML])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                    expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                    disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                   \r\n                },\r\n                \"Generate Ensemble Fcst\":{\r\n                    key:17,\r\n                    query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst Ensemble])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                    expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+',[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\t\r\n                \t\r\n                    disco:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[PLC Status L1]==\\\"DISC\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    nostat:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using Measure.[Assigned Algorithm List] contains \\\"No Forecast\\\"}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                   \r\n                },\r\n                \"Disaggregate Stat\":{\r\n                    key:18\r\n\r\n                },\r\n                \"Forecast Reconciliation\":{\r\n                    expect:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+'};',\r\n                    query:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst])}) on row, () on column where {[Version].[Version Name].['+Version+'],'+HistoryNamedset+'};',\r\n                    key:19\r\n                },\r\n                \"Stat Accuracy Calculation\":{\r\n                    expect:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    query:'Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst L1 Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    key:20\r\n                },\r\n                \"Planning Accuracy Calculation\":{\r\n                    expect:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    query:'Select ({DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] * [Channel].[Planning Channel] ) as Transient.RecordCount using ~isnull(Measure.[Stat Fcst PL Lag Abs Error])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};',\r\n                    key:21\r\n                }\r\n\r\n\r\n\r\n            \r\n            }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n            \r\n        \r\n            \r\n            var DisagIntersections=0\r\n            var VolumeActual=0\r\n            var VolumeExpect=0\r\n            var TLVolumeActual=0\r\n\r\n            if(DisagType==\"No Forecast\")\r\n                {\r\n                DisagIntersections=DisagIntersections+ExtractMeasure('Select ( {DistinctCount([Region].[Planning Region] * [Item].[Planning Item] * [PnL].[Planning PnL] * [Location].[Planning Location] * [Channel].[Planning Channel] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account]) as Transient.RecordCount using ~isnull(Measure.[Stat Actual L0])&&Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"} ) on row, () on column where {&CWV,[Forecast Iteration].[Forecast Iteration Type].['+IterationType+']};')\r\n                \r\n                }\r\n                else\r\n                {\r\n                    VolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst PL]}) on column;','Stat Fcst PL')\r\n                    VolumeExpect=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst L1]}) on column where {'+FutureNamedSet+'};','Stat Fcst L1')\r\n                    TLVolumeActual=ExtractMeasure('Select([Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row, ({Measure.[Stat Fcst TL]}) on column where {'+FutureNamedSet+'};','Stat Fcst TL')\r\n                }  \r\n        \r\n\r\n                \r\n\r\n            var statIntersectionCount=0\r\n            \r\n            processesList.forEach(element => {\r\n               \r\n                if(Process[element].key==1)\r\n                {\r\n                    PopulateMeasures('actual',element,Iteration,ExtractMeasure(Process[element].query,'Stat Actual'),Version)\r\n                    var ExpectQuery='Select ([Version].[Version Name].['+Version+']  ) on row,({Measure.[Stat Actual L0],Measure.[Forecast Iteration Selection]}) on column where {Measure.[Forecast Iteration Selection]==\"'+Iteration+'\"};'\r\n                    PopulateMeasures('expect',element,Iteration,ExtractMeasure(ExpectQuery,'Stat Actual L0'),Version)\r\n                    return \r\n                    }\r\n                if(Process[element].key==14)\r\n                    {\r\n                        PopulateMeasures('actual',element,Iteration,VolumeActual,Version)\r\n                        PopulateMeasures('expect',element,Iteration,VolumeExpect,Version)\r\n                        return \r\n                    }\r\n                if(Process[element].key==15)\r\n                    {\r\n                        PopulateMeasures('actual',element,Iteration,TLVolumeActual,Version)\r\n                        PopulateMeasures('expect',element,Iteration,VolumeExpect,Version)\r\n                        return \r\n                    }\r\n                var actualQuery = Process[element].query\r\n                var ExpectQuery=Process['Stat Actuals'].query\r\n                if(Process[element].key==2)\r\n                    ExpectQuery='Select ({DistinctCount('+Grains+' ) as Transient.RecordCount using ~isnull(Measure.[Stat Actual])}) on row, () on column where {[Version].[Version Name].['+Version+'],[Forecast Iteration].[Forecast Iteration].['+Iteration+']};'\r\n                if(Process[element].key<18){\r\n                var ActualValue=ExtractMeasure(actualQuery,'RecordCount')\r\n                var ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n            }\r\n                ActualValue=(!ActualValue)?0:ActualValue\r\n                ExpectValue=(!ExpectValue)?-1:ExpectValue \r\n                    \r\n                \r\n                if(Process[element].key>6)\r\n                    {   \r\n                        var CMLCount=ExtractMeasure(CMLIntersections)\r\n\r\n                        if(Process[element].key==7||Process[element].key==8||Process[element].key==16||Process[element].key==17)\r\n                            {\r\n                           \r\n                            ExpectQuery=Process[element].expect   \r\n                            var CMLCount=ExtractMeasure(CMLIntersections)\r\n                            ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n                            var discoQuery= Process[element].disco\r\n                            var DiscoValue=ExtractMeasure(discoQuery,'RecordCount')\r\n                            var BestfitQuery= (Process[element].key==7)?'Select('+BestfitNamedSet+');':'Select('+BestfitLCNamedSet+');';\r\n                            var noStatIntersections=ExtractMeasure(Process[element].nostat)\r\n                            var BestfitCellset=cellsetModule.createCellSet(queryModule.select(BestfitQuery))\r\n\r\n\r\n                            if(Process[element].key==16||Process[element].key==17)\r\n                                \r\n                            {\r\n                                var ForecastEngineQuery='Select ([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Forecast Engine],Measure.[Forecast Strategy],Measure.[Assigned Algorithm List]}) on column;'\r\n                                var ForecastEngineCellset=cellsetModule.createCellSet(queryModule.select(ForecastEngineQuery))\r\n                                var ForecastEngine = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Engine'))\r\n                                var ForecastStrategy = ForecastEngineCellset.row(0).cell(ForecastEngineCellset.measureColumnIndex('Forecast Strategy'))\r\n                                Log.Info('Expect Qeury: '+Process[element].expect)\r\n                                ExpectQuery=Process[element].expect\r\n                                ExpectValue=0\r\n                                if(Process[element].key==16 && ForecastEngine.toString().includes('ML'))\r\n                                ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n                                if(Process[element].key==17 && ForecastStrategy.toString().includes('Ensemble'))\r\n                                ExpectValue=ExtractMeasure(ExpectQuery,'RecordCount')\r\n                                Log.Info('Forecast Engine: '+ForecastEngine+' Forecast Strategy: '+ForecastStrategy)\r\n                                Log.Info('Actual Query: '+Process[element].query)\r\n                                ActualQuery=Process[element].query\r\n                                ActualValue=ExtractMeasure(ActualQuery,'RecordCount')\r\n                                if(ActualValue!=ExpectValue)\r\n                                    if(ActualValue+DiscoValue==ExpectValue)\r\n                                        ExpectValue=ActualValue   \r\n\r\n                                \r\n\r\n                               \r\n                                PopulateMeasures('actual',element,Iteration,ActualValue,Version)\r\n                                PopulateMeasures('expect',element,Iteration,ExpectValue,Version)\r\n                                return\r\n\r\n                            }\r\n                            if(NoLCBestfitCellset.rowCount>0)\r\n                                {\r\n                                    ExpectQuery='Select([Region].[Stat Region] * '+NoLCBestfitNamedset+'.relatedmembers([Stat Item]) * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain] * [Account].[Stat Account] * [Channel].[Stat Channel]*[Version].[Version Name].['+Version+']*[Forecast Iteration].[Forecast Iteration].['+Iteration+']) on row,({Measure.[PLC Status L1]}) on column;'\r\n                                    ExpectQueryCellSet=cellsetModule.createCellSet(queryModule.select(ExpectQuery))\r\n                                    ExpectValue=ExpectValue+ExpectQueryCellSet.rowCount\r\n                                    actualQuery='Select ([Version].[Version Name].['+Version+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] * '+NoLCBestfitNamedset+'.relatedmembers([Stat Item]) * [Account].[Stat Account] * [Channel].[Stat Channel] * [Region].[Stat Region] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Demand Domain].[Stat Demand Domain]  ) on row, ({Measure.[Run Time]}) on column;'\r\n                                    ActualQueryCellSet=cellsetModule.createCellSet(queryModule.select(actualQuery))\r\n\r\n                                    ActualValue=ActualValue+ActualQueryCellSet.rowCount+CMLCount\r\n                                }\r\n                            if(Process[element].key==8&&NoLCBestfitCellset.rowCount>0)\r\n                                return\r\n                            if(BestfitCellset.rowCount===0&&NoLCBestfitCellset.rowCount==0)\r\n                                {\r\n                                    ActualValue=0\r\n                                    ExpectValue=0\r\n                                }\r\n                            \r\n                            else\r\n                                {\r\n                                    ExpectValue=(!ExpectValue)?-1:ExpectValue-noStatIntersections\r\n                                    DiscoValue=(!DiscoValue)?0:DiscoValue\r\n                                    Log.Info('Test '+element +' Actual: '+ActualValue+' Expect: '+ExpectValue + ' No Stat: '+noStatIntersections)\r\n                                    if(ActualValue!=ExpectValue)\r\n                                        if(ActualValue+DiscoValue==ExpectValue)\r\n                                            ExpectValue=ActualValue   \r\n                                }\r\n                                statIntersectionCount = (ExpectValue=== -1) ? -1 : statIntersectionCount + ExpectValue;  \r\n                            \r\n                            \r\n                            \r\n                            }\r\n                    \r\n                            if(Process[element].key==9||Process[element].key==10||Process[element].key==11)\r\n                                ExpectValue=statIntersectionCount\r\n\r\n                            if(Process[element].key==12)\r\n                                {\r\n                                    ExpectValue=ExtractMeasure(Process[element].expect)\r\n                                    if(ActualValue+DisagIntersections+nostatPLcols==ExpectValue)\r\n                                    ExpectValue=ActualValue\r\n                                    else\r\n                                    ExpectValue=ExpectValue-nostatPLcols\r\n                                }\r\n                            if(Process[element].key==13)\r\n                                {\r\n                                    ExpectValue=ExtractMeasure(Process[element].expect)\r\n                                    if(ActualValue+DisagIntersections+nostatTLcols==ExpectValue)\r\n                                        ExpectValue=ActualValue\r\n                                    else\r\n                                    ExpectValue=ExpectValue-nostatTLcols\r\n                                }\r\n\r\n                            if(Process[element].key==18)\r\n                            {\r\n                                ActualValue=ExtractMeasure(Process['TL Count Validation'].query)\r\n                                ExpectValue=ExtractMeasure(Process['PL Count Validation'].expect)\r\n                                if(ActualValue+DisagIntersections==ExpectValue)\r\n                                    ExpectValue=ActualValue\r\n                                else\r\n                                    ExpectValue=ExpectValue-DisagIntersections\r\n                            }\r\n\r\n                                            \r\n                        }\r\n                    if(Process[element].key==20||Process[element].key==21||Process[element].key==19)\r\n                        {\r\n                            ActualValue=ExtractMeasure(Process[element].query,'RecordCount')\r\n                            ExpectValue=ExtractMeasure(Process[element].expect,'RecordCount')\r\n                            ActualValue=(!ActualValue)?0:ActualValue\r\n                            ExpectValue=(!ExpectValue)?0:ExpectValue\r\n                            \r\n                              \r\n                        }\r\n                    \r\n\r\n                PopulateMeasures('actual',element,Iteration,ActualValue,Version)\r\n                PopulateMeasures('expect',element,Iteration,ExpectValue,Version)\r\n               var FlagQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+element+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Flag]=if(~isnull(Measure.[Stat Process Expected Output])) then 1;end scope;'\r\n                queryModule.select(FlagQ)\r\n    \r\n                //Populate Process Status\r\n               var ProcessQ='Scope: (&CWVAndScenarios.['+Version+'] * [Process].[Process].['+element+'] * [Forecast Iteration].[Forecast Iteration].['+Iteration+'] ) ; Measure.[Stat Process Status]=if(Measure.[Actual vs Expected Stat Process Output Gap %]<0.05 && Measure.[Actual vs Expected Stat Process Output Gap %]>=0) then 1; end scope;'\r\n                queryModule.select(ProcessQ)\r\n            });\r\n\r\n            //Populate Process Flag\r\n          \r\n        });\r\n        \r\n    \r\n    \r\n    \r\n    }\r\nreturn {\r\nSummary:Summary\r\n}\r\n});",
    "ModuleName": "o9.DemandPlanning.StatProcessSummary",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "60dfc93c-38d9-9837-2d52-23221ee4dc72",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212923,
    "Description": "Iteration Type",
    "Documentation": "define('o9.DemandPlanning.IterationTypeMatch', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    var Type = function(o9Params){\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var Type=parsedParams.ForecastIterationType\r\n\r\n     \r\n        if (Type.includes(\"Short Term\")) {\r\n            parsedParams['Forecast Iteration Type'] = \"Short Term\";\r\n        } else if (Type.includes(\"Mid Term\")) {\r\n            parsedParams['Forecast Iteration Type'] = \"Mid Term\";\r\n        } else if (Type.includes(\"Long Term\")) {\r\n            parsedParams['Forecast Iteration Type'] = \"Long Term\";\r\n        }\r\n\r\n        return parsedParams\r\n\r\n\r\n    }\r\n    return {\r\n        Type:Type\r\n        \r\n    }\r\n    \r\n    });",
    "Code": "define('o9.DemandPlanning.IterationTypeMatch', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    var Type = function(o9Params){\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var Type=parsedParams.ForecastIterationType\r\n\r\n     \r\n        if (Type.includes(\"Short Term\")) {\r\n            parsedParams['Forecast Iteration Type'] = \"Short Term\";\r\n        } else if (Type.includes(\"Mid Term\")) {\r\n            parsedParams['Forecast Iteration Type'] = \"Mid Term\";\r\n        } else if (Type.includes(\"Long Term\")) {\r\n            parsedParams['Forecast Iteration Type'] = \"Long Term\";\r\n        }\r\n\r\n        return parsedParams\r\n\r\n\r\n    }\r\n    return {\r\n        Type:Type\r\n        \r\n    }\r\n    \r\n    });",
    "ModuleName": "o9.DemandPlanning.IterationTypeMatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "dc8fee38-06d7-1a1a-7f67-d7509a20988e",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212924,
    "Description": "Seasonal Indices Validation",
    "Documentation": "define('o9.DemandPlanning.SeasonalIndicesValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n    var Forward=parsedParams.Forward\r\n    var Backtest=parsedParams.Backtest\r\n\r\n    if(!Forward && !Backtest)\r\n    {\r\n        RuleOutputToUI = {Status: 'Error',Message:`Please select one of the checkboxes to process`};\r\n        return\r\n    }\r\n\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.SeasonalIndicesValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n    var Forward=parsedParams.Forward\r\n    var Backtest=parsedParams.Backtest\r\n\r\n    if(!Forward && !Backtest)\r\n    {\r\n        RuleOutputToUI = {Status: 'Error',Message:`Please select one of the checkboxes to process`};\r\n        return\r\n    }\r\n\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.SeasonalIndicesValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "27bb456d-6e62-7bbd-5375-c4eff50e772a",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212925,
    "Description": "Iteration Name Validation",
    "Documentation": "define('o9.DemandPlanning.IterationNameValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n    var validation = function(o9Params){\r\n        var parsedParams = JSON.parse(o9Params);\r\n        \r\n\r\n        var DisplayName = parsedParams.DisplayName;\r\n        var Description = parsedParams.Description;\r\n        \r\n        \r\n        \r\n        // Check if DisplayName is empty or contains trailing spaces\r\n        if (!DisplayName || /^\\s|\\s$/.test(DisplayName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Display Name should not be empty or contain trailing spaces!'\r\n            };\r\n            return;\r\n        }\r\n        \r\n        // Check if Description is empty or contains trailing spaces\r\n        if (!Description || /^\\s|\\s$/.test(Description)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Description should not be empty or contain trailing spaces!'\r\n            };\r\n            return;\r\n        }\r\n    }\r\n    \r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.IterationNameValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n    var validation = function(o9Params){\r\n        var parsedParams = JSON.parse(o9Params);\r\n        \r\n\r\n        var DisplayName = parsedParams.DisplayName;\r\n        var Description = parsedParams.Description;\r\n        \r\n        \r\n        \r\n        // Check if DisplayName is empty or contains trailing spaces\r\n        if (!DisplayName || /^\\s|\\s$/.test(DisplayName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Display Name should not be empty or contain trailing spaces!'\r\n            };\r\n            return;\r\n        }\r\n        \r\n        // Check if Description is empty or contains trailing spaces\r\n        if (!Description || /^\\s|\\s$/.test(Description)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Description should not be empty or contain trailing spaces!'\r\n            };\r\n            return;\r\n        }\r\n    }\r\n    \r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.IterationNameValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "c26b673f-7bd7-0106-3b9e-d11783f664ef",
    "ModuleId": "52370024-0307-4d32-9948-435d1a6d8e73"
  },
  {
    "Id": 212926,
    "Description": "o9.DemandPlanning.SetupTimeBuckets",
    "Documentation": "define('o9.DemandPlanning.SetupTimeBuckets',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar GenerationTimeBucket = parsedParams.GenerationTimeBucket;\r\nvar StorageTimeBucket = parsedParams.StorageTimeBucket;\r\n\r\nLog.Info(\"GenerationTimeBucket - \" + GenerationTimeBucket);\r\nLog.Info(\"StorageTimeBucket - \" + StorageTimeBucket);\r\n\r\n\r\nif(((GenerationTimeBucket == \"Planning Month\") && (StorageTimeBucket == 'Month')) || ((GenerationTimeBucket == \"Month\") && (StorageTimeBucket == 'Planning Month')))\r\n{\r\n    RuleOutputToUI =\r\n  {\r\n  Status: 'Error',\r\n  Message: 'This is not a valid combination for the Forecast Buckets. Please check !'    \r\n  };\r\n  \r\n  \r\n}\r\n\r\nLog.Info(\"Time Bucket Validation Complete\");\r\n\r\n};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.SetupTimeBuckets',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar GenerationTimeBucket = parsedParams.GenerationTimeBucket;\r\nvar StorageTimeBucket = parsedParams.StorageTimeBucket;\r\n\r\nLog.Info(\"GenerationTimeBucket - \" + GenerationTimeBucket);\r\nLog.Info(\"StorageTimeBucket - \" + StorageTimeBucket);\r\n\r\n\r\nif(((GenerationTimeBucket == \"Planning Month\") && (StorageTimeBucket == 'Month')) || ((GenerationTimeBucket == \"Month\") && (StorageTimeBucket == 'Planning Month')))\r\n{\r\n    RuleOutputToUI =\r\n  {\r\n  Status: 'Error',\r\n  Message: 'This is not a valid combination for the Forecast Buckets. Please check !'    \r\n  };\r\n  \r\n  \r\n}\r\n\r\nLog.Info(\"Time Bucket Validation Complete\");\r\n\r\n};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.SetupTimeBuckets",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "95e07fab-ee67-4a5e-aa07-ca5d699138fa",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212927,
    "Description": "Populate existing account parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingAccountParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\tvar ExistingAccountString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Account: \" +IterationType);\r\n\t\tLog.Info(\"STMT Account\");\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t if (InputStream=='Actual'){\r\n        var ExistingShiftPatternsAccountQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsAccountDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsAccountQuery));\r\n        Log.Info(ExistingShiftPatternsAccountDataCellSet);\r\n        var ExistingShiftPatternsAccountList = ExistingShiftPatternsAccountDataCellSet.attributeMembers(\"Account\",AccountScope);\r\n        Log.Info('All Account list : ' + ExistingShiftPatternsAccountList);\r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\t\tvar ExistingShiftPatternsAccountQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsAccountDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsAccountQuery));\r\n        Log.Info(ExistingShiftPatternsAccountDataCellSet);\r\n        var ExistingShiftPatternsAccountList = ExistingShiftPatternsAccountDataCellSet.attributeMembers(\"Account\",AccountScope);\r\n        Log.Info('All Account list : ' + ExistingShiftPatternsAccountList);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n        var ExistingShiftPatternsAccount = ExistingShiftPatternsAccountList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\t\t\r\n\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => '[' + i);\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => i + ']');\r\n        Log.Info('Existing account member : ' + ExistingShiftPatternsAccount);\r\n        if (ExistingShiftPatternsAccount.length === 0){\r\n            ExistingShiftPatternsAccount = \"[]\";\r\n        }\r\n       \r\n\r\n      \r\n        parsedParams['ExistingAccountString'] = ExistingShiftPatternsAccount.toString();\r\n        Log.Info(\"ExistingAccountString: \" + ExistingShiftPatternsAccount.toString());\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ExistingAccountString: ExistingAccountString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingAccountParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\tvar ExistingAccountString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Account: \" +IterationType);\r\n\t\tLog.Info(\"STMT Account\");\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t if (InputStream=='Actual'){\r\n        var ExistingShiftPatternsAccountQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsAccountDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsAccountQuery));\r\n        Log.Info(ExistingShiftPatternsAccountDataCellSet);\r\n        var ExistingShiftPatternsAccountList = ExistingShiftPatternsAccountDataCellSet.attributeMembers(\"Account\",AccountScope);\r\n        Log.Info('All Account list : ' + ExistingShiftPatternsAccountList);\r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\t\tvar ExistingShiftPatternsAccountQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsAccountDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsAccountQuery));\r\n        Log.Info(ExistingShiftPatternsAccountDataCellSet);\r\n        var ExistingShiftPatternsAccountList = ExistingShiftPatternsAccountDataCellSet.attributeMembers(\"Account\",AccountScope);\r\n        Log.Info('All Account list : ' + ExistingShiftPatternsAccountList);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n        var ExistingShiftPatternsAccount = ExistingShiftPatternsAccountList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\t\t\r\n\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => '[' + i);\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => i + ']');\r\n        Log.Info('Existing account member : ' + ExistingShiftPatternsAccount);\r\n        if (ExistingShiftPatternsAccount.length === 0){\r\n            ExistingShiftPatternsAccount = \"[]\";\r\n        }\r\n       \r\n\r\n      \r\n        parsedParams['ExistingAccountString'] = ExistingShiftPatternsAccount.toString();\r\n        Log.Info(\"ExistingAccountString: \" + ExistingShiftPatternsAccount.toString());\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ExistingAccountString: ExistingAccountString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingAccountParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "633c9e21-c9c2-37da-6c55-6877cbcb9284",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212928,
    "Description": "Javascript to validate Realignment Level Setup",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.ValidateRealignmentLevels', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var ItemLevel = parsedParams.Itemlevel;\r\n\t\tvar AccountLevel = parsedParams.Accountlevel;\r\n\t\tvar ChannelLevel = parsedParams.Channellevel;\r\n\t\tvar RegionLevel = parsedParams.Regionlevel;\r\n\t\tvar LocationLevel = parsedParams.Locationlevel;\r\n\t\tvar PnLLevel = parsedParams.PnLlevel;\r\n\t\tvar DemandDomainLevel = parsedParams.DemandDomainlevel;\r\n\t\tvar HistoryRealignment = parsedParams.HistoryRealignment;\r\n\t\tvar ForecastRealignment = parsedParams.ForecastRealignment;\r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar leaf_Count=0;\r\n\t\tvar planning_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Realignment Type: \" + DataObject);\r\n        Log.Info(\"Item Level: \" + ItemLevel);\r\n\t\tLog.Info(\"Account Level: \" + AccountLevel);\r\n\t\tLog.Info(\"Channel Level: \" + ChannelLevel);\r\n\t\tLog.Info(\"Region Level: \" + RegionLevel);\r\n\t\tLog.Info(\"Location Level: \" + LocationLevel);\r\n\t\tLog.Info(\"PnL Level: \" + PnLLevel);\r\n\t\tLog.Info(\"Demand Domain Level: \" + DemandDomainLevel);\r\n\t\tLog.Info(\"Consider for Forecast Realignment: \" + ForecastRealignment);\r\n\t\tLog.Info(\"Consider for History Realignment: \" + HistoryRealignment);\r\n\t\t\r\n\t\tif (HistoryRealignment)\r\n\t\t{\r\n\t\t\tif(ItemLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ItemLevel === \"[Item].[Item]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(AccountLevel)\r\n\t\t\t{\r\n\t\t\t\tif(AccountLevel === \"[Account].[Account]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(ChannelLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ChannelLevel === \"[Channel].[Channel]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(RegionLevel)\r\n\t\t\t{\r\n\t\t\t\tif(RegionLevel === \"[Region].[Region]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(LocationLevel)\r\n\t\t\t{\r\n\t\t\t\tif(LocationLevel === \"[Location].[Location]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(PnLLevel)\r\n\t\t\t{\r\n\t\t\t\tif(PnLLevel === \"[PnL].[PnL]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(DemandDomainLevel)\r\n\t\t\t{\r\n\t\t\t\tif(DemandDomainLevel === \"[Demand Domain].[Demand Domain]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (leaf_Count===0)\r\n\t\t\t{\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: To Enable History Realignment atleast one dimension should be selected at the Leaf Level.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: To Enable History Realignment atleast one dimension should be selected at the Leaf Level.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (ForecastRealignment)\r\n\t\t{\r\n\t\t\tif(ItemLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ItemLevel === \"[Item].[Planning Item]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(AccountLevel)\r\n\t\t\t{\r\n\t\t\t\tif(AccountLevel === \"[Account].[Planning Account]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(ChannelLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ChannelLevel === \"[Channel].[Planning Channel]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(RegionLevel)\r\n\t\t\t{\r\n\t\t\t\tif(RegionLevel === \"[Region].[Planning Region]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(LocationLevel)\r\n\t\t\t{\r\n\t\t\t\tif(LocationLevel === \"[Location].[Planning Location]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(PnLLevel)\r\n\t\t\t{\r\n\t\t\t\tif(PnLLevel === \"[PnL].[Planning PnL]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(DemandDomainLevel)\r\n\t\t\t{\r\n\t\t\t\tif(DemandDomainLevel === \"[Demand Domain].[Planning Demand Domain]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (leaf_Count===0 && planning_Count===0)\r\n\t\t\t{\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: To Enable Forecast Realignment atleast one dimension should be selected at the Planning Level.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: To Enable Forecast Realignment atleast one dimension should be selected at the Planning Level.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tLog.Info(\"Validation Complete\");\r\n\t};\r\n\t\r\n\t// Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.ValidateRealignmentLevels', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var ItemLevel = parsedParams.Itemlevel;\r\n\t\tvar AccountLevel = parsedParams.Accountlevel;\r\n\t\tvar ChannelLevel = parsedParams.Channellevel;\r\n\t\tvar RegionLevel = parsedParams.Regionlevel;\r\n\t\tvar LocationLevel = parsedParams.Locationlevel;\r\n\t\tvar PnLLevel = parsedParams.PnLlevel;\r\n\t\tvar DemandDomainLevel = parsedParams.DemandDomainlevel;\r\n\t\tvar HistoryRealignment = parsedParams.HistoryRealignment;\r\n\t\tvar ForecastRealignment = parsedParams.ForecastRealignment;\r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar leaf_Count=0;\r\n\t\tvar planning_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Realignment Type: \" + DataObject);\r\n        Log.Info(\"Item Level: \" + ItemLevel);\r\n\t\tLog.Info(\"Account Level: \" + AccountLevel);\r\n\t\tLog.Info(\"Channel Level: \" + ChannelLevel);\r\n\t\tLog.Info(\"Region Level: \" + RegionLevel);\r\n\t\tLog.Info(\"Location Level: \" + LocationLevel);\r\n\t\tLog.Info(\"PnL Level: \" + PnLLevel);\r\n\t\tLog.Info(\"Demand Domain Level: \" + DemandDomainLevel);\r\n\t\tLog.Info(\"Consider for Forecast Realignment: \" + ForecastRealignment);\r\n\t\tLog.Info(\"Consider for History Realignment: \" + HistoryRealignment);\r\n\t\t\r\n\t\tif (HistoryRealignment)\r\n\t\t{\r\n\t\t\tif(ItemLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ItemLevel === \"[Item].[Item]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(AccountLevel)\r\n\t\t\t{\r\n\t\t\t\tif(AccountLevel === \"[Account].[Account]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(ChannelLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ChannelLevel === \"[Channel].[Channel]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(RegionLevel)\r\n\t\t\t{\r\n\t\t\t\tif(RegionLevel === \"[Region].[Region]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(LocationLevel)\r\n\t\t\t{\r\n\t\t\t\tif(LocationLevel === \"[Location].[Location]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(PnLLevel)\r\n\t\t\t{\r\n\t\t\t\tif(PnLLevel === \"[PnL].[PnL]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(DemandDomainLevel)\r\n\t\t\t{\r\n\t\t\t\tif(DemandDomainLevel === \"[Demand Domain].[Demand Domain]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tleaf_Count=leaf_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (leaf_Count===0)\r\n\t\t\t{\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: To Enable History Realignment atleast one dimension should be selected at the Leaf Level.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: To Enable History Realignment atleast one dimension should be selected at the Leaf Level.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (ForecastRealignment)\r\n\t\t{\r\n\t\t\tif(ItemLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ItemLevel === \"[Item].[Planning Item]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(AccountLevel)\r\n\t\t\t{\r\n\t\t\t\tif(AccountLevel === \"[Account].[Planning Account]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(ChannelLevel)\r\n\t\t\t{\r\n\t\t\t\tif(ChannelLevel === \"[Channel].[Planning Channel]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(RegionLevel)\r\n\t\t\t{\r\n\t\t\t\tif(RegionLevel === \"[Region].[Planning Region]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(LocationLevel)\r\n\t\t\t{\r\n\t\t\t\tif(LocationLevel === \"[Location].[Planning Location]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(PnLLevel)\r\n\t\t\t{\r\n\t\t\t\tif(PnLLevel === \"[PnL].[Planning PnL]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(DemandDomainLevel)\r\n\t\t\t{\r\n\t\t\t\tif(DemandDomainLevel === \"[Demand Domain].[Planning Demand Domain]\")\r\n\t\t\t\t{\r\n\t\t\t\t\tplanning_Count=planning_Count+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (leaf_Count===0 && planning_Count===0)\r\n\t\t\t{\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: To Enable Forecast Realignment atleast one dimension should be selected at the Planning Level.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: To Enable Forecast Realignment atleast one dimension should be selected at the Planning Level.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tLog.Info(\"Validation Complete\");\r\n\t};\r\n\t\r\n\t// Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.ValidateRealignmentLevels",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "b1a803c2-a42e-e74c-3e10-9e19e7872f07",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212929,
    "Description": "CopyAssortment",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.CopyAssortment', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t//initiatlize the query modules\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar CopyAssortment = function (o9Params){\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar Item = parsedParams.Item;\r\n\t\tvar PlanningAccount = parsedParams.PlanningAccount;\r\n\t\tvar PlanningChannel = parsedParams.PlanningChannel;\r\n\t\tvar PlanningRegion = parsedParams.PlanningRegion;\r\n\t\tvar Location = parsedParams.Location;\r\n\t\tvar PlanningPnL = parsedParams.PlanningPnL;\r\n\t\tvar PlanningDemandDomain = parsedParams.PlanningDemandDomain;\r\n\t\tvar Dimension=parsedParams.Dimension;\r\n\t\tvar Attribute=parsedParams.Attribute;\r\n\t\tvar Member=parsedParams.Scope;\r\n\t\tvar CreatedBy=parsedParams.CreatedBy;\r\n\t\tvar CreatedOn=parsedParams.CreatedOn;\r\n\t\t\r\n\t\t//var RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Item: \" + Item);\r\n        Log.Info(\"Planning Account: \" + PlanningAccount);\r\n\t\tLog.Info(\"Planning Channel: \" + PlanningChannel);\r\n\t\tLog.Info(\"Planning Region: \" + PlanningRegion);\r\n\t\tLog.Info(\"Planning PnL: \" + PlanningPnL);\r\n\t\tLog.Info(\"Planning Demand Domain: \" + PlanningDemandDomain);\r\n\t\tLog.Info(\"Location: \" + Location);\r\n\t\t\r\n\t\t\r\n\t\tvar ItemCount = Item.length;\r\n\t\tvar PlanningAccountCount = PlanningAccount.length;\r\n\t\tvar PlanningChannelCount = PlanningChannel.length;\r\n\t\tvar PlanningRegionCount = PlanningRegion.length;\r\n\t\tvar PlanningPnLCount = PlanningPnL.length;\r\n\t\tvar PlanningDemandDomainCount = PlanningDemandDomain.length;\r\n\t\tvar LocationCount = Location.length;\r\n\t\t\r\n\t\t// Logging extracted parameters for validation\r\n        Log.Info(\"ItemCount: \" + ItemCount);\r\n        Log.Info(\"PlanningAccountCount: \" + PlanningAccountCount);\r\n        Log.Info(\"PlanningChannelCount: \" + PlanningChannelCount);\r\n\t\tLog.Info(\"PlanningRegionCount: \" + PlanningRegionCount);\r\n\t\tLog.Info(\"PlanningPnLCount: \" + PlanningPnLCount);\r\n\t\tLog.Info(\"PlanningDemandDomainCount: \" + PlanningDemandDomainCount);\r\n\t\tLog.Info(\"LocationCount: \" + LocationCount);\r\n\t\t\r\n\t\tfor (var i=0; i< ItemCount ; i++) {\r\n\r\n\t\t\tfor (var j=0; j< PlanningAccountCount ; j++){\r\n\t\t\t \r\n\t\t\t\tfor (var k=0; k< PlanningChannelCount ; k++){\r\n\t\t\t\t \r\n\t\t\t\t\tfor (var l=0; l< PlanningRegionCount ; l++){\r\n\t\t\t\t\t  \r\n\t\t\t\t\t\tfor (var m=0; m< PlanningPnLCount ; m++){\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t\tfor (var n=0; n< PlanningDemandDomainCount ; n++){\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tfor (var o=0; o< LocationCount ; o++){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsQuery ='Select ([Version].[Version Name].['+Version+'] * [Item].[Item].['+Item[i]+'] * [Account].[Planning Account].['+PlanningAccount[j]+'] * [Channel].[Planning Channel].['+PlanningChannel[k]+'] * [Region].[Planning Region].['+PlanningRegion[l]+'] * [PnL].[Planning PnL].['+PlanningPnL[m]+'] *  [Demand Domain].[Planning Demand Domain].['+PlanningDemandDomain[n]+'] * [Location].[Location].['+Location[o]+']  ) on row, ({Measure.[Assortment Final]}) on column where {Measure.[Assortment Final]==1};';\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar SelectValidAssortmentsQuery = queryModule.select(ValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsResponse = cellsetModule.createCellSet(SelectValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 1 \"+ValidAssortmentsResponse.rowCount );\r\n\t\t\t\t\t\t\t\t\tvar ItemQ;\r\n\t\t\t\t\t\t\t\t\tvar AccountQ;\r\n\t\t\t\t\t\t\t\t\tvar ChannelQ;\r\n\t\t\t\t\t\t\t\t\tvar RegionQ;\r\n\t\t\t\t\t\t\t\t\tvar PnLQ;\r\n\t\t\t\t\t\t\t\t\tvar DemandDomainQ;\r\n\t\t\t\t\t\t\t\t\tvar LocationQ;\r\n\t\t\t\t\t\t\t\t\tvar Query1;\r\n\t\t\t\t\t\t\t\t\tvar Query2;\r\n\t\t\t\t\t\t\t\t\tvar Query3;\r\n\t\t\t\t\t\t\t\t\tvar Query4;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (ValidAssortmentsResponse.rowCount > 0 ){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 2 \");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Item\"){ ItemQ=''+Attribute+'.['+Member+'].relatedmembers([Item]).Filter(#.[Is New Item] == FALSE)';}\r\n\t\t\t\t\t\t\t\t\t\telse ItemQ='[Item].[Item].['+Item[i]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Account\"){ AccountQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Account])';}\r\n\t\t\t\t\t\t\t\t\t\telse AccountQ='[Account].[Planning Account].['+PlanningAccount[j]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Channel\"){ ChannelQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Channel])';}\r\n\t\t\t\t\t\t\t\t\t\telse ChannelQ='[Channel].[Planning Channel].['+PlanningChannel[k]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Region\"){ RegionQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Region])';}\r\n\t\t\t\t\t\t\t\t\t\telse RegionQ='[Region].[Planning Region].['+PlanningRegion[l]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"PnL\"){ PnLQ=''+Attribute+'.['+Member+'].relatedmembers([Planning PnL])';}\r\n\t\t\t\t\t\t\t\t\t\telse PnLQ='[PnL].[Planning PnL].['+PlanningPnL[m]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Demand Domain\"){ DemandDomainQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Demand Domain])';}\r\n\t\t\t\t\t\t\t\t\t\telse DemandDomainQ='[Demand Domain].[Planning Demand Domain].['+PlanningDemandDomain[n]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Location\"){ LocationQ=''+Attribute+'.['+Member+'].relatedmembers([Location])';}\r\n\t\t\t\t\t\t\t\t\t\telse LocationQ='[Location].[Location].['+Location[o]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tQuery1 = 'Cartesian scope: ([Version].[Version Name].[' + Version + '] * ' + ItemQ + ' * ' + AccountQ + ' * ' + ChannelQ + ' * ' + RegionQ + ' * ' + PnLQ + ' * ' + DemandDomainQ + ' * ' + LocationQ + '); ' + 'Measure.[Assortment New] = if(coalesce(Measure.[Assortment System], 0) == 0) then 1; end scope;';\r\n       \r\n\t\t\t\t\t\t\t\t\t\tQuery2='scope: ([Version].[Version Name].['+Version+'] * '+ItemQ+' * '+AccountQ+' * '+ChannelQ+' * '+RegionQ+' * '+PnLQ+' * '+DemandDomainQ+'* '+LocationQ+'); Measure.[Assortment Inactive]=null; end scope;';\r\n\t\t\t\t\t\t\t\t\t\tQuery3='scope: ([Version].[Version Name].['+Version+'] * '+ItemQ+' * '+AccountQ+' * '+ChannelQ+' * '+RegionQ+' * '+PnLQ+' * '+DemandDomainQ+'* '+LocationQ+'); Measure.[Assortment Final] = if(sum(Measure.[Assortment System], Measure.[Assortment New], Measure.[Assortment Location Split], Measure.[Assortment Forecast Realignment]) >=1 && coalesce(Measure.[Assortment Inactive],0)>=1) then 0 else 1; end scope;';\r\n\t\t\t\t\t\t\t\t\t\tQuery4='scope: ([Version].[Version Name].['+Version+'] * '+ItemQ+' * '+AccountQ+' * '+ChannelQ+' * '+RegionQ+' * '+PnLQ+' * '+DemandDomainQ+'* '+LocationQ+'); Measure.[Assortment New Created By]=if(sum(Measure.[Assortment New],0) >=1) then\"'+CreatedBy+'\"; Measure.[Assortment New Created On]=if(sum(Measure.[Assortment New],0) >=1) then todatetime(\"'+CreatedOn+'\");end scope;';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query1);\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query2);\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query3);\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query4);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (error_Count === 0 ){\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\tStatus: 'Error',\r\n\t\t\t\tMessage: 'Assortments not created'\r\n\t\t\t};\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\tLog.Info(\"Assortment Copied\");\r\n    };\r\n\r\n    // Returning the CopyAssortment function\r\n    return {\r\n        CopyAssortment: CopyAssortment\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.CopyAssortment', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t//initiatlize the query modules\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar CopyAssortment = function (o9Params){\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar Item = parsedParams.Item;\r\n\t\tvar PlanningAccount = parsedParams.PlanningAccount;\r\n\t\tvar PlanningChannel = parsedParams.PlanningChannel;\r\n\t\tvar PlanningRegion = parsedParams.PlanningRegion;\r\n\t\tvar Location = parsedParams.Location;\r\n\t\tvar PlanningPnL = parsedParams.PlanningPnL;\r\n\t\tvar PlanningDemandDomain = parsedParams.PlanningDemandDomain;\r\n\t\tvar Dimension=parsedParams.Dimension;\r\n\t\tvar Attribute=parsedParams.Attribute;\r\n\t\tvar Member=parsedParams.Scope;\r\n\t\tvar CreatedBy=parsedParams.CreatedBy;\r\n\t\tvar CreatedOn=parsedParams.CreatedOn;\r\n\t\t\r\n\t\t//var RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Item: \" + Item);\r\n        Log.Info(\"Planning Account: \" + PlanningAccount);\r\n\t\tLog.Info(\"Planning Channel: \" + PlanningChannel);\r\n\t\tLog.Info(\"Planning Region: \" + PlanningRegion);\r\n\t\tLog.Info(\"Planning PnL: \" + PlanningPnL);\r\n\t\tLog.Info(\"Planning Demand Domain: \" + PlanningDemandDomain);\r\n\t\tLog.Info(\"Location: \" + Location);\r\n\t\t\r\n\t\t\r\n\t\tvar ItemCount = Item.length;\r\n\t\tvar PlanningAccountCount = PlanningAccount.length;\r\n\t\tvar PlanningChannelCount = PlanningChannel.length;\r\n\t\tvar PlanningRegionCount = PlanningRegion.length;\r\n\t\tvar PlanningPnLCount = PlanningPnL.length;\r\n\t\tvar PlanningDemandDomainCount = PlanningDemandDomain.length;\r\n\t\tvar LocationCount = Location.length;\r\n\t\t\r\n\t\t// Logging extracted parameters for validation\r\n        Log.Info(\"ItemCount: \" + ItemCount);\r\n        Log.Info(\"PlanningAccountCount: \" + PlanningAccountCount);\r\n        Log.Info(\"PlanningChannelCount: \" + PlanningChannelCount);\r\n\t\tLog.Info(\"PlanningRegionCount: \" + PlanningRegionCount);\r\n\t\tLog.Info(\"PlanningPnLCount: \" + PlanningPnLCount);\r\n\t\tLog.Info(\"PlanningDemandDomainCount: \" + PlanningDemandDomainCount);\r\n\t\tLog.Info(\"LocationCount: \" + LocationCount);\r\n\t\t\r\n\t\tfor (var i=0; i< ItemCount ; i++) {\r\n\r\n\t\t\tfor (var j=0; j< PlanningAccountCount ; j++){\r\n\t\t\t \r\n\t\t\t\tfor (var k=0; k< PlanningChannelCount ; k++){\r\n\t\t\t\t \r\n\t\t\t\t\tfor (var l=0; l< PlanningRegionCount ; l++){\r\n\t\t\t\t\t  \r\n\t\t\t\t\t\tfor (var m=0; m< PlanningPnLCount ; m++){\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t\tfor (var n=0; n< PlanningDemandDomainCount ; n++){\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tfor (var o=0; o< LocationCount ; o++){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsQuery ='Select ([Version].[Version Name].['+Version+'] * [Item].[Item].['+Item[i]+'] * [Account].[Planning Account].['+PlanningAccount[j]+'] * [Channel].[Planning Channel].['+PlanningChannel[k]+'] * [Region].[Planning Region].['+PlanningRegion[l]+'] * [PnL].[Planning PnL].['+PlanningPnL[m]+'] *  [Demand Domain].[Planning Demand Domain].['+PlanningDemandDomain[n]+'] * [Location].[Location].['+Location[o]+']  ) on row, ({Measure.[Assortment Final]}) on column where {Measure.[Assortment Final]==1};';\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar SelectValidAssortmentsQuery = queryModule.select(ValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsResponse = cellsetModule.createCellSet(SelectValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 1 \"+ValidAssortmentsResponse.rowCount );\r\n\t\t\t\t\t\t\t\t\tvar ItemQ;\r\n\t\t\t\t\t\t\t\t\tvar AccountQ;\r\n\t\t\t\t\t\t\t\t\tvar ChannelQ;\r\n\t\t\t\t\t\t\t\t\tvar RegionQ;\r\n\t\t\t\t\t\t\t\t\tvar PnLQ;\r\n\t\t\t\t\t\t\t\t\tvar DemandDomainQ;\r\n\t\t\t\t\t\t\t\t\tvar LocationQ;\r\n\t\t\t\t\t\t\t\t\tvar Query1;\r\n\t\t\t\t\t\t\t\t\tvar Query2;\r\n\t\t\t\t\t\t\t\t\tvar Query3;\r\n\t\t\t\t\t\t\t\t\tvar Query4;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (ValidAssortmentsResponse.rowCount > 0 ){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 2 \");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Item\"){ ItemQ=''+Attribute+'.['+Member+'].relatedmembers([Item]).Filter(#.[Is New Item] == FALSE)';}\r\n\t\t\t\t\t\t\t\t\t\telse ItemQ='[Item].[Item].['+Item[i]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Account\"){ AccountQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Account])';}\r\n\t\t\t\t\t\t\t\t\t\telse AccountQ='[Account].[Planning Account].['+PlanningAccount[j]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Channel\"){ ChannelQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Channel])';}\r\n\t\t\t\t\t\t\t\t\t\telse ChannelQ='[Channel].[Planning Channel].['+PlanningChannel[k]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Region\"){ RegionQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Region])';}\r\n\t\t\t\t\t\t\t\t\t\telse RegionQ='[Region].[Planning Region].['+PlanningRegion[l]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"PnL\"){ PnLQ=''+Attribute+'.['+Member+'].relatedmembers([Planning PnL])';}\r\n\t\t\t\t\t\t\t\t\t\telse PnLQ='[PnL].[Planning PnL].['+PlanningPnL[m]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Demand Domain\"){ DemandDomainQ=''+Attribute+'.['+Member+'].relatedmembers([Planning Demand Domain])';}\r\n\t\t\t\t\t\t\t\t\t\telse DemandDomainQ='[Demand Domain].[Planning Demand Domain].['+PlanningDemandDomain[n]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(Dimension===\"Location\"){ LocationQ=''+Attribute+'.['+Member+'].relatedmembers([Location])';}\r\n\t\t\t\t\t\t\t\t\t\telse LocationQ='[Location].[Location].['+Location[o]+']';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tQuery1 = 'Cartesian scope: ([Version].[Version Name].[' + Version + '] * ' + ItemQ + ' * ' + AccountQ + ' * ' + ChannelQ + ' * ' + RegionQ + ' * ' + PnLQ + ' * ' + DemandDomainQ + ' * ' + LocationQ + '); ' + 'Measure.[Assortment New] = if(coalesce(Measure.[Assortment System], 0) == 0) then 1; end scope;';\r\n       \r\n\t\t\t\t\t\t\t\t\t\tQuery2='scope: ([Version].[Version Name].['+Version+'] * '+ItemQ+' * '+AccountQ+' * '+ChannelQ+' * '+RegionQ+' * '+PnLQ+' * '+DemandDomainQ+'* '+LocationQ+'); Measure.[Assortment Inactive]=null; end scope;';\r\n\t\t\t\t\t\t\t\t\t\tQuery3='scope: ([Version].[Version Name].['+Version+'] * '+ItemQ+' * '+AccountQ+' * '+ChannelQ+' * '+RegionQ+' * '+PnLQ+' * '+DemandDomainQ+'* '+LocationQ+'); Measure.[Assortment Final] = if(sum(Measure.[Assortment System], Measure.[Assortment New], Measure.[Assortment Location Split], Measure.[Assortment Forecast Realignment]) >=1 && coalesce(Measure.[Assortment Inactive],0)>=1) then 0 else 1; end scope;';\r\n\t\t\t\t\t\t\t\t\t\tQuery4='scope: ([Version].[Version Name].['+Version+'] * '+ItemQ+' * '+AccountQ+' * '+ChannelQ+' * '+RegionQ+' * '+PnLQ+' * '+DemandDomainQ+'* '+LocationQ+'); Measure.[Assortment New Created By]=if(sum(Measure.[Assortment New],0) >=1) then\"'+CreatedBy+'\"; Measure.[Assortment New Created On]=if(sum(Measure.[Assortment New],0) >=1) then todatetime(\"'+CreatedOn+'\");end scope;';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query1);\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query2);\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query3);\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query4);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (error_Count === 0 ){\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\tStatus: 'Error',\r\n\t\t\t\tMessage: 'Assortments not created'\r\n\t\t\t};\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\tLog.Info(\"Assortment Copied\");\r\n    };\r\n\r\n    // Returning the CopyAssortment function\r\n    return {\r\n        CopyAssortment: CopyAssortment\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.CopyAssortment",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "417240dc-8e1e-6174-1783-3287cb5cd97a",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212930,
    "Description": "Refresh Stat Actual",
    "Documentation": "define('o9.DemandPlanning.RefreshStatMember', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    function findValueByKey(array, key) {\r\n       const item = array.find(item => item.name === key);\r\n       return item ? item.Member : undefined;\r\n       }\r\n       \r\n   var RefreshStatData = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ForecastIteration = parsedParams.ForecastIteration;\r\n                   var ForecastIterationType = parsedParams.ForecastIterationType\r\n                   var MW=parsedParams.MediumWeight\r\n                   Log.Info(\"ForecastIterationType: \"+ForecastIterationType);\r\n                  var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\":'+MW+'};'\r\n                  Log.Info(\"Parameterized Stat Member procedure :\"+createmember)\r\n                  var creatememberData = queryModule.select(createmember)\r\n                  Log.Info(\"Parameterized Create Stat Member procedure :\"+creatememberData)\r\n\r\n\t\t\t\t  \r\n\t\t\r\n                   \r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n                   \r\n                   var RunstatactualMW = 'exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"), (DataTransferMode, \"csv\")};'\r\n                   var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n                   if(MW){\r\n                        queryModule.select(RunstatactualMW)\r\n                        Log.Info(\"Create Stat Actual exec medium weight call: \" + RunstatactualMW)\r\n                   }\r\n                   else {\r\n                        queryModule.select(RunStatActual)\r\n                        Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n                   }     \r\n\t\t\t\t    \r\n               return parsedParams;\r\n               }\r\n   \r\n   \r\n   return {\r\n       RefreshStatData:RefreshStatData\r\n       \r\n   }\r\n   \r\n   });",
    "Code": "define('o9.DemandPlanning.RefreshStatMember', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    function findValueByKey(array, key) {\r\n       const item = array.find(item => item.name === key);\r\n       return item ? item.Member : undefined;\r\n       }\r\n       \r\n   var RefreshStatData = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ForecastIteration = parsedParams.ForecastIteration;\r\n                   var ForecastIterationType = parsedParams.ForecastIterationType\r\n                   var MW=parsedParams.MediumWeight\r\n                   Log.Info(\"ForecastIterationType: \"+ForecastIterationType);\r\n                  var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\":'+MW+'};'\r\n                  Log.Info(\"Parameterized Stat Member procedure :\"+createmember)\r\n                  var creatememberData = queryModule.select(createmember)\r\n                  Log.Info(\"Parameterized Create Stat Member procedure :\"+creatememberData)\r\n\r\n\t\t\t\t  \r\n\t\t\r\n                   \r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n                   \r\n                   var RunstatactualMW = 'exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"), (DataTransferMode, \"csv\")};'\r\n                   var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n                   if(MW){\r\n                        queryModule.select(RunstatactualMW)\r\n                        Log.Info(\"Create Stat Actual exec medium weight call: \" + RunstatactualMW)\r\n                   }\r\n                   else {\r\n                        queryModule.select(RunStatActual)\r\n                        Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n                   }     \r\n\t\t\t\t    \r\n               return parsedParams;\r\n               }\r\n   \r\n   \r\n   return {\r\n       RefreshStatData:RefreshStatData\r\n       \r\n   }\r\n   \r\n   });",
    "ModuleName": "o9.DemandPlanning.RefreshStatMember",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "94a438ae-2a1e-00ae-ee6e-abb0a31ccb97",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212931,
    "Description": "Python Infra Validation",
    "Documentation": "define('o9.DemandPlanning.PythonInfraValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n\r\n\r\n    var Validate=function(o9Params){\r\n        \r\n        var queryModule=require('o9/data/query')       \r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        var parsedParams = JSON.parse(o9Params);\r\n        var Config = parsedParams.Config\r\n        var MW = parsedParams.MediumWeight\r\n\r\n\r\n        \r\n\r\n       \r\n\r\n\r\n        let table1 = \"<table style='border: 1px solid #000; border-collapse: collapse; width: 48%; margin: 20px; font-size: 12px;'>\";\r\n        table1 += \"<tbody>\";\r\n        table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Config Version:</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>${Config}</td></tr>`;\r\n\r\n\r\n        var query1='Scope:(&CWV);Measure.[Infra Validation Status]=null;end scope;'\r\n        try{\r\n            queryModule.select(query1)\r\n        }\r\n        catch (err) {\r\n            log.Info(`${err.message || 'Unknown error'}`);\r\n        }\r\n\r\n\r\n        try {\r\n            query='exec plugin instance [DP090PythonInfraValidation] for measures {[Actual Cleansed]} using scope (&CWV) using arguments{([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),([Param.o9_sys_log_level], \"INFO\"),(ExecutionMode,\"MediumWeight\")};'\r\n            queryModule.select(query)\r\n            table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Medium Weight Execution</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n        } \r\n        catch (err) {\r\n            const errorMessage = `${err.message || 'Unknown error'}`;\r\n            \r\n\r\n            // Create the plain text string with the error message and query\r\n            const errorText = `Medium Weight Execution failed. \\n\\n${errorMessage}\\n\\nFailed Query Command:\\n${query}`;\r\n\r\n            // Encode the plain text as a data URL\r\n            const encodedText = encodeURIComponent(errorText);\r\n            table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Medium Weight Execution</td>\r\n                <td style='padding: 10px 10px; border: 1px solid #ddd;'>\r\n                    <a href=\"data:text/plain;charset=utf-8,${encodedText}\" download=\"errorData.txt\" style=\"color: red;\">Failed</a>\r\n                </td></tr>`;\r\n        }\r\n\r\n\r\n\r\n        if(!MW){\r\n        try {\r\n            query='exec plugin instance [DP090PythonInfraValidation] for measures {[Actual Cleansed]} using scope (&CWV) using arguments{([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),(\"SparkProfileConfig\", \"unsliced_low\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n            queryModule.select(query)\r\n            table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Cluster Mode</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n        } \r\n        catch (err) \r\n        {\r\n            const errorMessage = `${err.message || 'Unknown error'}`;\r\n\r\n            // Create the plain text string with the error message and query\r\n            const errorText = `Cluster Mode Execution failed. \\n\\n${errorMessage}\\n\\nFailed Query Command:\\n${query}`;\r\n\r\n            // Encode the plain text as a data URL\r\n            const encodedText = encodeURIComponent(errorText);\r\n            table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Cluster Mode Execution</td>\r\n                <td style='padding: 10px 10px; border: 1px solid #ddd;'>\r\n                    <a href=\"data:text/plain;charset=utf-8,${encodedText}\" download=\"errorData.txt\" style=\"color: red;\">Failed</a>\r\n                </td></tr>`;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n        //For Testing without execution\r\n        // table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Medium Weight Mode</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n        // table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Cluster Mode</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n\r\n\r\n\r\n\r\n        var StatusQuery='Select (&CWV) on row, ({Measure.[Infra Validation Status]}) on column;'\r\n        // Results=ExtractMeasure(query,'Infra Validation Status')\r\n \r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(StatusQuery))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n         { \r\n        \r\n            table1 += \"</tbody>\";\r\n            table1 += \"</table>\";\r\n            let table = `\r\n            <div style=\" display: flex; justify-content: space-between; width: 200%; margin: 5px 5px 30px 5px;\"> \r\n                ${table1}\r\n            </div>\r\n            `;\r\n\r\n            RuleOutputToUI = {Status: 'Success',Message:`${table}`};\r\n            return;\r\n        }\r\n        \r\n        Results=QueryCellset.row(0).cell(QueryCellset.measureColumnIndex('Infra Validation Status'))\r\n        const data = JSON.parse(Results)  \r\n        \r\n\r\n        const properties = data.Property;\r\n        const statuses = data.Status;\r\n        const rows = Object.keys(properties).map(key => ({\r\n        Property: properties[key],\r\n        Status: statuses[key]\r\n        }));\r\n        Log.Info('data')\r\n\r\n        \r\n        \r\n        \r\n        const maxRows = 1;\r\n\r\n        // Split the rows array into two parts based on the maximum rows per table\r\n        const rows1 = rows.slice(0, maxRows);  // First table rows\r\n        const rows2 = rows.slice(maxRows);     // Second table rows\r\n\r\n        \r\n\r\n\r\n\r\n        rows1.forEach(row => {\r\n            table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold;'>${row.Property}</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>${row.Status}</td></tr>`;\r\n        });\r\n        table1 += \"</tbody>\";\r\n        table1 += \"</table>\";\r\n\r\n        // Start the second table\r\n        let table2 = \"<table style='border: 1px solid #000; border-collapse: collapse; width: 48%; margin: 20px; font-size: 12px;'>\";\r\n        table2 += \"<tbody>\";\r\n        rows2.forEach(row => {\r\n            table2 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold;'>${row.Property}</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>${row.Status}</td></tr>`;\r\n        });\r\n        table2 += \"</tbody>\";\r\n        table2 += \"</table>\";\r\n\r\n        // Combine the tables into one HTML output, wrapped in a div with flexbox styling\r\n        let table = `\r\n       <div style=\"width: 150%; margin-left: -25%; margin-right: -25%; display: flex; justify-content: center;\">\r\n            <div style=\"display: flex; justify-content: space-between; width: 100%; margin-bottom: 5%;\"> \r\n                ${table1}\r\n                ${table2} \r\n            </div>\r\n        </div>\r\n        `;\r\n\r\n        Log.Info(`${table}`)\r\n        RuleOutputToUI = {Status: 'Success',Message:`${table}`};\r\n        \r\n\r\n\r\n       \r\n    }\r\nreturn {\r\nValidate:Validate\r\n}\r\n});",
    "Code": "define('o9.DemandPlanning.PythonInfraValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'], function(){\r\n\r\n\r\n\r\n    var Validate=function(o9Params){\r\n        \r\n        var queryModule=require('o9/data/query')       \r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        var parsedParams = JSON.parse(o9Params);\r\n        var Config = parsedParams.Config\r\n        var MW = parsedParams.MediumWeight\r\n\r\n\r\n        \r\n\r\n       \r\n\r\n\r\n        let table1 = \"<table style='border: 1px solid #000; border-collapse: collapse; width: 48%; margin: 20px; font-size: 12px;'>\";\r\n        table1 += \"<tbody>\";\r\n        table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Config Version:</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>${Config}</td></tr>`;\r\n\r\n\r\n        var query1='Scope:(&CWV);Measure.[Infra Validation Status]=null;end scope;'\r\n        try{\r\n            queryModule.select(query1)\r\n        }\r\n        catch (err) {\r\n            log.Info(`${err.message || 'Unknown error'}`);\r\n        }\r\n\r\n\r\n        try {\r\n            query='exec plugin instance [DP090PythonInfraValidation] for measures {[Actual Cleansed]} using scope (&CWV) using arguments{([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),([Param.o9_sys_log_level], \"INFO\"),(ExecutionMode,\"MediumWeight\")};'\r\n            queryModule.select(query)\r\n            table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Medium Weight Execution</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n        } \r\n        catch (err) {\r\n            const errorMessage = `${err.message || 'Unknown error'}`;\r\n            \r\n\r\n            // Create the plain text string with the error message and query\r\n            const errorText = `Medium Weight Execution failed. \\n\\n${errorMessage}\\n\\nFailed Query Command:\\n${query}`;\r\n\r\n            // Encode the plain text as a data URL\r\n            const encodedText = encodeURIComponent(errorText);\r\n            table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Medium Weight Execution</td>\r\n                <td style='padding: 10px 10px; border: 1px solid #ddd;'>\r\n                    <a href=\"data:text/plain;charset=utf-8,${encodedText}\" download=\"errorData.txt\" style=\"color: red;\">Failed</a>\r\n                </td></tr>`;\r\n        }\r\n\r\n\r\n\r\n        if(!MW){\r\n        try {\r\n            query='exec plugin instance [DP090PythonInfraValidation] for measures {[Actual Cleansed]} using scope (&CWV) using arguments{([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000),(\"IncludeNullRows\", \"False\"),(\"SparkProfileConfig\", \"unsliced_low\"),([Param.o9_sys_log_level], \"INFO\")};'\r\n            queryModule.select(query)\r\n            table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Cluster Mode</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n        } \r\n        catch (err) \r\n        {\r\n            const errorMessage = `${err.message || 'Unknown error'}`;\r\n\r\n            // Create the plain text string with the error message and query\r\n            const errorText = `Cluster Mode Execution failed. \\n\\n${errorMessage}\\n\\nFailed Query Command:\\n${query}`;\r\n\r\n            // Encode the plain text as a data URL\r\n            const encodedText = encodeURIComponent(errorText);\r\n            table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Cluster Mode Execution</td>\r\n                <td style='padding: 10px 10px; border: 1px solid #ddd;'>\r\n                    <a href=\"data:text/plain;charset=utf-8,${encodedText}\" download=\"errorData.txt\" style=\"color: red;\">Failed</a>\r\n                </td></tr>`;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n        //For Testing without execution\r\n        // table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Medium Weight Mode</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n        // table1+=`<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold'>Cluster Mode</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>Success</td></tr>`;\r\n\r\n\r\n\r\n\r\n        var StatusQuery='Select (&CWV) on row, ({Measure.[Infra Validation Status]}) on column;'\r\n        // Results=ExtractMeasure(query,'Infra Validation Status')\r\n \r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(StatusQuery))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n         { \r\n        \r\n            table1 += \"</tbody>\";\r\n            table1 += \"</table>\";\r\n            let table = `\r\n            <div style=\" display: flex; justify-content: space-between; width: 200%; margin: 5px 5px 30px 5px;\"> \r\n                ${table1}\r\n            </div>\r\n            `;\r\n\r\n            RuleOutputToUI = {Status: 'Success',Message:`${table}`};\r\n            return;\r\n        }\r\n        \r\n        Results=QueryCellset.row(0).cell(QueryCellset.measureColumnIndex('Infra Validation Status'))\r\n        const data = JSON.parse(Results)  \r\n        \r\n\r\n        const properties = data.Property;\r\n        const statuses = data.Status;\r\n        const rows = Object.keys(properties).map(key => ({\r\n        Property: properties[key],\r\n        Status: statuses[key]\r\n        }));\r\n        Log.Info('data')\r\n\r\n        \r\n        \r\n        \r\n        const maxRows = 1;\r\n\r\n        // Split the rows array into two parts based on the maximum rows per table\r\n        const rows1 = rows.slice(0, maxRows);  // First table rows\r\n        const rows2 = rows.slice(maxRows);     // Second table rows\r\n\r\n        \r\n\r\n\r\n\r\n        rows1.forEach(row => {\r\n            table1 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold;'>${row.Property}</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>${row.Status}</td></tr>`;\r\n        });\r\n        table1 += \"</tbody>\";\r\n        table1 += \"</table>\";\r\n\r\n        // Start the second table\r\n        let table2 = \"<table style='border: 1px solid #000; border-collapse: collapse; width: 48%; margin: 20px; font-size: 12px;'>\";\r\n        table2 += \"<tbody>\";\r\n        rows2.forEach(row => {\r\n            table2 += `<tr><td style='padding: 10px 10px; border: 1px solid #ddd; font-weight: bold;'>${row.Property}</td><td style='padding: 10px 10px; border: 1px solid #ddd;'>${row.Status}</td></tr>`;\r\n        });\r\n        table2 += \"</tbody>\";\r\n        table2 += \"</table>\";\r\n\r\n        // Combine the tables into one HTML output, wrapped in a div with flexbox styling\r\n        let table = `\r\n       <div style=\"width: 150%; margin-left: -25%; margin-right: -25%; display: flex; justify-content: center;\">\r\n            <div style=\"display: flex; justify-content: space-between; width: 100%; margin-bottom: 5%;\"> \r\n                ${table1}\r\n                ${table2} \r\n            </div>\r\n        </div>\r\n        `;\r\n\r\n        Log.Info(`${table}`)\r\n        RuleOutputToUI = {Status: 'Success',Message:`${table}`};\r\n        \r\n\r\n\r\n       \r\n    }\r\nreturn {\r\nValidate:Validate\r\n}\r\n});",
    "ModuleName": "o9.DemandPlanning.PythonInfraValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "33cdfcc0-84e2-76f3-b86a-371ef51dcc7d",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212932,
    "Description": "JS to validate Realignment entries",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.ValidateRealignment', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var Rule = parsedParams.Rule;\r\n        var FromItem = parsedParams.FromItem;\r\n\t\tvar ToItem = parsedParams.ToItem;\r\n\t\tvar FromAccount = parsedParams.FromAccount;\r\n\t\tvar ToAccount = parsedParams.ToAccount;\r\n\t\tvar FromChannel = parsedParams.FromChannel;\r\n\t\tvar ToChannel = parsedParams.ToChannel;\r\n\t\tvar FromRegion = parsedParams.FromRegion;\r\n\t\tvar ToRegion = parsedParams.ToRegion;\r\n\t\tvar FromLocation = parsedParams.FromLocation;\r\n\t\tvar ToLocation = parsedParams.ToLocation;\r\n\t\tvar FromPnL = parsedParams.FromPnL;\r\n\t\tvar ToPnL = parsedParams.ToPnL;\r\n\t\tvar FromDemandDomain = parsedParams.FromDemandDomain;\r\n\t\tvar ToDemandDomain = parsedParams.ToDemandDomain;\r\n\t\tvar ItemLevel = parsedParams.Itemlevel;\r\n\t\tvar AccountLevel = parsedParams.Accountlevel;\r\n\t\tvar ChannelLevel = parsedParams.Channellevel;\r\n\t\tvar RegionLevel = parsedParams.Regionlevel;\r\n\t\tvar LocationLevel = parsedParams.Locationlevel;\r\n\t\tvar PnLLevel = parsedParams.PnLlevel\r\n\t\tvar DemandDomainLevel = parsedParams.DemandDomainlevel\r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Realignment Type: \" + DataObject);\r\n        Log.Info(\"Rule ID: \" + Rule);\r\n        Log.Info(\"From Item: \" + FromItem);\r\n\t\tLog.Info(\"To Item \" + ToItem);\r\n\t\tLog.Info(\"From Account: \" + FromAccount);\r\n\t\tLog.Info(\"To Account: \" + ToAccount);\r\n\t\tLog.Info(\"From Channel: \" + FromChannel);\r\n\t\tLog.Info(\"To Channel: \" + ToChannel);\r\n\t\tLog.Info(\"From Region: \" + FromRegion);\r\n\t\tLog.Info(\"To Region: \" + ToRegion);\r\n\t\tLog.Info(\"From Location: \" + FromLocation);\r\n\t\tLog.Info(\"To Location: \" + ToLocation);\r\n       \r\n       \r\n       \r\n\t\tif (ItemLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromItem === null  || ToItem === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Item and To Item is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Item and To Item is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (AccountLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromAccount === null  || ToAccount === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Account and To Account is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Account and To Account is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ChannelLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromChannel === null  || ToChannel === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Channel and To Channel is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Channel and To Channel is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (RegionLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromRegion === null  || ToRegion === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Region and To Region is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Region and To Region is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (LocationLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromLocation === null  || ToLocation === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Location and To Location is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Location and To Location is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (PnLLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromPnL === null  || ToPnL === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From PnL and To PnL is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From PnL and To PnL is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (DemandDomainLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromDemandDomain === null  || ToDemandDomain === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From DemandDomain and To DemandDomain is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From DemandDomain and To DemandDomain is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Incrementing Rule by 1\r\n\t\tif(error_Count===0)\r\n\t\t{\r\n\t\t\tif (Rule == \"Rule_1000\")\r\n\t\t\t{\r\n\t\t\t\tRuleInitializationQuery = 'Cartesian Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Data Realignment].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = 1001; end scope;';\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tRuleInitializationQuery = 'Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Data Realignment].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = Measure.[Data Object Rule Count] +1;end scope;';\r\n\t\t\t}\r\n\t\t\tLog.Info(\"Rule Initialization Query: \"+RuleInitializationQuery);\r\n\t\t\tqueryModule.update(RuleInitializationQuery);\r\n\t\t}\r\n        // Logging completion of the validation process\r\n        Log.Info(\"Validation Complete\");\r\n    };\r\n\r\n    // Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.ValidateRealignment', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var Rule = parsedParams.Rule;\r\n        var FromItem = parsedParams.FromItem;\r\n\t\tvar ToItem = parsedParams.ToItem;\r\n\t\tvar FromAccount = parsedParams.FromAccount;\r\n\t\tvar ToAccount = parsedParams.ToAccount;\r\n\t\tvar FromChannel = parsedParams.FromChannel;\r\n\t\tvar ToChannel = parsedParams.ToChannel;\r\n\t\tvar FromRegion = parsedParams.FromRegion;\r\n\t\tvar ToRegion = parsedParams.ToRegion;\r\n\t\tvar FromLocation = parsedParams.FromLocation;\r\n\t\tvar ToLocation = parsedParams.ToLocation;\r\n\t\tvar FromPnL = parsedParams.FromPnL;\r\n\t\tvar ToPnL = parsedParams.ToPnL;\r\n\t\tvar FromDemandDomain = parsedParams.FromDemandDomain;\r\n\t\tvar ToDemandDomain = parsedParams.ToDemandDomain;\r\n\t\tvar ItemLevel = parsedParams.Itemlevel;\r\n\t\tvar AccountLevel = parsedParams.Accountlevel;\r\n\t\tvar ChannelLevel = parsedParams.Channellevel;\r\n\t\tvar RegionLevel = parsedParams.Regionlevel;\r\n\t\tvar LocationLevel = parsedParams.Locationlevel;\r\n\t\tvar PnLLevel = parsedParams.PnLlevel\r\n\t\tvar DemandDomainLevel = parsedParams.DemandDomainlevel\r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Realignment Type: \" + DataObject);\r\n        Log.Info(\"Rule ID: \" + Rule);\r\n        Log.Info(\"From Item: \" + FromItem);\r\n\t\tLog.Info(\"To Item \" + ToItem);\r\n\t\tLog.Info(\"From Account: \" + FromAccount);\r\n\t\tLog.Info(\"To Account: \" + ToAccount);\r\n\t\tLog.Info(\"From Channel: \" + FromChannel);\r\n\t\tLog.Info(\"To Channel: \" + ToChannel);\r\n\t\tLog.Info(\"From Region: \" + FromRegion);\r\n\t\tLog.Info(\"To Region: \" + ToRegion);\r\n\t\tLog.Info(\"From Location: \" + FromLocation);\r\n\t\tLog.Info(\"To Location: \" + ToLocation);\r\n       \r\n       \r\n       \r\n\t\tif (ItemLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromItem === null  || ToItem === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Item and To Item is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Item and To Item is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (AccountLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromAccount === null  || ToAccount === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Account and To Account is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Account and To Account is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ChannelLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromChannel === null  || ToChannel === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Channel and To Channel is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Channel and To Channel is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (RegionLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromRegion === null  || ToRegion === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Region and To Region is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Region and To Region is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (LocationLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromLocation === null  || ToLocation === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From Location and To Location is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From Location and To Location is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (PnLLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromPnL === null  || ToPnL === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From PnL and To PnL is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From PnL and To PnL is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (DemandDomainLevel!==null)\r\n\t\t{\r\n\t\t\tif(FromDemandDomain === null  || ToDemandDomain === null)\r\n\t\t\t{\r\n\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\tLog.Error(\"VALIDATION ERROR: For the Selected Realignment Type From DemandDomain and To DemandDomain is mandatory.\");\r\n\t\t\t\tRuleOutputToUI =\r\n\t\t\t\t{\r\n\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\tMessage: 'VALIDATION ERROR: For the Selected Realignment Type From DemandDomain and To DemandDomain is mandatory.'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Incrementing Rule by 1\r\n\t\tif(error_Count===0)\r\n\t\t{\r\n\t\t\tif (Rule == \"Rule_1000\")\r\n\t\t\t{\r\n\t\t\t\tRuleInitializationQuery = 'Cartesian Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Data Realignment].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = 1001; end scope;';\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tRuleInitializationQuery = 'Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Data Realignment].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = Measure.[Data Object Rule Count] +1;end scope;';\r\n\t\t\t}\r\n\t\t\tLog.Info(\"Rule Initialization Query: \"+RuleInitializationQuery);\r\n\t\t\tqueryModule.update(RuleInitializationQuery);\r\n\t\t}\r\n        // Logging completion of the validation process\r\n        Log.Info(\"Validation Complete\");\r\n    };\r\n\r\n    // Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.ValidateRealignment",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "3fd99796-c2cc-b14b-6b5f-e74b0609b351",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212933,
    "Description": "Populate existing Location parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingLocationParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingLocationString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var ExistingShiftPatternsLocationQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsLocationDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsLocationQuery));\r\n        Log.Info(\"ExistingShiftPatternsLocationQuery:\" + ExistingShiftPatternsLocationDataCellSet);\r\n        var ExistingShiftPatternsLocationList = ExistingShiftPatternsLocationDataCellSet.attributeMembers(\"Location\",LocationScope);\r\n        Log.Info('Location member list : ' + ExistingShiftPatternsLocationList);\r\n        }\r\n\t\t\r\n\t\telse{\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"pnl\", \"location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => !Masterlist.includes(element));\r\n\r\n\t\t// Elements in array2 but not in array1\r\n\t\tconst notInArray1 = Masterlist.filter(element => !measureListArray.includes(element));\r\n\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\t\r\n\t\tlet PnLScope = \"\";\r\n\t\tlet LocationScope = \"\";\r\n\r\n\t\t// Check if \"pnl\" is in the notCommonElements array\r\n\t\tif (notCommonElements.includes(\"pnl\")) {\r\n\t\tPnLScope = \"All PnL\";\r\n\t\t}\r\n\r\n\t\t// Check if \"location\" is in the notCommonElements array\r\n\t\tif (notCommonElements.includes(\"location\")) {\r\n\t\tLocationScope = \"All Location\";\r\n\t\t}\r\n\r\n\t\tLog.Info(\"PnLScope:\" + PnLScope);        // Output: All PnL\r\n\t\tLog.Info(\"LocationScope:\" + LocationScope); \t\r\n\t\tvar ExistingShiftPatternsLocationQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsLocationDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsLocationQuery));\r\n        Log.Info(\"ExistingShiftPatternsLocationQuery:\" + ExistingShiftPatternsLocationDataCellSet);\r\n        var ExistingShiftPatternsLocationList = ExistingShiftPatternsLocationDataCellSet.attributeMembers(\"Location\",LocationScope);\r\n        Log.Info('Location member list : ' + ExistingShiftPatternsLocationList);\r\n\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar ExistingShiftPatternsLocation = ExistingShiftPatternsLocationList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsLocation = ExistingShiftPatternsLocation.map(i => '[' + i);\r\n        ExistingShiftPatternsLocation = ExistingShiftPatternsLocation.map(i => i + ']');\r\n        if (ExistingShiftPatternsLocation.length === 0){\r\n            ExistingShiftPatternsLocation = \"[]\";\r\n        }\r\n        // if (LocationDataCellSetlist.length === ExistingShiftPatternsLocation.length ){\r\n        //     ExistingShiftPatternsLocation = \"[]\";\r\n        // }\r\n        parsedParams['ExistingLocationString'] = ExistingShiftPatternsLocation.toString();\r\n        Log.Info(\"ExistingLocationString: \" + ExistingShiftPatternsLocation.toString());\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ExistingLocationString: ExistingLocationString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingLocationParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingLocationString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var ExistingShiftPatternsLocationQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsLocationDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsLocationQuery));\r\n        Log.Info(\"ExistingShiftPatternsLocationQuery:\" + ExistingShiftPatternsLocationDataCellSet);\r\n        var ExistingShiftPatternsLocationList = ExistingShiftPatternsLocationDataCellSet.attributeMembers(\"Location\",LocationScope);\r\n        Log.Info('Location member list : ' + ExistingShiftPatternsLocationList);\r\n        }\r\n\t\t\r\n\t\telse{\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"pnl\", \"location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => !Masterlist.includes(element));\r\n\r\n\t\t// Elements in array2 but not in array1\r\n\t\tconst notInArray1 = Masterlist.filter(element => !measureListArray.includes(element));\r\n\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\t\r\n\t\tlet PnLScope = \"\";\r\n\t\tlet LocationScope = \"\";\r\n\r\n\t\t// Check if \"pnl\" is in the notCommonElements array\r\n\t\tif (notCommonElements.includes(\"pnl\")) {\r\n\t\tPnLScope = \"All PnL\";\r\n\t\t}\r\n\r\n\t\t// Check if \"location\" is in the notCommonElements array\r\n\t\tif (notCommonElements.includes(\"location\")) {\r\n\t\tLocationScope = \"All Location\";\r\n\t\t}\r\n\r\n\t\tLog.Info(\"PnLScope:\" + PnLScope);        // Output: All PnL\r\n\t\tLog.Info(\"LocationScope:\" + LocationScope); \t\r\n\t\tvar ExistingShiftPatternsLocationQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsLocationDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsLocationQuery));\r\n        Log.Info(\"ExistingShiftPatternsLocationQuery:\" + ExistingShiftPatternsLocationDataCellSet);\r\n        var ExistingShiftPatternsLocationList = ExistingShiftPatternsLocationDataCellSet.attributeMembers(\"Location\",LocationScope);\r\n        Log.Info('Location member list : ' + ExistingShiftPatternsLocationList);\r\n\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar ExistingShiftPatternsLocation = ExistingShiftPatternsLocationList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsLocation = ExistingShiftPatternsLocation.map(i => '[' + i);\r\n        ExistingShiftPatternsLocation = ExistingShiftPatternsLocation.map(i => i + ']');\r\n        if (ExistingShiftPatternsLocation.length === 0){\r\n            ExistingShiftPatternsLocation = \"[]\";\r\n        }\r\n        // if (LocationDataCellSetlist.length === ExistingShiftPatternsLocation.length ){\r\n        //     ExistingShiftPatternsLocation = \"[]\";\r\n        // }\r\n        parsedParams['ExistingLocationString'] = ExistingShiftPatternsLocation.toString();\r\n        Log.Info(\"ExistingLocationString: \" + ExistingShiftPatternsLocation.toString());\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ExistingLocationString: ExistingLocationString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingLocationParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "60aa7373-e4ca-efcc-87ad-8259922a6c74",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212934,
    "Description": "Reconciliation list",
    "Documentation": "define('o9.DemandPlanning.ReconList', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n    var ReconList = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var VersionName = parsedParams.VersionName;\r\n        var MW=parsedParams.MediumWeight\r\n\t\tvar InputStream = parsedParams.InputStream\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\tLog.Info(\"InputStream : \" + InputStream);\r\n        var Query='Select ([Version].[Version Name].['+VersionName+'] *  [Data Stream].[Data Stream Type].['+InputStream+']) on row,  ({Measure.[Forecast Reconciliation]}) on column;'\r\n        Log.Info(\"Select Query : \"+Query)\r\n        var Cellsetdata = cellsetModule.createCellSet(queryModule.select(Query));\r\n        var ForecastIteration = 'select ([Forecast Iteration].[Forecast Iteration].[FI-Default]);'\r\n        \r\n       \r\n        var data = Cellsetdata.row(0).cell(Cellsetdata.measureColumnIndex('Forecast Reconciliation'));\r\n        Log.Info(\"Forecast Recon List : \"+data) \r\n        var DataArr=data.split(',')\r\n        DataArr=DataArr.map(i=>\"\\\"\"+i+\"\\\"\")\r\n        Log.Info(\"Forecast Iteration Type :\" + DataArr)\r\n        var GenerateReconciledForecast='exec procedure o9DP0180GenerateReconciledForecast {\"VersionName\":[\"'+VersionName+'\"],\"ForecastIterationType\":['+DataArr+'] ,\"MediumWeight\":'+MW+'};'\r\n        Log.Info(\"Generate Reconciled Forecast Query :\"+GenerateReconciledForecast)\r\n        queryModule.select(GenerateReconciledForecast)\r\n        \r\n        \r\n        \r\n        \r\n        // var nullStatement='Scope: (&CWVAndScenarios.['+VersionName+'] * [Time].[Partial Week] * &AllPlanningItem * &AllPlanningAccount * &AllPlanningChannel * &AllPlanningRegion * &AllPlanningDemandDomain * &AllPlanningPnL * &AllPlanningLocation  ); Measure.[Stat Fcst]=null; end scope;'\r\n        // queryModule.select(nullStatement)\r\n        // Log.Info(\"Null Stat Fcst : \"+nullStatement)\r\n        var actualize='scope: (&AllPlanningItem * &AllPlanningAccount * &AllPlanningChannel * &AllPlanningRegion * &AllPlanningDemandDomain * &AllPlanningPnL * &AllPlanningLocation * &StatHistoryBuckets * &CWVAndScenarios.['+VersionName+'] );Measure.[Stat Fcst]=Measure.[Actual];end scope;'\r\n        queryModule.select(actualize)\r\n        Log.Info(\"Actualize statement : \"+actualize)\r\n        \r\n        var ForecastIterationcount = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n        if (ForecastIterationcount.rowCount > 0 ){\r\n            \r\n        var StatfcstFIDefault = 'Scope: (&CWVAndScenarios.['+VersionName+'] * &StatForecastBuckets * &AllPlanningItem * &AllPlanningAccount * &AllPlanningChannel * &AllPlanningRegion * &AllPlanningDemandDomain * &AllPlanningPnL * &AllPlanningLocation  ) ; Measure.[Stat Fcst]=Measure.[Stat Fcst PL Agg]; end scope;'\r\n        queryModule.select(StatfcstFIDefault)\r\n        Log.Info(\"Generate Stat Fcst for FI-Default : \"+StatfcstFIDefault)\r\n        }\r\n        \r\n        else {\r\n        \r\n        var MWPlugin='Exec plugin instance [DP065HorizonReconciliation] for measures {[Stat Fcst PL Agg]} using scope (&CWVAndScenarios.['+VersionName+']  * &AllForecastIterationTypes.filter(#.DisplayName in {'+DataArr+'})*[Data Stream].[Data Stream Type].['+InputStream+']) using arguments {([IgnoreMissingOutputs], true),([MaxSliceTableCells],2000000000),(ExecutionMode,\"MediumWeight\")};'\r\n        var CMPlugin='Exec plugin instance [DP065HorizonReconciliation] for measures {[Stat Fcst PL Agg]} using scope (&CWVAndScenarios.['+VersionName+']* &AllForecastIterationTypes.filter(#.DisplayName in {'+DataArr+'})*[Data Stream].[Data Stream Type].['+InputStream+']) using arguments {([IgnoreMissingOutputs], true),([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", \"False\"),(DriverMemory, \"5G\"), (DriverCores, 1), (NumExecutors, 3), (ExecutorMemory, \"2G\"), (ExecutorCores, 2),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n        if(MW){\r\n            Log.Info(\"MediumWeight Plugin execution : \"+MWPlugin)\r\n            queryModule.select(MWPlugin)\r\n        } else {\r\n            Log.Info(\"Cluster Mode Plugin Execution : \"+CMPlugin)\r\n            queryModule.select(CMPlugin)\r\n        }\r\n        }\r\n    };\r\n    return {\r\n        ReconList:ReconList,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ReconList', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n    var ReconList = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var VersionName = parsedParams.VersionName;\r\n        var MW=parsedParams.MediumWeight\r\n\t\tvar InputStream = parsedParams.InputStream\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\tLog.Info(\"InputStream : \" + InputStream);\r\n        var Query='Select ([Version].[Version Name].['+VersionName+'] *  [Data Stream].[Data Stream Type].['+InputStream+']) on row,  ({Measure.[Forecast Reconciliation]}) on column;'\r\n        Log.Info(\"Select Query : \"+Query)\r\n        var Cellsetdata = cellsetModule.createCellSet(queryModule.select(Query));\r\n        var ForecastIteration = 'select ([Forecast Iteration].[Forecast Iteration].[FI-Default]);'\r\n        \r\n       \r\n        var data = Cellsetdata.row(0).cell(Cellsetdata.measureColumnIndex('Forecast Reconciliation'));\r\n        Log.Info(\"Forecast Recon List : \"+data) \r\n        var DataArr=data.split(',')\r\n        DataArr=DataArr.map(i=>\"\\\"\"+i+\"\\\"\")\r\n        Log.Info(\"Forecast Iteration Type :\" + DataArr)\r\n        var GenerateReconciledForecast='exec procedure o9DP0180GenerateReconciledForecast {\"VersionName\":[\"'+VersionName+'\"],\"ForecastIterationType\":['+DataArr+'] ,\"MediumWeight\":'+MW+'};'\r\n        Log.Info(\"Generate Reconciled Forecast Query :\"+GenerateReconciledForecast)\r\n        queryModule.select(GenerateReconciledForecast)\r\n        \r\n        \r\n        \r\n        \r\n        // var nullStatement='Scope: (&CWVAndScenarios.['+VersionName+'] * [Time].[Partial Week] * &AllPlanningItem * &AllPlanningAccount * &AllPlanningChannel * &AllPlanningRegion * &AllPlanningDemandDomain * &AllPlanningPnL * &AllPlanningLocation  ); Measure.[Stat Fcst]=null; end scope;'\r\n        // queryModule.select(nullStatement)\r\n        // Log.Info(\"Null Stat Fcst : \"+nullStatement)\r\n        var actualize='scope: (&AllPlanningItem * &AllPlanningAccount * &AllPlanningChannel * &AllPlanningRegion * &AllPlanningDemandDomain * &AllPlanningPnL * &AllPlanningLocation * &StatHistoryBuckets * &CWVAndScenarios.['+VersionName+'] );Measure.[Stat Fcst]=Measure.[Actual];end scope;'\r\n        queryModule.select(actualize)\r\n        Log.Info(\"Actualize statement : \"+actualize)\r\n        \r\n        var ForecastIterationcount = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n        if (ForecastIterationcount.rowCount > 0 ){\r\n            \r\n        var StatfcstFIDefault = 'Scope: (&CWVAndScenarios.['+VersionName+'] * &StatForecastBuckets * &AllPlanningItem * &AllPlanningAccount * &AllPlanningChannel * &AllPlanningRegion * &AllPlanningDemandDomain * &AllPlanningPnL * &AllPlanningLocation  ) ; Measure.[Stat Fcst]=Measure.[Stat Fcst PL Agg]; end scope;'\r\n        queryModule.select(StatfcstFIDefault)\r\n        Log.Info(\"Generate Stat Fcst for FI-Default : \"+StatfcstFIDefault)\r\n        }\r\n        \r\n        else {\r\n        \r\n        var MWPlugin='Exec plugin instance [DP065HorizonReconciliation] for measures {[Stat Fcst PL Agg]} using scope (&CWVAndScenarios.['+VersionName+']  * &AllForecastIterationTypes.filter(#.DisplayName in {'+DataArr+'})*[Data Stream].[Data Stream Type].['+InputStream+']) using arguments {([IgnoreMissingOutputs], true),([MaxSliceTableCells],2000000000),(ExecutionMode,\"MediumWeight\")};'\r\n        var CMPlugin='Exec plugin instance [DP065HorizonReconciliation] for measures {[Stat Fcst PL Agg]} using scope (&CWVAndScenarios.['+VersionName+']* &AllForecastIterationTypes.filter(#.DisplayName in {'+DataArr+'})*[Data Stream].[Data Stream Type].['+InputStream+']) using arguments {([IgnoreMissingOutputs], true),([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", \"False\"),(DriverMemory, \"5G\"), (DriverCores, 1), (NumExecutors, 3), (ExecutorMemory, \"2G\"), (ExecutorCores, 2),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n        if(MW){\r\n            Log.Info(\"MediumWeight Plugin execution : \"+MWPlugin)\r\n            queryModule.select(MWPlugin)\r\n        } else {\r\n            Log.Info(\"Cluster Mode Plugin Execution : \"+CMPlugin)\r\n            queryModule.select(CMPlugin)\r\n        }\r\n        }\r\n    };\r\n    return {\r\n        ReconList:ReconList,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ReconList",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "c0e4a038-f547-40ba-da3b-40f9558d0719",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212935,
    "Description": "Validation to check if Iterations exist",
    "Documentation": "define('o9.DemandPlanning.ExistingIterationValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar validation= function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var cellset=cellsetModule.createCellSet(queryModule.select('Select([Forecast Iteration].[Forecast Iteration]);'));\r\n        if(cellset.rowCount>0)\r\n        {\r\n            RuleOutputToUI=\r\n            {\r\n                Status: \"Error\",\r\n                Message: \"Default Iteration cannot be created as Iterations already exist\"\r\n            }\r\n        }\r\n       \r\n\t};\r\n    return {\r\n       validation: validation\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingIterationValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar validation= function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var cellset=cellsetModule.createCellSet(queryModule.select('Select([Forecast Iteration].[Forecast Iteration]);'));\r\n        if(cellset.rowCount>0)\r\n        {\r\n            RuleOutputToUI=\r\n            {\r\n                Status: \"Error\",\r\n                Message: \"Default Iteration cannot be created as Iterations already exist\"\r\n            }\r\n        }\r\n       \r\n\t};\r\n    return {\r\n       validation: validation\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingIterationValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "7b707070-37fa-4333-d245-4ba22e343449",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212936,
    "Description": "Create Data Object",
    "Documentation": "define('o9.DemandPlanning.CreateConcatenatedString', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n    \r\n    var CreateConcatenatedString = function (o9Params) {\r\n        Log.Info(\"Harshit\");\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var concatenatedString = '';\r\n        \r\n        // Helper function to extract and append the value\r\n        function appendLevelValue(level) {\r\n            if (level) {\r\n                // Corrected regex to capture the value after the dot in the second set of square brackets\r\n                var match = level.match(/\\[[^\\]]+\\]\\.\\[([^\\]]+)\\]/);  // Capture the second part after the dot\r\n                \r\n                if (match && match[1]) {\r\n                    // Append the correct value (after the dot) to the concatenated string.\r\n                    concatenatedString += match[1] + ' ';\r\n                    Log.Info(concatenatedString);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Check Itemlevel and append\r\n        appendLevelValue(parsedParams.Itemlevel);\r\n        // Check Accountlevel and append\r\n        appendLevelValue(parsedParams.Accountlevel);\r\n        // Check PnLlevel and append\r\n        appendLevelValue(parsedParams.PnLlevel);\r\n        // Check Channellevel and append\r\n        appendLevelValue(parsedParams.Channellevel);\r\n        // Check Locationlevel and append\r\n        appendLevelValue(parsedParams.Locationlevel);\r\n        // Check DemandDomainlevel and append\r\n        appendLevelValue(parsedParams.DemandDomainlevel);\r\n        // Check Regionlevel and append\r\n        appendLevelValue(parsedParams.Regionlevel);\r\n        \r\n        // Add \"Realignment_Sell In\" to the end of the string\r\n        concatenatedString += \"Realignment_Sell In\";\r\n        // Trim the trailing space and return the concatenated string\r\n        parsedParams['concatenatedString'] = concatenatedString.trim();\r\n        var Version = parsedParams.Version || '';\r\n        var Itemlevel = parsedParams.Itemlevel || 'ALL';\r\n        var Accountlevel = parsedParams.Accountlevel || 'ALL';\r\n        var Channellevel = parsedParams.Channellevel || 'ALL';\r\n        var PnLlevel = parsedParams.PnLlevel || 'ALL';\r\n        var Regionlevel = parsedParams.Regionlevel || 'ALL';\r\n        var Locationlevel = parsedParams.Locationlevel || 'ALL';\r\n        var DemandDomainlevel = parsedParams.DemandDomainlevel || 'ALL';\r\n        var HistoryRealignment = parsedParams.HistoryRealignment;\r\n        var ForecastRealignment = parsedParams.ForecastRealignment;\r\n        var ProcessOrder = parsedParams.ProcessOrder;\r\n        \r\n\t\t\r\n        var Createmember = 'Createmember([Data Object].[Data Object]={,\"'+concatenatedString+'\"}, [Data Object].[Data Object Type]={,\"Sell In Realignment\"});';\r\n        queryModule.update(Createmember);\r\n        Log.Info(Createmember);\r\n        var cartesianscope = 'Cartesian scope: ([Version].[Version Name].['+Version+'] * [Data Object].[Data Object].['+concatenatedString+']); Measure.[Data Object Item Level]=\"'+Itemlevel+'\"; Measure.[Data Object Account Level]=\"'+Accountlevel+'\"; Measure.[Data Object Channel Level]=\"'+Channellevel+'\"; Measure.[Data Object Region Level]=\"'+Regionlevel+'\"; Measure.[Data Object Location Level]=\"'+Locationlevel+'\"; Measure.[Data Object PnL Level]=\"'+PnLlevel+'\"; Measure.[Data Object Demand Domain Level]=\"'+DemandDomainlevel+'\"; Measure.[Realign History]='+HistoryRealignment+'; Measure.[Realign Forecast]='+ForecastRealignment+';Measure.[Data Object Process Order]='+ProcessOrder+'; end scope;';\r\n        queryModule.update(cartesianscope);\r\n        Log.Info(cartesianscope);\r\n        Log.Info(concatenatedString);\r\n        \r\n        return parsedParams;\r\n    };\r\n    \r\n    return {\r\n        CreateConcatenatedString: CreateConcatenatedString\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.CreateConcatenatedString', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n    \r\n    var CreateConcatenatedString = function (o9Params) {\r\n        Log.Info(\"Harshit\");\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var concatenatedString = '';\r\n        \r\n        // Helper function to extract and append the value\r\n        function appendLevelValue(level) {\r\n            if (level) {\r\n                // Corrected regex to capture the value after the dot in the second set of square brackets\r\n                var match = level.match(/\\[[^\\]]+\\]\\.\\[([^\\]]+)\\]/);  // Capture the second part after the dot\r\n                \r\n                if (match && match[1]) {\r\n                    // Append the correct value (after the dot) to the concatenated string.\r\n                    concatenatedString += match[1] + ' ';\r\n                    Log.Info(concatenatedString);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Check Itemlevel and append\r\n        appendLevelValue(parsedParams.Itemlevel);\r\n        // Check Accountlevel and append\r\n        appendLevelValue(parsedParams.Accountlevel);\r\n        // Check PnLlevel and append\r\n        appendLevelValue(parsedParams.PnLlevel);\r\n        // Check Channellevel and append\r\n        appendLevelValue(parsedParams.Channellevel);\r\n        // Check Locationlevel and append\r\n        appendLevelValue(parsedParams.Locationlevel);\r\n        // Check DemandDomainlevel and append\r\n        appendLevelValue(parsedParams.DemandDomainlevel);\r\n        // Check Regionlevel and append\r\n        appendLevelValue(parsedParams.Regionlevel);\r\n        \r\n        // Add \"Realignment_Sell In\" to the end of the string\r\n        concatenatedString += \"Realignment_Sell In\";\r\n        // Trim the trailing space and return the concatenated string\r\n        parsedParams['concatenatedString'] = concatenatedString.trim();\r\n        var Version = parsedParams.Version || '';\r\n        var Itemlevel = parsedParams.Itemlevel || 'ALL';\r\n        var Accountlevel = parsedParams.Accountlevel || 'ALL';\r\n        var Channellevel = parsedParams.Channellevel || 'ALL';\r\n        var PnLlevel = parsedParams.PnLlevel || 'ALL';\r\n        var Regionlevel = parsedParams.Regionlevel || 'ALL';\r\n        var Locationlevel = parsedParams.Locationlevel || 'ALL';\r\n        var DemandDomainlevel = parsedParams.DemandDomainlevel || 'ALL';\r\n        var HistoryRealignment = parsedParams.HistoryRealignment;\r\n        var ForecastRealignment = parsedParams.ForecastRealignment;\r\n        var ProcessOrder = parsedParams.ProcessOrder;\r\n        \r\n\t\t\r\n        var Createmember = 'Createmember([Data Object].[Data Object]={,\"'+concatenatedString+'\"}, [Data Object].[Data Object Type]={,\"Sell In Realignment\"});';\r\n        queryModule.update(Createmember);\r\n        Log.Info(Createmember);\r\n        var cartesianscope = 'Cartesian scope: ([Version].[Version Name].['+Version+'] * [Data Object].[Data Object].['+concatenatedString+']); Measure.[Data Object Item Level]=\"'+Itemlevel+'\"; Measure.[Data Object Account Level]=\"'+Accountlevel+'\"; Measure.[Data Object Channel Level]=\"'+Channellevel+'\"; Measure.[Data Object Region Level]=\"'+Regionlevel+'\"; Measure.[Data Object Location Level]=\"'+Locationlevel+'\"; Measure.[Data Object PnL Level]=\"'+PnLlevel+'\"; Measure.[Data Object Demand Domain Level]=\"'+DemandDomainlevel+'\"; Measure.[Realign History]='+HistoryRealignment+'; Measure.[Realign Forecast]='+ForecastRealignment+';Measure.[Data Object Process Order]='+ProcessOrder+'; end scope;';\r\n        queryModule.update(cartesianscope);\r\n        Log.Info(cartesianscope);\r\n        Log.Info(concatenatedString);\r\n        \r\n        return parsedParams;\r\n    };\r\n    \r\n    return {\r\n        CreateConcatenatedString: CreateConcatenatedString\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.CreateConcatenatedString",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0446355d-16d3-a7db-1be9-f42cac1759c1",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212937,
    "Description": "o9.DemandPlanning.DimensionDS",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.DimensionDS', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t//initiatlize the query modules\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar DimensionDS = function (o9Params){\r\n\t\tvar parsedParams = JSON.parse(o9Params);\t\t\t\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar Item = parsedParams.Item;\r\n\t\tvar PlanningAccount = parsedParams.PlanningAccount;\r\n\t\tvar PlanningChannel = parsedParams.PlanningChannel;\r\n\t\tvar PlanningRegion = parsedParams.PlanningRegion;\r\n\t\tvar Location = parsedParams.Location;\r\n\t\tvar PlanningPnL = parsedParams.PlanningPnL;\r\n\t\tvar PlanningDemandDomain = parsedParams.PlanningDemandDomain;\r\n\t\r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Item: \" + Item);\r\n        Log.Info(\"Planning Account: \" + PlanningAccount);\r\n\t\tLog.Info(\"Planning Channel: \" + PlanningChannel);\r\n\t\tLog.Info(\"Planning Region: \" + PlanningRegion);\r\n\t\tLog.Info(\"Planning PnL: \" + PlanningPnL);\r\n\t\tLog.Info(\"Planning Demand Domain: \" + PlanningDemandDomain);\r\n\t\tLog.Info(\"Location: \" + Location);\r\n\t\t\r\n\t\tvar ItemCount = Item.length;\r\n\t\tvar PlanningAccountCount = PlanningAccount.length;\r\n\t\tvar PlanningChannelCount = PlanningChannel.length;\r\n\t\tvar PlanningRegionCount = PlanningRegion.length;\r\n\t\tvar PlanningPnLCount = PlanningPnL.length;\r\n\t\tvar PlanningDemandDomainCount = PlanningDemandDomain.length;\r\n\t\tvar LocationCount = Location.length;\r\n\t\t\r\n\t\t// Logging extracted parameters for validation\r\n        Log.Info(\"ItemCount: \" + ItemCount);\r\n        Log.Info(\"PlanningAccountCount: \" + PlanningAccountCount);\r\n        Log.Info(\"PlanningChannelCount: \" + PlanningChannelCount);\r\n\t\tLog.Info(\"PlanningRegionCount: \" + PlanningRegionCount);\r\n\t\tLog.Info(\"PlanningPnLCount: \" + PlanningPnLCount);\r\n\t\tLog.Info(\"PlanningDemandDomainCount: \" + PlanningDemandDomainCount);\r\n\t\tLog.Info(\"LocationCount: \" + LocationCount);\r\n\t\t\r\n\t\tvar ItemD;\r\n\t\tvar AccountD;\r\n\t\tvar ChannelD;\r\n\t\tvar RegionD;\r\n\t\tvar PnLD;\r\n\t\tvar DemandDomainD;\r\n\t\tvar LocationD;\r\n\t\tvar Query;\r\n        \t\r\n\t\tif (ItemCount===1){ ItemD='\"Item\"';}\r\n\t\telse ItemD='\"\"';\r\n\t\tif(PlanningAccountCount===1){ AccountD='\"Account\"';}\r\n\t\telse AccountD='\"\"';\r\n\t\tif(PlanningChannelCount===1){ ChannelD='\"Channel\"';}\r\n\t\telse ChannelD='\"\"';\r\n\t\tif(PlanningRegionCount===1){ RegionD='\"Region\"';}\r\n\t\telse RegionD='\"\"';\r\n\t\tif(PlanningPnLCount===1){ PnLD='\"PnL\"';}\r\n\t\telse PnLD='\"\"';\r\n\t\tif(PlanningDemandDomainCount===1){ DemandDomainD='\"Demand Domain\"';}\r\n\t\telse DemandDomainD='\"\"';\r\n\t\tif(LocationCount===1){ LocationD='\"Location\"';}\r\n\t\telse LocationD='\"\"';\r\n\t\t\r\n\t\tQuery = 'SELECT ([_SchemaDimension].[_Dimension].filter(#.Name in {'+AccountD+','+ChannelD+','+DemandDomainD+','+ItemD+','+LocationD+','+PnLD+','+RegionD+'}));';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\tparsedParams['Query'] = Query;\r\n\t\treturn parsedParams;\r\n    };\r\n\r\n    // Returning the DimensionDS function\r\n    return {\r\n        DimensionDS: DimensionDS\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.DimensionDS', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t//initiatlize the query modules\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar DimensionDS = function (o9Params){\r\n\t\tvar parsedParams = JSON.parse(o9Params);\t\t\t\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar Item = parsedParams.Item;\r\n\t\tvar PlanningAccount = parsedParams.PlanningAccount;\r\n\t\tvar PlanningChannel = parsedParams.PlanningChannel;\r\n\t\tvar PlanningRegion = parsedParams.PlanningRegion;\r\n\t\tvar Location = parsedParams.Location;\r\n\t\tvar PlanningPnL = parsedParams.PlanningPnL;\r\n\t\tvar PlanningDemandDomain = parsedParams.PlanningDemandDomain;\r\n\t\r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Item: \" + Item);\r\n        Log.Info(\"Planning Account: \" + PlanningAccount);\r\n\t\tLog.Info(\"Planning Channel: \" + PlanningChannel);\r\n\t\tLog.Info(\"Planning Region: \" + PlanningRegion);\r\n\t\tLog.Info(\"Planning PnL: \" + PlanningPnL);\r\n\t\tLog.Info(\"Planning Demand Domain: \" + PlanningDemandDomain);\r\n\t\tLog.Info(\"Location: \" + Location);\r\n\t\t\r\n\t\tvar ItemCount = Item.length;\r\n\t\tvar PlanningAccountCount = PlanningAccount.length;\r\n\t\tvar PlanningChannelCount = PlanningChannel.length;\r\n\t\tvar PlanningRegionCount = PlanningRegion.length;\r\n\t\tvar PlanningPnLCount = PlanningPnL.length;\r\n\t\tvar PlanningDemandDomainCount = PlanningDemandDomain.length;\r\n\t\tvar LocationCount = Location.length;\r\n\t\t\r\n\t\t// Logging extracted parameters for validation\r\n        Log.Info(\"ItemCount: \" + ItemCount);\r\n        Log.Info(\"PlanningAccountCount: \" + PlanningAccountCount);\r\n        Log.Info(\"PlanningChannelCount: \" + PlanningChannelCount);\r\n\t\tLog.Info(\"PlanningRegionCount: \" + PlanningRegionCount);\r\n\t\tLog.Info(\"PlanningPnLCount: \" + PlanningPnLCount);\r\n\t\tLog.Info(\"PlanningDemandDomainCount: \" + PlanningDemandDomainCount);\r\n\t\tLog.Info(\"LocationCount: \" + LocationCount);\r\n\t\t\r\n\t\tvar ItemD;\r\n\t\tvar AccountD;\r\n\t\tvar ChannelD;\r\n\t\tvar RegionD;\r\n\t\tvar PnLD;\r\n\t\tvar DemandDomainD;\r\n\t\tvar LocationD;\r\n\t\tvar Query;\r\n        \t\r\n\t\tif (ItemCount===1){ ItemD='\"Item\"';}\r\n\t\telse ItemD='\"\"';\r\n\t\tif(PlanningAccountCount===1){ AccountD='\"Account\"';}\r\n\t\telse AccountD='\"\"';\r\n\t\tif(PlanningChannelCount===1){ ChannelD='\"Channel\"';}\r\n\t\telse ChannelD='\"\"';\r\n\t\tif(PlanningRegionCount===1){ RegionD='\"Region\"';}\r\n\t\telse RegionD='\"\"';\r\n\t\tif(PlanningPnLCount===1){ PnLD='\"PnL\"';}\r\n\t\telse PnLD='\"\"';\r\n\t\tif(PlanningDemandDomainCount===1){ DemandDomainD='\"Demand Domain\"';}\r\n\t\telse DemandDomainD='\"\"';\r\n\t\tif(LocationCount===1){ LocationD='\"Location\"';}\r\n\t\telse LocationD='\"\"';\r\n\t\t\r\n\t\tQuery = 'SELECT ([_SchemaDimension].[_Dimension].filter(#.Name in {'+AccountD+','+ChannelD+','+DemandDomainD+','+ItemD+','+LocationD+','+PnLD+','+RegionD+'}));';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\tparsedParams['Query'] = Query;\r\n\t\treturn parsedParams;\r\n    };\r\n\r\n    // Returning the DimensionDS function\r\n    return {\r\n        DimensionDS: DimensionDS\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.DimensionDS",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "7c206346-a09c-0ac9-0fbe-4fed81bcebe7",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212938,
    "Description": "To validate scope is created for forecast iteration",
    "Documentation": "define('o9.DemandPlanning.StatIterationValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar VersionName = parsedParams.VersionName;\r\nvar Iteration= parsedParams.ForecastIteration;\r\n\r\nLog.Info(\"Version Name: \" + VersionName);\r\n\r\nvar Iterationcount = 'Select ([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+VersionName+']*{Measure.[Is Scope Selected]}) where {Measure.[Is Scope Selected]==1};';\r\nvar IterationcountData = cellsetModule.createCellSet(queryModule.select(Iterationcount));\r\nLog.Info(\"RowCount: \"+IterationcountData.rowCount)\r\nif (IterationcountData.rowCount === 0)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Scope not selected! Please configure the scope for the Forecast Iteration before proceeding.'    \r\n  };\r\n} \r\n\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.StatIterationValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar VersionName = parsedParams.VersionName;\r\nvar Iteration= parsedParams.ForecastIteration;\r\n\r\nLog.Info(\"Version Name: \" + VersionName);\r\n\r\nvar Iterationcount = 'Select ([Forecast Iteration].[Forecast Iteration].['+Iteration+'] * [Version].[Version Name].['+VersionName+']*{Measure.[Is Scope Selected]}) where {Measure.[Is Scope Selected]==1};';\r\nvar IterationcountData = cellsetModule.createCellSet(queryModule.select(Iterationcount));\r\nLog.Info(\"RowCount: \"+IterationcountData.rowCount)\r\nif (IterationcountData.rowCount === 0)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Scope not selected! Please configure the scope for the Forecast Iteration before proceeding.'    \r\n  };\r\n} \r\n\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.StatIterationValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0d629ed9-526e-701a-9bdb-3ce89f7a493b",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212939,
    "Description": "Validation for Forecast Iteration Creation",
    "Documentation": "define('o9.DemandPlanning.TypeFilterValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar VersionName = parsedParams.VersionName;\r\nvar IterationType  = parsedParams.ForecastIterationType;\r\n\r\n\r\nLog.Info(\"Version Name: \" + VersionName);\r\nLog.Info(\"ForecastIterationType: \" + IterationType);\r\n\r\nvar Query='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] ) on row, ({Measure.[Is Filter Attribute Set]}) on column;'\r\nvar QueryResult=cellsetModule.createCellSet(queryModule.select(Query));\r\nif (QueryResult.rowCount===0)\r\n{\r\n    Log.Info(\"Validation Complete\");\r\n    return\r\n}\r\nvar flag=QueryResult.row(0).cell(QueryResult.measureColumnIndex('Is Filter Attribute Set'));\r\nif (flag === 1)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Cannot create Iteration of Iteration Type where Stat Group Level is set!'    \r\n  };\r\n} \r\n\t}\r\n\t\r\n    return {\r\n        validation : validation\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.TypeFilterValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar VersionName = parsedParams.VersionName;\r\nvar IterationType  = parsedParams.ForecastIterationType;\r\n\r\n\r\nLog.Info(\"Version Name: \" + VersionName);\r\nLog.Info(\"ForecastIterationType: \" + IterationType);\r\n\r\nvar Query='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] ) on row, ({Measure.[Is Filter Attribute Set]}) on column;'\r\nvar QueryResult=cellsetModule.createCellSet(queryModule.select(Query));\r\nif (QueryResult.rowCount===0)\r\n{\r\n    Log.Info(\"Validation Complete\");\r\n    return\r\n}\r\nvar flag=QueryResult.row(0).cell(QueryResult.measureColumnIndex('Is Filter Attribute Set'));\r\nif (flag === 1)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Cannot create Iteration of Iteration Type where Stat Group Level is set!'    \r\n  };\r\n} \r\n\t}\r\n\t\r\n    return {\r\n        validation : validation\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.TypeFilterValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "77825a63-455f-1810-fc6e-f3c2546144fb",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212940,
    "Description": "NewItemUnitSize",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemUnitSize'\r\ndefine('o9.DemandPlanning.NewItemUnitSize', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemUnitSize function\r\n    var NewItemUnitSize = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemUnitSizeQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[Unit Size] );';\r\n        var NewItemUnitSizeDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemUnitSizeQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemUnitSizeQuery : ' + NewItemUnitSizeQuery);\r\n\t\t// Check if NewUnitSize is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemUnitSizeDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"UnitSize\"\r\n            var NewItemUnitSizeList = NewItemUnitSizeDataCellSet.attributeMembers(\"Item\", \"Unit Size\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemUnitSize -> NewItemUnitSizeList : ' + NewItemUnitSizeList);\r\n\r\n            // Extract the names from the result and store in NewUnitSize\r\n            var NewUnitSize = NewItemUnitSizeList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemUnitSize'] = NewUnitSize[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemUnitSize'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemUnitSize function as part of the module\r\n    return {\r\n        NewItemUnitSize: NewItemUnitSize\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemUnitSize'\r\ndefine('o9.DemandPlanning.NewItemUnitSize', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemUnitSize function\r\n    var NewItemUnitSize = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemUnitSizeQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[Unit Size] );';\r\n        var NewItemUnitSizeDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemUnitSizeQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemUnitSizeQuery : ' + NewItemUnitSizeQuery);\r\n\t\t// Check if NewUnitSize is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemUnitSizeDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"UnitSize\"\r\n            var NewItemUnitSizeList = NewItemUnitSizeDataCellSet.attributeMembers(\"Item\", \"Unit Size\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemUnitSize -> NewItemUnitSizeList : ' + NewItemUnitSizeList);\r\n\r\n            // Extract the names from the result and store in NewUnitSize\r\n            var NewUnitSize = NewItemUnitSizeList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemUnitSize'] = NewUnitSize[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemUnitSize'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemUnitSize function as part of the module\r\n    return {\r\n        NewItemUnitSize: NewItemUnitSize\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemUnitSize",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "bcc20a22-efd3-d578-aff1-9ef1d98c3e70",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212941,
    "Description": "o9.DemandPlanning.AttributeDS",
    "Documentation": "define('o9.DemandPlanning.AttributeDS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n    var AttributeDS = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        if (parsedParams.Dimension === null) {\r\n            Log.Info(\"Dimension is null. Returning parsedParams as is.\");\r\n            return parsedParams;\r\n        }\r\n\r\n        var Dimension = parsedParams.Dimension;\r\n        var Query;\r\n\r\n        Log.Info(\"Dimension: \" + Dimension);\r\n\r\n        if ([\"Item\", \"Location\"].includes(Dimension)) {\r\n            if (Dimension === \"Item\") {\r\n                Query = 'SELECT ([_SchemaDimension].[_Dimension].[Item].relatedmembers([_Attribute])) ' +\r\n                        'WHERE {[_SchemaDimension].[_Level].filter(#.Name contains \"[DP Item Hierarchy]\")};';\r\n            }\r\n            if (Dimension === \"Location\") {\r\n                Query = 'SELECT ([_SchemaDimension].[_Dimension].[Location].relatedmembers([_Attribute])) ' +\r\n                        'WHERE {[_SchemaDimension].[_Level].filter(#.Name contains \"[DP Location Hierarchy]\")};';\r\n            }\r\n        } else {\r\n            var hierarchyName = \"\";\r\n            switch (Dimension) {\r\n                case \"Account\":\r\n                    hierarchyName = \"[Account Hierarchy]\";\r\n                    break;\r\n                case \"Channel\":\r\n                    hierarchyName = \"[Channel Hierarchy]\";\r\n                    break;\r\n                case \"Demand Domain\":\r\n                    hierarchyName = \"[Demand Domain Hierarchy]\";\r\n                    break;\r\n                case \"PnL\":\r\n                    hierarchyName = \"[PnL Hierarchy]\";\r\n                    break;\r\n                case \"Region\":\r\n                    hierarchyName = \"[Region Hierarachy]\";\r\n                    break;\r\n            }\r\n\r\n            Query = 'SELECT (' +\r\n                    '[_SchemaDimension].[_Dimension].[' + Dimension + ']' +\r\n                    '.relatedmembers([_Attribute])' +\r\n                    '.filter(#.Name != \"[' + Dimension + '].[' + Dimension + ']\")' +\r\n                    ') WHERE {' +\r\n                    '[_SchemaDimension].[_Level].filter(#.Name contains \"' + hierarchyName + '\")' +\r\n                    '};';\r\n        }\r\n\r\n        parsedParams['Query'] = Query;\r\n        return parsedParams;\r\n    };\r\n\r\n    return {\r\n        AttributeDS: AttributeDS\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.AttributeDS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n    var AttributeDS = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        if (parsedParams.Dimension === null) {\r\n            Log.Info(\"Dimension is null. Returning parsedParams as is.\");\r\n            return parsedParams;\r\n        }\r\n\r\n        var Dimension = parsedParams.Dimension;\r\n        var Query;\r\n\r\n        Log.Info(\"Dimension: \" + Dimension);\r\n\r\n        if ([\"Item\", \"Location\"].includes(Dimension)) {\r\n            if (Dimension === \"Item\") {\r\n                Query = 'SELECT ([_SchemaDimension].[_Dimension].[Item].relatedmembers([_Attribute])) ' +\r\n                        'WHERE {[_SchemaDimension].[_Level].filter(#.Name contains \"[DP Item Hierarchy]\")};';\r\n            }\r\n            if (Dimension === \"Location\") {\r\n                Query = 'SELECT ([_SchemaDimension].[_Dimension].[Location].relatedmembers([_Attribute])) ' +\r\n                        'WHERE {[_SchemaDimension].[_Level].filter(#.Name contains \"[DP Location Hierarchy]\")};';\r\n            }\r\n        } else {\r\n            var hierarchyName = \"\";\r\n            switch (Dimension) {\r\n                case \"Account\":\r\n                    hierarchyName = \"[Account Hierarchy]\";\r\n                    break;\r\n                case \"Channel\":\r\n                    hierarchyName = \"[Channel Hierarchy]\";\r\n                    break;\r\n                case \"Demand Domain\":\r\n                    hierarchyName = \"[Demand Domain Hierarchy]\";\r\n                    break;\r\n                case \"PnL\":\r\n                    hierarchyName = \"[PnL Hierarchy]\";\r\n                    break;\r\n                case \"Region\":\r\n                    hierarchyName = \"[Region Hierarachy]\";\r\n                    break;\r\n            }\r\n\r\n            Query = 'SELECT (' +\r\n                    '[_SchemaDimension].[_Dimension].[' + Dimension + ']' +\r\n                    '.relatedmembers([_Attribute])' +\r\n                    '.filter(#.Name != \"[' + Dimension + '].[' + Dimension + ']\")' +\r\n                    ') WHERE {' +\r\n                    '[_SchemaDimension].[_Level].filter(#.Name contains \"' + hierarchyName + '\")' +\r\n                    '};';\r\n        }\r\n\r\n        parsedParams['Query'] = Query;\r\n        return parsedParams;\r\n    };\r\n\r\n    return {\r\n        AttributeDS: AttributeDS\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.AttributeDS",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "3136496b-c122-a625-2428-65386aee1ad0",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212942,
    "Description": "NewItemPackSize",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemPackSize'\r\ndefine('o9.DemandPlanning.NewItemPackSize', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemPackSize function\r\n    var NewItemPackSize = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemPackSizeQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[Pack Size] );';\r\n        var NewItemPackSizeDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemPackSizeQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemPackSizeQuery : ' + NewItemPackSizeQuery);\r\n\t\t// Check if NewPackSize is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemPackSizeDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"PackSize\"\r\n            var NewItemPackSizeList = NewItemPackSizeDataCellSet.attributeMembers(\"Item\", \"Pack Size\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemPackSize -> NewItemPackSizeList : ' + NewItemPackSizeList);\r\n\r\n            // Extract the names from the result and store in NewPackSize\r\n            var NewPackSize = NewItemPackSizeList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemPackSize'] = NewPackSize[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemPackSize'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemPackSize function as part of the module\r\n    return {\r\n        NewItemPackSize: NewItemPackSize\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemPackSize'\r\ndefine('o9.DemandPlanning.NewItemPackSize', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemPackSize function\r\n    var NewItemPackSize = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemPackSizeQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[Pack Size] );';\r\n        var NewItemPackSizeDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemPackSizeQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemPackSizeQuery : ' + NewItemPackSizeQuery);\r\n\t\t// Check if NewPackSize is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemPackSizeDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"PackSize\"\r\n            var NewItemPackSizeList = NewItemPackSizeDataCellSet.attributeMembers(\"Item\", \"Pack Size\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemPackSize -> NewItemPackSizeList : ' + NewItemPackSizeList);\r\n\r\n            // Extract the names from the result and store in NewPackSize\r\n            var NewPackSize = NewItemPackSizeList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemPackSize'] = NewPackSize[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemPackSize'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemPackSize function as part of the module\r\n    return {\r\n        NewItemPackSize: NewItemPackSize\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemPackSize",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "cc793af2-9c87-9b01-06b7-651986069f32",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212943,
    "Description": "Validation to check if master iteration is created",
    "Documentation": "define('o9.DemandPlanning.ExistingMasterIterationValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar validation= function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var cellset=cellsetModule.createCellSet(queryModule.select('Select([Forecast Iteration].[Forecast Iteration].[FI-Default]);'));\r\n        Log.Info(\"Row Count :\"+cellset.rowCount)\r\n        if(cellset.rowCount>0)\r\n        {\r\n            RuleOutputToUI=\r\n            {\r\n                Status: \"Error\",\r\n                Message: \"Master Iteration created\"\r\n            }\r\n        }\r\n       \r\n\t};\r\n    return {\r\n       validation: validation\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingMasterIterationValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar validation= function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var cellset=cellsetModule.createCellSet(queryModule.select('Select([Forecast Iteration].[Forecast Iteration].[FI-Default]);'));\r\n        Log.Info(\"Row Count :\"+cellset.rowCount)\r\n        if(cellset.rowCount>0)\r\n        {\r\n            RuleOutputToUI=\r\n            {\r\n                Status: \"Error\",\r\n                Message: \"Master Iteration created\"\r\n            }\r\n        }\r\n       \r\n\t};\r\n    return {\r\n       validation: validation\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingMasterIterationValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "d641a8c2-7e56-6d22-84b5-2529230e14fa",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212944,
    "Description": "to restrict creation of new iteration",
    "Documentation": "define('o9.DemandPlanning.RestrictIterationCreation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n\r\n\r\nvar validation = function(o9Params){\r\n\r\n\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\nLog.Info(\"init restrict\")\r\nvar ForecastIterationType = parsedParams.ForecastIterationType;\r\nvar VersionName = parsedParams.VersionName;\r\nvar MemberName = parsedParams.MemberName\r\nvar ForecastIterationCreatedBy = parsedParams.ForecastIterationCreatedBy\r\nvar ItemLevel = parsedParams.ItemLevel\r\nvar AccountLevel = parsedParams.AccountLevel\r\nvar ChannelLevel = parsedParams.ChannelLevel\r\nvar RegionLevel = parsedParams.RegionLevel\r\nvar LocationLevel = parsedParams.LocationLevel\r\nvar PnLLevel = parsedParams.PnLLevel\r\nvar DemandDomainLevel = parsedParams.DemandDomainLevel\r\nvar DisaggregationType = parsedParams.DisaggregationType\r\nvar Description = parsedParams.Description\r\nvar DisplayName = parsedParams.DisplayName\r\nvar MaxNumberofIteration = 10 \r\n\r\n\r\nLog.Info(\"Version Name: \" + VersionName);\r\nLog.Info(\"ForecastIterationType - \" + ForecastIterationType);\r\nLog.Info(\" MaxNumberofIteration - \" + MaxNumberofIteration);\r\n\r\n\r\n// var IsScopeLocked = 'Select ([Version].[Version Name].['+VersionName +'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType +'] ) on row, ({Measure.[Is Iteration Scope Level Created]}) on column;';\r\n// var IsScopeLockedData = cellsetModule.createCellSet(queryModule.select(IsScopeLocked));\r\nvar InputStream = ForecastIterationType.split('_');\r\nInputStream = InputStream[1];\r\nvar IterationCount = 'select ([Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains \"_'+InputStream+'_\" )*[Forecast Iteration].[Forecast Iteration]);';\r\nvar IterationCountData = cellsetModule.createCellSet(queryModule.select(IterationCount));\r\n\r\n\r\n\r\nLog.Info(\" IterationCountData - \" + IterationCountData.rowCount);\r\n\r\n// if (IsScopeLockedData.rowCount > 0)\r\n// {\r\n// \tRuleOutputToUI =\r\n// \t{\r\n// \tStatus: 'Error',\r\n// \tMessage: 'Not allowed to create a new iteration within an Iteration Type which already contains iteration(s) with scope configured! Please reset the scope of existing relevant iteration(s) and try again.'    \r\n//   };\r\n// } \r\n\r\nif (IterationCountData.rowCount >= MaxNumberofIteration)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Not allowed to create a new iteration because you have exceeded maximum number allowed (5) per input stream.'    \r\n  };\r\n  return RuleOutputToUI;\r\n}\r\n\r\nvar createIteration = 'exec procedure o9DP0010InitializeForecastIteration{\"VersionName\" : [\"'+VersionName+'\"],\"MemberName\" : \"'+MemberName+'\",\"ForecastIterationType\" : \"'+ForecastIterationType+'\",\"ForecastIterationCreatedBy\" : \"'+ForecastIterationCreatedBy+'\",\"Item\":\"'+ItemLevel+'\", \"Account\":\"'+AccountLevel+'\" ,\"Channel\":\"'+ChannelLevel+'\",\"Region\":\"'+RegionLevel+'\",\"Location\":\"'+LocationLevel+'\",\"PnL\":\"'+PnLLevel+'\", \"DemandDomain\":\"'+DemandDomainLevel+'\" ,\"Disaggregation\":\"'+DisaggregationType+'\", \"Description\":\"'+Description+'\",\"DisplayName\":\"'+DisplayName+'\" };'\r\nqueryModule.select(createIteration)\r\n\r\nvar FilterAttribute = 'Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration] ) on row, ({Measure.[Is Filter Attribute Set]}) on column;'\r\nvar FilterAttributeCount = cellsetModule.createCellSet(queryModule.select(FilterAttribute));\r\nLog.Info(\"FilterAttributeCount - \" + FilterAttributeCount.rowCount);\r\nvar flag = ''\r\nif (FilterAttributeCount.rowCount > 0){\r\n    Log.Info(\"FilterAttributeCount - \" + FilterAttributeCount.rowCount);\r\n\tflag = 'cartesian scope: ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration] ) ;Measure.[Is Filter Attribute Set] = 1;end scope;'\r\n    queryModule.select(flag)\r\n\t}\r\n\r\n\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.RestrictIterationCreation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n\r\n\r\nvar validation = function(o9Params){\r\n\r\n\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\nLog.Info(\"init restrict\")\r\nvar ForecastIterationType = parsedParams.ForecastIterationType;\r\nvar VersionName = parsedParams.VersionName;\r\nvar MemberName = parsedParams.MemberName\r\nvar ForecastIterationCreatedBy = parsedParams.ForecastIterationCreatedBy\r\nvar ItemLevel = parsedParams.ItemLevel\r\nvar AccountLevel = parsedParams.AccountLevel\r\nvar ChannelLevel = parsedParams.ChannelLevel\r\nvar RegionLevel = parsedParams.RegionLevel\r\nvar LocationLevel = parsedParams.LocationLevel\r\nvar PnLLevel = parsedParams.PnLLevel\r\nvar DemandDomainLevel = parsedParams.DemandDomainLevel\r\nvar DisaggregationType = parsedParams.DisaggregationType\r\nvar Description = parsedParams.Description\r\nvar DisplayName = parsedParams.DisplayName\r\nvar MaxNumberofIteration = 10 \r\n\r\n\r\nLog.Info(\"Version Name: \" + VersionName);\r\nLog.Info(\"ForecastIterationType - \" + ForecastIterationType);\r\nLog.Info(\" MaxNumberofIteration - \" + MaxNumberofIteration);\r\n\r\n\r\n// var IsScopeLocked = 'Select ([Version].[Version Name].['+VersionName +'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType +'] ) on row, ({Measure.[Is Iteration Scope Level Created]}) on column;';\r\n// var IsScopeLockedData = cellsetModule.createCellSet(queryModule.select(IsScopeLocked));\r\nvar InputStream = ForecastIterationType.split('_');\r\nInputStream = InputStream[1];\r\nvar IterationCount = 'select ([Forecast Iteration].[Forecast Iteration Type].filter(#.Name contains \"_'+InputStream+'_\" )*[Forecast Iteration].[Forecast Iteration]);';\r\nvar IterationCountData = cellsetModule.createCellSet(queryModule.select(IterationCount));\r\n\r\n\r\n\r\nLog.Info(\" IterationCountData - \" + IterationCountData.rowCount);\r\n\r\n// if (IsScopeLockedData.rowCount > 0)\r\n// {\r\n// \tRuleOutputToUI =\r\n// \t{\r\n// \tStatus: 'Error',\r\n// \tMessage: 'Not allowed to create a new iteration within an Iteration Type which already contains iteration(s) with scope configured! Please reset the scope of existing relevant iteration(s) and try again.'    \r\n//   };\r\n// } \r\n\r\nif (IterationCountData.rowCount >= MaxNumberofIteration)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Not allowed to create a new iteration because you have exceeded maximum number allowed (5) per input stream.'    \r\n  };\r\n  return RuleOutputToUI;\r\n}\r\n\r\nvar createIteration = 'exec procedure o9DP0010InitializeForecastIteration{\"VersionName\" : [\"'+VersionName+'\"],\"MemberName\" : \"'+MemberName+'\",\"ForecastIterationType\" : \"'+ForecastIterationType+'\",\"ForecastIterationCreatedBy\" : \"'+ForecastIterationCreatedBy+'\",\"Item\":\"'+ItemLevel+'\", \"Account\":\"'+AccountLevel+'\" ,\"Channel\":\"'+ChannelLevel+'\",\"Region\":\"'+RegionLevel+'\",\"Location\":\"'+LocationLevel+'\",\"PnL\":\"'+PnLLevel+'\", \"DemandDomain\":\"'+DemandDomainLevel+'\" ,\"Disaggregation\":\"'+DisaggregationType+'\", \"Description\":\"'+Description+'\",\"DisplayName\":\"'+DisplayName+'\" };'\r\nqueryModule.select(createIteration)\r\n\r\nvar FilterAttribute = 'Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration] ) on row, ({Measure.[Is Filter Attribute Set]}) on column;'\r\nvar FilterAttributeCount = cellsetModule.createCellSet(queryModule.select(FilterAttribute));\r\nLog.Info(\"FilterAttributeCount - \" + FilterAttributeCount.rowCount);\r\nvar flag = ''\r\nif (FilterAttributeCount.rowCount > 0){\r\n    Log.Info(\"FilterAttributeCount - \" + FilterAttributeCount.rowCount);\r\n\tflag = 'cartesian scope: ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration] ) ;Measure.[Is Filter Attribute Set] = 1;end scope;'\r\n    queryModule.select(flag)\r\n\t}\r\n\r\n\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.RestrictIterationCreation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "ef01061c-d025-c6aa-7e54-e693a80ae2fd",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212945,
    "Description": "Create Forecast Iteration Selection for Input Stream",
    "Documentation": "define('o9.DemandPlanning.CreateForecastIterationSelection', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n\tvar CreateForecastIterationSelection = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n\t\tvar ForecastIteration = parsedParams.ForecastIteration\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t    \r\n\t\t//Add your Assortment Measure for Input Stream\r\n\t\tconst AssortmentMeasure = {\r\n\t\t\t\t\t\"Actual\": \"Assortment Stat\",\r\n\t\t\t\t\t\"Sell Out Actual\": \"Sell Out Actual\"\r\n\t\t    \r\n\t\t};\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream for FIS:' +InputStream)\r\n    \r\n\r\n\t\t// Extract the corresponding value from AssortmentMeasure\r\n\t\textractedValue = AssortmentMeasure[InputStream];\r\n\t\textractedValue = extractedValue.toString();\r\n\t\tLog.Info('Input Stream Assortment :' +extractedValue)\r\n        parsedParams['CreateForecastIterationSelection'] = extractedValue.toString();\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        CreateForecastIterationSelection: CreateForecastIterationSelection,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.CreateForecastIterationSelection', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n\tvar CreateForecastIterationSelection = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n\t\tvar ForecastIteration = parsedParams.ForecastIteration\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t    \r\n\t\t//Add your Assortment Measure for Input Stream\r\n\t\tconst AssortmentMeasure = {\r\n\t\t\t\t\t\"Actual\": \"Assortment Stat\",\r\n\t\t\t\t\t\"Sell Out Actual\": \"Sell Out Actual\"\r\n\t\t    \r\n\t\t};\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream for FIS:' +InputStream)\r\n    \r\n\r\n\t\t// Extract the corresponding value from AssortmentMeasure\r\n\t\textractedValue = AssortmentMeasure[InputStream];\r\n\t\textractedValue = extractedValue.toString();\r\n\t\tLog.Info('Input Stream Assortment :' +extractedValue)\r\n        parsedParams['CreateForecastIterationSelection'] = extractedValue.toString();\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        CreateForecastIterationSelection: CreateForecastIterationSelection,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.CreateForecastIterationSelection",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "a612b6da-f79b-45b1-74c0-d1cb808ef76e",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212946,
    "Description": "NewItemRGM4",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemRGM4'\r\ndefine('o9.DemandPlanning.NewItemRGM4', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemRGM4 function\r\n    var NewItemRGM4 = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemRGM4Query = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[RGM4] );';\r\n        var NewItemRGM4DataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemRGM4Query));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemRGM4Query : ' + NewItemRGM4Query);\r\n\t\t// Check if NewRGM4 is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemRGM4DataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"RGM4\"\r\n            var NewItemRGM4List = NewItemRGM4DataCellSet.attributeMembers(\"Item\", \"RGM4\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemRGM4 -> NewItemRGM4List : ' + NewItemRGM4List);\r\n\r\n            // Extract the names from the result and store in NewRGM4\r\n            var NewRGM4 = NewItemRGM4List.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemRGM4'] = NewRGM4[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemRGM4'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemRGM4 function as part of the module\r\n    return {\r\n        NewItemRGM4: NewItemRGM4\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemRGM4'\r\ndefine('o9.DemandPlanning.NewItemRGM4', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemRGM4 function\r\n    var NewItemRGM4 = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemRGM4Query = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[RGM4] );';\r\n        var NewItemRGM4DataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemRGM4Query));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemRGM4Query : ' + NewItemRGM4Query);\r\n\t\t// Check if NewRGM4 is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemRGM4DataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"RGM4\"\r\n            var NewItemRGM4List = NewItemRGM4DataCellSet.attributeMembers(\"Item\", \"RGM4\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemRGM4 -> NewItemRGM4List : ' + NewItemRGM4List);\r\n\r\n            // Extract the names from the result and store in NewRGM4\r\n            var NewRGM4 = NewItemRGM4List.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemRGM4'] = NewRGM4[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemRGM4'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemRGM4 function as part of the module\r\n    return {\r\n        NewItemRGM4: NewItemRGM4\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemRGM4",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "227e2609-e613-3b61-5be3-c17cb931f162",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212947,
    "Description": "create data object",
    "Documentation": "define('o9.DemandPlanning.CreateConcatenatedStringSellOut', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n    \r\n    var CreateConcatenatedString = function (o9Params) {\r\n        Log.Info(\"Harshit\");\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var concatenatedString = '';\r\n        \r\n        // Helper function to extract and append the value\r\n        function appendLevelValue(level) {\r\n            if (level) {\r\n                // Corrected regex to capture the value after the dot in the second set of square brackets\r\n                var match = level.match(/\\[[^\\]]+\\]\\.\\[([^\\]]+)\\]/);  // Capture the second part after the dot\r\n                \r\n                if (match && match[1]) {\r\n                    // Append the correct value (after the dot) to the concatenated string.\r\n                    concatenatedString += match[1] + ' ';\r\n                    Log.Info(concatenatedString);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Check Itemlevel and append\r\n        appendLevelValue(parsedParams.Itemlevel);\r\n        // Check Accountlevel and append\r\n        appendLevelValue(parsedParams.Accountlevel);\r\n        // Check Channellevel and append\r\n        appendLevelValue(parsedParams.Channellevel);\r\n        // Check DemandDomainlevel and append\r\n        appendLevelValue(parsedParams.DemandDomainlevel);\r\n        // Check Regionlevel and append\r\n        appendLevelValue(parsedParams.Regionlevel);\r\n        \r\n        // Add \"Realignment_Sell Out\" to the end of the string\r\n        concatenatedString += \"Realignment_Sell Out\";\r\n        // Trim the trailing space and return the concatenated string\r\n        parsedParams['concatenatedString'] = concatenatedString.trim();\r\n        var Version = parsedParams.Version || '';\r\n        var Itemlevel = parsedParams.Itemlevel || 'ALL';\r\n        var Accountlevel = parsedParams.Accountlevel || 'ALL';\r\n        var Channellevel = parsedParams.Channellevel || 'ALL';\r\n        var Regionlevel = parsedParams.Regionlevel || 'ALL';\r\n        var DemandDomainlevel = parsedParams.DemandDomainlevel || 'ALL';\r\n        var HistoryRealignment = parsedParams.HistoryRealignment;\r\n        var ForecastRealignment = parsedParams.ForecastRealignment;\r\n\t\tvar ProcessOrder = parsedParams.ProcessOrder;\r\n        var Createmember = 'Createmember([Data Object].[Data Object]={,\"'+concatenatedString+'\"}, [Data Object].[Data Object Type]={,\"Sell Out Realignment\"});';\r\n        queryModule.update(Createmember);\r\n        Log.Info(Createmember);\r\n        var cartesianscope = 'Cartesian scope: ([Version].[Version Name].['+Version+'] * [Data Object].[Data Object].['+concatenatedString+']); Measure.[Data Object Item Level]=\"'+Itemlevel+'\"; Measure.[Data Object Account Level]=\"'+Accountlevel+'\"; Measure.[Data Object Channel Level]=\"'+Channellevel+'\"; Measure.[Data Object Region Level]=\"'+Regionlevel+'\"; Measure.[Data Object Demand Domain Level]=\"'+DemandDomainlevel+'\"; Measure.[Realign History]='+HistoryRealignment+'; Measure.[Realign Forecast]='+ForecastRealignment+';Measure.[Data Object Process Order]='+ProcessOrder+'; end scope;';\r\n        queryModule.update(cartesianscope);\r\n        Log.Info(cartesianscope);\r\n        Log.Info(concatenatedString);\r\n        \r\n        return parsedParams;\r\n    };\r\n    \r\n    return {\r\n        CreateConcatenatedString: CreateConcatenatedString\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.CreateConcatenatedStringSellOut', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n    \r\n    var CreateConcatenatedString = function (o9Params) {\r\n        Log.Info(\"Harshit\");\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var concatenatedString = '';\r\n        \r\n        // Helper function to extract and append the value\r\n        function appendLevelValue(level) {\r\n            if (level) {\r\n                // Corrected regex to capture the value after the dot in the second set of square brackets\r\n                var match = level.match(/\\[[^\\]]+\\]\\.\\[([^\\]]+)\\]/);  // Capture the second part after the dot\r\n                \r\n                if (match && match[1]) {\r\n                    // Append the correct value (after the dot) to the concatenated string.\r\n                    concatenatedString += match[1] + ' ';\r\n                    Log.Info(concatenatedString);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Check Itemlevel and append\r\n        appendLevelValue(parsedParams.Itemlevel);\r\n        // Check Accountlevel and append\r\n        appendLevelValue(parsedParams.Accountlevel);\r\n        // Check Channellevel and append\r\n        appendLevelValue(parsedParams.Channellevel);\r\n        // Check DemandDomainlevel and append\r\n        appendLevelValue(parsedParams.DemandDomainlevel);\r\n        // Check Regionlevel and append\r\n        appendLevelValue(parsedParams.Regionlevel);\r\n        \r\n        // Add \"Realignment_Sell Out\" to the end of the string\r\n        concatenatedString += \"Realignment_Sell Out\";\r\n        // Trim the trailing space and return the concatenated string\r\n        parsedParams['concatenatedString'] = concatenatedString.trim();\r\n        var Version = parsedParams.Version || '';\r\n        var Itemlevel = parsedParams.Itemlevel || 'ALL';\r\n        var Accountlevel = parsedParams.Accountlevel || 'ALL';\r\n        var Channellevel = parsedParams.Channellevel || 'ALL';\r\n        var Regionlevel = parsedParams.Regionlevel || 'ALL';\r\n        var DemandDomainlevel = parsedParams.DemandDomainlevel || 'ALL';\r\n        var HistoryRealignment = parsedParams.HistoryRealignment;\r\n        var ForecastRealignment = parsedParams.ForecastRealignment;\r\n\t\tvar ProcessOrder = parsedParams.ProcessOrder;\r\n        var Createmember = 'Createmember([Data Object].[Data Object]={,\"'+concatenatedString+'\"}, [Data Object].[Data Object Type]={,\"Sell Out Realignment\"});';\r\n        queryModule.update(Createmember);\r\n        Log.Info(Createmember);\r\n        var cartesianscope = 'Cartesian scope: ([Version].[Version Name].['+Version+'] * [Data Object].[Data Object].['+concatenatedString+']); Measure.[Data Object Item Level]=\"'+Itemlevel+'\"; Measure.[Data Object Account Level]=\"'+Accountlevel+'\"; Measure.[Data Object Channel Level]=\"'+Channellevel+'\"; Measure.[Data Object Region Level]=\"'+Regionlevel+'\"; Measure.[Data Object Demand Domain Level]=\"'+DemandDomainlevel+'\"; Measure.[Realign History]='+HistoryRealignment+'; Measure.[Realign Forecast]='+ForecastRealignment+';Measure.[Data Object Process Order]='+ProcessOrder+'; end scope;';\r\n        queryModule.update(cartesianscope);\r\n        Log.Info(cartesianscope);\r\n        Log.Info(concatenatedString);\r\n        \r\n        return parsedParams;\r\n    };\r\n    \r\n    return {\r\n        CreateConcatenatedString: CreateConcatenatedString\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.CreateConcatenatedStringSellOut",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "49e48883-1010-1d9e-3460-5d17a05873a4",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212948,
    "Description": "CreateConcatenatedString",
    "Documentation": "define('o9.DemandPlanning.CreateConcatenatedStringSellOutSellIn', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   \r\n   var CreateConcatenatedString = function (o9Params) {\r\n       Log.Info(\"Starting CreateConcatenatedString function\");\r\n       \r\n       var parsedParams = JSON.parse(o9Params);\r\n       \r\n       // Check if SellIn exists, if not return null\r\n       if (!parsedParams.SellIn) {\r\n           Log.Info(\"SellIn not found. Returning null.\");\r\n           return null;\r\n       }\r\n       \r\n       var concatenatedString = '';\r\n       \r\n       // Helper function to extract and append the value\r\n       function appendLevelValue(level) {\r\n           if (level) {\r\n               // Corrected regex to capture the value after the dot in the second set of square brackets\r\n               var match = level.match(/\\[[^\\]]+\\]\\.\\[([^\\]]+)\\]/);  // Capture the second part after the dot\r\n               \r\n               if (match && match[1]) {\r\n                   // Append the correct value (after the dot) to the concatenated string.\r\n                   concatenatedString += match[1] + ' ';\r\n                   Log.Info(\"Appending level value: \" + concatenatedString);\r\n               }\r\n           }\r\n       }\r\n       \r\n       // Check Itemlevel and append\r\n       appendLevelValue(parsedParams.Itemlevel);\r\n       // Check Accountlevel and append\r\n       appendLevelValue(parsedParams.Accountlevel);\r\n       // Check PnLlevel and append\r\n       appendLevelValue(parsedParams.PnLlevel);\r\n       // Check Channellevel and append\r\n       appendLevelValue(parsedParams.Channellevel);\r\n       // Check Locationlevel and append\r\n       appendLevelValue(parsedParams.Locationlevel);\r\n       // Check DemandDomainlevel and append\r\n       appendLevelValue(parsedParams.DemandDomainlevel);\r\n       // Check Regionlevel and append\r\n       appendLevelValue(parsedParams.Regionlevel);\r\n       \r\n       // Add \"Realignment_Sell In\" to the end of the string\r\n       concatenatedString += \"Realignment_Sell In\";\r\n       // Trim the trailing space and return the concatenated string\r\n       parsedParams['concatenatedString'] = concatenatedString.trim();\r\n       \r\n       var Version = parsedParams.Version || '';\r\n       var Itemlevel = parsedParams.Itemlevel || 'ALL';\r\n       var Accountlevel = parsedParams.Accountlevel || 'ALL';\r\n       var Channellevel = parsedParams.Channellevel || 'ALL';\r\n       var PnLlevel = parsedParams.PnLlevel || 'ALL';\r\n       var Regionlevel = parsedParams.Regionlevel || 'ALL';\r\n       var Locationlevel = parsedParams.Locationlevel || 'ALL';\r\n       var DemandDomainlevel = parsedParams.DemandDomainlevel || 'ALL';\r\n       var HistoryRealignment = parsedParams.HistoryRealignment;\r\n       var ForecastRealignment = parsedParams.ForecastRealignment;\r\n       var ProcessOrder = parsedParams.ProcessOrder;\r\n       var Createmember = 'Createmember([Data Object].[Data Object]={,\"'+concatenatedString+'\"}, [Data Object].[Data Object Type]={,\"Sell In Realignment\"});';\r\n       queryModule.update(Createmember);\r\n       Log.Info(\"Createmember query: \" + Createmember);\r\n       \r\n       var cartesianscope = 'Cartesian scope: ([Version].[Version Name].['+Version+'] * [Data Object].[Data Object].['+concatenatedString+']); Measure.[Data Object Item Level]=\"'+Itemlevel+'\"; Measure.[Data Object Account Level]=\"'+Accountlevel+'\"; Measure.[Data Object Channel Level]=\"'+Channellevel+'\"; Measure.[Data Object Region Level]=\"'+Regionlevel+'\"; Measure.[Data Object Location Level]=\"'+Locationlevel+'\"; Measure.[Data Object PnL Level]=\"'+PnLlevel+'\"; Measure.[Data Object Demand Domain Level]=\"'+DemandDomainlevel+'\"; Measure.[Realign History]='+HistoryRealignment+'; Measure.[Realign Forecast]='+ForecastRealignment+'; Measure.[Data Object Process Order]='+ProcessOrder+'; end scope;';\r\n       queryModule.update(cartesianscope);\r\n       Log.Info(\"Cartesian scope query: \" + cartesianscope);\r\n       Log.Info(\"Final concatenated string: \" + concatenatedString);\r\n       \r\n       return parsedParams;\r\n   };\r\n   \r\n   return {\r\n       CreateConcatenatedString: CreateConcatenatedString\r\n   };\r\n});",
    "Code": "define('o9.DemandPlanning.CreateConcatenatedStringSellOutSellIn', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   \r\n   var CreateConcatenatedString = function (o9Params) {\r\n       Log.Info(\"Starting CreateConcatenatedString function\");\r\n       \r\n       var parsedParams = JSON.parse(o9Params);\r\n       \r\n       // Check if SellIn exists, if not return null\r\n       if (!parsedParams.SellIn) {\r\n           Log.Info(\"SellIn not found. Returning null.\");\r\n           return null;\r\n       }\r\n       \r\n       var concatenatedString = '';\r\n       \r\n       // Helper function to extract and append the value\r\n       function appendLevelValue(level) {\r\n           if (level) {\r\n               // Corrected regex to capture the value after the dot in the second set of square brackets\r\n               var match = level.match(/\\[[^\\]]+\\]\\.\\[([^\\]]+)\\]/);  // Capture the second part after the dot\r\n               \r\n               if (match && match[1]) {\r\n                   // Append the correct value (after the dot) to the concatenated string.\r\n                   concatenatedString += match[1] + ' ';\r\n                   Log.Info(\"Appending level value: \" + concatenatedString);\r\n               }\r\n           }\r\n       }\r\n       \r\n       // Check Itemlevel and append\r\n       appendLevelValue(parsedParams.Itemlevel);\r\n       // Check Accountlevel and append\r\n       appendLevelValue(parsedParams.Accountlevel);\r\n       // Check PnLlevel and append\r\n       appendLevelValue(parsedParams.PnLlevel);\r\n       // Check Channellevel and append\r\n       appendLevelValue(parsedParams.Channellevel);\r\n       // Check Locationlevel and append\r\n       appendLevelValue(parsedParams.Locationlevel);\r\n       // Check DemandDomainlevel and append\r\n       appendLevelValue(parsedParams.DemandDomainlevel);\r\n       // Check Regionlevel and append\r\n       appendLevelValue(parsedParams.Regionlevel);\r\n       \r\n       // Add \"Realignment_Sell In\" to the end of the string\r\n       concatenatedString += \"Realignment_Sell In\";\r\n       // Trim the trailing space and return the concatenated string\r\n       parsedParams['concatenatedString'] = concatenatedString.trim();\r\n       \r\n       var Version = parsedParams.Version || '';\r\n       var Itemlevel = parsedParams.Itemlevel || 'ALL';\r\n       var Accountlevel = parsedParams.Accountlevel || 'ALL';\r\n       var Channellevel = parsedParams.Channellevel || 'ALL';\r\n       var PnLlevel = parsedParams.PnLlevel || 'ALL';\r\n       var Regionlevel = parsedParams.Regionlevel || 'ALL';\r\n       var Locationlevel = parsedParams.Locationlevel || 'ALL';\r\n       var DemandDomainlevel = parsedParams.DemandDomainlevel || 'ALL';\r\n       var HistoryRealignment = parsedParams.HistoryRealignment;\r\n       var ForecastRealignment = parsedParams.ForecastRealignment;\r\n       var ProcessOrder = parsedParams.ProcessOrder;\r\n       var Createmember = 'Createmember([Data Object].[Data Object]={,\"'+concatenatedString+'\"}, [Data Object].[Data Object Type]={,\"Sell In Realignment\"});';\r\n       queryModule.update(Createmember);\r\n       Log.Info(\"Createmember query: \" + Createmember);\r\n       \r\n       var cartesianscope = 'Cartesian scope: ([Version].[Version Name].['+Version+'] * [Data Object].[Data Object].['+concatenatedString+']); Measure.[Data Object Item Level]=\"'+Itemlevel+'\"; Measure.[Data Object Account Level]=\"'+Accountlevel+'\"; Measure.[Data Object Channel Level]=\"'+Channellevel+'\"; Measure.[Data Object Region Level]=\"'+Regionlevel+'\"; Measure.[Data Object Location Level]=\"'+Locationlevel+'\"; Measure.[Data Object PnL Level]=\"'+PnLlevel+'\"; Measure.[Data Object Demand Domain Level]=\"'+DemandDomainlevel+'\"; Measure.[Realign History]='+HistoryRealignment+'; Measure.[Realign Forecast]='+ForecastRealignment+'; Measure.[Data Object Process Order]='+ProcessOrder+'; end scope;';\r\n       queryModule.update(cartesianscope);\r\n       Log.Info(\"Cartesian scope query: \" + cartesianscope);\r\n       Log.Info(\"Final concatenated string: \" + concatenatedString);\r\n       \r\n       return parsedParams;\r\n   };\r\n   \r\n   return {\r\n       CreateConcatenatedString: CreateConcatenatedString\r\n   };\r\n});",
    "ModuleName": "o9.DemandPlanning.CreateConcatenatedStringSellOutSellIn",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "8c3ae5f0-ccdf-8e38-460c-b6880c65a6a5",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212949,
    "Description": "To validate scope of Sell Out Fcst",
    "Documentation": "define('o9.DemandPlanning.ValidateScopeLevel', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ValidateScopeLevel = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScopeLevel;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScopeLevel;\r\n        var LocationScope = parsedParams.LocationLevelScope;\r\n        var ChannelScope = parsedParams.ChannelScopeLevel;\r\n        var PnLScope = parsedParams.PnLScopeLevel;\r\n        var DemandDomainScope = parsedParams.DemandDomainScopeLevel;\r\n        var RegionScope = parsedParams.RegionScopeLevel;\r\n\t\tvar InputStream = parsedParams.InputStream;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t\r\n\r\n\t\t\r\n\t\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => !Masterlist.includes(element));\r\n\r\n\t\t// Elements in array2 but not in array1\r\n\t\tconst notInArray1 = Masterlist.filter(element => !measureListArray.includes(element));\r\n\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\r\n\t\t// Check if \"pnl\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())  && PnLScope !== \"All PnL\") {\r\n\t\t     RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'PnL Dimension is missing from the grains of the selected Input Stream. Use All PnL for this Input Stream!. '    \r\n            };\r\n\t\t}\r\n\r\n\t\t// Check if \"location\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())  && LocationScope !== \"All Location\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Location Dimension is missing from the grains of the selected Input Stream. Use All Location for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())  && ItemScope !== \"All Item\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Item Dimension is missing from the grains of the selected Input Stream. Use All Item for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())  && AccountScope !== \"All Account\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Account Dimension is missing from the grains of the selected Input Stream. Use All Account for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase()) && ChannelScope !== \"All Channel\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Channel Dimension is missing from the grains of the selected Input Stream. Use All Channel for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase()) && RegionScope !== \"All Region\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Region Dimension is missing from the grains of the selected Input Stream. Use All Region for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase()) && DemandDomainScope !== \"All Demand Domain\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Demand Domain Dimension is missing from the grains of the selected Input Stream. Use All Demand Domain for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ValidateScopeLevel: ValidateScopeLevel,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ValidateScopeLevel', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ValidateScopeLevel = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScopeLevel;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScopeLevel;\r\n        var LocationScope = parsedParams.LocationLevelScope;\r\n        var ChannelScope = parsedParams.ChannelScopeLevel;\r\n        var PnLScope = parsedParams.PnLScopeLevel;\r\n        var DemandDomainScope = parsedParams.DemandDomainScopeLevel;\r\n        var RegionScope = parsedParams.RegionScopeLevel;\r\n\t\tvar InputStream = parsedParams.InputStream;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t\r\n\r\n\t\t\r\n\t\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => !Masterlist.includes(element));\r\n\r\n\t\t// Elements in array2 but not in array1\r\n\t\tconst notInArray1 = Masterlist.filter(element => !measureListArray.includes(element));\r\n\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\r\n\t\t// Check if \"pnl\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())  && PnLScope !== \"All PnL\") {\r\n\t\t     RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'PnL Dimension is missing from the grains of the selected Input Stream. Use All PnL for this Input Stream!. '    \r\n            };\r\n\t\t}\r\n\r\n\t\t// Check if \"location\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())  && LocationScope !== \"All Location\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Location Dimension is missing from the grains of the selected Input Stream. Use All Location for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())  && ItemScope !== \"All Item\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Item Dimension is missing from the grains of the selected Input Stream. Use All Item for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())  && AccountScope !== \"All Account\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Account Dimension is missing from the grains of the selected Input Stream. Use All Account for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase()) && ChannelScope !== \"All Channel\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Channel Dimension is missing from the grains of the selected Input Stream. Use All Channel for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase()) && RegionScope !== \"All Region\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Region Dimension is missing from the grains of the selected Input Stream. Use All Region for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase()) && DemandDomainScope !== \"All Demand Domain\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Demand Domain Dimension is missing from the grains of the selected Input Stream. Use All Demand Domain for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ValidateScopeLevel: ValidateScopeLevel,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ValidateScopeLevel",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "d8c661f8-ec32-eb60-48a2-70743f0110c1",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212950,
    "Description": "Populate existing item parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingItemParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var ExistingItemString = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT Item\");\r\n        Log.Info(\"Version Name: \" +VersionName);\r\n\t\tLog.Info(\"Check Iteration Type Item: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream) \r\n\r\n\r\n\r\n         \r\n\t    if (IterationType.includes(\"Sell In Actual\")) {\r\n        var ExistingShiftPatternsQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n         var ExistingShiftPatternsDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsQuery));\r\n        Log.Info(ExistingShiftPatternsDataCellSet);\r\n        var ExistingShiftPatternsList =  ExistingShiftPatternsDataCellSet.attributeMembers(\"Item\",ItemScope);\r\n        Log.Info('All Item in List : ' + ExistingShiftPatternsList);\r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsQuery));\r\n        Log.Info(ExistingShiftPatternsDataCellSet);\r\n        var ExistingShiftPatternsList =  ExistingShiftPatternsDataCellSet.attributeMembers(\"Item\",ItemScope);\r\n        Log.Info('All Item in List : ' + ExistingShiftPatternsList);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n        var ExistingShiftPatterns = ExistingShiftPatternsList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        \r\n        ExistingShiftPatterns = ExistingShiftPatterns.map(i => '[' + i);\r\n        ExistingShiftPatterns = ExistingShiftPatterns.map(i => i + ']');\r\n        Log.Info('All Items : ' + ExistingShiftPatterns);\r\n        if (ExistingShiftPatterns.length === 0){\r\n\t\t        ExistingShiftPatterns = \"[]\"}\r\n\t\tparsedParams['ExistingItemString'] = ExistingShiftPatterns.toString();\r\n\t\tLog.Info(\"ExistingItemString: \" + ExistingShiftPatterns.toString());\r\n\r\n        return parsedParams;\r\n\r\n\r\n    };\r\n    return {\r\n        ExistingItemString: ExistingItemString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingItemParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var ExistingItemString = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT Item\");\r\n        Log.Info(\"Version Name: \" +VersionName);\r\n\t\tLog.Info(\"Check Iteration Type Item: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream) \r\n\r\n\r\n\r\n         \r\n\t    if (IterationType.includes(\"Sell In Actual\")) {\r\n        var ExistingShiftPatternsQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n         var ExistingShiftPatternsDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsQuery));\r\n        Log.Info(ExistingShiftPatternsDataCellSet);\r\n        var ExistingShiftPatternsList =  ExistingShiftPatternsDataCellSet.attributeMembers(\"Item\",ItemScope);\r\n        Log.Info('All Item in List : ' + ExistingShiftPatternsList);\r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsQuery));\r\n        Log.Info(ExistingShiftPatternsDataCellSet);\r\n        var ExistingShiftPatternsList =  ExistingShiftPatternsDataCellSet.attributeMembers(\"Item\",ItemScope);\r\n        Log.Info('All Item in List : ' + ExistingShiftPatternsList);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n        var ExistingShiftPatterns = ExistingShiftPatternsList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        \r\n        ExistingShiftPatterns = ExistingShiftPatterns.map(i => '[' + i);\r\n        ExistingShiftPatterns = ExistingShiftPatterns.map(i => i + ']');\r\n        Log.Info('All Items : ' + ExistingShiftPatterns);\r\n        if (ExistingShiftPatterns.length === 0){\r\n\t\t        ExistingShiftPatterns = \"[]\"}\r\n\t\tparsedParams['ExistingItemString'] = ExistingShiftPatterns.toString();\r\n\t\tLog.Info(\"ExistingItemString: \" + ExistingShiftPatterns.toString());\r\n\r\n        return parsedParams;\r\n\r\n\r\n    };\r\n    return {\r\n        ExistingItemString: ExistingItemString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingItemParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "5cab35ba-92e2-22d7-8e20-3e8e5699a328",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212951,
    "Description": "Item level validation",
    "Documentation": "define('o9.LGItemLevelValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n    var ItemValidation = function(o9Params){\r\n        Log.Info(\"Executing Javasrcipt\");\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var ItemLevelUI = parsedParams.ItemLevelUI;\r\n        Log.Info(parsedParams.ItemLevelUI);\r\n        \r\n        if (ItemLevelUI === \"Item\" ) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid field inputs. This Level is just defined for L3, L2 , L1 And Planning item.'\r\n            };\r\n            return;\r\n        }\r\n\r\n        \r\n    };\r\n\r\n\r\n    return {\r\n        ItemValidation:ItemValidation\r\n    };\r\n});",
    "Code": "define('o9.LGItemLevelValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n    var ItemValidation = function(o9Params){\r\n        Log.Info(\"Executing Javasrcipt\");\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var ItemLevelUI = parsedParams.ItemLevelUI;\r\n        Log.Info(parsedParams.ItemLevelUI);\r\n        \r\n        if (ItemLevelUI === \"Item\" ) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid field inputs. This Level is just defined for L3, L2 , L1 And Planning item.'\r\n            };\r\n            return;\r\n        }\r\n\r\n        \r\n    };\r\n\r\n\r\n    return {\r\n        ItemValidation:ItemValidation\r\n    };\r\n});",
    "ModuleName": "o9.LGItemLevelValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "182e5bd5-6d96-e2a7-208d-3d237248d714",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212952,
    "Description": "Iteration Selection",
    "Documentation": "define('o9.DemandPlanning.ElementsforIterationSelection', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n    \r\n    var DefaultElement={'Item':'All Planning Item',\r\n            'Account':'All Planning Account',\r\n            'Channel':'All Planning Channel',\r\n            'Region':'All Planning Region',\r\n            'Demand Domain':'All Planning Demand Domain',\r\n            'PnL':'All Planning PnL',\r\n            'Location':'All Planning Location'\r\n        }\r\n    \r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n\tvar ElementsforIterationSelection = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        \r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\tLog.Info(\"STMT Account1:\" +AccountScope);\r\n\t\tScopeQuery = 'Select ([Version].[Version Name].['+VersionName+']* [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] ) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;'\r\n\r\n        var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n        var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n        var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n        var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n        var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n        var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n        var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n       \r\n       \r\n\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var AssortmentQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var AssortmentCellSet = cellsetModule.createCellSet(queryModule.select(AssortmentQuery));\r\n        Log.Info(\"AssortmentQuery:\" + AssortmentCellSet);\r\n        var ItemList=AssortmentCellSet.attributeMembers('Item',ItemScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        ItemList = ItemList.filter(item => item !== DefaultElement['Item']);\r\n        ItemList = ItemList.map(i => '[' + i);\r\n        ItemList = ItemList.map(i => i + ']');\r\n        if (ItemList.length === 0) {\r\n            ItemList = \"[]\";\r\n        }\r\n        \r\n        var AccountList=AssortmentCellSet.attributeMembers('Account',AccountScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        AccountList = AccountList.filter(item => item !== DefaultElement['Account']);\r\n        AccountList = AccountList.map(i => '[' + i);\r\n        AccountList = AccountList.map(i => i + ']');\r\n        if (AccountList.length === 0) {\r\n            AccountList = \"[]\";\r\n        }\r\n        var ChannelList=AssortmentCellSet.attributeMembers('Channel',ChannelScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        ChannelList = ChannelList.filter(item => item !== DefaultElement['Channel']);\r\n        ChannelList = ChannelList.map(i => '[' + i);\r\n        ChannelList = ChannelList.map(i => i + ']');\r\n        if (ChannelList.length === 0) {\r\n            ChannelList = \"[]\";\r\n        }\r\n        var RegionList=AssortmentCellSet.attributeMembers('Region',RegionScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        RegionList = RegionList.filter(item => item !== DefaultElement['Region']);\r\n            RegionList = RegionList.map(i => '[' + i);\r\n            RegionList = RegionList.map(i => i + ']');\r\n            if (RegionList.length === 0) {\r\n                RegionList = \"[]\";\r\n            }\r\n\r\n        var DemandDomainList=AssortmentCellSet.attributeMembers('Demand Domain',DemandDomainScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        DemandDomainList = DemandDomainList.filter(item => item !== DefaultElement['Demand Domain']);\r\n        DemandDomainList = DemandDomainList.map(i => '[' + i);\r\n        DemandDomainList = DemandDomainList.map(i => i + ']');\r\n        if (DemandDomainList.length === 0) {\r\n            DemandDomainList = \"[]\";\r\n        }\r\n        var PnLList=AssortmentCellSet.attributeMembers('PnL',PnLScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        PnLList=PnLList.filter(item=>item!==DefaultElement['PnL'])\r\n                PnLList = PnLList.map(i => '[' + i);\r\n                PnLList = PnLList.map(i => i + ']');\r\n                if (PnLList.length === 0){\r\n                    PnLList = \"[]\";\r\n                }\r\n        var LocationList = AssortmentCellSet.attributeMembers(\"Location\",LocationScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        LocationList = LocationList.filter(item => item !== DefaultElement['Location']);\r\n            LocationList = LocationList.map(i => '[' + i);\r\n            LocationList = LocationList.map(i => i + ']');\r\n            if (LocationList.length === 0) {\r\n                LocationList = \"[]\";\r\n            }\r\n        \r\n\r\n\r\n\r\n\r\n        }\r\n\t\t\r\n\t\telse{\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => \r\n            !Masterlist.some(masterElement => masterElement.toLowerCase() === element.toLowerCase())\r\n            );\r\n\r\n        const notInArray1 = Masterlist.filter(element => \r\n          !measureListArray.some(measureElement => measureElement.toLowerCase() === element.toLowerCase())\r\n        );\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\t\r\n        var deleteDims=[]\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())) {\r\n            PnLScope = \"Planning PnL\";   \r\n            deleteDims.push('[PnL].[Planning PnL].relatedmembers([Planning PnL]) *');\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())) {\r\n            LocationScope = \"Planning Location\";\r\n            deleteDims.push('[Location].[Location].relatedmembers([Planning Location]) *');\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())) {\r\n            ItemScope = \"Planning Item\";\r\n            deleteDims.push('[Item].[Planning Item].relatedmembers([Planning Item]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())) {\r\n            AccountScope = \"Planning Account\";\r\n            deleteDims.push('Account].[Planning Account].relatedmembers([Planning Account]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())) {\r\n            ChannelScope = \"Planning Channel\";\r\n            deleteDims.push('[Channel].[Planning Channel].relatedmembers([Planning Channel]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())) {\r\n            RegionScope = \"Planning Region\";\r\n            deleteDims.push('[Region].[Planning Region].relatedmembers([Planning Region]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())) {\r\n            DemandDomainScope = \"Planning Demand Domain\";\r\n            deleteDims.push('[Demand Domain].[Planning Demand Domain].relatedmembers([Planning Demand Domain]) *');\r\n        }\r\n\r\n        Log.Info('Deleted Dims'+deleteDims.toString())\r\n\t\tvar AssortmentQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        \r\n        function escapeRegExp(str) {\r\n            return str.replace(/[.*+?^=!:${}()|\\[\\]\\/\\\\]/g, '\\\\$&');  // Escapes special characters\r\n        }\r\n\r\n        if(deleteDims.length>0)\r\n            deleteDims.forEach(element=>{\r\n            const escapedElement = escapeRegExp(element);  // Escape any special characters\r\n            const regex = new RegExp(escapedElement, 'g');  // Create a global regex for the substring\r\n            AssortmentQuery = AssortmentQuery.replace(regex, '');\r\n        })\r\n\r\n        Log.Info('Assortment Query:' + AssortmentQuery);\r\n        var AssortmentCellSet = cellsetModule.createCellSet(queryModule.select(AssortmentQuery));\r\n        \r\n      \r\n        \r\n        var ItemList= []\r\n        var AccountList= []\r\n        var ChannelList= []\r\n        var RegionList= []\r\n        var LocationList= []\r\n        var PnLList= []\r\n        var DemandDomainList= []\r\n\r\n     \r\n        \r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())) {\r\n            PnLList='['+DefaultElement['PnL']+']';\r\n        } else\r\n            {\r\n                PnLList = AssortmentCellSet.attributeMembers(\"PnL\",PnLScope).map(function (item) {\r\n                    return item['Name'];\r\n                });\r\n                PnLList = PnLList.filter(item=>item!==DefaultElement['PnL'])\r\n                PnLList = PnLList.map(i => '[' + i);\r\n                PnLList = PnLList.map(i => i + ']');\r\n                if (PnLList.length === 0){\r\n                    PnLList = \"[]\";\r\n                }\r\n            }\r\n\r\n        // Example for ItemList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())) {\r\n            ItemList ='[' + DefaultElement['Item']+']';\r\n        } else {\r\n            ItemList = AssortmentCellSet.attributeMembers(\"Item\",ItemScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            ItemList = ItemList.filter(item => item !== DefaultElement['Item']);\r\n            ItemList = ItemList.map(i => '[' + i);\r\n            ItemList = ItemList.map(i => i + ']');\r\n            if (ItemList.length === 0) {\r\n                ItemList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for AccountList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())) {\r\n            AccountList ='[' + DefaultElement['Account']+']';\r\n        } else {\r\n            AccountList = AssortmentCellSet.attributeMembers(\"Account\",AccountScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            AccountList = AccountList.filter(item => item !== DefaultElement['Account']);\r\n            AccountList = AccountList.map(i => '[' + i);\r\n            AccountList = AccountList.map(i => i + ']');\r\n            if (AccountList.length === 0) {\r\n                AccountList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for ChannelList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())) {\r\n            ChannelList ='[' + DefaultElement['Channel']+']';\r\n        } else {\r\n            ChannelList =  AssortmentCellSet.attributeMembers(\"Channel\",ChannelScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            ChannelList = ChannelList.filter(item => item !== DefaultElement['Channel']);\r\n            ChannelList = ChannelList.map(i => '[' + i);\r\n            ChannelList = ChannelList.map(i => i + ']');\r\n            if (ChannelList.length === 0) {\r\n                ChannelList = \"[]\";\r\n            }\r\n        }\r\n\r\n      // Example for RegionList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())) {\r\n            RegionList ='[' + DefaultElement['Region']+']';\r\n        } else {\r\n            RegionList = AssortmentCellSet.attributeMembers(\"Region\",RegionScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            RegionList = RegionList.filter(item => item !== DefaultElement['Region']);\r\n            RegionList = RegionList.map(i => '[' + i);\r\n            RegionList = RegionList.map(i => i + ']');\r\n            if (RegionList.length === 0) {\r\n                RegionList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for LocationList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())) {\r\n            LocationList ='[' + DefaultElement['Location']+']';\r\n        } else {\r\n            LocationList = AssortmentCellSet.attributeMembers(\"Location\",LocationScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            LocationList = LocationList.filter(item => item !== DefaultElement['Location']);\r\n            LocationList = LocationList.map(i => '[' + i);\r\n            LocationList = LocationList.map(i => i + ']');\r\n            if (LocationList.length === 0) {\r\n                LocationList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for DemandDomainList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())) {\r\n            DemandDomainList ='[' + DefaultElement['Demand Domain']+']';\r\n        } else {\r\n            DemandDomainList =  AssortmentCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            DemandDomainList = DemandDomainList.filter(item => item !== DefaultElement['Demand Domain']);\r\n            DemandDomainList = DemandDomainList.map(i => '[' + i);\r\n            DemandDomainList = DemandDomainList.map(i => i + ']');\r\n            if (DemandDomainList.length === 0) {\r\n                DemandDomainList = \"[]\";\r\n            }\r\n        }\r\n\r\n\r\n\t\t\t\r\n\t\t}\r\n\r\n\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tparsedParams['ItemList'] =ItemList.toString();\r\n        parsedParams['AccountList'] = AccountList.toString();\r\n        parsedParams['ChannelList'] = ChannelList.toString();\r\n        parsedParams['RegionList'] = RegionList.toString();\r\n        parsedParams['LocationList'] = LocationList.toString();\r\n        parsedParams['PnLList'] = PnLList.toString();\r\n        parsedParams['DemandDomainList'] = DemandDomainList.toString();\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ElementsforIterationSelection: ElementsforIterationSelection,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ElementsforIterationSelection', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n    \r\n    var DefaultElement={'Item':'All Planning Item',\r\n            'Account':'All Planning Account',\r\n            'Channel':'All Planning Channel',\r\n            'Region':'All Planning Region',\r\n            'Demand Domain':'All Planning Demand Domain',\r\n            'PnL':'All Planning PnL',\r\n            'Location':'All Planning Location'\r\n        }\r\n    \r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n\tvar ElementsforIterationSelection = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        \r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\tLog.Info(\"STMT Account1:\" +AccountScope);\r\n\t\tScopeQuery = 'Select ([Version].[Version Name].['+VersionName+']* [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] ) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;'\r\n\r\n        var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n        var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n        var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n        var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n        var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n        var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n        var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n       \r\n       \r\n\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var AssortmentQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var AssortmentCellSet = cellsetModule.createCellSet(queryModule.select(AssortmentQuery));\r\n        Log.Info(\"AssortmentQuery:\" + AssortmentCellSet);\r\n        var ItemList=AssortmentCellSet.attributeMembers('Item',ItemScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        ItemList = ItemList.filter(item => item !== DefaultElement['Item']);\r\n        ItemList = ItemList.map(i => '[' + i);\r\n        ItemList = ItemList.map(i => i + ']');\r\n        if (ItemList.length === 0) {\r\n            ItemList = \"[]\";\r\n        }\r\n        \r\n        var AccountList=AssortmentCellSet.attributeMembers('Account',AccountScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        AccountList = AccountList.filter(item => item !== DefaultElement['Account']);\r\n        AccountList = AccountList.map(i => '[' + i);\r\n        AccountList = AccountList.map(i => i + ']');\r\n        if (AccountList.length === 0) {\r\n            AccountList = \"[]\";\r\n        }\r\n        var ChannelList=AssortmentCellSet.attributeMembers('Channel',ChannelScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        ChannelList = ChannelList.filter(item => item !== DefaultElement['Channel']);\r\n        ChannelList = ChannelList.map(i => '[' + i);\r\n        ChannelList = ChannelList.map(i => i + ']');\r\n        if (ChannelList.length === 0) {\r\n            ChannelList = \"[]\";\r\n        }\r\n        var RegionList=AssortmentCellSet.attributeMembers('Region',RegionScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        RegionList = RegionList.filter(item => item !== DefaultElement['Region']);\r\n            RegionList = RegionList.map(i => '[' + i);\r\n            RegionList = RegionList.map(i => i + ']');\r\n            if (RegionList.length === 0) {\r\n                RegionList = \"[]\";\r\n            }\r\n\r\n        var DemandDomainList=AssortmentCellSet.attributeMembers('Demand Domain',DemandDomainScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        DemandDomainList = DemandDomainList.filter(item => item !== DefaultElement['Demand Domain']);\r\n        DemandDomainList = DemandDomainList.map(i => '[' + i);\r\n        DemandDomainList = DemandDomainList.map(i => i + ']');\r\n        if (DemandDomainList.length === 0) {\r\n            DemandDomainList = \"[]\";\r\n        }\r\n        var PnLList=AssortmentCellSet.attributeMembers('PnL',PnLScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        PnLList=PnLList.filter(item=>item!==DefaultElement['PnL'])\r\n                PnLList = PnLList.map(i => '[' + i);\r\n                PnLList = PnLList.map(i => i + ']');\r\n                if (PnLList.length === 0){\r\n                    PnLList = \"[]\";\r\n                }\r\n        var LocationList = AssortmentCellSet.attributeMembers(\"Location\",LocationScope).map(function (item) {\r\n            return item['Name'];\r\n        });\r\n        LocationList = LocationList.filter(item => item !== DefaultElement['Location']);\r\n            LocationList = LocationList.map(i => '[' + i);\r\n            LocationList = LocationList.map(i => i + ']');\r\n            if (LocationList.length === 0) {\r\n                LocationList = \"[]\";\r\n            }\r\n        \r\n\r\n\r\n\r\n\r\n        }\r\n\t\t\r\n\t\telse{\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => \r\n            !Masterlist.some(masterElement => masterElement.toLowerCase() === element.toLowerCase())\r\n            );\r\n\r\n        const notInArray1 = Masterlist.filter(element => \r\n          !measureListArray.some(measureElement => measureElement.toLowerCase() === element.toLowerCase())\r\n        );\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\t\r\n        var deleteDims=[]\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())) {\r\n            PnLScope = \"Planning PnL\";   \r\n            deleteDims.push('[PnL].[Planning PnL].relatedmembers([Planning PnL]) *');\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())) {\r\n            LocationScope = \"Planning Location\";\r\n            deleteDims.push('[Location].[Location].relatedmembers([Planning Location]) *');\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())) {\r\n            ItemScope = \"Planning Item\";\r\n            deleteDims.push('[Item].[Planning Item].relatedmembers([Planning Item]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())) {\r\n            AccountScope = \"Planning Account\";\r\n            deleteDims.push('Account].[Planning Account].relatedmembers([Planning Account]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())) {\r\n            ChannelScope = \"Planning Channel\";\r\n            deleteDims.push('[Channel].[Planning Channel].relatedmembers([Planning Channel]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())) {\r\n            RegionScope = \"Planning Region\";\r\n            deleteDims.push('[Region].[Planning Region].relatedmembers([Planning Region]) *')\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())) {\r\n            DemandDomainScope = \"Planning Demand Domain\";\r\n            deleteDims.push('[Demand Domain].[Planning Demand Domain].relatedmembers([Planning Demand Domain]) *');\r\n        }\r\n\r\n        Log.Info('Deleted Dims'+deleteDims.toString())\r\n\t\tvar AssortmentQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        \r\n        function escapeRegExp(str) {\r\n            return str.replace(/[.*+?^=!:${}()|\\[\\]\\/\\\\]/g, '\\\\$&');  // Escapes special characters\r\n        }\r\n\r\n        if(deleteDims.length>0)\r\n            deleteDims.forEach(element=>{\r\n            const escapedElement = escapeRegExp(element);  // Escape any special characters\r\n            const regex = new RegExp(escapedElement, 'g');  // Create a global regex for the substring\r\n            AssortmentQuery = AssortmentQuery.replace(regex, '');\r\n        })\r\n\r\n        Log.Info('Assortment Query:' + AssortmentQuery);\r\n        var AssortmentCellSet = cellsetModule.createCellSet(queryModule.select(AssortmentQuery));\r\n        \r\n      \r\n        \r\n        var ItemList= []\r\n        var AccountList= []\r\n        var ChannelList= []\r\n        var RegionList= []\r\n        var LocationList= []\r\n        var PnLList= []\r\n        var DemandDomainList= []\r\n\r\n     \r\n        \r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())) {\r\n            PnLList='['+DefaultElement['PnL']+']';\r\n        } else\r\n            {\r\n                PnLList = AssortmentCellSet.attributeMembers(\"PnL\",PnLScope).map(function (item) {\r\n                    return item['Name'];\r\n                });\r\n                PnLList = PnLList.filter(item=>item!==DefaultElement['PnL'])\r\n                PnLList = PnLList.map(i => '[' + i);\r\n                PnLList = PnLList.map(i => i + ']');\r\n                if (PnLList.length === 0){\r\n                    PnLList = \"[]\";\r\n                }\r\n            }\r\n\r\n        // Example for ItemList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())) {\r\n            ItemList ='[' + DefaultElement['Item']+']';\r\n        } else {\r\n            ItemList = AssortmentCellSet.attributeMembers(\"Item\",ItemScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            ItemList = ItemList.filter(item => item !== DefaultElement['Item']);\r\n            ItemList = ItemList.map(i => '[' + i);\r\n            ItemList = ItemList.map(i => i + ']');\r\n            if (ItemList.length === 0) {\r\n                ItemList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for AccountList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())) {\r\n            AccountList ='[' + DefaultElement['Account']+']';\r\n        } else {\r\n            AccountList = AssortmentCellSet.attributeMembers(\"Account\",AccountScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            AccountList = AccountList.filter(item => item !== DefaultElement['Account']);\r\n            AccountList = AccountList.map(i => '[' + i);\r\n            AccountList = AccountList.map(i => i + ']');\r\n            if (AccountList.length === 0) {\r\n                AccountList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for ChannelList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())) {\r\n            ChannelList ='[' + DefaultElement['Channel']+']';\r\n        } else {\r\n            ChannelList =  AssortmentCellSet.attributeMembers(\"Channel\",ChannelScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            ChannelList = ChannelList.filter(item => item !== DefaultElement['Channel']);\r\n            ChannelList = ChannelList.map(i => '[' + i);\r\n            ChannelList = ChannelList.map(i => i + ']');\r\n            if (ChannelList.length === 0) {\r\n                ChannelList = \"[]\";\r\n            }\r\n        }\r\n\r\n      // Example for RegionList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())) {\r\n            RegionList ='[' + DefaultElement['Region']+']';\r\n        } else {\r\n            RegionList = AssortmentCellSet.attributeMembers(\"Region\",RegionScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            RegionList = RegionList.filter(item => item !== DefaultElement['Region']);\r\n            RegionList = RegionList.map(i => '[' + i);\r\n            RegionList = RegionList.map(i => i + ']');\r\n            if (RegionList.length === 0) {\r\n                RegionList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for LocationList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())) {\r\n            LocationList ='[' + DefaultElement['Location']+']';\r\n        } else {\r\n            LocationList = AssortmentCellSet.attributeMembers(\"Location\",LocationScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            LocationList = LocationList.filter(item => item !== DefaultElement['Location']);\r\n            LocationList = LocationList.map(i => '[' + i);\r\n            LocationList = LocationList.map(i => i + ']');\r\n            if (LocationList.length === 0) {\r\n                LocationList = \"[]\";\r\n            }\r\n        }\r\n\r\n        // Example for DemandDomainList\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())) {\r\n            DemandDomainList ='[' + DefaultElement['Demand Domain']+']';\r\n        } else {\r\n            DemandDomainList =  AssortmentCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope).map(function (item) {\r\n                return item['Name'];\r\n            });\r\n            DemandDomainList = DemandDomainList.filter(item => item !== DefaultElement['Demand Domain']);\r\n            DemandDomainList = DemandDomainList.map(i => '[' + i);\r\n            DemandDomainList = DemandDomainList.map(i => i + ']');\r\n            if (DemandDomainList.length === 0) {\r\n                DemandDomainList = \"[]\";\r\n            }\r\n        }\r\n\r\n\r\n\t\t\t\r\n\t\t}\r\n\r\n\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tparsedParams['ItemList'] =ItemList.toString();\r\n        parsedParams['AccountList'] = AccountList.toString();\r\n        parsedParams['ChannelList'] = ChannelList.toString();\r\n        parsedParams['RegionList'] = RegionList.toString();\r\n        parsedParams['LocationList'] = LocationList.toString();\r\n        parsedParams['PnLList'] = PnLList.toString();\r\n        parsedParams['DemandDomainList'] = DemandDomainList.toString();\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ElementsforIterationSelection: ElementsforIterationSelection,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ElementsforIterationSelection",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "17f087a8-a3a6-4e6e-03ed-777015a2bdda",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212953,
    "Description": "Returns highest member",
    "Documentation": "define('o9.DemandPlanning.AllHighestLevel', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n    \r\n    \r\n    var findHighestInHierarchy = function(givenItems, hierarchyItems)  {\r\n      Log.Info(\"infunction: given \" +givenItems)\r\n      hierarchyItems.forEach(item=>Log.Info(item.name))\r\n              let highestItem = null;\r\n              let highestLevel = 0;\r\n  \r\n              givenItems.forEach(givenItem => {\r\n                  Log.Info(givenItem+'and')\r\n                  const matchingItem = hierarchyItems.find(item => item.name === givenItem);\r\n                  if (matchingItem && matchingItem.level > highestLevel) {\r\n                  highestItem = matchingItem.name;\r\n                  Log.Info(matchingItem.level)\r\n                  Log.Info(matchingItem)\r\n                  highestLevel = matchingItem.level;\r\n                  }\r\n              });\r\n\r\n              Log.Info(highestItem)\r\n        if (highestItem.includes('All')) {\r\n        return '[' + highestItem + ']';\r\n    }\r\n        const itemsAboveHighestLevel = hierarchyItems.filter(item => item.level >= highestLevel);\r\n        const formattedItemsAboveHighestLevel = itemsAboveHighestLevel.map(item => `[${item.name}]`).join(\", \");\r\n        return formattedItemsAboveHighestLevel; \r\n      }\r\n\r\n\r\n      var HighestItem = function (o9Params) {\r\n          //Parsing data from LS to the script\r\n          var queryModule = require('o9/data/query');\r\n          var cellsetModule = require('o9/data/cellset');\r\n          var parsedParams = JSON.parse(o9Params);\r\n  \r\n          var VersionName = parsedParams.VersionName;\r\n          var ForecastIterationType =parsedParams.ForecastIterationType;\r\n          \r\n          Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n          \r\n          const ItemHigh=[\r\n              {name: 'Item', level:1},\r\n              {name: 'Reporting Item', level:2},\r\n              {name: 'Planning Item', level:3},\r\n              {name: 'L1' , level:4},\r\n              {name: 'L2', level:5},\r\n              {name: 'L3', level:6},\r\n              {name: 'L4', level:7},\r\n              {name: 'L5', level:8},\r\n              {name: 'L6',level:9},\r\n              {name: 'All Item',level:10},\r\n              \r\n          ]\r\n  \r\n          var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[Item Level]}) on column;';\r\n          var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n          Log.Info('CellSet'+ItemDataCellSet)\r\n          var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Level'));\r\n          var ItemLevel=ItemLevels.split(',')\r\n          Log.Info(\"ItemLevels: \"+ItemLevels);\r\n          const HighestItem=findHighestInHierarchy(ItemLevel,ItemHigh);\r\n          Log.Info(HighestItem);\r\n          parsedParams['HighestItem']=HighestItem;\r\n          \r\n          return parsedParams;\r\n      };\r\n      \r\n      var HighestAccount = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const AccHigh=[\r\n            {name: 'Account', level:1},\r\n            {name: 'Planning Account', level:2},\r\n            {name: 'Account L1', level:3},\r\n            {name: 'Account L2' , level:4},\r\n            {name: 'Account L3', level:5},\r\n            {name: 'Account L4', level:6},\r\n            {name: 'All Account', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[Account Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Account Level'));\r\n        var AccLevel=ItemLevels.split(',')\r\n        Log.Info(\"AccountLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(AccLevel,AccHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestAccount']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestLocation = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const LocHigh=[\r\n            {name: 'Location', level:1},\r\n            {name: 'Reporting Location', level:2},\r\n            {name: 'Location Region', level:3},\r\n            {name: 'Location Country' , level:4},\r\n            {name: 'All Location', level:5}\r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Location Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Location Level'));\r\n        var LocLevel=ItemLevels.split(',')\r\n        Log.Info(\"LocationLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(LocLevel,LocHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestLocation']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestChannel = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const ChanHigh=[\r\n            {name: 'Channel', level:1},\r\n            {name: 'Planning Channel', level:2},\r\n            {name: 'Channel L1', level:3},\r\n            {name: 'Channel L2' , level:4},\r\n            {name: 'All Channel', level:5},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Channel Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Channel Level'));\r\n        var ChanLevel=ItemLevels.split(',')\r\n        Log.Info(\"ChannelLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(ChanLevel,ChanHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestChannel']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestRegion = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const RegHigh=[\r\n            {name: 'Region', level:1},\r\n            {name: 'Planning Region', level:2},\r\n            {name: 'Region L1', level:3},\r\n            {name: 'Region L2' , level:4},\r\n            {name: 'Region L3', level:5},\r\n            {name: 'Region L4', level:6},\r\n            {name: 'All Region', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[Region Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Region Level'));\r\n        var RegLevel=ItemLevels.split(',')\r\n        Log.Info(\"RegionLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(RegLevel,RegHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestRegion']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestPnL= function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const PnlHigh=[\r\n            {name: 'PnL', level:1},\r\n            {name: 'Planning PnL', level:2},\r\n            {name: 'PnL L1', level:3},\r\n            {name: 'PnL L2' , level:4},\r\n            {name: 'PnL L3', level:5},\r\n            {name: 'PnL L4', level:6},\r\n            {name: 'All PnL', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[PnL Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('PnL Level'));\r\n        var PnlLevel=ItemLevels.split(',')\r\n        Log.Info(\"PnLLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(PnlLevel,PnlHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestPnL']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestDemandDomain = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const DeDHigh=[\r\n            {name: 'Demand Domain', level:1},\r\n            {name: 'Planning Demand Domain', level:2},\r\n            {name: 'Demand Domain L1', level:3},\r\n            {name: 'Demand Domain L2' , level:4},\r\n            {name: 'Demand Domain L3', level:5},\r\n            {name: 'Demand Domain L4', level:6},\r\n            {name: 'All Demand Domain', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Demand Domain Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Demand Domain Level'));\r\n        var DeDLevel=ItemLevels.split(',')\r\n        Log.Info(\"DemandDomainLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(DeDLevel,DeDHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestDemandDomain']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n\r\n    return {\r\n       HighestItem:HighestItem,\r\n       HighestAccount:HighestAccount,\r\n       HighestLocation:HighestLocation,\r\n       HighestChannel:HighestChannel,\r\n       HighestRegion:HighestRegion,\r\n       HighestPnL:HighestPnL,\r\n       HighestDemandDomain:HighestDemandDomain\r\n    };\r\n    \r\n  });",
    "Code": "define('o9.DemandPlanning.AllHighestLevel', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n    \r\n    \r\n    var findHighestInHierarchy = function(givenItems, hierarchyItems)  {\r\n      Log.Info(\"infunction: given \" +givenItems)\r\n      hierarchyItems.forEach(item=>Log.Info(item.name))\r\n              let highestItem = null;\r\n              let highestLevel = 0;\r\n  \r\n              givenItems.forEach(givenItem => {\r\n                  Log.Info(givenItem+'and')\r\n                  const matchingItem = hierarchyItems.find(item => item.name === givenItem);\r\n                  if (matchingItem && matchingItem.level > highestLevel) {\r\n                  highestItem = matchingItem.name;\r\n                  Log.Info(matchingItem.level)\r\n                  Log.Info(matchingItem)\r\n                  highestLevel = matchingItem.level;\r\n                  }\r\n              });\r\n\r\n              Log.Info(highestItem)\r\n        if (highestItem.includes('All')) {\r\n        return '[' + highestItem + ']';\r\n    }\r\n        const itemsAboveHighestLevel = hierarchyItems.filter(item => item.level >= highestLevel);\r\n        const formattedItemsAboveHighestLevel = itemsAboveHighestLevel.map(item => `[${item.name}]`).join(\", \");\r\n        return formattedItemsAboveHighestLevel; \r\n      }\r\n\r\n\r\n      var HighestItem = function (o9Params) {\r\n          //Parsing data from LS to the script\r\n          var queryModule = require('o9/data/query');\r\n          var cellsetModule = require('o9/data/cellset');\r\n          var parsedParams = JSON.parse(o9Params);\r\n  \r\n          var VersionName = parsedParams.VersionName;\r\n          var ForecastIterationType =parsedParams.ForecastIterationType;\r\n          \r\n          Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n          \r\n          const ItemHigh=[\r\n              {name: 'Item', level:1},\r\n              {name: 'Reporting Item', level:2},\r\n              {name: 'Planning Item', level:3},\r\n              {name: 'L1' , level:4},\r\n              {name: 'L2', level:5},\r\n              {name: 'L3', level:6},\r\n              {name: 'L4', level:7},\r\n              {name: 'L5', level:8},\r\n              {name: 'L6',level:9},\r\n              {name: 'All Item',level:10},\r\n              \r\n          ]\r\n  \r\n          var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[Item Level]}) on column;';\r\n          var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n          Log.Info('CellSet'+ItemDataCellSet)\r\n          var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Level'));\r\n          var ItemLevel=ItemLevels.split(',')\r\n          Log.Info(\"ItemLevels: \"+ItemLevels);\r\n          const HighestItem=findHighestInHierarchy(ItemLevel,ItemHigh);\r\n          Log.Info(HighestItem);\r\n          parsedParams['HighestItem']=HighestItem;\r\n          \r\n          return parsedParams;\r\n      };\r\n      \r\n      var HighestAccount = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const AccHigh=[\r\n            {name: 'Account', level:1},\r\n            {name: 'Planning Account', level:2},\r\n            {name: 'Account L1', level:3},\r\n            {name: 'Account L2' , level:4},\r\n            {name: 'Account L3', level:5},\r\n            {name: 'Account L4', level:6},\r\n            {name: 'All Account', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[Account Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Account Level'));\r\n        var AccLevel=ItemLevels.split(',')\r\n        Log.Info(\"AccountLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(AccLevel,AccHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestAccount']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestLocation = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const LocHigh=[\r\n            {name: 'Location', level:1},\r\n            {name: 'Reporting Location', level:2},\r\n            {name: 'Location Region', level:3},\r\n            {name: 'Location Country' , level:4},\r\n            {name: 'All Location', level:5}\r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Location Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Location Level'));\r\n        var LocLevel=ItemLevels.split(',')\r\n        Log.Info(\"LocationLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(LocLevel,LocHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestLocation']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestChannel = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const ChanHigh=[\r\n            {name: 'Channel', level:1},\r\n            {name: 'Planning Channel', level:2},\r\n            {name: 'Channel L1', level:3},\r\n            {name: 'Channel L2' , level:4},\r\n            {name: 'All Channel', level:5},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Channel Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Channel Level'));\r\n        var ChanLevel=ItemLevels.split(',')\r\n        Log.Info(\"ChannelLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(ChanLevel,ChanHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestChannel']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestRegion = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const RegHigh=[\r\n            {name: 'Region', level:1},\r\n            {name: 'Planning Region', level:2},\r\n            {name: 'Region L1', level:3},\r\n            {name: 'Region L2' , level:4},\r\n            {name: 'Region L3', level:5},\r\n            {name: 'Region L4', level:6},\r\n            {name: 'All Region', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[Region Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Region Level'));\r\n        var RegLevel=ItemLevels.split(',')\r\n        Log.Info(\"RegionLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(RegLevel,RegHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestRegion']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestPnL= function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const PnlHigh=[\r\n            {name: 'PnL', level:1},\r\n            {name: 'Planning PnL', level:2},\r\n            {name: 'PnL L1', level:3},\r\n            {name: 'PnL L2' , level:4},\r\n            {name: 'PnL L3', level:5},\r\n            {name: 'PnL L4', level:6},\r\n            {name: 'All PnL', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+']) on row, ({Measure.[PnL Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('PnL Level'));\r\n        var PnlLevel=ItemLevels.split(',')\r\n        Log.Info(\"PnLLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(PnlLevel,PnlHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestPnL']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n    var HighestDemandDomain = function (o9Params){\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const DeDHigh=[\r\n            {name: 'Demand Domain', level:1},\r\n            {name: 'Planning Demand Domain', level:2},\r\n            {name: 'Demand Domain L1', level:3},\r\n            {name: 'Demand Domain L2' , level:4},\r\n            {name: 'Demand Domain L3', level:5},\r\n            {name: 'Demand Domain L4', level:6},\r\n            {name: 'All Demand Domain', level:7},\r\n            \r\n        ]\r\n\r\n        var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Demand Domain Level]}) on column;';\r\n        var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n        Log.Info('CellSet'+ItemDataCellSet)\r\n        var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Demand Domain Level'));\r\n        var DeDLevel=ItemLevels.split(',')\r\n        Log.Info(\"DemandDomainLevels: \"+ItemLevels);\r\n         \r\n        \r\n\r\n  \r\n        const HighestItem=findHighestInHierarchy(DeDLevel,DeDHigh);\r\n        Log.Info(HighestItem);\r\n        parsedParams['HighestDemandDomain']=HighestItem.toString();\r\n\r\n        return parsedParams;\r\n    }\r\n\r\n    return {\r\n       HighestItem:HighestItem,\r\n       HighestAccount:HighestAccount,\r\n       HighestLocation:HighestLocation,\r\n       HighestChannel:HighestChannel,\r\n       HighestRegion:HighestRegion,\r\n       HighestPnL:HighestPnL,\r\n       HighestDemandDomain:HighestDemandDomain\r\n    };\r\n    \r\n  });",
    "ModuleName": "o9.DemandPlanning.AllHighestLevel",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "deb16116-9cf3-819c-a1f5-564a8157cf82",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212954,
    "Description": "Region No PL",
    "Documentation": "define('o9.DemandPlanning.ExistingRegionParameterNoPL', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingRegionString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT Region\");\r\n        Log.Info(\"Check Iteration Type Region: \" +IterationType);\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n        var ExistingShiftPatternsRegionQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n         var ExistingShiftPatternsRegionDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsRegionQuery));\r\n        Log.Info(ExistingShiftPatternsRegionDataCellSet);\r\n        var ExistingShiftPatternsRegionList = ExistingShiftPatternsRegionDataCellSet.attributeMembers(\"Region\",RegionScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegionList : ' + ExistingShiftPatternsRegionList);\r\n        var ExistingShiftPatternsRegion = ExistingShiftPatternsRegionList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => '[' + i);\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegion : ' + ExistingShiftPatternsRegion);\r\n        if (ExistingShiftPatternsRegion.length === 0){\r\n            ExistingShiftPatternsRegion = \"[]\";\r\n        }\r\n        \r\n        parsedParams['ExistingRegionString'] = ExistingShiftPatternsRegion.toString();\r\n        Log.Info(\"ExistingRegionString: \" + ExistingShiftPatternsRegion.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingRegionString: ExistingRegionString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingRegionParameterNoPL', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingRegionString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT Region\");\r\n        Log.Info(\"Check Iteration Type Region: \" +IterationType);\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n        var ExistingShiftPatternsRegionQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n         var ExistingShiftPatternsRegionDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsRegionQuery));\r\n        Log.Info(ExistingShiftPatternsRegionDataCellSet);\r\n        var ExistingShiftPatternsRegionList = ExistingShiftPatternsRegionDataCellSet.attributeMembers(\"Region\",RegionScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegionList : ' + ExistingShiftPatternsRegionList);\r\n        var ExistingShiftPatternsRegion = ExistingShiftPatternsRegionList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => '[' + i);\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegion : ' + ExistingShiftPatternsRegion);\r\n        if (ExistingShiftPatternsRegion.length === 0){\r\n            ExistingShiftPatternsRegion = \"[]\";\r\n        }\r\n        \r\n        parsedParams['ExistingRegionString'] = ExistingShiftPatternsRegion.toString();\r\n        Log.Info(\"ExistingRegionString: \" + ExistingShiftPatternsRegion.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingRegionString: ExistingRegionString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingRegionParameterNoPL",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "1948c1cf-2a42-cb0e-0896-72812568b69c",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212955,
    "Description": "Populate FN Item for new Item using existing Item , If not populated for existing item put dummy",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemFNItem'\r\ndefine('o9.DemandPlanning.NewItemFNItem', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemFNItem function\r\n    var NewItemFNItem = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemFNItemQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[FN Item] );';\r\n        var NewItemFNItemDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemFNItemQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemFNItemQuery : ' + NewItemFNItemQuery);\r\n\t\t// Check if FNItem is null then replace with \"Dummy\" if so\r\n        if (NewItemFNItemDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"FNItem\"\r\n            var NewItemFNItemList = NewItemFNItemDataCellSet.attributeMembers(\"Item\", \"FN Item\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemFNItem -> NewItemFNItemList : ' + NewItemFNItemList);\r\n\r\n            // Extract the names from the result and store in NewFNItem\r\n            var NewFNItem = NewItemFNItemList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemFNItem'] = NewFNItem[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemFNItem'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemFNItem function as part of the module\r\n    return {\r\n        NewItemFNItem: NewItemFNItem\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemFNItem'\r\ndefine('o9.DemandPlanning.NewItemFNItem', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemFNItem function\r\n    var NewItemFNItem = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemFNItemQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[FN Item] );';\r\n        var NewItemFNItemDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemFNItemQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemFNItemQuery : ' + NewItemFNItemQuery);\r\n\t\t// Check if FNItem is null then replace with \"Dummy\" if so\r\n        if (NewItemFNItemDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"FNItem\"\r\n            var NewItemFNItemList = NewItemFNItemDataCellSet.attributeMembers(\"Item\", \"FN Item\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemFNItem -> NewItemFNItemList : ' + NewItemFNItemList);\r\n\r\n            // Extract the names from the result and store in NewFNItem\r\n            var NewFNItem = NewItemFNItemList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemFNItem'] = NewFNItem[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemFNItem'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemFNItem function as part of the module\r\n    return {\r\n        NewItemFNItem: NewItemFNItem\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemFNItem",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "6d61e856-73de-9293-9e6c-3f638e3ae1d3",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212956,
    "Description": "To validate stat level for Input streams",
    "Documentation": "define('o9.DemandPlanning.ValidateStatLevel', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ValidateStatLevel = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountLevel;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemLevel;\r\n        var LocationScope = parsedParams.LocationLevel;\r\n        var ChannelScope = parsedParams.ChannelLevel;\r\n        var PnLScope = parsedParams.PnLLevel;\r\n        var DemandDomainScope = parsedParams.DemandDomainLevel;\r\n        var RegionScope = parsedParams.RegionLevel;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t    InputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\r\n\t\t\r\n\t\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => !Masterlist.includes(element));\r\n\r\n\t\t// Elements in array2 but not in array1\r\n\t\tconst notInArray1 = Masterlist.filter(element => !measureListArray.includes(element));\r\n\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\r\n\t\t// Check if \"pnl\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())  && PnLScope !== \"All PnL\") {\r\n\t\t     RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'PnL Dimension is missing from the grains of the selected Input Stream. Use All PnL for this Input Stream!. '    \r\n            };\r\n\t\t}\r\n\r\n\t\t// Check if \"location\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())  && LocationScope !== \"All Location\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Location Dimension is missing from the grains of the selected Input Stream. Use All Location for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())  && ItemScope !== \"All Item\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Item Dimension is missing from the grains of the selected Input Stream. Use All Item for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())  && \"All Account\" !== \"All Account\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Account Dimension is missing from the grains of the selected Input Stream. Use All Account for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())  && \"All Channel\" !== \"All Channel\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Channel Dimension is missing from the grains of the selected Input Stream. Use All Channel for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())  && \"All Region\" !== \"All Region\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Region Dimension is missing from the grains of the selected Input Stream. Use All Region for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())  && \"All Demand Domain\" !== \"All Demand Domain\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Demand Domain Dimension is missing from the grains of the selected Input Stream. Use All Demand Domain for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ValidateStatLevel: ValidateStatLevel,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ValidateStatLevel', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ValidateStatLevel = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"STMT Location\");\r\n\t\tLog.Info(\"Check Iteration Type Location: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountLevel;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemLevel;\r\n        var LocationScope = parsedParams.LocationLevel;\r\n        var ChannelScope = parsedParams.ChannelLevel;\r\n        var PnLScope = parsedParams.PnLLevel;\r\n        var DemandDomainScope = parsedParams.DemandDomainLevel;\r\n        var RegionScope = parsedParams.RegionLevel;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t    InputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\r\n\t\t\r\n\t\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\t\tconst notInArray2 = measureListArray.filter(element => !Masterlist.includes(element));\r\n\r\n\t\t// Elements in array2 but not in array1\r\n\t\tconst notInArray1 = Masterlist.filter(element => !measureListArray.includes(element));\r\n\r\n\t\t// Combine both to get elements that are not common\r\n\t\tconst notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n\t\tLog.Info(\"Grain Does Not Exists\" + notCommonElements); // Output: elements that are not common\r\n\r\n\t\t// Check if \"pnl\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())  && PnLScope !== \"All PnL\") {\r\n\t\t     RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'PnL Dimension is missing from the grains of the selected Input Stream. Use All PnL for this Input Stream!. '    \r\n            };\r\n\t\t}\r\n\r\n\t\t// Check if \"location\" is in the notCommonElements array\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())  && LocationScope !== \"All Location\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Location Dimension is missing from the grains of the selected Input Stream. Use All Location for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())  && ItemScope !== \"All Item\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Item Dimension is missing from the grains of the selected Input Stream. Use All Item for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())  && \"All Account\" !== \"All Account\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Account Dimension is missing from the grains of the selected Input Stream. Use All Account for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())  && \"All Channel\" !== \"All Channel\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Channel Dimension is missing from the grains of the selected Input Stream. Use All Channel for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())  && \"All Region\" !== \"All Region\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Region Dimension is missing from the grains of the selected Input Stream. Use All Region for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\t\tif (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())  && \"All Demand Domain\" !== \"All Demand Domain\") {\r\n\t\t\r\n\t\t        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Demand Domain Dimension is missing from the grains of the selected Input Stream. Use All Demand Domain for this Input Stream! '    \r\n            };\r\n\t\t}\r\n\t\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ValidateStatLevel: ValidateStatLevel,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ValidateStatLevel",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "ea47ebf7-9019-ba1f-f954-ddc9ab87b1cc",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212957,
    "Description": "NewItemRGM2",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemRGM2'\r\ndefine('o9.DemandPlanning.NewItemRGM2', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemRGM2 function\r\n    var NewItemRGM2 = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemRGM2Query = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[RGM2] );';\r\n        var NewItemRGM2DataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemRGM2Query));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemRGM2Query : ' + NewItemRGM2Query);\r\n\t\t// Check if NewRGM2 is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemRGM2DataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"RGM2\"\r\n            var NewItemRGM2List = NewItemRGM2DataCellSet.attributeMembers(\"Item\", \"RGM2\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemRGM2 -> NewItemRGM2List : ' + NewItemRGM2List);\r\n\r\n            // Extract the names from the result and store in NewRGM2\r\n            var NewRGM2 = NewItemRGM2List.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemRGM2'] = NewRGM2[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemRGM2'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemRGM2 function as part of the module\r\n    return {\r\n        NewItemRGM2: NewItemRGM2\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemRGM2'\r\ndefine('o9.DemandPlanning.NewItemRGM2', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemRGM2 function\r\n    var NewItemRGM2 = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemRGM2Query = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[RGM2] );';\r\n        var NewItemRGM2DataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemRGM2Query));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemRGM2Query : ' + NewItemRGM2Query);\r\n\t\t// Check if NewRGM2 is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemRGM2DataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"RGM2\"\r\n            var NewItemRGM2List = NewItemRGM2DataCellSet.attributeMembers(\"Item\", \"RGM2\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemRGM2 -> NewItemRGM2List : ' + NewItemRGM2List);\r\n\r\n            // Extract the names from the result and store in NewRGM2\r\n            var NewRGM2 = NewItemRGM2List.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemRGM2'] = NewRGM2[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemRGM2'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemRGM2 function as part of the module\r\n    return {\r\n        NewItemRGM2: NewItemRGM2\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemRGM2",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "d15930db-b922-34f9-deae-168afe4fd87a",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212958,
    "Description": "o9.DemandPlanning.StatActualBatchRun",
    "Documentation": "define('o9.DemandPlanning.StatActualBatchRun',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    \r\n    \r\n    const AssortmentMeasure = {\r\n        \"Actual\": \"Assortment Stat\",\r\n        \"Sell Out Actual\": \"Sell Out Actual\"\r\n    };\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    \r\n    \r\n    var  StatActualBatchRun = function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\t\r\n\tvar ForecastIterationType = parsedParams.ForecastIterationType;\r\n\tvar VersionName = parsedParams.VersionName;\r\n\r\n    //Log method logs to the webapi log\r\n    var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+']);';\r\n    var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n    var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n    var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n    Log.Info(\"ForecastIterationDatalist:\" + ForecastIterationDatalist);  \r\n\r\n    ForecastIterationDatalist.forEach(function(ForecastIteration) {\r\n    Log.Info(\"ForecastIterationValue:\" +ForecastIteration )\r\n\r\n        var IterationQuery='Select([Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] *[Forecast Iteration].[Forecast Iteration Type]);'\r\n        var Typeset=cellsetModule.createCellSet(queryModule.select(IterationQuery))\r\n        var IterationType=Typeset.row(0).cell(Typeset.memberColumnIndex('Forecast Iteration','Forecast Iteration Type')).Name;\r\n        var InputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\r\n\r\n\r\n        if (ForecastIteration == 'FI-Default') {\r\n        \r\n            var MasterIterationScope = 'cartesian scope: (Version.[Version Name].['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+'] * [Item].[Planning Item] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Region].[Planning Region] * [Location].[Location] * [Demand Domain].[Planning Demand Domain] * [PnL].[Planning PnL]);Measure.[Forecast Iteration Selection] = if (~isnull(Measure.['+AssortmentMeasure[InputStream]+'])) then \"FI-Default\" else null;end scope;';\r\n            queryModule.select(MasterIterationScope)\t\r\n        return \r\n            \r\n        }\r\n\r\n\r\n        ScopeQuery = 'Select ([Version].[Version Name].['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;'\r\n\r\n        var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n        var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n        var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n        var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n        var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n        var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n        var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n\r\n        var SelectionScope=`(Select ([Version].[Version Name].[${VersionName}] * [Forecast Iteration].[Forecast Iteration Type].[${IterationType}] * [Account].[${AccountScope}] * [Channel].[${ChannelScope}] * [Demand Domain].[${DemandDomainScope}] * [Item].[${ItemScope}] * [PnL].[${PnLScope}] * [Region].[${RegionScope}] * [Location].[${LocationScope}] ) on row, ({Measure.[Forecast Iteration Selection]}) on column).filter(Measure.[Forecast Iteration Selection] == \"${ForecastIteration}\");`\r\n\r\n        const SelectionCellset= cellsetModule.createCellSet(queryModule.select(SelectionScope));\r\n\r\n\r\n\r\n\r\n        var ItemList=SelectionCellset.attributeMembers('Item',ItemScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        ItemList=ItemList.map(element => `\"${element}\"`)\r\n        var AccountList=SelectionCellset.attributeMembers('Account',AccountScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        AccountList=AccountList.map(element => `\"${element}\"`)\r\n        var ChannelList=SelectionCellset.attributeMembers('Channel',ChannelScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        ChannelList=ChannelList.map(element => `\"${element}\"`)\r\n        var RegionList=SelectionCellset.attributeMembers('Region',RegionScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        RegionList=RegionList.map(element => `\"${element}\"`)\r\n        var LocationList=SelectionCellset.attributeMembers('Location',LocationScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        LocationList=LocationList.map(element => `\"${element}\"`)\r\n        var PnLList=SelectionCellset.attributeMembers('PnL',PnLScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        PnLList=PnLList.map(element => `\"${element}\"`)\r\n        var DemandDomainList=SelectionCellset.attributeMembers('Demand Domain',DemandDomainScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        DemandDomainList=DemandDomainList.map(element => `\"${element}\"`)\r\n       \r\n\r\n\r\n        var Scope = `cartesian scope: (Version.[Version Name].[${VersionName}] * [Forecast Iteration].[Forecast Iteration Type].[${IterationType}] * [Item].[${ItemScope}].filter(#.Name in {${ItemList}}).relatedmembers([Planning Item]) * [Account].[${AccountScope}].filter(#.Name in {${AccountList}}).relatedmembers([Planning Account]) * [Channel].[${ChannelScope}].filter(#.Name in {${ChannelList}}).relatedmembers([Planning Channel]) * [Region].[${RegionScope}].filter(#.Name in {${RegionList}}).relatedmembers([Planning Region]) * [Location].[${LocationScope}].filter(#.Name in {${LocationList}}).relatedmembers([Location]) * [Demand Domain].[${DemandDomainScope}].filter(#.Name in {${DemandDomainList}}).relatedmembers([Planning Demand Domain]) * [PnL].[${PnLScope}].filter(#.Name in {${PnLList}}).relatedmembers([Planning PnL]));Measure.[Forecast Iteration Selection] = if (~isnull(Measure.[${AssortmentMeasure[InputStream]}])) then \"${ForecastIteration}\" else null;end scope;`\r\n\r\n\r\n        queryModule.select(Scope)\r\n\r\n        var PopActualL1minusTime='scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * Version.[Version Name].Filter( #.Name == \"'+VersionName+'\") * [Forecast Iteration].[Forecast Iteration Type].Filter( #.Name == \"'+ForecastIterationType+'\").relatedmembers([Forecast Iteration])  );Measure.[Actual L1 Minus Time]=if(~isnull(Measure.[Stat Actual])) then Measure.[Stat Actual];end scope;'\r\n\r\n        queryModule.select(PopActualL1minusTime)\r\n        Log.Info(\"Popualte Stat actual Query : \"+PopActualL1minusTime)\r\n     });\r\n\r\n\r\n\r\n\r\n};\r\n    return {\r\n        StatActualBatchRun : StatActualBatchRun\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.StatActualBatchRun',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    \r\n    \r\n    const AssortmentMeasure = {\r\n        \"Actual\": \"Assortment Stat\",\r\n        \"Sell Out Actual\": \"Sell Out Actual\"\r\n    };\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n    \r\n    \r\n    var  StatActualBatchRun = function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\t\r\n\tvar ForecastIterationType = parsedParams.ForecastIterationType;\r\n\tvar VersionName = parsedParams.VersionName;\r\n\r\n    //Log method logs to the webapi log\r\n    var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+']);';\r\n    var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n    var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n    var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n    Log.Info(\"ForecastIterationDatalist:\" + ForecastIterationDatalist);  \r\n\r\n    ForecastIterationDatalist.forEach(function(ForecastIteration) {\r\n    Log.Info(\"ForecastIterationValue:\" +ForecastIteration )\r\n\r\n        var IterationQuery='Select([Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] *[Forecast Iteration].[Forecast Iteration Type]);'\r\n        var Typeset=cellsetModule.createCellSet(queryModule.select(IterationQuery))\r\n        var IterationType=Typeset.row(0).cell(Typeset.memberColumnIndex('Forecast Iteration','Forecast Iteration Type')).Name;\r\n        var InputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\r\n\r\n\r\n        if (ForecastIteration == 'FI-Default') {\r\n        \r\n            var MasterIterationScope = 'cartesian scope: (Version.[Version Name].['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+'] * [Item].[Planning Item] * [Account].[Planning Account] * [Channel].[Planning Channel] * [Region].[Planning Region] * [Location].[Location] * [Demand Domain].[Planning Demand Domain] * [PnL].[Planning PnL]);Measure.[Forecast Iteration Selection] = if (~isnull(Measure.['+AssortmentMeasure[InputStream]+'])) then \"FI-Default\" else null;end scope;';\r\n            queryModule.select(MasterIterationScope)\t\r\n        return \r\n            \r\n        }\r\n\r\n\r\n        ScopeQuery = 'Select ([Version].[Version Name].['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;'\r\n\r\n        var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n        var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n        var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n        var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n        var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n        var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n        var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n\r\n        var SelectionScope=`(Select ([Version].[Version Name].[${VersionName}] * [Forecast Iteration].[Forecast Iteration Type].[${IterationType}] * [Account].[${AccountScope}] * [Channel].[${ChannelScope}] * [Demand Domain].[${DemandDomainScope}] * [Item].[${ItemScope}] * [PnL].[${PnLScope}] * [Region].[${RegionScope}] * [Location].[${LocationScope}] ) on row, ({Measure.[Forecast Iteration Selection]}) on column).filter(Measure.[Forecast Iteration Selection] == \"${ForecastIteration}\");`\r\n\r\n        const SelectionCellset= cellsetModule.createCellSet(queryModule.select(SelectionScope));\r\n\r\n\r\n\r\n\r\n        var ItemList=SelectionCellset.attributeMembers('Item',ItemScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        ItemList=ItemList.map(element => `\"${element}\"`)\r\n        var AccountList=SelectionCellset.attributeMembers('Account',AccountScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        AccountList=AccountList.map(element => `\"${element}\"`)\r\n        var ChannelList=SelectionCellset.attributeMembers('Channel',ChannelScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        ChannelList=ChannelList.map(element => `\"${element}\"`)\r\n        var RegionList=SelectionCellset.attributeMembers('Region',RegionScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        RegionList=RegionList.map(element => `\"${element}\"`)\r\n        var LocationList=SelectionCellset.attributeMembers('Location',LocationScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        LocationList=LocationList.map(element => `\"${element}\"`)\r\n        var PnLList=SelectionCellset.attributeMembers('PnL',PnLScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        PnLList=PnLList.map(element => `\"${element}\"`)\r\n        var DemandDomainList=SelectionCellset.attributeMembers('Demand Domain',DemandDomainScope).map(function (item) {\r\n                        return item['Name'];\r\n                    });\r\n        DemandDomainList=DemandDomainList.map(element => `\"${element}\"`)\r\n       \r\n\r\n\r\n        var Scope = `cartesian scope: (Version.[Version Name].[${VersionName}] * [Forecast Iteration].[Forecast Iteration Type].[${IterationType}] * [Item].[${ItemScope}].filter(#.Name in {${ItemList}}).relatedmembers([Planning Item]) * [Account].[${AccountScope}].filter(#.Name in {${AccountList}}).relatedmembers([Planning Account]) * [Channel].[${ChannelScope}].filter(#.Name in {${ChannelList}}).relatedmembers([Planning Channel]) * [Region].[${RegionScope}].filter(#.Name in {${RegionList}}).relatedmembers([Planning Region]) * [Location].[${LocationScope}].filter(#.Name in {${LocationList}}).relatedmembers([Location]) * [Demand Domain].[${DemandDomainScope}].filter(#.Name in {${DemandDomainList}}).relatedmembers([Planning Demand Domain]) * [PnL].[${PnLScope}].filter(#.Name in {${PnLList}}).relatedmembers([Planning PnL]));Measure.[Forecast Iteration Selection] = if (~isnull(Measure.[${AssortmentMeasure[InputStream]}])) then \"${ForecastIteration}\" else null;end scope;`\r\n\r\n\r\n        queryModule.select(Scope)\r\n\r\n        var PopActualL1minusTime='scope: (&AllStatItem * &AllStatAccount * &AllStatChannel * &AllStatRegion * &AllStatPnL * &AllStatDemandDomain * &AllStatLocation * Version.[Version Name].Filter( #.Name == \"'+VersionName+'\") * [Forecast Iteration].[Forecast Iteration Type].Filter( #.Name == \"'+ForecastIterationType+'\").relatedmembers([Forecast Iteration])  );Measure.[Actual L1 Minus Time]=if(~isnull(Measure.[Stat Actual])) then Measure.[Stat Actual];end scope;'\r\n\r\n        queryModule.select(PopActualL1minusTime)\r\n        Log.Info(\"Popualte Stat actual Query : \"+PopActualL1minusTime)\r\n     });\r\n\r\n\r\n\r\n\r\n};\r\n    return {\r\n        StatActualBatchRun : StatActualBatchRun\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.StatActualBatchRun",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "386398f1-4d3a-47cb-55fa-0b93ca0a3589",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212959,
    "Description": "Hand Shaking",
    "Documentation": "define('o9.DemandPlanning.dayRollover',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    //initiatlize the query modules\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\tvar webAPICall = require('o9.web.api');\r\n    var measureLock = function(){\r\n\t\tvar rules = [];\r\n\t\t//QUERY FOR Planning Window Details\r\n\t\tvar queryForPlanningWindow = ' Select (&CWV * &CurrentPlanningCycle * [Process].[Process] *{Measure.[Process Active?]})  orderby [Process].[Process].Key;';\r\n\t\t//run query into cellset\r\n\t\tvar resFromLS = queryModule.select(queryForPlanningWindow);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(resFromLS);\r\n\t\t//Log.Info(\"rajarshi time\" + date);\r\n\t\tif(dataCellSet.rowCount > 0 ){\r\n\t\t\t//var pflags = [];\r\n\t\t\tfor (i = 0; i < dataCellSet.rowCount; i++) {\r\n\t\t\t    //read flags,process,\r\n\t\t\t\tvar process = dataCellSet.row(i).cell(dataCellSet.memberColumnIndex('Process', 'Process')).Name; \r\n\t\t\t\tvar isOpenFlag = dataCellSet.row(i).cell(dataCellSet.measureColumnIndex('Process Active?'));\r\n\t\t\t\tswitch (process) {\r\n\t\t\t\t  case \"a. Stat Forecast Generation\":\r\n\t\t\t\t\tvar ds1 = {RuleName:'DataScientist1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist1 to roles [Data Scientist] for model [070 Stat Model];')};\r\n\t\t\t\t\trules.push(ds1);\r\n\t\t\t\t\tvar ds2 = {RuleName:'DataScientist2',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist2 to roles [Data Scientist] for model [010 Version];')};\r\n\t\t\t\t\trules.push(ds2);\r\n\t\t\t\t\tvar ds3 = {RuleName:'DataScientist3',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist3 to roles [Data Scientist] for model [100 Interactive Stat Forecast];')};\r\n\t\t\t\t\trules.push(ds3);\r\n\t\t\t\t\tvar ds4 = {RuleName:'DataScientist4',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist4 to roles [Data Scientist] for model [110 Interactive Stat Output];')};\r\n\t\t\t\t\trules.push(ds4);\r\n\t\t\t\t\tvar ds5 = {RuleName:'DataScientist5',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist5 to roles [Data Scientist] for model [130 Segmentation Parameters];')};\r\n\t\t\t\t\trules.push(ds5);\r\n\t\t\t\t\tvar ds6 = {RuleName:'DataScientist6',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist6 to roles [Data Scientist] for model [135 Stat Rule];')};\r\n\t\t\t\t\trules.push(ds6);\r\n\t\t\t\t\tvar ds7 = {RuleName:'DataScientist7',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist7 to roles [Data Scientist] for model [140 Product Customer Segment];')};\r\n\t\t\t\t\trules.push(ds7);\r\n\t\t\t\t\tvar ds8 = {RuleName:'DataScientist8',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist8 to roles [Data Scientist] for model [160 Stat Segment L1];')};\r\n\t\t\t\t\trules.push(ds8);\r\n\t\t\t\t\tvar ds9 = {RuleName:'DataScientist9',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist9 to roles [Data Scientist] for model [180 Stat Segment];')};\r\n\t\t\t\t\trules.push(ds9);\r\n\t\t\t\t\tvar ds10 = {RuleName:'DataScientist10',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist10 to roles [Data Scientist] for model [150 Product Segment];')};\r\n\t\t\t\t\trules.push(ds10);\r\n\t\t\t\t\tvar ds11 = {RuleName:'DataScientist11',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist11 to roles [Data Scientist] for model [155 Product Customer L1 Segment];')};\r\n\t\t\t\t\trules.push(ds11);\r\n\t\t\t\t\tvar ds12 = {RuleName:'DataScientist12',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist12 to roles [Data Scientist] for model [020 Actual];')};\r\n\t\t\t\t\trules.push(ds12);\t\r\n\t\t\t\t\tvar ds13 = {RuleName:'DataScientist13',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist13 to roles [Data Scientist] for model [170 Stat System L1];')};\r\n\t\t\t\t\trules.push(ds13);\r\n\t\t\t\t\tvar ds14 = {RuleName:'DataScientist14',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist14 to roles [Data Scientist] for model [162 System Stat Algorithm Association];')};\r\n\t\t\t\t\trules.push(ds14);\r\n\t\t\t\t\tvar ds15 = {RuleName:'DataScientist15',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist15 to roles [Data Scientist] for model [164 System Stat Parameter Association];')};\r\n\t\t\t\t\trules.push(ds15);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t  case \"b. Sales Input AUDI\":\r\n\t\t\t\t\tvar ds16 = {RuleName:'AccountManager1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager1 to roles [Account Manager AUDI]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds16);\r\n\t\t\t\t\tvar ds17 = {RuleName:'AccountManager2',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager2 to roles [Account Manager AUDI]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds17);\r\n\t\t\t\t\tvar ds18 = {RuleName:'AccountManager3',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager3 to roles [Account Manager AUDI]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds18);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds20 = {RuleName:'AccountManager5',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager5 to roles [Account Manager AUDI]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds20);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t  case \"c. Sales Input CLUB RETAILER\":\r\n\t\t\t\t\tvar ds21 = {RuleName:'AccountManager6',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager6 to roles [Account Manager CLUB RETAILER]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds21);\r\n\t\t\t\t\tvar ds22 = {RuleName:'AccountManager7',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager7 to roles [Account Manager CLUB RETAILER]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds22);\r\n\t\t\t\t\tvar ds23 = {RuleName:'AccountManager8',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager8 to roles [Account Manager CLUB RETAILER]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds23);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds25 = {RuleName:'AccountManager10',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager10 to roles [Account Manager CLUB RETAILER]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds25);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t  case \"c. Sales Input NATIONAL RETAILER\":\r\n\t\t\t\t\tvar ds26 = {RuleName:'AccountManager11',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager11 to roles [Account Manager NATIONAL RETAILER]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds26);\r\n\t\t\t\t\tvar ds27 = {RuleName:'AccountManage12',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManage12 to roles [Account Manager NATIONAL RETAILER]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds27);\r\n\t\t\t\t\tvar ds28 = {RuleName:'AccountManager13',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager13 to roles [Account Manager NATIONAL RETAILER]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds28);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds30 = {RuleName:'AccountManager15',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager15 to roles [Account Manager NATIONAL RETAILER]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds30);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t case \"c. Sales Input ONLINE\":\r\n\t\t\t\t\tvar ds31 = {RuleName:'AccountManager16',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager16 to roles [Account Manager ONLINE]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds31);\r\n\t\t\t\t\tvar ds32 = {RuleName:'AccountManager17',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager17 to roles [Account Manager ONLINE]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds32);\r\n\t\t\t\t\tvar ds33 = {RuleName:'AccountManager18',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager18 to roles [Account Manager ONLINE]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds33);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds35 = {RuleName:'AccountManager20',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager20 to roles [Account Manager ONLINE]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds35);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"c. Sales Input WHOLESALER\":\r\n\t\t\t\t\tvar ds36 = {RuleName:'AccountManager21',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager21 to roles [Account Manager Wholesaler]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds36);\r\n\t\t\t\t\tvar ds37 = {RuleName:'AccountManage22',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManage22 to roles [Account Manager Wholesaler]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds37);\r\n\t\t\t\t\tvar ds38 = {RuleName:'AccountManager23',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager23 to roles [Account Manager Wholesaler]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds38);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds40 = {RuleName:'AccountManager25',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager25 to roles [Account Manager Wholesaler]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds40);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"d. Marketing Input\":\r\n\t\t\t\t\tvar ds61 = {RuleName:'MarketingManager1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access MarketingManager1 to roles [Marketing Manager]  for measure [Marketing Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds61);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"e. Consensus\":\r\n\t\t\t\t\tvar ds63 = {RuleName:'DemandPlanner1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner1 to roles [Demand Planner]  for measure [Consensus Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds63);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"f. Dissaggregation by Location\":\r\n\t\t\t\t\tvar ds66 = {RuleName:'DemandPlanner5',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner5 to roles [Demand Planner]  for measure [SKU DC Split] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds66);\r\n\t\t\t\t\tvar ds67 = {RuleName:'DemandPlanner6',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner6 to roles [Demand Planner]  for measure [Sell In Stat L0];')};\r\n\t\t\t\t\trules.push(ds67);\r\n\t\t\t\t\tvar ds68 = {RuleName:'DemandPlanner7',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner7 to roles [Demand Planner]  for measure [Sell In Stat L0 Agg];')};\r\n\t\t\t\t\trules.push(ds68);\r\n\t\t\t\t\tvar ds69 = {RuleName:'DemandPlanner8',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner8 to roles [Demand Planner]  for measure [Final Fcst];')};\r\n\t\t\t\t\trules.push(ds69);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"g. Publish\":\r\n\t\t\t\t\tvar ds70 = {RuleName:'DemandPlanner9',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner9 to roles [Demand Planner]  for measure [Published Fcst LC];')};\r\n\t\t\t\t\trules.push(ds70);\r\n\t\t\t\t\tvar ds71 = {RuleName:'DemandPlanner10',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner10 to roles [Demand Planner]  for measure [Published Fcst Input];')};\r\n\t\t\t\t\trules.push(ds71);\r\n\t\t\t\t\tvar ds72 = {RuleName:'DemandPlanner11',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner11 to roles [Demand Planner]  for measure [Published Fcst];')};\r\n\t\t\t\t\trules.push(ds72);\r\n\t\t\t\t\tvar ds73 = {RuleName:'DemandPlanner12',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner12 to roles [Demand Planner]  for measure [Published Final Fcst LC];')};\r\n\t\t\t\t\trules.push(ds73);\r\n\t\t\t\t\tvar ds74 = {RuleName:'DemandPlanner13',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner13 to roles [Demand Planner]  for measure [Published Final Fcst Input];')};\r\n\t\t\t\t\trules.push(ds74);\r\n\t\t\t\t\tvar ds75 = {RuleName:'DemandPlanner14',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner14 to roles [Demand Planner]  for measure [Published Final Fcst];')};\r\n\t\t\t\t\trules.push(ds75);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tLog.Info(\" Rules ---\" + JSON.stringify(rules));\t\r\n\t\t\tvar response = webAPICall.upsertACL(rules);\r\n\t\t}\t\t\t\r\n\t};\r\n    return {\r\n        \tmeasureLock : measureLock\r\n    };\r\n});\r\n",
    "Code": "define('o9.DemandPlanning.dayRollover',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    //initiatlize the query modules\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\tvar webAPICall = require('o9.web.api');\r\n    var measureLock = function(){\r\n\t\tvar rules = [];\r\n\t\t//QUERY FOR Planning Window Details\r\n\t\tvar queryForPlanningWindow = ' Select (&CWV * &CurrentPlanningCycle * [Process].[Process] *{Measure.[Process Active?]})  orderby [Process].[Process].Key;';\r\n\t\t//run query into cellset\r\n\t\tvar resFromLS = queryModule.select(queryForPlanningWindow);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(resFromLS);\r\n\t\t//Log.Info(\"rajarshi time\" + date);\r\n\t\tif(dataCellSet.rowCount > 0 ){\r\n\t\t\t//var pflags = [];\r\n\t\t\tfor (i = 0; i < dataCellSet.rowCount; i++) {\r\n\t\t\t    //read flags,process,\r\n\t\t\t\tvar process = dataCellSet.row(i).cell(dataCellSet.memberColumnIndex('Process', 'Process')).Name; \r\n\t\t\t\tvar isOpenFlag = dataCellSet.row(i).cell(dataCellSet.measureColumnIndex('Process Active?'));\r\n\t\t\t\tswitch (process) {\r\n\t\t\t\t  case \"a. Stat Forecast Generation\":\r\n\t\t\t\t\tvar ds1 = {RuleName:'DataScientist1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist1 to roles [Data Scientist] for model [070 Stat Model];')};\r\n\t\t\t\t\trules.push(ds1);\r\n\t\t\t\t\tvar ds2 = {RuleName:'DataScientist2',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist2 to roles [Data Scientist] for model [010 Version];')};\r\n\t\t\t\t\trules.push(ds2);\r\n\t\t\t\t\tvar ds3 = {RuleName:'DataScientist3',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist3 to roles [Data Scientist] for model [100 Interactive Stat Forecast];')};\r\n\t\t\t\t\trules.push(ds3);\r\n\t\t\t\t\tvar ds4 = {RuleName:'DataScientist4',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist4 to roles [Data Scientist] for model [110 Interactive Stat Output];')};\r\n\t\t\t\t\trules.push(ds4);\r\n\t\t\t\t\tvar ds5 = {RuleName:'DataScientist5',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist5 to roles [Data Scientist] for model [130 Segmentation Parameters];')};\r\n\t\t\t\t\trules.push(ds5);\r\n\t\t\t\t\tvar ds6 = {RuleName:'DataScientist6',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist6 to roles [Data Scientist] for model [135 Stat Rule];')};\r\n\t\t\t\t\trules.push(ds6);\r\n\t\t\t\t\tvar ds7 = {RuleName:'DataScientist7',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist7 to roles [Data Scientist] for model [140 Product Customer Segment];')};\r\n\t\t\t\t\trules.push(ds7);\r\n\t\t\t\t\tvar ds8 = {RuleName:'DataScientist8',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist8 to roles [Data Scientist] for model [160 Stat Segment L1];')};\r\n\t\t\t\t\trules.push(ds8);\r\n\t\t\t\t\tvar ds9 = {RuleName:'DataScientist9',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist9 to roles [Data Scientist] for model [180 Stat Segment];')};\r\n\t\t\t\t\trules.push(ds9);\r\n\t\t\t\t\tvar ds10 = {RuleName:'DataScientist10',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist10 to roles [Data Scientist] for model [150 Product Segment];')};\r\n\t\t\t\t\trules.push(ds10);\r\n\t\t\t\t\tvar ds11 = {RuleName:'DataScientist11',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist11 to roles [Data Scientist] for model [155 Product Customer L1 Segment];')};\r\n\t\t\t\t\trules.push(ds11);\r\n\t\t\t\t\tvar ds12 = {RuleName:'DataScientist12',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist12 to roles [Data Scientist] for model [020 Actual];')};\r\n\t\t\t\t\trules.push(ds12);\t\r\n\t\t\t\t\tvar ds13 = {RuleName:'DataScientist13',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist13 to roles [Data Scientist] for model [170 Stat System L1];')};\r\n\t\t\t\t\trules.push(ds13);\r\n\t\t\t\t\tvar ds14 = {RuleName:'DataScientist14',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist14 to roles [Data Scientist] for model [162 System Stat Algorithm Association];')};\r\n\t\t\t\t\trules.push(ds14);\r\n\t\t\t\t\tvar ds15 = {RuleName:'DataScientist15',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DataScientist15 to roles [Data Scientist] for model [164 System Stat Parameter Association];')};\r\n\t\t\t\t\trules.push(ds15);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t  case \"b. Sales Input AUDI\":\r\n\t\t\t\t\tvar ds16 = {RuleName:'AccountManager1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager1 to roles [Account Manager AUDI]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds16);\r\n\t\t\t\t\tvar ds17 = {RuleName:'AccountManager2',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager2 to roles [Account Manager AUDI]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds17);\r\n\t\t\t\t\tvar ds18 = {RuleName:'AccountManager3',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager3 to roles [Account Manager AUDI]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds18);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds20 = {RuleName:'AccountManager5',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager5 to roles [Account Manager AUDI]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds20);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t  case \"c. Sales Input CLUB RETAILER\":\r\n\t\t\t\t\tvar ds21 = {RuleName:'AccountManager6',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager6 to roles [Account Manager CLUB RETAILER]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds21);\r\n\t\t\t\t\tvar ds22 = {RuleName:'AccountManager7',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager7 to roles [Account Manager CLUB RETAILER]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds22);\r\n\t\t\t\t\tvar ds23 = {RuleName:'AccountManager8',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager8 to roles [Account Manager CLUB RETAILER]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds23);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds25 = {RuleName:'AccountManager10',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager10 to roles [Account Manager CLUB RETAILER]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds25);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t  case \"c. Sales Input NATIONAL RETAILER\":\r\n\t\t\t\t\tvar ds26 = {RuleName:'AccountManager11',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager11 to roles [Account Manager NATIONAL RETAILER]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds26);\r\n\t\t\t\t\tvar ds27 = {RuleName:'AccountManage12',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManage12 to roles [Account Manager NATIONAL RETAILER]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds27);\r\n\t\t\t\t\tvar ds28 = {RuleName:'AccountManager13',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager13 to roles [Account Manager NATIONAL RETAILER]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds28);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds30 = {RuleName:'AccountManager15',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager15 to roles [Account Manager NATIONAL RETAILER]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds30);\r\n\t\t\t\t\tbreak;\t\r\n\t\t\t\t case \"c. Sales Input ONLINE\":\r\n\t\t\t\t\tvar ds31 = {RuleName:'AccountManager16',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager16 to roles [Account Manager ONLINE]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds31);\r\n\t\t\t\t\tvar ds32 = {RuleName:'AccountManager17',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager17 to roles [Account Manager ONLINE]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds32);\r\n\t\t\t\t\tvar ds33 = {RuleName:'AccountManager18',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager18 to roles [Account Manager ONLINE]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds33);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds35 = {RuleName:'AccountManager20',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager20 to roles [Account Manager ONLINE]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds35);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"c. Sales Input WHOLESALER\":\r\n\t\t\t\t\tvar ds36 = {RuleName:'AccountManager21',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager21 to roles [Account Manager Wholesaler]  for measure [Sales Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds36);\r\n\t\t\t\t\tvar ds37 = {RuleName:'AccountManage22',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManage22 to roles [Account Manager Wholesaler]  for measure [Sell In Override] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds37);\r\n\t\t\t\t\tvar ds38 = {RuleName:'AccountManager23',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager23 to roles [Account Manager Wholesaler]  for measure [Wk Cover Target] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds38);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ds40 = {RuleName:'AccountManager25',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access AccountManager25 to roles [Account Manager Wholesaler]  for measure [Sales Fcst Input];')};\r\n\t\t\t\t\trules.push(ds40);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"d. Marketing Input\":\r\n\t\t\t\t\tvar ds61 = {RuleName:'MarketingManager1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access MarketingManager1 to roles [Marketing Manager]  for measure [Marketing Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds61);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"e. Consensus\":\r\n\t\t\t\t\tvar ds63 = {RuleName:'DemandPlanner1',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner1 to roles [Demand Planner]  for measure [Consensus Fcst] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds63);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"f. Dissaggregation by Location\":\r\n\t\t\t\t\tvar ds66 = {RuleName:'DemandPlanner5',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner5 to roles [Demand Planner]  for measure [SKU DC Split] using scope(&CurrentAndFuturePlanningQuarters);')};\r\n\t\t\t\t\trules.push(ds66);\r\n\t\t\t\t\tvar ds67 = {RuleName:'DemandPlanner6',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner6 to roles [Demand Planner]  for measure [Sell In Stat L0];')};\r\n\t\t\t\t\trules.push(ds67);\r\n\t\t\t\t\tvar ds68 = {RuleName:'DemandPlanner7',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner7 to roles [Demand Planner]  for measure [Sell In Stat L0 Agg];')};\r\n\t\t\t\t\trules.push(ds68);\r\n\t\t\t\t\tvar ds69 = {RuleName:'DemandPlanner8',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner8 to roles [Demand Planner]  for measure [Final Fcst];')};\r\n\t\t\t\t\trules.push(ds69);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t  case \"g. Publish\":\r\n\t\t\t\t\tvar ds70 = {RuleName:'DemandPlanner9',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner9 to roles [Demand Planner]  for measure [Published Fcst LC];')};\r\n\t\t\t\t\trules.push(ds70);\r\n\t\t\t\t\tvar ds71 = {RuleName:'DemandPlanner10',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner10 to roles [Demand Planner]  for measure [Published Fcst Input];')};\r\n\t\t\t\t\trules.push(ds71);\r\n\t\t\t\t\tvar ds72 = {RuleName:'DemandPlanner11',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner11 to roles [Demand Planner]  for measure [Published Fcst];')};\r\n\t\t\t\t\trules.push(ds72);\r\n\t\t\t\t\tvar ds73 = {RuleName:'DemandPlanner12',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner12 to roles [Demand Planner]  for measure [Published Final Fcst LC];')};\r\n\t\t\t\t\trules.push(ds73);\r\n\t\t\t\t\tvar ds74 = {RuleName:'DemandPlanner13',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner13 to roles [Demand Planner]  for measure [Published Final Fcst Input];')};\r\n\t\t\t\t\trules.push(ds74);\r\n\t\t\t\t\tvar ds75 = {RuleName:'DemandPlanner14',RuleText:(((isOpenFlag)?'grant' : 'deny')+ ' write access DemandPlanner14 to roles [Demand Planner]  for measure [Published Final Fcst];')};\r\n\t\t\t\t\trules.push(ds75);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tLog.Info(\" Rules ---\" + JSON.stringify(rules));\t\r\n\t\t\tvar response = webAPICall.upsertACL(rules);\r\n\t\t}\t\t\t\r\n\t};\r\n    return {\r\n        \tmeasureLock : measureLock\r\n    };\r\n});\r\n",
    "ModuleName": "o9.DemandPlanning.dayRollover",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "8025f9c8-75c8-48f1-8f82-2e73b99d3986",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212960,
    "Description": "Validation for CreateForecastIterationType action button",
    "Documentation": "define('o9.DemandPlanning.LockValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\r\n//Log method logs to the webapi log\r\nLog.Info(\"Starting Horizon Validation\");\r\nvar ForecastIterationType = parsedParams.ForecastIterationType;\r\n// var HorizonStart = parsedParams.HorizonStart;\r\nvar HorizonEnd = parsedParams.HorizonEnd;\r\nvar GenTimeBucket = parsedParams.ForecastGenerationTimeBucket;\r\nvar StorTimeBucket = parsedParams.ForecastStorageTimeBucket;\r\n// var InRec= parsedParams.InReconciliation;\r\n// var DisagType= parsedParams.DisaggregationType;\r\n// var IsLocked=parsedParams.IsLocked;\r\n\r\nLog.Info(\"Forecast Iteration Type : \"+ForecastIterationType);\r\n// Log.Info(\"Horizon Start : \"+HorizonStart);\r\nLog.Info(\"Horizon End : \"+HorizonEnd);\r\nLog.Info(\"Forecast Generation Time Bucket : \"+GenTimeBucket);\r\nLog.Info(\"Forecast Storage Time Bucket : \"+StorTimeBucket);\r\n// Log.Info(\"In Reconciliation : \"+InRec);\r\n// Log.Info(\"Disaggregation Type: \"+DisagType);\r\n// Log.Info(\"IsLocked: \"+IsLocked);\r\n\r\n\r\nif(ForecastIterationType==\"Short Term\" &&  GenTimeBucket == \"Week\")\r\n{\r\n    if(HorizonEnd>52)\r\n    {\r\n        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Short Term Iteration Type! Maximum allowed value is 52 weeks. '    \r\n            };\r\n    }\r\n}\r\n\r\n\r\nif(ForecastIterationType==\"Short Term\" &&  GenTimeBucket == \"Month\")\r\n{\r\n    if(HorizonEnd>12)\r\n    {\r\n        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Short Term Iteration Type! Maximum allowed value is 12 Months. '    \r\n            };\r\n    }\r\n}\r\n\r\nif(ForecastIterationType==\"Short Term\" &&  GenTimeBucket == \"Planning Month\")\r\n{\r\n    if(HorizonEnd>12)\r\n    {\r\n        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Short Term Iteration Type! Maximum allowed value is 12 Months. '    \r\n            };\r\n    }\r\n}\r\n\r\n\r\n// else\r\n// {\r\n//     if(DisagType==\"Planning Level Forecast\")\r\n//     {\r\n//         RuleOutputToUI = \r\n//         {\r\n//             Status: 'Error',\r\n//             Message: 'Planning Level Forecast is only valid for Short Term!'\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\nif(ForecastIterationType==\"Mid Term\" && GenTimeBucket == \"Planning Month\")\r\n{\r\n    if(HorizonEnd>24)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Mid Term Iteration Type! Maximum allowed value is 24 months. '    \r\n        }\r\n    }\r\n}\r\n\r\nif(ForecastIterationType==\"Mid Term\" && GenTimeBucket == \"Month\")\r\n{\r\n    if(HorizonEnd>24)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Mid Term Iteration Type! Maximum allowed value is 24 months. '    \r\n        }\r\n    }\r\n}\r\n   \r\nif(ForecastIterationType==\"Mid Term\" && GenTimeBucket == \"Week\")\r\n{\r\n    if(HorizonEnd>104)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Mid Term Iteration Type! Maximum allowed value is 104 weeks. '    \r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nif(ForecastIterationType==\"Long Term\" && GenTimeBucket == \"Month\")\r\n{\r\n    if(HorizonEnd>48)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Long Term Iteration Type! Maximum allowed value is 48 months. '    \r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nif(ForecastIterationType==\"Long Term\" && GenTimeBucket == \"Planning Month\")\r\n{\r\n    if(HorizonEnd>48)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Long Term Iteration Type! Maximum allowed value is 48 months. '    \r\n        }\r\n    }\r\n}\r\n\r\n\r\nif(ForecastIterationType==\"Long Term\" && GenTimeBucket == \"Week\")\r\n{\r\n    if(HorizonEnd>208)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Long Term Iteration Type! Maximum allowed value is 208 weeks. '    \r\n        }\r\n    }\r\n}\r\n\r\nLog.Info(\"Forecast Disaggregation Validation Complete\");\r\n\r\n\r\nLog.Info(\"Forecast Disaggregation Validation Complete\");\r\n\r\n};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.LockValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\r\n//Log method logs to the webapi log\r\nLog.Info(\"Starting Horizon Validation\");\r\nvar ForecastIterationType = parsedParams.ForecastIterationType;\r\n// var HorizonStart = parsedParams.HorizonStart;\r\nvar HorizonEnd = parsedParams.HorizonEnd;\r\nvar GenTimeBucket = parsedParams.ForecastGenerationTimeBucket;\r\nvar StorTimeBucket = parsedParams.ForecastStorageTimeBucket;\r\n// var InRec= parsedParams.InReconciliation;\r\n// var DisagType= parsedParams.DisaggregationType;\r\n// var IsLocked=parsedParams.IsLocked;\r\n\r\nLog.Info(\"Forecast Iteration Type : \"+ForecastIterationType);\r\n// Log.Info(\"Horizon Start : \"+HorizonStart);\r\nLog.Info(\"Horizon End : \"+HorizonEnd);\r\nLog.Info(\"Forecast Generation Time Bucket : \"+GenTimeBucket);\r\nLog.Info(\"Forecast Storage Time Bucket : \"+StorTimeBucket);\r\n// Log.Info(\"In Reconciliation : \"+InRec);\r\n// Log.Info(\"Disaggregation Type: \"+DisagType);\r\n// Log.Info(\"IsLocked: \"+IsLocked);\r\n\r\n\r\nif(ForecastIterationType==\"Short Term\" &&  GenTimeBucket == \"Week\")\r\n{\r\n    if(HorizonEnd>52)\r\n    {\r\n        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Short Term Iteration Type! Maximum allowed value is 52 weeks. '    \r\n            };\r\n    }\r\n}\r\n\r\n\r\nif(ForecastIterationType==\"Short Term\" &&  GenTimeBucket == \"Month\")\r\n{\r\n    if(HorizonEnd>12)\r\n    {\r\n        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Short Term Iteration Type! Maximum allowed value is 12 Months. '    \r\n            };\r\n    }\r\n}\r\n\r\nif(ForecastIterationType==\"Short Term\" &&  GenTimeBucket == \"Planning Month\")\r\n{\r\n    if(HorizonEnd>12)\r\n    {\r\n        RuleOutputToUI =\r\n            {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Short Term Iteration Type! Maximum allowed value is 12 Months. '    \r\n            };\r\n    }\r\n}\r\n\r\n\r\n// else\r\n// {\r\n//     if(DisagType==\"Planning Level Forecast\")\r\n//     {\r\n//         RuleOutputToUI = \r\n//         {\r\n//             Status: 'Error',\r\n//             Message: 'Planning Level Forecast is only valid for Short Term!'\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\nif(ForecastIterationType==\"Mid Term\" && GenTimeBucket == \"Planning Month\")\r\n{\r\n    if(HorizonEnd>24)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Mid Term Iteration Type! Maximum allowed value is 24 months. '    \r\n        }\r\n    }\r\n}\r\n\r\nif(ForecastIterationType==\"Mid Term\" && GenTimeBucket == \"Month\")\r\n{\r\n    if(HorizonEnd>24)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Mid Term Iteration Type! Maximum allowed value is 24 months. '    \r\n        }\r\n    }\r\n}\r\n   \r\nif(ForecastIterationType==\"Mid Term\" && GenTimeBucket == \"Week\")\r\n{\r\n    if(HorizonEnd>104)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Mid Term Iteration Type! Maximum allowed value is 104 weeks. '    \r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nif(ForecastIterationType==\"Long Term\" && GenTimeBucket == \"Month\")\r\n{\r\n    if(HorizonEnd>48)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Long Term Iteration Type! Maximum allowed value is 48 months. '    \r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nif(ForecastIterationType==\"Long Term\" && GenTimeBucket == \"Planning Month\")\r\n{\r\n    if(HorizonEnd>48)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Long Term Iteration Type! Maximum allowed value is 48 months. '    \r\n        }\r\n    }\r\n}\r\n\r\n\r\nif(ForecastIterationType==\"Long Term\" && GenTimeBucket == \"Week\")\r\n{\r\n    if(HorizonEnd>208)\r\n    {\r\n        RuleOutputToUI=\r\n        {\r\n            Status: 'Error',\r\n            Message: 'Given Horizon End value is not suitable for Long Term Iteration Type! Maximum allowed value is 208 weeks. '    \r\n        }\r\n    }\r\n}\r\n\r\nLog.Info(\"Forecast Disaggregation Validation Complete\");\r\n\r\n\r\nLog.Info(\"Forecast Disaggregation Validation Complete\");\r\n\r\n};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.LockValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "729239d1-fdc7-687e-47ed-b0a4c3642476",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212961,
    "Description": "NewItemPPG",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemPPG'\r\ndefine('o9.DemandPlanning.NewItemPPG', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemPPG function\r\n    var NewItemPPG = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemPPGQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[PPG] );';\r\n        var NewItemPPGDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemPPGQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemPPGQuery : ' + NewItemPPGQuery);\r\n\t\t// Check if NewPPG is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemPPGDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"PPG\"\r\n            var NewItemPPGList = NewItemPPGDataCellSet.attributeMembers(\"Item\", \"PPG\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemPPG -> NewItemPPGList : ' + NewItemPPGList);\r\n\r\n            // Extract the names from the result and store in NewPPG\r\n            var NewPPG = NewItemPPGList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemPPG'] = NewPPG[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemPPG'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemPPG function as part of the module\r\n    return {\r\n        NewItemPPG: NewItemPPG\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemPPG'\r\ndefine('o9.DemandPlanning.NewItemPPG', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemPPG function\r\n    var NewItemPPG = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemPPGQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[PPG] );';\r\n        var NewItemPPGDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemPPGQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemPPGQuery : ' + NewItemPPGQuery);\r\n\t\t// Check if NewPPG is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemPPGDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"PPG\"\r\n            var NewItemPPGList = NewItemPPGDataCellSet.attributeMembers(\"Item\", \"PPG\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemPPG -> NewItemPPGList : ' + NewItemPPGList);\r\n\r\n            // Extract the names from the result and store in NewPPG\r\n            var NewPPG = NewItemPPGList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemPPG'] = NewPPG[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemPPG'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemPPG function as part of the module\r\n    return {\r\n        NewItemPPG: NewItemPPG\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemPPG",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "ae5d55d7-755f-74e4-95de-605295f69a57",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212962,
    "Description": "To create stat members in batch",
    "Documentation": "define('o9.DemandPlanning.CreateStatMemberBatchRun', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    function findValueByKey(array, key) {\r\n       const item = array.find(item => item.name === key);\r\n       return item ? item.Member : undefined;\r\n       }\r\n       \r\n   var CreateStatDataBatch = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ForecastIterationType = parsedParams.ForecastIterationType\r\n                   var MW=parsedParams.MediumWeight\r\n                   Log.Info(\"ForecastIterationType: \"+ForecastIterationType);\r\n\t\t\t\t   \r\n\t\t\t\t   var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].filter(#.Name startswith(['+ForecastIterationType+'])));';\r\n\t\t\t\t   var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n\t\t\t\t   var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n\t\t\t\t   var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\t\t\t\t Log.Info(\"ForecastIterationDatalist:\" + ForecastIterationDatalist);  \r\n\t\t\t\t   \r\n\t\t\tForecastIterationDatalist.forEach(function(ForecastIteration) {\r\n\r\n                   Log.Info(\"ForecastIterationValue:\" +ForecastIteration )\r\n\r\n                   var query='Select ([Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] * [Forecast Iteration].[Forecast Iteration Type]);'\r\n                   var TypeCellSet=cellsetModule.createCellSet(queryModule.select(query))\r\n                   var TypeDataJSON= TypeCellSet.attributeMembers('Forecast Iteration','Forecast Iteration Type')\r\n                   var TypeData=TypeDataJSON.Name\r\n                  var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\":'+MW+'};'\r\n                  Log.Info(\"Parameterized Stat Member procedure :\"+createmember)\r\n                  var creatememberData = queryModule.select(createmember)\r\n                  Log.Info(\"Parameterized Create Stat Member procedure :\"+creatememberData)\r\n\r\n\t\t\t\t  \r\n                 \r\n\t\t\t\t  \r\n\t\t\t\t  if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t  Log.Info(\"Passed Iteration is FI PL \")\r\n\t\t\t\t  var Preprocess = 'exec procedure o9DP013PreprocessPLScope{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+TypeData+'\"};'\r\n\t\t\t\t  Log.Info(\"PreprocessForPL :\"+Preprocess)\r\n\t\t\t\t  var PreprocessData = queryModule.select(Preprocess)\r\n                  }\r\n\r\n\t\t\t\t  \r\n                   const ItemHigh = [\r\n                   {name: 'Item', level: 1},\r\n                   {name: 'Reporting Item', Member: 'Reporting Item Members'},\r\n                   {name: 'Planning Item', Member: 'Planning Item Members'},\r\n                   {name: 'L1', Member: 'L1 Members'},\r\n                   {name: 'L2', Member: 'L2 Members'},\r\n                   {name: 'L3', Member: 'L3 Members'},\r\n                   {name: 'L4', Member: 'L4 Members'},\r\n                   {name: 'L5', Member: 'L5 Members'},\r\n                   {name: 'L6', Member: 'L6 Members'},\r\n                   {name: 'All Item', Member: 'All Item Members'},\r\n                   {name: 'Transition Item', Member: 'Transition Item Members'}\r\n                   ]\r\n                   \r\n                   \r\n                   var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Item Level]}) on column;';\r\n                   var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n                   Log.Info('CellSet'+ItemDataCellSet)\r\n                   var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Level'));\r\n                   Log.Info(\"ItemLevels: \"+ItemLevels);\r\n                   \r\n                   \r\n                   \r\n                   const itemvalue = findValueByKey(ItemHigh,ItemLevels );\r\n   \r\n                   var ItemValuecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item] ) on row, ({Measure.[Stat Item Members]}) on column;'))\r\n                   if(ItemValuecellset.rowCount>0){\r\n                   \r\n                   var ItemStat = 'createmember ([Item].[Stat Item] = {, Measure.[Stat Item Members]}, [Item].[Stat Item$DisplayName]={Measure.[Stat Item Members Display Name],}, [Item].[Segmentation LOB] = {,Measure.[Segmentation LOB Members]},[Item].[Segmentation LOB$DisplayName]={Measure.[Segmentation LOB Members Display Name],}, [Item].[Stat Item Group] = {,Measure.[Stat Item Group Members]},[Item].[Stat Item Group$DisplayName]={Measure.[Stat Item Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item]);';\r\n\t\t\t\t   var ItemStatData = queryModule.select(ItemStat)\r\n                   }\r\n                   \r\n                   const AccHigh = [\r\n                   { name: 'Account' },\r\n                   { name: 'Planning Account', Member: 'Planning Account Members' },\r\n                   { name: 'Account L1', Member: 'Account L1 Members' },\r\n                   { name: 'Account L2', Member: 'Account L2 Members' },\r\n                   { name: 'Account L3', Member: 'Account L3 Members' },\r\n                   { name: 'Account L4', Member: 'Account L4 Members' },\r\n                   { name: 'All Account', Member: 'All Account Members' },\r\n                               ]\r\n                               \r\n                   var AccountQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Account Level]}) on column;';\r\n                   var AccountDataCellSet=cellsetModule.createCellSet(queryModule.select(AccountQuery));\r\n                   Log.Info('CellSet'+AccountDataCellSet)\r\n                   var AccountLevels=AccountDataCellSet.row(0).cell(AccountDataCellSet.measureColumnIndex('Account Level'));\r\n                   Log.Info(\"AccountLevels: \"+AccountLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Accountvalue = findValueByKey(AccHigh,AccountLevels );\r\n   \r\n   \r\n                   var accountvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Account].[Planning Account] ) on row, ({Measure.[Stat Account Members]}) on column;'))\r\n                   if(accountvaluecellset.rowCount>0){\r\n                   \r\n                   var AccountStat = 'createmember ([Account].[Stat Account] = {, Measure.[Stat Account Members]},[Account].[Stat Account$DisplayName]={Measure.[Stat Account Members Display Name],}, [Account].[Stat Account Group] = {,Measure.[Stat Account Group Members]},[Account].[Stat Account Group$DisplayName]={Measure.[Stat Account Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Account].[Planning Account]);';\r\n                   var AccountStatData = queryModule.select(AccountStat)\r\n                   }\r\n   \r\n                   const LocHigh = [\r\n                   { name: 'Location Type', Member: 'Location Type Members' },\r\n                   { name: 'Location', Member: 'Location Members'},\r\n                   { name: 'Planning Location', Member: 'Planning Location Members'},\r\n                   { name: 'Reporting Location', Member: 'Reporting Location Members' },\r\n                   { name: 'Location Region', Member: 'Location Region Members' },\r\n                   { name: 'Location Country', Member: 'Location Country Members' },\r\n                   { name: 'All Location', Member: 'All Location Members' }\r\n                                   ]\r\n                               \r\n                   \r\n                   var LocationQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Location Level]}) on column;';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationDataCellSet=cellsetModule.createCellSet(queryModule.select(LocationQuery));\r\n                   Log.Info('CellSet'+LocationDataCellSet)\r\n                   var LocationLevels=LocationDataCellSet.row(0).cell(LocationDataCellSet.measureColumnIndex('Location Level'));\r\n                   Log.Info(\"LocationLevels: \"+LocationLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Locationvalue = findValueByKey(LocHigh,LocationLevels );\r\n   \r\n                   var Locationvaluecellset= cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Location].[Location] ) on row, ({Measure.[Stat Location Members]}) on column;'))\r\n                   if(Locationvaluecellset.rowCount>0){\r\n                   \r\n                   var LocationStat ='createmember ([Location].[Stat Location] = {, Measure.[Stat Location Members]},[Location].[Stat Location$DisplayName]={Measure.[Stat Location Members Display Name],}, [Location].[All Location] = {,Measure.[All Location Members]},[Location].[All Location$DisplayName]={Measure.[All Location Members Display Name],}, [Location].[Stat Location Group] = {,Measure.[Stat Location Group Members]},[Location].[Stat Location Group$DisplayName]={Measure.[Stat Location Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Location].[Location]);';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationStatData = queryModule.select(LocationStat)\t\r\n               }\r\n                   const ChanHigh = [\r\n                   { name: 'Channel' },\r\n                   { name: 'Planning Channel', Member: 'Planning Channel Members'  },\r\n                   { name: 'Channel L1', Member: 'Channel L1 Members' },\r\n                   { name: 'Channel L2', Member: 'Channel L2 Members' },\r\n                   { name: 'All Channel', Member: 'All Channel Members' }\r\n                               ]\r\n                               \r\n                   var ChanQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Channel Level]}) on column;';\r\n                   var ChannelDataCellSet=cellsetModule.createCellSet(queryModule.select(ChanQuery));\r\n                   Log.Info('CellSet'+ChannelDataCellSet)\r\n                   var ChannelLevels=ChannelDataCellSet.row(0).cell(ChannelDataCellSet.measureColumnIndex('Channel Level'));\r\n                   Log.Info(\"ChannelLevels: \"+ChannelLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Chanvalue = findValueByKey(ChanHigh,ChannelLevels );\r\n   \r\n                   var chanvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Channel].[Planning Channel] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Channel Members]}) on column;'))\r\n                   if(chanvaluecellset.rowCount>0){\r\n                   var ChannelStat = 'createmember ([Channel].[Stat Channel] = {, Measure.[Stat Channel Members]},[Channel].[Stat Channel$DisplayName]={Measure.[Stat Channel Members Display Name],}, [Channel].[Stat Channel Group] = {,Measure.[Stat Channel Group Members]},[Channel].[Stat Channel Group$DisplayName]={Measure.[Stat Channel Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Channel].[Planning Channel]);';\r\n                   var ChannelStatData = queryModule.select(ChannelStat)\r\n   \r\n                   }\r\n                   \r\n                   \r\n                   \r\n                   const RegHigh = [\r\n                   { name: 'Region' },\r\n                   { name: 'Planning Region', Member:'Planning Region Members'  },\r\n                   { name: 'Region L1', Member: 'Region L1 Members' },\r\n                   { name: 'Region L2', Member: 'Region L2 Members' },\r\n                   { name: 'Region L3', Member: 'Region L3 Members' },\r\n                   { name: 'Region L4', Member: 'Region L4 Members' },\r\n                   { name: 'All Region', Member: 'All Region Members' },\r\n                           ]\r\n                   \r\n                   \r\n                   var RegQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Region Level]}) on column;';\r\n                   var RegionDataCellSet=cellsetModule.createCellSet(queryModule.select(RegQuery));\r\n                   Log.Info('CellSet'+RegionDataCellSet)\r\n                   var RegionlLevels=RegionDataCellSet.row(0).cell(RegionDataCellSet.measureColumnIndex('Region Level'));\r\n                   Log.Info(\"RegionlLevels: \"+RegionlLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Regvalue = findValueByKey(RegHigh,RegionlLevels );\r\n   \r\n                   var regvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Region].[Planning Region] ) on row, ({Measure.[Stat Region Members]}) on column;'))\r\n                   if(regvaluecellset.rowCount>0){\r\n                   \r\n                   var RegionStat = 'createmember ([Region].[Stat Region] = {, Measure.[Stat Region Members]}, [Region].[Stat Region$DisplayName]={Measure.[Stat Region Members Display Name],}, [Region].[Stat Region Group] = {,Measure.[Stat Region Group Members]},[Region].[Stat Region Group$DisplayName]={Measure.[Stat Region Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Region].[Planning Region]);';\r\n                   var RegionStatData = queryModule.select(RegionStat)\r\n               }\r\n                   \r\n                   \r\n                   const PnLHigh = [\r\n                   { name: 'PnL' },\r\n                   { name: 'Planning PnL',Member: 'Planning PnL Members'  },\r\n                   { name: 'PnL L1', Member: 'PnL L1 Members' },\r\n                   { name: 'PnL L2', Member: 'PnL L2 Members' },\r\n                   { name: 'PnL L3', Member: 'PnL L3 Members' },\r\n                   { name: 'PnL L4', Member: 'PnL L4 Members' },\r\n                   { name: 'All PnL', Member: 'All PnL Members' },\r\n                               ]\r\n              \r\n                   var PnLQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[PnL Level]}) on column;';\r\n                   var PnLDataCellSet=cellsetModule.createCellSet(queryModule.select(PnLQuery));\r\n                   Log.Info('CellSet'+PnLDataCellSet)\r\n                   var PnLLevels=PnLDataCellSet.row(0).cell(PnLDataCellSet.measureColumnIndex('PnL Level'));\r\n                   Log.Info(\"PnLLevels: \"+PnLLevels);\r\n                   \r\n                   \r\n                   \r\n                   const PnLvalue = findValueByKey(PnLHigh,PnLLevels );\r\n                   var PnLvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [PnL].[Planning PnL] ) on row, ({Measure.[Stat PnL Members]}) on column;'))\r\n                   if(PnLvaluecellset.rowCount>0){\r\n                   var PnLStat = 'createmember ([PnL].[Stat PnL] = {, Measure.[Stat PnL Members]},[PnL].[Stat PnL$DisplayName]={Measure.[Stat PnL Members Display Name],}, [PnL].[Stat PnL Group] = {,Measure.[Stat PnL Group Members]},[PnL].[Stat PnL Group$DisplayName]={Measure.[Stat PnL Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [PnL].[Planning PnL]);';\r\n                   var PnLStatData = queryModule.select(PnLStat)\r\n               }\r\n                   \r\n                   \r\n                   \r\n                   const DeDHigh = [\r\n                   { name: 'Demand Domain' },\r\n                   { name: 'Planning Demand Domain', Member: 'Planning Demand Domain Members'},\r\n                   { name: 'Demand Domain L1', Member: 'Demand Domain L1 Members' },\r\n                   { name: 'Demand Domain L2', Member: 'Demand Domain L2 Members' },\r\n                   { name: 'Demand Domain L3', Member: 'Demand Domain L3 Members' },\r\n                   { name: 'Demand Domain L4', Member: 'Demand Domain L4 Members' },\r\n                   { name: 'All Demand Domain', Member: 'All Demand Domain Members' },\r\n                   {name: 'Transition Demand Domain', Member: 'Transition Demand Domain Members'}\r\n                               ]\r\n                               \r\n                               \r\n                   var DemandDomainQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Demand Domain Level]}) on column;';\r\n                   var DemandDomainQueryDataCellSet=cellsetModule.createCellSet(queryModule.select(DemandDomainQuery));\r\n                   Log.Info('CellSet'+DemandDomainQueryDataCellSet)\r\n                   var DemandDomainLevels=DemandDomainQueryDataCellSet.row(0).cell(DemandDomainQueryDataCellSet.measureColumnIndex('Demand Domain Level'));\r\n                   Log.Info(\"DemandDomainLevels: \"+DemandDomainLevels);\r\n                   \r\n                   \r\n                   \r\n                   const DemandDomainvalue = findValueByKey(DeDHigh,DemandDomainLevels );\r\n                   var DDvalCellset=cellsetModule.createCellSet(queryModule.select('Select ([Demand Domain].[Planning Demand Domain] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Demand Domain Members]}) on column;'))\r\n                   if(DDvalCellset.rowCount>0){\r\n                   var DemandDomainStat = 'createmember ([Demand Domain].[Stat Demand Domain] = {, Measure.[Stat Demand Domain Members]},[Demand Domain].[Stat Demand Domain$DisplayName]={Measure.[Stat Demand Domain Members Display Name],}, [Demand Domain].[Stat Demand Domain Group] = {,Measure.[Stat Demand Domain Group Members]},[Demand Domain].[Stat Demand Domain Group$DisplayName]={Measure.[Stat Demand Domain Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Demand Domain].[Planning Demand Domain]);';\r\n                   queryModule.select(DemandDomainStat)\r\n               }\r\n   \r\n                   \r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n                   \r\n                   var RunstatactualMW = 'exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n                   var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n                   if(MW){\r\n                        queryModule.select(RunstatactualMW)\r\n                        Log.Info(\"Create Stat Actual exec medium weight call: \" + RunstatactualMW)\r\n                   }\r\n                   else {\r\n                        queryModule.select(RunStatActual)\r\n                        Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n                   }     \r\n\t\t\t\t   if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t   var PostProcessPL = 'exec procedure o9DP014PostprocessPLScope {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+TypeData+'\"};'\r\n\t\t\t\t    queryModule.select(PostProcessPL)\r\n\t\t\t\t   }\r\n\r\n\r\n\r\n                //    var BucketWeigtNull='scope:(&AllStatBuckets * &CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) );Measure.[Stat Bucket Weight]= NULL;end scope;'\r\n                \r\n\r\n                //    var DimCountNull='scope : (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}));Measure.[Account L1 Count] = NULL ;Measure.[Account L2 Count] = NULL ;Measure.[Account L3 Count] = NULL ;Measure.[Account L4 Count] = NULL ;Measure.[Actual At Version] = NULL ;Measure.[Channel L1 Count] = NULL ;Measure.[Channel L2 Count] = NULL ;Measure.[Demand Domain L1 Count] = NULL ;Measure.[Demand Domain L2 Count] = NULL ;Measure.[Demand Domain L3 Count] = NULL ;Measure.[Demand Domain L4 Count] = NULL ;Measure.[L1 Count] = NULL ;Measure.[L2 Count] = NULL ;Measure.[L3 Count] = NULL ;Measure.[L4 Count] = NULL ;Measure.[L5 Count] = NULL ;Measure.[L6 Count] = NULL ;Measure.[Location Country Count] = NULL ;Measure.[Location Region Count] = NULL;Measure.[Location Type Count] = NULL ;Measure.[Planning Account Count] = NULL ;Measure.[Planning Channel Count] = NULL ;Measure.[Planning Demand Domain Count] = NULL ;Measure.[Planning Item Count] = NULL ;Measure.[Planning Location Count] = NULL ;Measure.[Planning PnL Count] = NULL ;Measure.[Planning Region Count] = NULL ;Measure.[PnL L1 Count] = NULL ;Measure.[PnL L2 Count] = NULL ;Measure.[PnL L3 Count] = NULL ;Measure.[PnL L4 Count] = NULL ;Measure.[Region L1 Count] = NULL ;Measure.[Region L2 Count] = NULL ;Measure.[Region L3 Count] = NULL ;Measure.[Region L4 Count] = NULL ;Measure.[Reporting Location Count] = NULL ;Measure.[Stat Account Count] = NULL ;Measure.[Stat Channel Count] = NULL ;Measure.[Stat Demand Domain Count] = NULL ;Measure.[Stat Item Count] = NULL ;Measure.[Stat Location Count] = NULL ;Measure.[Stat PnL Count] = NULL ;Measure.[Stat Region Count] = NULL ;end scope ;'\r\n\r\n                //    var BucketWeightMW='Exec plugin instance [DP046PopulatePWDisaggProfile] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n\r\n                //    var DimCountMW='Exec plugin instance [DP051PopulateDimAttributeCount] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n\r\n                //    var BucketWeight='Exec plugin instance [DP046PopulatePWDisaggProfile] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                //    var DimCount ='Exec plugin instance [DP051PopulateDimAttributeCount] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                //    var SliceAssocNull='delete data for model [860 Slice Association Stat] where {&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [870 Slice Association TL] where {&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [880 Slice Association PL] where {&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}),&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};'\r\n\r\n                //    var SliceAssocMW='EXEC plugin instance [DP041PopulateSliceAssociation] for measures {[Trend Strength L1]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n\r\n                //    var SliceAssoc='EXEC plugin instance [DP041PopulateSliceAssociation] for measures {[Trend Strength L1]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n\r\n                //    //Null values\r\n                //     queryModule.select(BucketWeigtNull)\r\n                //     queryModule.select(DimCountNull)\r\n                //     queryModule.select(SliceAssocNull)\r\n\r\n                //     if(MW)\r\n                //     {\r\n                //         queryModule.select(BucketWeightMW)\r\n                //         queryModule.select(DimCountMW)\r\n                //         queryModule.select(SliceAssocMW)\r\n                //     }\r\n                //     else \r\n                //     {\r\n                //         queryModule.select(BucketWeight)\r\n                //         queryModule.select(DimCount)\r\n                //         queryModule.select(SliceAssoc)\r\n                //     }\r\n\r\n\r\n\r\n\t\t\t\t   \t\t\t\t   \r\n                   var Setupstatparameter = 'exec procedure o9DP0160SetupStatParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+TypeData+'\", \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n                    queryModule.select(Setupstatparameter)\r\n                   Log.Info(\"Setup Stat Parmeters :\" + Setupstatparameter)\r\n                   \r\n                   var Setupcmlparameter = 'exec procedure o9DP0167SetupCMLParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n\t\t\t\t   queryModule.select(Setupcmlparameter)\r\n\r\n                   Log.Info(\"Setup CML Parmeters :\" + Setupcmlparameter)\r\n                   \r\n\t\t\t\t   var lastsixmonthactual = 'exec procedure o9DP0103PopulateStatActualL6M {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\"};';\r\n\t\t\t\t   queryModule.select(lastsixmonthactual)\r\n\r\n                   Log.Info(\"Stat Actual L6M :\" + lastsixmonthactual)\r\n                   \r\n                   \r\n                   var AlgoParamAssoc='exec procedure o9DP013PopulateAlgoParamAssociation {\"VersionName\": [\"'+VersionName+'\"]};'\r\n                   queryModule.select(AlgoParamAssoc)\r\n\t\t\t\t   Log.Info(\"Procedure to populate algo association :\" + AlgoParamAssoc)\r\n\r\n                   var StatParams= 'exec procedure o9DP012PopulateStatDefaults {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   queryModule.select(StatParams)\r\n\t\t\t\t   Log.Info(\"Procedure to populate Stat Params :\" + StatParams)\r\n\r\n\t\t\t\t   \r\n                   var SetupRules = 'exec procedure o9DP0053PopulatePlannerRule {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   var SetupRulesData = queryModule.select(SetupRules)\r\n                   Log.Info(\"Procedure to populate Stat Rules :\" + SetupRulesData)\r\n\r\n                   \r\n               return parsedParams;\r\n               });\r\n   }\r\n   \r\n   \r\n   return {\r\n       CreateStatDataBatch:CreateStatDataBatch\r\n       \r\n   }\r\n   \r\n   });",
    "Code": "define('o9.DemandPlanning.CreateStatMemberBatchRun', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    function findValueByKey(array, key) {\r\n       const item = array.find(item => item.name === key);\r\n       return item ? item.Member : undefined;\r\n       }\r\n       \r\n   var CreateStatDataBatch = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ForecastIterationType = parsedParams.ForecastIterationType\r\n                   var MW=parsedParams.MediumWeight\r\n                   Log.Info(\"ForecastIterationType: \"+ForecastIterationType);\r\n\t\t\t\t   \r\n\t\t\t\t   var ForecastIteration = 'Select ([Forecast Iteration].[Forecast Iteration] * [Forecast Iteration].[Forecast Iteration Type].filter(#.Name startswith(['+ForecastIterationType+'])));';\r\n\t\t\t\t   var ForecastIterationq = cellsetModule.createCellSet(queryModule.select(ForecastIteration));\r\n\t\t\t\t   var ForecastIterationData = ForecastIterationq.attributeMembers('Forecast Iteration', 'Forecast Iteration');\r\n\t\t\t\t   var ForecastIterationDatalist = ForecastIterationData.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\t\t\t\t Log.Info(\"ForecastIterationDatalist:\" + ForecastIterationDatalist);  \r\n\t\t\t\t   \r\n\t\t\tForecastIterationDatalist.forEach(function(ForecastIteration) {\r\n\r\n                   Log.Info(\"ForecastIterationValue:\" +ForecastIteration )\r\n\r\n                   var query='Select ([Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] * [Forecast Iteration].[Forecast Iteration Type]);'\r\n                   var TypeCellSet=cellsetModule.createCellSet(queryModule.select(query))\r\n                   var TypeDataJSON= TypeCellSet.attributeMembers('Forecast Iteration','Forecast Iteration Type')\r\n                   var TypeData=TypeDataJSON.Name\r\n                  var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\":'+MW+'};'\r\n                  Log.Info(\"Parameterized Stat Member procedure :\"+createmember)\r\n                  var creatememberData = queryModule.select(createmember)\r\n                  Log.Info(\"Parameterized Create Stat Member procedure :\"+creatememberData)\r\n\r\n\t\t\t\t  \r\n                 \r\n\t\t\t\t  \r\n\t\t\t\t  if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t  Log.Info(\"Passed Iteration is FI PL \")\r\n\t\t\t\t  var Preprocess = 'exec procedure o9DP013PreprocessPLScope{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+TypeData+'\"};'\r\n\t\t\t\t  Log.Info(\"PreprocessForPL :\"+Preprocess)\r\n\t\t\t\t  var PreprocessData = queryModule.select(Preprocess)\r\n                  }\r\n\r\n\t\t\t\t  \r\n                   const ItemHigh = [\r\n                   {name: 'Item', level: 1},\r\n                   {name: 'Reporting Item', Member: 'Reporting Item Members'},\r\n                   {name: 'Planning Item', Member: 'Planning Item Members'},\r\n                   {name: 'L1', Member: 'L1 Members'},\r\n                   {name: 'L2', Member: 'L2 Members'},\r\n                   {name: 'L3', Member: 'L3 Members'},\r\n                   {name: 'L4', Member: 'L4 Members'},\r\n                   {name: 'L5', Member: 'L5 Members'},\r\n                   {name: 'L6', Member: 'L6 Members'},\r\n                   {name: 'All Item', Member: 'All Item Members'},\r\n                   {name: 'Transition Item', Member: 'Transition Item Members'}\r\n                   ]\r\n                   \r\n                   \r\n                   var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Item Level]}) on column;';\r\n                   var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n                   Log.Info('CellSet'+ItemDataCellSet)\r\n                   var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Level'));\r\n                   Log.Info(\"ItemLevels: \"+ItemLevels);\r\n                   \r\n                   \r\n                   \r\n                   const itemvalue = findValueByKey(ItemHigh,ItemLevels );\r\n   \r\n                   var ItemValuecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item] ) on row, ({Measure.[Stat Item Members]}) on column;'))\r\n                   if(ItemValuecellset.rowCount>0){\r\n                   \r\n                   var ItemStat = 'createmember ([Item].[Stat Item] = {, Measure.[Stat Item Members]}, [Item].[Stat Item$DisplayName]={Measure.[Stat Item Members Display Name],}, [Item].[Segmentation LOB] = {,Measure.[Segmentation LOB Members]},[Item].[Segmentation LOB$DisplayName]={Measure.[Segmentation LOB Members Display Name],}, [Item].[Stat Item Group] = {,Measure.[Stat Item Group Members]},[Item].[Stat Item Group$DisplayName]={Measure.[Stat Item Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item]);';\r\n\t\t\t\t   var ItemStatData = queryModule.select(ItemStat)\r\n                   }\r\n                   \r\n                   const AccHigh = [\r\n                   { name: 'Account' },\r\n                   { name: 'Planning Account', Member: 'Planning Account Members' },\r\n                   { name: 'Account L1', Member: 'Account L1 Members' },\r\n                   { name: 'Account L2', Member: 'Account L2 Members' },\r\n                   { name: 'Account L3', Member: 'Account L3 Members' },\r\n                   { name: 'Account L4', Member: 'Account L4 Members' },\r\n                   { name: 'All Account', Member: 'All Account Members' },\r\n                               ]\r\n                               \r\n                   var AccountQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Account Level]}) on column;';\r\n                   var AccountDataCellSet=cellsetModule.createCellSet(queryModule.select(AccountQuery));\r\n                   Log.Info('CellSet'+AccountDataCellSet)\r\n                   var AccountLevels=AccountDataCellSet.row(0).cell(AccountDataCellSet.measureColumnIndex('Account Level'));\r\n                   Log.Info(\"AccountLevels: \"+AccountLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Accountvalue = findValueByKey(AccHigh,AccountLevels );\r\n   \r\n   \r\n                   var accountvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Account].[Planning Account] ) on row, ({Measure.[Stat Account Members]}) on column;'))\r\n                   if(accountvaluecellset.rowCount>0){\r\n                   \r\n                   var AccountStat = 'createmember ([Account].[Stat Account] = {, Measure.[Stat Account Members]},[Account].[Stat Account$DisplayName]={Measure.[Stat Account Members Display Name],}, [Account].[Stat Account Group] = {,Measure.[Stat Account Group Members]},[Account].[Stat Account Group$DisplayName]={Measure.[Stat Account Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Account].[Planning Account]);';\r\n                   var AccountStatData = queryModule.select(AccountStat)\r\n                   }\r\n   \r\n                   const LocHigh = [\r\n                   { name: 'Location Type', Member: 'Location Type Members' },\r\n                   { name: 'Location', Member: 'Location Members'},\r\n                   { name: 'Planning Location', Member: 'Planning Location Members'},\r\n                   { name: 'Reporting Location', Member: 'Reporting Location Members' },\r\n                   { name: 'Location Region', Member: 'Location Region Members' },\r\n                   { name: 'Location Country', Member: 'Location Country Members' },\r\n                   { name: 'All Location', Member: 'All Location Members' }\r\n                                   ]\r\n                               \r\n                   \r\n                   var LocationQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Location Level]}) on column;';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationDataCellSet=cellsetModule.createCellSet(queryModule.select(LocationQuery));\r\n                   Log.Info('CellSet'+LocationDataCellSet)\r\n                   var LocationLevels=LocationDataCellSet.row(0).cell(LocationDataCellSet.measureColumnIndex('Location Level'));\r\n                   Log.Info(\"LocationLevels: \"+LocationLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Locationvalue = findValueByKey(LocHigh,LocationLevels );\r\n   \r\n                   var Locationvaluecellset= cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Location].[Location] ) on row, ({Measure.[Stat Location Members]}) on column;'))\r\n                   if(Locationvaluecellset.rowCount>0){\r\n                   \r\n                   var LocationStat ='createmember ([Location].[Stat Location] = {, Measure.[Stat Location Members]},[Location].[Stat Location$DisplayName]={Measure.[Stat Location Members Display Name],}, [Location].[All Location] = {,Measure.[All Location Members]},[Location].[All Location$DisplayName]={Measure.[All Location Members Display Name],}, [Location].[Stat Location Group] = {,Measure.[Stat Location Group Members]},[Location].[Stat Location Group$DisplayName]={Measure.[Stat Location Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Location].[Location]);';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationStatData = queryModule.select(LocationStat)\t\r\n               }\r\n                   const ChanHigh = [\r\n                   { name: 'Channel' },\r\n                   { name: 'Planning Channel', Member: 'Planning Channel Members'  },\r\n                   { name: 'Channel L1', Member: 'Channel L1 Members' },\r\n                   { name: 'Channel L2', Member: 'Channel L2 Members' },\r\n                   { name: 'All Channel', Member: 'All Channel Members' }\r\n                               ]\r\n                               \r\n                   var ChanQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Channel Level]}) on column;';\r\n                   var ChannelDataCellSet=cellsetModule.createCellSet(queryModule.select(ChanQuery));\r\n                   Log.Info('CellSet'+ChannelDataCellSet)\r\n                   var ChannelLevels=ChannelDataCellSet.row(0).cell(ChannelDataCellSet.measureColumnIndex('Channel Level'));\r\n                   Log.Info(\"ChannelLevels: \"+ChannelLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Chanvalue = findValueByKey(ChanHigh,ChannelLevels );\r\n   \r\n                   var chanvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Channel].[Planning Channel] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Channel Members]}) on column;'))\r\n                   if(chanvaluecellset.rowCount>0){\r\n                   var ChannelStat = 'createmember ([Channel].[Stat Channel] = {, Measure.[Stat Channel Members]},[Channel].[Stat Channel$DisplayName]={Measure.[Stat Channel Members Display Name],}, [Channel].[Stat Channel Group] = {,Measure.[Stat Channel Group Members]},[Channel].[Stat Channel Group$DisplayName]={Measure.[Stat Channel Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Channel].[Planning Channel]);';\r\n                   var ChannelStatData = queryModule.select(ChannelStat)\r\n   \r\n                   }\r\n                   \r\n                   \r\n                   \r\n                   const RegHigh = [\r\n                   { name: 'Region' },\r\n                   { name: 'Planning Region', Member:'Planning Region Members'  },\r\n                   { name: 'Region L1', Member: 'Region L1 Members' },\r\n                   { name: 'Region L2', Member: 'Region L2 Members' },\r\n                   { name: 'Region L3', Member: 'Region L3 Members' },\r\n                   { name: 'Region L4', Member: 'Region L4 Members' },\r\n                   { name: 'All Region', Member: 'All Region Members' },\r\n                           ]\r\n                   \r\n                   \r\n                   var RegQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Region Level]}) on column;';\r\n                   var RegionDataCellSet=cellsetModule.createCellSet(queryModule.select(RegQuery));\r\n                   Log.Info('CellSet'+RegionDataCellSet)\r\n                   var RegionlLevels=RegionDataCellSet.row(0).cell(RegionDataCellSet.measureColumnIndex('Region Level'));\r\n                   Log.Info(\"RegionlLevels: \"+RegionlLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Regvalue = findValueByKey(RegHigh,RegionlLevels );\r\n   \r\n                   var regvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Region].[Planning Region] ) on row, ({Measure.[Stat Region Members]}) on column;'))\r\n                   if(regvaluecellset.rowCount>0){\r\n                   \r\n                   var RegionStat = 'createmember ([Region].[Stat Region] = {, Measure.[Stat Region Members]}, [Region].[Stat Region$DisplayName]={Measure.[Stat Region Members Display Name],}, [Region].[Stat Region Group] = {,Measure.[Stat Region Group Members]},[Region].[Stat Region Group$DisplayName]={Measure.[Stat Region Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Region].[Planning Region]);';\r\n                   var RegionStatData = queryModule.select(RegionStat)\r\n               }\r\n                   \r\n                   \r\n                   const PnLHigh = [\r\n                   { name: 'PnL' },\r\n                   { name: 'Planning PnL',Member: 'Planning PnL Members'  },\r\n                   { name: 'PnL L1', Member: 'PnL L1 Members' },\r\n                   { name: 'PnL L2', Member: 'PnL L2 Members' },\r\n                   { name: 'PnL L3', Member: 'PnL L3 Members' },\r\n                   { name: 'PnL L4', Member: 'PnL L4 Members' },\r\n                   { name: 'All PnL', Member: 'All PnL Members' },\r\n                               ]\r\n              \r\n                   var PnLQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[PnL Level]}) on column;';\r\n                   var PnLDataCellSet=cellsetModule.createCellSet(queryModule.select(PnLQuery));\r\n                   Log.Info('CellSet'+PnLDataCellSet)\r\n                   var PnLLevels=PnLDataCellSet.row(0).cell(PnLDataCellSet.measureColumnIndex('PnL Level'));\r\n                   Log.Info(\"PnLLevels: \"+PnLLevels);\r\n                   \r\n                   \r\n                   \r\n                   const PnLvalue = findValueByKey(PnLHigh,PnLLevels );\r\n                   var PnLvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [PnL].[Planning PnL] ) on row, ({Measure.[Stat PnL Members]}) on column;'))\r\n                   if(PnLvaluecellset.rowCount>0){\r\n                   var PnLStat = 'createmember ([PnL].[Stat PnL] = {, Measure.[Stat PnL Members]},[PnL].[Stat PnL$DisplayName]={Measure.[Stat PnL Members Display Name],}, [PnL].[Stat PnL Group] = {,Measure.[Stat PnL Group Members]},[PnL].[Stat PnL Group$DisplayName]={Measure.[Stat PnL Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [PnL].[Planning PnL]);';\r\n                   var PnLStatData = queryModule.select(PnLStat)\r\n               }\r\n                   \r\n                   \r\n                   \r\n                   const DeDHigh = [\r\n                   { name: 'Demand Domain' },\r\n                   { name: 'Planning Demand Domain', Member: 'Planning Demand Domain Members'},\r\n                   { name: 'Demand Domain L1', Member: 'Demand Domain L1 Members' },\r\n                   { name: 'Demand Domain L2', Member: 'Demand Domain L2 Members' },\r\n                   { name: 'Demand Domain L3', Member: 'Demand Domain L3 Members' },\r\n                   { name: 'Demand Domain L4', Member: 'Demand Domain L4 Members' },\r\n                   { name: 'All Demand Domain', Member: 'All Demand Domain Members' },\r\n                   {name: 'Transition Demand Domain', Member: 'Transition Demand Domain Members'}\r\n                               ]\r\n                               \r\n                               \r\n                   var DemandDomainQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Demand Domain Level]}) on column;';\r\n                   var DemandDomainQueryDataCellSet=cellsetModule.createCellSet(queryModule.select(DemandDomainQuery));\r\n                   Log.Info('CellSet'+DemandDomainQueryDataCellSet)\r\n                   var DemandDomainLevels=DemandDomainQueryDataCellSet.row(0).cell(DemandDomainQueryDataCellSet.measureColumnIndex('Demand Domain Level'));\r\n                   Log.Info(\"DemandDomainLevels: \"+DemandDomainLevels);\r\n                   \r\n                   \r\n                   \r\n                   const DemandDomainvalue = findValueByKey(DeDHigh,DemandDomainLevels );\r\n                   var DDvalCellset=cellsetModule.createCellSet(queryModule.select('Select ([Demand Domain].[Planning Demand Domain] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Demand Domain Members]}) on column;'))\r\n                   if(DDvalCellset.rowCount>0){\r\n                   var DemandDomainStat = 'createmember ([Demand Domain].[Stat Demand Domain] = {, Measure.[Stat Demand Domain Members]},[Demand Domain].[Stat Demand Domain$DisplayName]={Measure.[Stat Demand Domain Members Display Name],}, [Demand Domain].[Stat Demand Domain Group] = {,Measure.[Stat Demand Domain Group Members]},[Demand Domain].[Stat Demand Domain Group$DisplayName]={Measure.[Stat Demand Domain Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Demand Domain].[Planning Demand Domain]);';\r\n                   queryModule.select(DemandDomainStat)\r\n               }\r\n   \r\n                   \r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n                   \r\n                   var RunstatactualMW = 'exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n                   var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n                   if(MW){\r\n                        queryModule.select(RunstatactualMW)\r\n                        Log.Info(\"Create Stat Actual exec medium weight call: \" + RunstatactualMW)\r\n                   }\r\n                   else {\r\n                        queryModule.select(RunStatActual)\r\n                        Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n                   }     \r\n\t\t\t\t   if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t   var PostProcessPL = 'exec procedure o9DP014PostprocessPLScope {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+TypeData+'\"};'\r\n\t\t\t\t    queryModule.select(PostProcessPL)\r\n\t\t\t\t   }\r\n\r\n\r\n\r\n                //    var BucketWeigtNull='scope:(&AllStatBuckets * &CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) );Measure.[Stat Bucket Weight]= NULL;end scope;'\r\n                \r\n\r\n                //    var DimCountNull='scope : (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}));Measure.[Account L1 Count] = NULL ;Measure.[Account L2 Count] = NULL ;Measure.[Account L3 Count] = NULL ;Measure.[Account L4 Count] = NULL ;Measure.[Actual At Version] = NULL ;Measure.[Channel L1 Count] = NULL ;Measure.[Channel L2 Count] = NULL ;Measure.[Demand Domain L1 Count] = NULL ;Measure.[Demand Domain L2 Count] = NULL ;Measure.[Demand Domain L3 Count] = NULL ;Measure.[Demand Domain L4 Count] = NULL ;Measure.[L1 Count] = NULL ;Measure.[L2 Count] = NULL ;Measure.[L3 Count] = NULL ;Measure.[L4 Count] = NULL ;Measure.[L5 Count] = NULL ;Measure.[L6 Count] = NULL ;Measure.[Location Country Count] = NULL ;Measure.[Location Region Count] = NULL;Measure.[Location Type Count] = NULL ;Measure.[Planning Account Count] = NULL ;Measure.[Planning Channel Count] = NULL ;Measure.[Planning Demand Domain Count] = NULL ;Measure.[Planning Item Count] = NULL ;Measure.[Planning Location Count] = NULL ;Measure.[Planning PnL Count] = NULL ;Measure.[Planning Region Count] = NULL ;Measure.[PnL L1 Count] = NULL ;Measure.[PnL L2 Count] = NULL ;Measure.[PnL L3 Count] = NULL ;Measure.[PnL L4 Count] = NULL ;Measure.[Region L1 Count] = NULL ;Measure.[Region L2 Count] = NULL ;Measure.[Region L3 Count] = NULL ;Measure.[Region L4 Count] = NULL ;Measure.[Reporting Location Count] = NULL ;Measure.[Stat Account Count] = NULL ;Measure.[Stat Channel Count] = NULL ;Measure.[Stat Demand Domain Count] = NULL ;Measure.[Stat Item Count] = NULL ;Measure.[Stat Location Count] = NULL ;Measure.[Stat PnL Count] = NULL ;Measure.[Stat Region Count] = NULL ;end scope ;'\r\n\r\n                //    var BucketWeightMW='Exec plugin instance [DP046PopulatePWDisaggProfile] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n\r\n                //    var DimCountMW='Exec plugin instance [DP051PopulateDimAttributeCount] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n\r\n                //    var BucketWeight='Exec plugin instance [DP046PopulatePWDisaggProfile] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                //    var DimCount ='Exec plugin instance [DP051PopulateDimAttributeCount] for measures {[Actual]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true), ([MaxSliceTableCells],2000000000), (\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n                //    var SliceAssocNull='delete data for model [860 Slice Association Stat] where {&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [870 Slice Association TL] where {&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}), &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};delete data for model [880 Slice Association PL] where {&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}),&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})};'\r\n\r\n                //    var SliceAssocMW='EXEC plugin instance [DP041PopulateSliceAssociation] for measures {[Trend Strength L1]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"),(ExecutionMode, \"MediumWeight\"),(DataTransferMode, \"csv\")};'\r\n\r\n                //    var SliceAssoc='EXEC plugin instance [DP041PopulateSliceAssociation] for measures {[Trend Strength L1]} using scope (&CWVAndScenarios.filter(#.Name in{\"'+VersionName+'\"}) *&AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) using arguments {([IgnoreMissingOutputs], true) ,([MaxSliceTableCells], 900000000),([MaxMessageLength],99999990),(\"IncludeNullRows\", \"False\"),(\"SparkProfileConfig\", \"unsliced_low\")};'\r\n\r\n\r\n                //    //Null values\r\n                //     queryModule.select(BucketWeigtNull)\r\n                //     queryModule.select(DimCountNull)\r\n                //     queryModule.select(SliceAssocNull)\r\n\r\n                //     if(MW)\r\n                //     {\r\n                //         queryModule.select(BucketWeightMW)\r\n                //         queryModule.select(DimCountMW)\r\n                //         queryModule.select(SliceAssocMW)\r\n                //     }\r\n                //     else \r\n                //     {\r\n                //         queryModule.select(BucketWeight)\r\n                //         queryModule.select(DimCount)\r\n                //         queryModule.select(SliceAssoc)\r\n                //     }\r\n\r\n\r\n\r\n\t\t\t\t   \t\t\t\t   \r\n                   var Setupstatparameter = 'exec procedure o9DP0160SetupStatParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+TypeData+'\", \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n                    queryModule.select(Setupstatparameter)\r\n                   Log.Info(\"Setup Stat Parmeters :\" + Setupstatparameter)\r\n                   \r\n                   var Setupcmlparameter = 'exec procedure o9DP0167SetupCMLParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n\t\t\t\t   queryModule.select(Setupcmlparameter)\r\n\r\n                   Log.Info(\"Setup CML Parmeters :\" + Setupcmlparameter)\r\n                   \r\n\t\t\t\t   var lastsixmonthactual = 'exec procedure o9DP0103PopulateStatActualL6M {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\"};';\r\n\t\t\t\t   queryModule.select(lastsixmonthactual)\r\n\r\n                   Log.Info(\"Stat Actual L6M :\" + lastsixmonthactual)\r\n                   \r\n                   \r\n                   var AlgoParamAssoc='exec procedure o9DP013PopulateAlgoParamAssociation {\"VersionName\": [\"'+VersionName+'\"]};'\r\n                   queryModule.select(AlgoParamAssoc)\r\n\t\t\t\t   Log.Info(\"Procedure to populate algo association :\" + AlgoParamAssoc)\r\n\r\n                   var StatParams= 'exec procedure o9DP012PopulateStatDefaults {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   queryModule.select(StatParams)\r\n\t\t\t\t   Log.Info(\"Procedure to populate Stat Params :\" + StatParams)\r\n\r\n\t\t\t\t   \r\n                   var SetupRules = 'exec procedure o9DP0053PopulatePlannerRule {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   var SetupRulesData = queryModule.select(SetupRules)\r\n                   Log.Info(\"Procedure to populate Stat Rules :\" + SetupRulesData)\r\n\r\n                   \r\n               return parsedParams;\r\n               });\r\n   }\r\n   \r\n   \r\n   return {\r\n       CreateStatDataBatch:CreateStatDataBatch\r\n       \r\n   }\r\n   \r\n   });",
    "ModuleName": "o9.DemandPlanning.CreateStatMemberBatchRun",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "d58068d0-4b8f-bbeb-4861-7c07183b9583",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212963,
    "Description": "No PL Demand domain",
    "Documentation": "define('o9.DemandPlanning.ExistingDemandDomainParameterNoPL', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingDemandDomainString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT DemandD\");\r\n\t\tLog.Info(\"Check Iteration Type Demand: \" +IterationType);\r\n\t\t\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n        var ExistingShiftPatternsChannelQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\"));'\r\n        var ExistingShiftPatternsDemandDomainDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsDemandDomainDataCellSet);\r\n        var ExistingShiftPatternsDemandDomainList = ExistingShiftPatternsDemandDomainDataCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomainList : ' + ExistingShiftPatternsDemandDomainList);\r\n        var ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomainList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => '[' + i);\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomain : ' + ExistingShiftPatternsDemandDomain);\r\n        if (ExistingShiftPatternsDemandDomain.length === 0){\r\n            ExistingShiftPatternsDemandDomain = \"[]\";\r\n        }\r\n       \r\n        parsedParams['ExistingDemandDomainString'] = ExistingShiftPatternsDemandDomain.toString();\r\n        Log.Info(\"ExistingDemandDomainString: \" + ExistingShiftPatternsDemandDomain.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingDemandDomainString: ExistingDemandDomainString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingDemandDomainParameterNoPL', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingDemandDomainString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT DemandD\");\r\n\t\tLog.Info(\"Check Iteration Type Demand: \" +IterationType);\r\n\t\t\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n        var ExistingShiftPatternsChannelQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\"));'\r\n        var ExistingShiftPatternsDemandDomainDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsDemandDomainDataCellSet);\r\n        var ExistingShiftPatternsDemandDomainList = ExistingShiftPatternsDemandDomainDataCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomainList : ' + ExistingShiftPatternsDemandDomainList);\r\n        var ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomainList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => '[' + i);\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomain : ' + ExistingShiftPatternsDemandDomain);\r\n        if (ExistingShiftPatternsDemandDomain.length === 0){\r\n            ExistingShiftPatternsDemandDomain = \"[]\";\r\n        }\r\n       \r\n        parsedParams['ExistingDemandDomainString'] = ExistingShiftPatternsDemandDomain.toString();\r\n        Log.Info(\"ExistingDemandDomainString: \" + ExistingShiftPatternsDemandDomain.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingDemandDomainString: ExistingDemandDomainString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingDemandDomainParameterNoPL",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "f112e9f3-9049-69f7-1186-0c58b4f3e320",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212964,
    "Description": "o9.DemandPlanning.DateValidation",
    "Documentation": "define('o9.DemandPlanning.DateValidation', ['o9/data/query', 'o9/data/cellset','o9.web.api'], function () {\r\n    var DateValidation = function(o9Params){\r\n      var queryModule = require('o9/data/query');\r\n      var parsedParams = JSON.parse(o9Params);\r\n      var cellsetModule = require('o9/data/cellset');\r\n\t  var InitiativeDuration = parsedParams.InitiativeDuration ;\r\n\t  \r\n\t  Log.Info(\"Test logggggg2.2 \"+InitiativeDuration);\r\n      \r\n           \r\n\t\t\tif (InitiativeDuration<0) {\r\n\t\t\t\tRuleOutputToUI = {Status: 'Error',Message: 'Initiative Duration cannot be negative.'};\r\n\t\t\t\treturn;\r\n              }\r\n\t\t\r\n      \r\n      \r\n\t\t};\r\n\t\treturn {\r\n                    DateValidation : DateValidation\r\n                };\r\n  });",
    "Code": "define('o9.DemandPlanning.DateValidation', ['o9/data/query', 'o9/data/cellset','o9.web.api'], function () {\r\n    var DateValidation = function(o9Params){\r\n      var queryModule = require('o9/data/query');\r\n      var parsedParams = JSON.parse(o9Params);\r\n      var cellsetModule = require('o9/data/cellset');\r\n\t  var InitiativeDuration = parsedParams.InitiativeDuration ;\r\n\t  \r\n\t  Log.Info(\"Test logggggg2.2 \"+InitiativeDuration);\r\n      \r\n           \r\n\t\t\tif (InitiativeDuration<0) {\r\n\t\t\t\tRuleOutputToUI = {Status: 'Error',Message: 'Initiative Duration cannot be negative.'};\r\n\t\t\t\treturn;\r\n              }\r\n\t\t\r\n      \r\n      \r\n\t\t};\r\n\t\treturn {\r\n                    DateValidation : DateValidation\r\n                };\r\n  });",
    "ModuleName": "o9.DemandPlanning.DateValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "3dce994f-c58b-152a-26e2-0f39c5d866dc",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212965,
    "Description": "hh",
    "Documentation": "define('o9.DemandPlanning.CreateConcatenatedStringll', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   \r\n   // Function to handle Itemlevel\r\n   var handleItemlevel = function (o9Params) {\r\n\t   var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Itemlevel: \" + parsedParams.Itemlevel);\r\n       if (parsedParams.Itemlevel === null) {\r\n           Log.Info(\"Itemlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Itemlevel = parsedParams.Itemlevel;\r\n\t   Log.Info(Itemlevel);\r\n       var FromItem = parsedParams.FromItem;\r\n       var Item;\r\n       if (Itemlevel == \"[Item].[Item]\") {\r\n           Item = 'Select ([Item].[Item]);';\r\n           Log.Info(\"Creating Item selection for [Item].[Item]: \" + Item);\r\n       } else {\r\n           Item = 'Select (' + Itemlevel + '.[' + FromItem + ']);';\r\n           Log.Info(\"Creating Item selection for related members: \" + Item);\r\n       }\r\n       parsedParams['Item'] = Item;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Accountlevel\r\n   var handleAccountlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Accountlevel: \" + parsedParams.Accountlevel);\r\n       if (parsedParams.Accountlevel === null) {\r\n           Log.Info(\"Accountlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Accountlevel = parsedParams.Accountlevel;\r\n       var FromAccount = parsedParams.FromAccount;\r\n       var Account;\r\n       if (Accountlevel == \"[Account].[Account]\") {\r\n           Account = 'Select ([Account].[Account]);';\r\n           Log.Info(\"Creating Account selection for [Account].[Account]: \" + Account);\r\n       } else {\r\n           Account = 'Select (' + Accountlevel + '.[' + FromAccount + ']);';\r\n           Log.Info(\"Creating Account selection for related members: \" + Account);\r\n       }\r\n       parsedParams['Account'] = Account;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Channellevel\r\n   var handleChannellevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Channellevel: \" + parsedParams.Channellevel);\r\n       if (parsedParams.Channellevel === null) {\r\n           Log.Info(\"Channellevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Channellevel = parsedParams.Channellevel;\r\n       var FromChannel = parsedParams.FromChannel;\r\n       var Channel;\r\n       if (Channellevel == \"[Channel].[Channel]\") {\r\n           Channel = 'Select ([Channel].[Channel]);';\r\n           Log.Info(\"Creating Channel selection for [Channel].[Channel]: \" + Channel);\r\n       } else {\r\n           Channel = 'Select (' + Channellevel + '.[' + FromChannel + ']);';\r\n           Log.Info(\"Creating Channel selection for related members: \" + Channel);\r\n       }\r\n       parsedParams['Channel'] = Channel;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Regionlevel\r\n   var handleRegionlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Regionlevel: \" + parsedParams.Regionlevel);\r\n       if (parsedParams.Regionlevel === null) {\r\n           Log.Info(\"Regionlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Regionlevel = parsedParams.Regionlevel;\r\n       var FromRegion = parsedParams.FromRegion;\r\n       var Region;\r\n       if (Regionlevel == \"[Region].[Region]\") {\r\n           Region = 'Select ([Region].[Region]);';\r\n           Log.Info(\"Creating Region selection for [Region].[Region]: \" + Region);\r\n       } else {\r\n           Region = 'Select (' + Regionlevel + '.[' + FromRegion + ']);';\r\n           Log.Info(\"Creating Region selection for related members: \" + Region);\r\n       }\r\n       parsedParams['Region'] = Region;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle PnLlevel\r\n   var handlePnLlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing PnLlevel: \" + parsedParams.PnLlevel);\r\n       if (parsedParams.PnLlevel === null) {\r\n           Log.Info(\"PnLlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var PnLlevel = parsedParams.PnLlevel;\r\n       var FromPnL = parsedParams.FromPnL;\r\n       var PnL;\r\n       if (PnLlevel == \"[PnL].[PnL]\") {\r\n           PnL = 'Select ([PnL].[PnL]);';\r\n           Log.Info(\"Creating PnL selection for [PnL].[PnL]: \" + PnL);\r\n       } else {\r\n           PnL = 'Select (' + PnLlevel + '.[' + FromPnL + ']);';\r\n           Log.Info(\"Creating PnL selection for related members: \" + PnL);\r\n       }\r\n       parsedParams['PnL'] = PnL;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle DemandDomainlevel\r\n   var handleDemandDomainlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing DemandDomainlevel: \" + parsedParams.DemandDomainlevel);\r\n       if (parsedParams.DemandDomainlevel === null) {\r\n           Log.Info(\"DemandDomainlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var DemandDomainlevel = parsedParams.DemandDomainlevel;\r\n       var FromDemandDomain = parsedParams.FromDemandDomain;\r\n       var DemandDomain;\r\n       if (DemandDomainlevel == \"[DemandDomain].[DemandDomain]\") {\r\n           DemandDomain = 'Select ([DemandDomain].[DemandDomain]);';\r\n           Log.Info(\"Creating DemandDomain selection for [DemandDomain].[DemandDomain]: \" + DemandDomain);\r\n       } else {\r\n           DemandDomain = 'Select (' + DemandDomainlevel + '.[' + FromDemandDomain + ']);';\r\n           Log.Info(\"Creating DemandDomain selection for related members: \" + DemandDomain);\r\n       }\r\n       parsedParams['DemandDomain'] = DemandDomain;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Locationlevel\r\n   var handleLocationlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Locationlevel: \" + parsedParams.Locationlevel);\r\n       if (parsedParams.Locationlevel === null) {\r\n           Log.Info(\"Locationlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Locationlevel = parsedParams.Locationlevel;\r\n       var FromLocation = parsedParams.FromLocation;\r\n       var Location;\r\n       if (Locationlevel == \"[Location].[Location]\") {\r\n           Location = 'Select ([Location].[Location]);';\r\n           Log.Info(\"Creating Location selection for [Location].[Location]: \" + Location);\r\n       } else {\r\n           Location = 'Select (' + Locationlevel + '.[' + FromLocation + ']);';\r\n           Log.Info(\"Creating Location selection for related members: \" + Location);\r\n       }\r\n       parsedParams['Location'] = Location;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Return each individual function separately, so you can call them as needed\r\n   return {\r\n       handleItemlevel: handleItemlevel,\r\n       handleAccountlevel: handleAccountlevel,\r\n       handleChannellevel: handleChannellevel,\r\n       handleRegionlevel: handleRegionlevel,\r\n       handlePnLlevel: handlePnLlevel,\r\n       handleDemandDomainlevel: handleDemandDomainlevel,\r\n       handleLocationlevel: handleLocationlevel\r\n   };\r\n});",
    "Code": "define('o9.DemandPlanning.CreateConcatenatedStringll', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   \r\n   // Function to handle Itemlevel\r\n   var handleItemlevel = function (o9Params) {\r\n\t   var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Itemlevel: \" + parsedParams.Itemlevel);\r\n       if (parsedParams.Itemlevel === null) {\r\n           Log.Info(\"Itemlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Itemlevel = parsedParams.Itemlevel;\r\n\t   Log.Info(Itemlevel);\r\n       var FromItem = parsedParams.FromItem;\r\n       var Item;\r\n       if (Itemlevel == \"[Item].[Item]\") {\r\n           Item = 'Select ([Item].[Item]);';\r\n           Log.Info(\"Creating Item selection for [Item].[Item]: \" + Item);\r\n       } else {\r\n           Item = 'Select (' + Itemlevel + '.[' + FromItem + ']);';\r\n           Log.Info(\"Creating Item selection for related members: \" + Item);\r\n       }\r\n       parsedParams['Item'] = Item;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Accountlevel\r\n   var handleAccountlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Accountlevel: \" + parsedParams.Accountlevel);\r\n       if (parsedParams.Accountlevel === null) {\r\n           Log.Info(\"Accountlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Accountlevel = parsedParams.Accountlevel;\r\n       var FromAccount = parsedParams.FromAccount;\r\n       var Account;\r\n       if (Accountlevel == \"[Account].[Account]\") {\r\n           Account = 'Select ([Account].[Account]);';\r\n           Log.Info(\"Creating Account selection for [Account].[Account]: \" + Account);\r\n       } else {\r\n           Account = 'Select (' + Accountlevel + '.[' + FromAccount + ']);';\r\n           Log.Info(\"Creating Account selection for related members: \" + Account);\r\n       }\r\n       parsedParams['Account'] = Account;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Channellevel\r\n   var handleChannellevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Channellevel: \" + parsedParams.Channellevel);\r\n       if (parsedParams.Channellevel === null) {\r\n           Log.Info(\"Channellevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Channellevel = parsedParams.Channellevel;\r\n       var FromChannel = parsedParams.FromChannel;\r\n       var Channel;\r\n       if (Channellevel == \"[Channel].[Channel]\") {\r\n           Channel = 'Select ([Channel].[Channel]);';\r\n           Log.Info(\"Creating Channel selection for [Channel].[Channel]: \" + Channel);\r\n       } else {\r\n           Channel = 'Select (' + Channellevel + '.[' + FromChannel + ']);';\r\n           Log.Info(\"Creating Channel selection for related members: \" + Channel);\r\n       }\r\n       parsedParams['Channel'] = Channel;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Regionlevel\r\n   var handleRegionlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Regionlevel: \" + parsedParams.Regionlevel);\r\n       if (parsedParams.Regionlevel === null) {\r\n           Log.Info(\"Regionlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Regionlevel = parsedParams.Regionlevel;\r\n       var FromRegion = parsedParams.FromRegion;\r\n       var Region;\r\n       if (Regionlevel == \"[Region].[Region]\") {\r\n           Region = 'Select ([Region].[Region]);';\r\n           Log.Info(\"Creating Region selection for [Region].[Region]: \" + Region);\r\n       } else {\r\n           Region = 'Select (' + Regionlevel + '.[' + FromRegion + ']);';\r\n           Log.Info(\"Creating Region selection for related members: \" + Region);\r\n       }\r\n       parsedParams['Region'] = Region;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle PnLlevel\r\n   var handlePnLlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing PnLlevel: \" + parsedParams.PnLlevel);\r\n       if (parsedParams.PnLlevel === null) {\r\n           Log.Info(\"PnLlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var PnLlevel = parsedParams.PnLlevel;\r\n       var FromPnL = parsedParams.FromPnL;\r\n       var PnL;\r\n       if (PnLlevel == \"[PnL].[PnL]\") {\r\n           PnL = 'Select ([PnL].[PnL]);';\r\n           Log.Info(\"Creating PnL selection for [PnL].[PnL]: \" + PnL);\r\n       } else {\r\n           PnL = 'Select (' + PnLlevel + '.[' + FromPnL + ']);';\r\n           Log.Info(\"Creating PnL selection for related members: \" + PnL);\r\n       }\r\n       parsedParams['PnL'] = PnL;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle DemandDomainlevel\r\n   var handleDemandDomainlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing DemandDomainlevel: \" + parsedParams.DemandDomainlevel);\r\n       if (parsedParams.DemandDomainlevel === null) {\r\n           Log.Info(\"DemandDomainlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var DemandDomainlevel = parsedParams.DemandDomainlevel;\r\n       var FromDemandDomain = parsedParams.FromDemandDomain;\r\n       var DemandDomain;\r\n       if (DemandDomainlevel == \"[DemandDomain].[DemandDomain]\") {\r\n           DemandDomain = 'Select ([DemandDomain].[DemandDomain]);';\r\n           Log.Info(\"Creating DemandDomain selection for [DemandDomain].[DemandDomain]: \" + DemandDomain);\r\n       } else {\r\n           DemandDomain = 'Select (' + DemandDomainlevel + '.[' + FromDemandDomain + ']);';\r\n           Log.Info(\"Creating DemandDomain selection for related members: \" + DemandDomain);\r\n       }\r\n       parsedParams['DemandDomain'] = DemandDomain;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Function to handle Locationlevel\r\n   var handleLocationlevel = function (o9Params) {\r\n       var parsedParams = JSON.parse(o9Params);\r\n       Log.Info(\"Processing Locationlevel: \" + parsedParams.Locationlevel);\r\n       if (parsedParams.Locationlevel === null) {\r\n           Log.Info(\"Locationlevel is null. Returning parsedParams as is.\");\r\n           return parsedParams;\r\n       }\r\n       var Locationlevel = parsedParams.Locationlevel;\r\n       var FromLocation = parsedParams.FromLocation;\r\n       var Location;\r\n       if (Locationlevel == \"[Location].[Location]\") {\r\n           Location = 'Select ([Location].[Location]);';\r\n           Log.Info(\"Creating Location selection for [Location].[Location]: \" + Location);\r\n       } else {\r\n           Location = 'Select (' + Locationlevel + '.[' + FromLocation + ']);';\r\n           Log.Info(\"Creating Location selection for related members: \" + Location);\r\n       }\r\n       parsedParams['Location'] = Location;\r\n       return parsedParams;\r\n   };\r\n\r\n   // Return each individual function separately, so you can call them as needed\r\n   return {\r\n       handleItemlevel: handleItemlevel,\r\n       handleAccountlevel: handleAccountlevel,\r\n       handleChannellevel: handleChannellevel,\r\n       handleRegionlevel: handleRegionlevel,\r\n       handlePnLlevel: handlePnLlevel,\r\n       handleDemandDomainlevel: handleDemandDomainlevel,\r\n       handleLocationlevel: handleLocationlevel\r\n   };\r\n});",
    "ModuleName": "o9.DemandPlanning.CreateConcatenatedStringll",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "238e6873-6bec-c663-e7dc-ef27ad6f3fc8",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212966,
    "Description": "Populate existing channel parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingChannelParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingChannelString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Channel: \" +IterationType);\r\n\t\tLog.Info(\"STMT Channel\");\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n        if (InputStream=='Actual'){\r\n        var ExistingShiftPatternsChannelQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsChannelDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsChannelDataCellSet);\r\n        var ExistingShiftPatternsChannelList = ExistingShiftPatternsChannelDataCellSet.attributeMembers(\"Channel\", ChannelScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsChannelList : ' + ExistingShiftPatternsChannelList);\r\n        }\r\n\t\t\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsChannelQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsChannelDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsChannelDataCellSet);\r\n        var ExistingShiftPatternsChannelList = ExistingShiftPatternsChannelDataCellSet.attributeMembers(\"Channel\", ChannelScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsChannelList : ' + ExistingShiftPatternsChannelList);\r\n\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar ExistingShiftPatternsChannel = ExistingShiftPatternsChannelList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsChannel = ExistingShiftPatternsChannel.map(i => '[' + i);\r\n        ExistingShiftPatternsChannel = ExistingShiftPatternsChannel.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsChannel : ' + ExistingShiftPatternsChannel);\r\n        if (ExistingShiftPatternsChannel.length === 0){\r\n            ExistingShiftPatternsChannel = \"[]\";\r\n        }\r\n        \r\n        parsedParams['ExistingChannelString'] = ExistingShiftPatternsChannel.toString();\r\n        Log.Info(\"ExistingChannelString: \" + ExistingShiftPatternsChannel.toString());\r\n\r\n        return parsedParams;\r\n\t\t\r\n\t};\r\n    return {\r\n        ExistingChannelString: ExistingChannelString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingChannelParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingChannelString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Channel: \" +IterationType);\r\n\t\tLog.Info(\"STMT Channel\");\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n        if (InputStream=='Actual'){\r\n        var ExistingShiftPatternsChannelQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsChannelDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsChannelDataCellSet);\r\n        var ExistingShiftPatternsChannelList = ExistingShiftPatternsChannelDataCellSet.attributeMembers(\"Channel\", ChannelScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsChannelList : ' + ExistingShiftPatternsChannelList);\r\n        }\r\n\t\t\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsChannelQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsChannelDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsChannelDataCellSet);\r\n        var ExistingShiftPatternsChannelList = ExistingShiftPatternsChannelDataCellSet.attributeMembers(\"Channel\", ChannelScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsChannelList : ' + ExistingShiftPatternsChannelList);\r\n\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar ExistingShiftPatternsChannel = ExistingShiftPatternsChannelList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsChannel = ExistingShiftPatternsChannel.map(i => '[' + i);\r\n        ExistingShiftPatternsChannel = ExistingShiftPatternsChannel.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsChannel : ' + ExistingShiftPatternsChannel);\r\n        if (ExistingShiftPatternsChannel.length === 0){\r\n            ExistingShiftPatternsChannel = \"[]\";\r\n        }\r\n        \r\n        parsedParams['ExistingChannelString'] = ExistingShiftPatternsChannel.toString();\r\n        Log.Info(\"ExistingChannelString: \" + ExistingShiftPatternsChannel.toString());\r\n\r\n        return parsedParams;\r\n\t\t\r\n\t};\r\n    return {\r\n        ExistingChannelString: ExistingChannelString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingChannelParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "77711be4-38eb-45f6-8f36-ed816e5b0838",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212967,
    "Description": "Validation for Iteration in scope setup",
    "Documentation": "define('o9.DemandPlanning.ScopeValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\n\r\nvar Filter=parsedParams.IsFilterCreated;\r\nvar Scope=parsedParams.IsScopeCreated;\r\n\r\n\r\n\r\n\r\n\r\nif (Filter!=1)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Filter Attribute not set for the Iteration!'\r\n\t\r\n\t\r\n}\r\n\r\n\r\n}\r\n\r\nif (Scope===1)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Scope already created for the Iteration!'\r\n\t\r\n\t\r\n}\r\n}\r\n\r\n \r\n}\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.ScopeValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\n\r\nvar Filter=parsedParams.IsFilterCreated;\r\nvar Scope=parsedParams.IsScopeCreated;\r\n\r\n\r\n\r\n\r\n\r\nif (Filter!=1)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Filter Attribute not set for the Iteration!'\r\n\t\r\n\t\r\n}\r\n\r\n\r\n}\r\n\r\nif (Scope===1)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Scope already created for the Iteration!'\r\n\t\r\n\t\r\n}\r\n}\r\n\r\n \r\n}\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.ScopeValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "49d63c31-b47a-b08d-e18b-d51540a610ae",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212968,
    "Description": "test",
    "Documentation": "define('o9.web.api',['o9/data/query', 'o9/data/cellset'],function(){\r\n\tvar splitChar = '__';\r\n\tvar queryModule = require('o9/data/query');\r\n    var upsertACL = function(rules){\r\n\t\tvar tenantId = scriptutil.TenantId;\r\n\t\tvar updateuri = 'api/crud/tenants/'+tenantId+'/rules/acl/updatemultiple'; \r\n\t\ttry{  \r\n\t\t\t//actual call\r\n\t\t\thttpclient.SetRequestTimeout(0, 10, 0);\r\n\t\t\tvar request = httpclient.Post(updateuri,JSON.stringify(rules),'','','application/json',true);\r\n\t\t\t}\r\n\t\tcatch(err){\r\n\t\t\tRuleOutputToUI = {Status: 'Error', Message: ' error ' + err};\r\n            //throw('Territory is missing! Please close the form and try again.');\r\n\t\t\t}\r\n\r\n        Log.Info('request details' + JSON.stringify(request));\r\n\t\treturn {};\r\n    };\r\n    return {\r\n        upsertACL : upsertACL\r\n    };\r\n});",
    "Code": "define('o9.web.api',['o9/data/query', 'o9/data/cellset'],function(){\r\n\tvar splitChar = '__';\r\n\tvar queryModule = require('o9/data/query');\r\n    var upsertACL = function(rules){\r\n\t\tvar tenantId = scriptutil.TenantId;\r\n\t\tvar updateuri = 'api/crud/tenants/'+tenantId+'/rules/acl/updatemultiple'; \r\n\t\ttry{  \r\n\t\t\t//actual call\r\n\t\t\thttpclient.SetRequestTimeout(0, 10, 0);\r\n\t\t\tvar request = httpclient.Post(updateuri,JSON.stringify(rules),'','','application/json',true);\r\n\t\t\t}\r\n\t\tcatch(err){\r\n\t\t\tRuleOutputToUI = {Status: 'Error', Message: ' error ' + err};\r\n            //throw('Territory is missing! Please close the form and try again.');\r\n\t\t\t}\r\n\r\n        Log.Info('request details' + JSON.stringify(request));\r\n\t\treturn {};\r\n    };\r\n    return {\r\n        upsertACL : upsertACL\r\n    };\r\n});",
    "ModuleName": "o9.web.api",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "37487513-196a-484b-bc12-95a20ff4a571",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212969,
    "Description": "To create planning level iteration for planning level forecast disagg type",
    "Documentation": "define('o9.DemandPlanning.CreatePlanningLevelIteration',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var CreatePlanningLevelIteration  = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\r\n//Log method logs to the webapi log\r\n\r\nvar VersionName = parsedParams.VersionName\r\nvar ForecastIterationType = parsedParams.ForecastIterationType;\r\nvar DisagType= parsedParams.DisaggregationType;\r\nvar MemberName = parsedParams.MemberName;\r\nvar CreatedBy = parsedParams.ForecastIterationCreatedBy\r\n\r\n\r\n\r\nLog.Info(\"Forecast Iteration Type : \"+ForecastIterationType);\r\nLog.Info(\"Disaggregation Type PL: \"+DisagType);\r\n\r\n\r\nvar PLIteration  = 'Select ([Forecast Iteration].[Forecast Iteration].[FI-PL]);';\r\nvar PLIterationData = cellsetModule.createCellSet(queryModule.select(PLIteration));;\r\n \r\nLog.Info(\"PLIterationData.rowCoun:\" + PLIterationData.rowCount)\r\n\r\nif (PLIterationData.rowCount === 0) {if (DisagType == 'Bottom-up Forecast')\r\n{\r\n\tvar Query = 'exec procedure o9DP0010InitializePlanningLevel {\"VersionName\":[\"'+VersionName+'\"], \"MemberName\" : \"FI-PL\", \"ForecastIterationType\" : \"'+ForecastIterationType+'\", \"ForecastIterationCreatedBy\" : \"'+CreatedBy+'\"};';\r\n\tvar QueryData = queryModule.select(Query)\r\n\t\r\n}\r\n}\r\n\r\n\r\n};\r\n    return {\r\n        CreatePlanningLevelIteration : CreatePlanningLevelIteration\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.CreatePlanningLevelIteration',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var CreatePlanningLevelIteration  = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\r\n//Log method logs to the webapi log\r\n\r\nvar VersionName = parsedParams.VersionName\r\nvar ForecastIterationType = parsedParams.ForecastIterationType;\r\nvar DisagType= parsedParams.DisaggregationType;\r\nvar MemberName = parsedParams.MemberName;\r\nvar CreatedBy = parsedParams.ForecastIterationCreatedBy\r\n\r\n\r\n\r\nLog.Info(\"Forecast Iteration Type : \"+ForecastIterationType);\r\nLog.Info(\"Disaggregation Type PL: \"+DisagType);\r\n\r\n\r\nvar PLIteration  = 'Select ([Forecast Iteration].[Forecast Iteration].[FI-PL]);';\r\nvar PLIterationData = cellsetModule.createCellSet(queryModule.select(PLIteration));;\r\n \r\nLog.Info(\"PLIterationData.rowCoun:\" + PLIterationData.rowCount)\r\n\r\nif (PLIterationData.rowCount === 0) {if (DisagType == 'Bottom-up Forecast')\r\n{\r\n\tvar Query = 'exec procedure o9DP0010InitializePlanningLevel {\"VersionName\":[\"'+VersionName+'\"], \"MemberName\" : \"FI-PL\", \"ForecastIterationType\" : \"'+ForecastIterationType+'\", \"ForecastIterationCreatedBy\" : \"'+CreatedBy+'\"};';\r\n\tvar QueryData = queryModule.select(Query)\r\n\t\r\n}\r\n}\r\n\r\n\r\n};\r\n    return {\r\n        CreatePlanningLevelIteration : CreatePlanningLevelIteration\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.CreatePlanningLevelIteration",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "baec65d2-59ab-c2b4-20ab-971e9aecc799",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212970,
    "Description": "validation",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.ForecastExceptionrule', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var Rule = parsedParams.Rule;\r\n\t\tvar ItemScope = parsedParams.ItemScope;\r\n\t\tvar LocationScope = parsedParams.LocationScope;\r\n\t\tvar ChannelScope = parsedParams.ChannelScope;\r\n        \r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Data Object Type: \" + DataObject);\r\n        Log.Info(\"Rule ID: \" + Rule);\r\n        Log.Info(\"Item L2: \" + ItemScope);\r\n\t\tLog.Info(\"Location Country \" + LocationScope);\r\n\t\tLog.Info(\"Channel: \" + ChannelScope);\r\n\t\t\r\n         \r\n\t\t// Incrementing Rule by 1\r\n\r\n\t\tif (Rule == \"Rule_1000\")\r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Cartesian Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Forecast Exceptions Objects].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = 1001; end scope;';\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Forecast Exceptions Objects].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = Measure.[Data Object Rule Count] +1;end scope;';\r\n\t\t}\r\n\t\tLog.Info(\"Rule Initialization Query: \"+RuleInitializationQuery);\r\n\t\tqueryModule.update(RuleInitializationQuery);\r\n\r\n    };\r\n\r\n    // Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.ForecastExceptionrule', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var Rule = parsedParams.Rule;\r\n\t\tvar ItemScope = parsedParams.ItemScope;\r\n\t\tvar LocationScope = parsedParams.LocationScope;\r\n\t\tvar ChannelScope = parsedParams.ChannelScope;\r\n        \r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Data Object Type: \" + DataObject);\r\n        Log.Info(\"Rule ID: \" + Rule);\r\n        Log.Info(\"Item L2: \" + ItemScope);\r\n\t\tLog.Info(\"Location Country \" + LocationScope);\r\n\t\tLog.Info(\"Channel: \" + ChannelScope);\r\n\t\t\r\n         \r\n\t\t// Incrementing Rule by 1\r\n\r\n\t\tif (Rule == \"Rule_1000\")\r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Cartesian Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Forecast Exceptions Objects].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = 1001; end scope;';\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object Type].[Forecast Exceptions Objects].relatedmembers([Data Object])); Measure.[Data Object Rule Count] = Measure.[Data Object Rule Count] +1;end scope;';\r\n\t\t}\r\n\t\tLog.Info(\"Rule Initialization Query: \"+RuleInitializationQuery);\r\n\t\tqueryModule.update(RuleInitializationQuery);\r\n\r\n    };\r\n\r\n    // Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.ForecastExceptionrule",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "f7a0a38d-3802-196d-2ee2-2fa2dad4fa13",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212971,
    "Description": "Populate existing demand domain parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingDemandDomainParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingDemandDomainString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT DemandD\");\r\n\t\tLog.Info(\"Check Iteration Type Demand: \" +IterationType);\r\n\t\tvar VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Channel: \" +IterationType);\r\n\t\tLog.Info(\"STMT Channel\");\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n        var ExistingShiftPatternsChannelQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsDemandDomainDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsDemandDomainDataCellSet);\r\n        var ExistingShiftPatternsDemandDomainList = ExistingShiftPatternsDemandDomainDataCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomainList : ' + ExistingShiftPatternsDemandDomainList);\r\n        \r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsChannelQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsDemandDomainDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsDemandDomainDataCellSet);\r\n        var ExistingShiftPatternsDemandDomainList = ExistingShiftPatternsDemandDomainDataCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomainList : ' + ExistingShiftPatternsDemandDomainList);\r\n        \t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tvar ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomainList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => '[' + i);\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomain : ' + ExistingShiftPatternsDemandDomain);\r\n        if (ExistingShiftPatternsDemandDomain.length === 0){\r\n            ExistingShiftPatternsDemandDomain = \"[]\";\r\n        }\r\n       \r\n        parsedParams['ExistingDemandDomainString'] = ExistingShiftPatternsDemandDomain.toString();\r\n        Log.Info(\"ExistingDemandDomainString: \" + ExistingShiftPatternsDemandDomain.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingDemandDomainString: ExistingDemandDomainString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingDemandDomainParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingDemandDomainString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT DemandD\");\r\n\t\tLog.Info(\"Check Iteration Type Demand: \" +IterationType);\r\n\t\tvar VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Channel: \" +IterationType);\r\n\t\tLog.Info(\"STMT Channel\");\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n        var ExistingShiftPatternsChannelQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsDemandDomainDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsDemandDomainDataCellSet);\r\n        var ExistingShiftPatternsDemandDomainList = ExistingShiftPatternsDemandDomainDataCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomainList : ' + ExistingShiftPatternsDemandDomainList);\r\n        \r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsChannelQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsDemandDomainDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsChannelQuery));\r\n        Log.Info(ExistingShiftPatternsDemandDomainDataCellSet);\r\n        var ExistingShiftPatternsDemandDomainList = ExistingShiftPatternsDemandDomainDataCellSet.attributeMembers(\"Demand Domain\",DemandDomainScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomainList : ' + ExistingShiftPatternsDemandDomainList);\r\n        \t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tvar ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomainList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => '[' + i);\r\n        ExistingShiftPatternsDemandDomain = ExistingShiftPatternsDemandDomain.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsDemandDomain : ' + ExistingShiftPatternsDemandDomain);\r\n        if (ExistingShiftPatternsDemandDomain.length === 0){\r\n            ExistingShiftPatternsDemandDomain = \"[]\";\r\n        }\r\n       \r\n        parsedParams['ExistingDemandDomainString'] = ExistingShiftPatternsDemandDomain.toString();\r\n        Log.Info(\"ExistingDemandDomainString: \" + ExistingShiftPatternsDemandDomain.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingDemandDomainString: ExistingDemandDomainString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingDemandDomainParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4281e088-7736-3fa2-7413-fb959dca241b",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212972,
    "Description": "o9.DemandPlanning.SetAssortmentInactive",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.SetAssortmentInactive', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t//initiatlize the query modules\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar SetAssortmentInactive = function (o9Params){\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar ItemLevel = parsedParams.ItemLevel;\r\n\t\tvar AccountLevel = parsedParams.AccountLevel;\r\n\t\tvar ChannelLevel = parsedParams.ChannelLevel;\r\n\t\tvar RegionLevel = parsedParams.RegionLevel;\r\n\t\tvar LocationLevel = parsedParams.LocationLevel;\r\n\t\tvar PnLLevel = parsedParams.PnLLevel;\r\n\t\tvar DemandDomainLevel = parsedParams.DemandDomainLevel;\r\n\t\t\r\n\t\tvar ItemScope = parsedParams.ItemScope;\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n\t\tvar ChannelScope = parsedParams.ChannelScope;\r\n\t\tvar RegionScope = parsedParams.RegionScope;\r\n\t\tvar LocationScope = parsedParams.LocationScope;\r\n\t\tvar PnLScope = parsedParams.PnLScope;\r\n\t\tvar DemandDomainScope = parsedParams.DemandDomainScope;\r\n\t\t\r\n\t\t//var RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n\t\tvar assort_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Item Level: \" + ItemLevel);\r\n        Log.Info(\"Account Level: \" + AccountLevel);\r\n\t\tLog.Info(\"Channel Level: \" + ChannelLevel);\r\n\t\tLog.Info(\"Region Level: \" + RegionLevel);\r\n\t\tLog.Info(\"PnL Level: \" + PnLLevel);\r\n\t\tLog.Info(\"Demand Domain Level: \" + DemandDomainLevel);\r\n\t\tLog.Info(\"Location Level: \" + LocationLevel);\r\n\t\t\r\n\t\t\r\n\t\tLog.Info(\"Item Scope: \" + ItemScope);\r\n\t\tLog.Info(\"Account Scope: \" + AccountScope);\r\n        Log.Info(\"Channel Scope: \" + ChannelScope);\r\n        Log.Info(\"Region Scope: \" + RegionScope);\r\n        Log.Info(\"PnL Scope: \" + PnLScope);\r\n        Log.Info(\"Demand Domain Scope: \" + DemandDomainScope);\r\n        Log.Info(\"Location Scope: \" + LocationScope);\r\n\r\n\t\t\r\n\t\t\r\n\t\tvar ItemCount = ItemScope.length;\r\n        var AccountCount = AccountScope.length;\r\n        var ChannelCount = ChannelScope.length;\r\n        var RegionCount = RegionScope.length;\r\n        var PnLCount = PnLScope.length;\r\n        var DemandDomainCount = DemandDomainScope.length;\r\n        var LocationCount = LocationScope.length;\r\n\r\n\r\n\t\t\r\n\t\t// Logging extracted parameters for validation\r\n        Log.Info(\"Item Count: \" + ItemCount);\r\n\t\tLog.Info(\"Account Count: \" + AccountCount);\r\n\t\tLog.Info(\"Channel Count: \" + ChannelCount);\r\n\t\tLog.Info(\"Region Count: \" + RegionCount);\r\n\t\tLog.Info(\"PnL Count: \" + PnLCount);\r\n\t\tLog.Info(\"Demand Domain Count: \" + DemandDomainCount);\r\n\t\tLog.Info(\"Location Count: \" + LocationCount);\r\n\r\n\t\t\r\n\t\tfor (var i=0; i< ItemCount ; i++) {\r\n\r\n\t\t\tfor (var j=0; j< AccountCount ; j++){\r\n\t\t\t \r\n\t\t\t\tfor (var k=0; k< ChannelCount ; k++){\r\n\t\t\t\t \r\n\t\t\t\t\tfor (var l=0; l< RegionCount ; l++){\r\n\t\t\t\t\t  \r\n\t\t\t\t\t\tfor (var m=0; m< PnLCount ; m++){\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t\tfor (var n=0; n< DemandDomainCount ; n++){\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tfor (var o=0; o< LocationCount ; o++){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsQuery = 'Select ([Version].[Version Name].[' + Version + '] * [Item].[' + ItemLevel + '].[' + ItemScope[i] + '] * [Account].[' + AccountLevel + '].[' + AccountScope[j] + '] * [Channel].[' + ChannelLevel + '].[' + ChannelScope[k] + '] * [Region].[' + RegionLevel + '].[' + RegionScope[l] + '] * [PnL].[' + PnLLevel + '].[' + PnLScope[m] + '] * [Demand Domain].[' + DemandDomainLevel + '].[' + DemandDomainScope[n] + '] * [Location].[' + LocationLevel + '].[' + LocationScope[o] + ']) on row, ({Measure.[Assortment Final]}) on column where {Measure.[Assortment Final]==1};';\r\n\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar SelectValidAssortmentsQuery = queryModule.select(ValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsResponse = cellsetModule.createCellSet(SelectValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 1 \"+ValidAssortmentsResponse.rowCount );\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar Query1;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (ValidAssortmentsResponse.rowCount > 0 ){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 2 \");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tQuery1= 'scope: ([Version].[Version Name].[' + Version + '] * [Item].[' + ItemLevel + '].[' + ItemScope[i] + '] * [Account].[' + AccountLevel + '].[' + AccountScope[j] + '] * [Channel].[' + ChannelLevel + '].[' + ChannelScope[k] + '] * [Region].[' + RegionLevel + '].[' + RegionScope[l] + '] * [PnL].[' + PnLLevel + '].[' + PnLScope[m] + '] * [Demand Domain].[' + DemandDomainLevel + '].[' + DemandDomainScope[n] + '] * [Location].[' + LocationLevel + '].[' + LocationScope[o] + ']) ; Measure.[Assortment Inactive]=if(sum(Measure.[Assortment System], Measure.[Assortment New]) >=1) then 1; end scope;';\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query1);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tassort_Count=assort_Count+1;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 3 \");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tQuery2= 'scope: ([Version].[Version Name].[' + Version + '] * [Item].[' + ItemLevel + '].[' + ItemScope[i] + '] * [Account].[' + AccountLevel + '].[' + AccountScope[j] + '] * [Channel].[' + ChannelLevel + '].[' + ChannelScope[k] + '] * [Region].[' + RegionLevel + '].[' + RegionScope[l] + '] * [PnL].[' + PnLLevel + '].[' + PnLScope[m] + '] * [Demand Domain].[' + DemandDomainLevel + '].[' + DemandDomainScope[n] + '] * [Location].[' + LocationLevel + '].[' + LocationScope[o] + ']) ; Measure.[Assortment Final] = if(sum(Measure.[Assortment System], Measure.[Assortment New]) >=1 && coalesce(Measure.[Assortment Inactive],0)>=1) then 0 else 1;End scope;';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query2);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 4 \");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (error_Count === 0 ){\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\tStatus: 'Error',\r\n\t\t\t\tMessage: 'Assortments not set as inactive'\r\n\t\t\t};\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\tLog.Info(\"Number of assortments set as inactive \" + assort_Count);\r\n    };\r\n\r\n    // Returning the CopyAssortment function\r\n    return {\r\n        SetAssortmentInactive: SetAssortmentInactive\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.SetAssortmentInactive', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t//initiatlize the query modules\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar SetAssortmentInactive = function (o9Params){\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar ItemLevel = parsedParams.ItemLevel;\r\n\t\tvar AccountLevel = parsedParams.AccountLevel;\r\n\t\tvar ChannelLevel = parsedParams.ChannelLevel;\r\n\t\tvar RegionLevel = parsedParams.RegionLevel;\r\n\t\tvar LocationLevel = parsedParams.LocationLevel;\r\n\t\tvar PnLLevel = parsedParams.PnLLevel;\r\n\t\tvar DemandDomainLevel = parsedParams.DemandDomainLevel;\r\n\t\t\r\n\t\tvar ItemScope = parsedParams.ItemScope;\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n\t\tvar ChannelScope = parsedParams.ChannelScope;\r\n\t\tvar RegionScope = parsedParams.RegionScope;\r\n\t\tvar LocationScope = parsedParams.LocationScope;\r\n\t\tvar PnLScope = parsedParams.PnLScope;\r\n\t\tvar DemandDomainScope = parsedParams.DemandDomainScope;\r\n\t\t\r\n\t\t//var RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n\t\tvar assort_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Item Level: \" + ItemLevel);\r\n        Log.Info(\"Account Level: \" + AccountLevel);\r\n\t\tLog.Info(\"Channel Level: \" + ChannelLevel);\r\n\t\tLog.Info(\"Region Level: \" + RegionLevel);\r\n\t\tLog.Info(\"PnL Level: \" + PnLLevel);\r\n\t\tLog.Info(\"Demand Domain Level: \" + DemandDomainLevel);\r\n\t\tLog.Info(\"Location Level: \" + LocationLevel);\r\n\t\t\r\n\t\t\r\n\t\tLog.Info(\"Item Scope: \" + ItemScope);\r\n\t\tLog.Info(\"Account Scope: \" + AccountScope);\r\n        Log.Info(\"Channel Scope: \" + ChannelScope);\r\n        Log.Info(\"Region Scope: \" + RegionScope);\r\n        Log.Info(\"PnL Scope: \" + PnLScope);\r\n        Log.Info(\"Demand Domain Scope: \" + DemandDomainScope);\r\n        Log.Info(\"Location Scope: \" + LocationScope);\r\n\r\n\t\t\r\n\t\t\r\n\t\tvar ItemCount = ItemScope.length;\r\n        var AccountCount = AccountScope.length;\r\n        var ChannelCount = ChannelScope.length;\r\n        var RegionCount = RegionScope.length;\r\n        var PnLCount = PnLScope.length;\r\n        var DemandDomainCount = DemandDomainScope.length;\r\n        var LocationCount = LocationScope.length;\r\n\r\n\r\n\t\t\r\n\t\t// Logging extracted parameters for validation\r\n        Log.Info(\"Item Count: \" + ItemCount);\r\n\t\tLog.Info(\"Account Count: \" + AccountCount);\r\n\t\tLog.Info(\"Channel Count: \" + ChannelCount);\r\n\t\tLog.Info(\"Region Count: \" + RegionCount);\r\n\t\tLog.Info(\"PnL Count: \" + PnLCount);\r\n\t\tLog.Info(\"Demand Domain Count: \" + DemandDomainCount);\r\n\t\tLog.Info(\"Location Count: \" + LocationCount);\r\n\r\n\t\t\r\n\t\tfor (var i=0; i< ItemCount ; i++) {\r\n\r\n\t\t\tfor (var j=0; j< AccountCount ; j++){\r\n\t\t\t \r\n\t\t\t\tfor (var k=0; k< ChannelCount ; k++){\r\n\t\t\t\t \r\n\t\t\t\t\tfor (var l=0; l< RegionCount ; l++){\r\n\t\t\t\t\t  \r\n\t\t\t\t\t\tfor (var m=0; m< PnLCount ; m++){\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t\tfor (var n=0; n< DemandDomainCount ; n++){\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tfor (var o=0; o< LocationCount ; o++){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsQuery = 'Select ([Version].[Version Name].[' + Version + '] * [Item].[' + ItemLevel + '].[' + ItemScope[i] + '] * [Account].[' + AccountLevel + '].[' + AccountScope[j] + '] * [Channel].[' + ChannelLevel + '].[' + ChannelScope[k] + '] * [Region].[' + RegionLevel + '].[' + RegionScope[l] + '] * [PnL].[' + PnLLevel + '].[' + PnLScope[m] + '] * [Demand Domain].[' + DemandDomainLevel + '].[' + DemandDomainScope[n] + '] * [Location].[' + LocationLevel + '].[' + LocationScope[o] + ']) on row, ({Measure.[Assortment Final]}) on column where {Measure.[Assortment Final]==1};';\r\n\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar SelectValidAssortmentsQuery = queryModule.select(ValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\tvar ValidAssortmentsResponse = cellsetModule.createCellSet(SelectValidAssortmentsQuery);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 1 \"+ValidAssortmentsResponse.rowCount );\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar Query1;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (ValidAssortmentsResponse.rowCount > 0 ){\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 2 \");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tQuery1= 'scope: ([Version].[Version Name].[' + Version + '] * [Item].[' + ItemLevel + '].[' + ItemScope[i] + '] * [Account].[' + AccountLevel + '].[' + AccountScope[j] + '] * [Channel].[' + ChannelLevel + '].[' + ChannelScope[k] + '] * [Region].[' + RegionLevel + '].[' + RegionScope[l] + '] * [PnL].[' + PnLLevel + '].[' + PnLScope[m] + '] * [Demand Domain].[' + DemandDomainLevel + '].[' + DemandDomainScope[n] + '] * [Location].[' + LocationLevel + '].[' + LocationScope[o] + ']) ; Measure.[Assortment Inactive]=if(sum(Measure.[Assortment System], Measure.[Assortment New]) >=1) then 1; end scope;';\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query1);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tassort_Count=assort_Count+1;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 3 \");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tQuery2= 'scope: ([Version].[Version Name].[' + Version + '] * [Item].[' + ItemLevel + '].[' + ItemScope[i] + '] * [Account].[' + AccountLevel + '].[' + AccountScope[j] + '] * [Channel].[' + ChannelLevel + '].[' + ChannelScope[k] + '] * [Region].[' + RegionLevel + '].[' + RegionScope[l] + '] * [PnL].[' + PnLLevel + '].[' + PnLScope[m] + '] * [Demand Domain].[' + DemandDomainLevel + '].[' + DemandDomainScope[n] + '] * [Location].[' + LocationLevel + '].[' + LocationScope[o] + ']) ; Measure.[Assortment Final] = if(sum(Measure.[Assortment System], Measure.[Assortment New]) >=1 && coalesce(Measure.[Assortment Inactive],0)>=1) then 0 else 1;End scope;';\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tqueryModule.update(Query2);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tLog.Info(\"Assortment testing 4 \");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\terror_Count=error_Count+1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (error_Count === 0 ){\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\tStatus: 'Error',\r\n\t\t\t\tMessage: 'Assortments not set as inactive'\r\n\t\t\t};\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\tLog.Info(\"Number of assortments set as inactive \" + assort_Count);\r\n    };\r\n\r\n    // Returning the CopyAssortment function\r\n    return {\r\n        SetAssortmentInactive: SetAssortmentInactive\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.SetAssortmentInactive",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "4b9727e5-cfc5-b24a-e04e-5fef49046351",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212973,
    "Description": "Populate existing region parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingRegionParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingRegionString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT Region\");\r\n        Log.Info(\"Check Iteration Type Region: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\t\t\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\t\r\n\t\tLog.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var ExistingShiftPatternsRegionQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n          var ExistingShiftPatternsRegionDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsRegionQuery));\r\n        Log.Info(ExistingShiftPatternsRegionDataCellSet);\r\n        var ExistingShiftPatternsRegionList = ExistingShiftPatternsRegionDataCellSet.attributeMembers(\"Region\",RegionScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegionList : ' + ExistingShiftPatternsRegionList);\r\n        \r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsRegionQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n          var ExistingShiftPatternsRegionDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsRegionQuery));\r\n        Log.Info(ExistingShiftPatternsRegionDataCellSet);\r\n        var ExistingShiftPatternsRegionList = ExistingShiftPatternsRegionDataCellSet.attributeMembers(\"Region\",RegionScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegionList : ' + ExistingShiftPatternsRegionList);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar ExistingShiftPatternsRegion = ExistingShiftPatternsRegionList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => '[' + i);\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegion : ' + ExistingShiftPatternsRegion);\r\n        if (ExistingShiftPatternsRegion.length === 0){\r\n            ExistingShiftPatternsRegion = \"[]\";\r\n        }\r\n        \r\n        parsedParams['ExistingRegionString'] = ExistingShiftPatternsRegion.toString();\r\n        Log.Info(\"ExistingRegionString: \" + ExistingShiftPatternsRegion.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingRegionString: ExistingRegionString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingRegionParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingRegionString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\t\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT Region\");\r\n        Log.Info(\"Check Iteration Type Region: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\t\t\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\t\r\n\t\tLog.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var ExistingShiftPatternsRegionQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n          var ExistingShiftPatternsRegionDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsRegionQuery));\r\n        Log.Info(ExistingShiftPatternsRegionDataCellSet);\r\n        var ExistingShiftPatternsRegionList = ExistingShiftPatternsRegionDataCellSet.attributeMembers(\"Region\",RegionScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegionList : ' + ExistingShiftPatternsRegionList);\r\n        \r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsRegionQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n          var ExistingShiftPatternsRegionDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsRegionQuery));\r\n        Log.Info(ExistingShiftPatternsRegionDataCellSet);\r\n        var ExistingShiftPatternsRegionList = ExistingShiftPatternsRegionDataCellSet.attributeMembers(\"Region\",RegionScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegionList : ' + ExistingShiftPatternsRegionList);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar ExistingShiftPatternsRegion = ExistingShiftPatternsRegionList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => '[' + i);\r\n        ExistingShiftPatternsRegion = ExistingShiftPatternsRegion.map(i => i + ']');\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsRegion : ' + ExistingShiftPatternsRegion);\r\n        if (ExistingShiftPatternsRegion.length === 0){\r\n            ExistingShiftPatternsRegion = \"[]\";\r\n        }\r\n        \r\n        parsedParams['ExistingRegionString'] = ExistingShiftPatternsRegion.toString();\r\n        Log.Info(\"ExistingRegionString: \" + ExistingShiftPatternsRegion.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingRegionString: ExistingRegionString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingRegionParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "33d72116-0ceb-8493-7250-e4186ef847ad",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212974,
    "Description": "Validation for filter creating",
    "Documentation": "define('o9.DemandPlanning.FilterValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar  VersionName=parsedParams.VersionName\r\n\r\n\r\n\r\nvar Query =  'Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration] ) on row, ({Measure.[Is Filter Attribute Set]}) on column;';\r\nvar QueryData = cellsetModule.createCellSet(queryModule.select(Query));\r\n\r\nif (QueryData.rowCount !==0)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Filter Attribute is set for iterations. Please reset filter attribute!'\r\n\t\r\n\t\r\n}\r\n\r\n \r\n}\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.FilterValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\nvar  VersionName=parsedParams.VersionName\r\n\r\n\r\n\r\nvar Query =  'Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration] ) on row, ({Measure.[Is Filter Attribute Set]}) on column;';\r\nvar QueryData = cellsetModule.createCellSet(queryModule.select(Query));\r\n\r\nif (QueryData.rowCount !==0)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Filter Attribute is set for iterations. Please reset filter attribute!'\r\n\t\r\n\t\r\n}\r\n\r\n \r\n}\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.FilterValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "3f502d9a-e00d-b853-be7e-1034ea286e69",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212975,
    "Description": "Check the Scope Level for Iteration",
    "Documentation": "define('o9.DemandPlanning.ScopeLevelCheck', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n\t\r\n\tvar ScopeLevelCheck = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var VersionName=parsedParams.VersionName\r\n        var ForecastIterationType = parsedParams.ForecastIterationType\r\n        var InputStream = parsedParams.ExtractedInputStream\r\n        Log.Info('Input Stream test :'+InputStream)\r\n\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\r\n        // Convert both Masterlist and measureListArray elements to lowercase for case-insensitive comparison\r\n        const notInArray2 = measureListArray.filter(element => \r\n            !Masterlist.some(masterElement => masterElement.toLowerCase() === element.toLowerCase())\r\n        );\r\n\r\n        const notInArray1 = Masterlist.filter(element => \r\n            !measureListArray.some(measure => measure.toLowerCase() === element.toLowerCase())\r\n        );\r\n\r\n        const notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n        Log.Info(\"Grain Does Not Exist: \" + notCommonElements); // Output: elements that are not common\r\n\r\n        ScopeQuery = `Select ([Version].[Version Name].[${VersionName}]* [Forecast Iteration].[Forecast Iteration Type].[${ForecastIterationType}] ) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;`\r\n\r\n        var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n        var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n        var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n        var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n        var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n        var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n        var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())) {\r\n            PnLScope = \"Planning PnL\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())) {\r\n            LocationScope = \"Planning Location\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())) {\r\n            ItemScope = \"Planning Item\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())) {\r\n            AccountScope = \"Planning Account\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())) {\r\n            ChannelScope = \"Planning Channel\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())) {\r\n            RegionScope = \"Planning Region\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())) {\r\n            DemandDomainScope = \"Planning Demand Domain\";\r\n        }\r\n\r\n\t\tparsedParams['Item Scope'] = ItemScope;\r\n        parsedParams['Account Scope'] = AccountScope;\r\n        parsedParams['Channel Scope'] = ChannelScope;\r\n        parsedParams['Region Scope'] = RegionScope;\r\n        parsedParams['Demand Domain Scope'] = DemandDomainScope;\r\n        parsedParams['Location Scope'] = LocationScope;\r\n        parsedParams['PnL Scope'] = PnLScope;\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ScopeLevelCheck: ScopeLevelCheck,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ScopeLevelCheck', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var ExtractMeasure=function(Query,Measure='RecordCount'){\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var queryModule=require('o9/data/query')\r\n        var QueryCellset=cellsetModule.createCellSet(queryModule.select(Query))\r\n        \r\n        if (QueryCellset.rowCount==0)\r\n            return 0 \r\n        var value =QueryCellset.row(0).cell(QueryCellset.measureColumnIndex(Measure))   \r\n        Log.Info(\"Value be : \"+value)\r\n        return value\r\n        \r\n    }\r\n\t\r\n\tvar ScopeLevelCheck = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var VersionName=parsedParams.VersionName\r\n        var ForecastIterationType = parsedParams.ForecastIterationType\r\n        var InputStream = parsedParams.ExtractedInputStream\r\n        Log.Info('Input Stream test :'+InputStream)\r\n\r\n\t\tvar MeasureGrain = 'SELECT _SchemaPlan.[_Measure].['+InputStream+'].Ancestor(_SchemaPlan.[Plan-MeasureGroup-Measure],1).Children(_SchemaPlan.[Plan-MeasureGroup-DimensionUsage]);';\r\n        \r\n        var lsResponse = queryModule.select(MeasureGrain);\r\n        var measureListArray = []\r\n        for (var i = 0; i < lsResponse.length; i++){\r\n            var obj = lsResponse[i];\r\n            //Log.Info(obj)\r\n            Log.Info(obj.MemberProperties[3].PropertyValue);\r\n            Log.Info(obj.MemberProperties[4].PropertyValue);\r\n            var concatenated_str = obj.MemberProperties[3].PropertyValue;\r\n            concatenated_str = concatenated_str.replace(/['\"]+/g, '')\r\n            measureListArray.push(concatenated_str);\r\n            //Log.Info(measureListArray);\r\n            //Log.Info(\"Value:\" + value);\r\n            }\r\n        Log.Info(\"Measure Grain \" + measureListArray);\t\r\n\t\t\t\r\n\t\tconst Masterlist = [\"Version\", \"Item\", \"Account\", \"Channel\", \"Region\", \"Demand Domain\", \"PnL\", \"Location\", \"Time\"];\r\n\r\n        // Convert both Masterlist and measureListArray elements to lowercase for case-insensitive comparison\r\n        const notInArray2 = measureListArray.filter(element => \r\n            !Masterlist.some(masterElement => masterElement.toLowerCase() === element.toLowerCase())\r\n        );\r\n\r\n        const notInArray1 = Masterlist.filter(element => \r\n            !measureListArray.some(measure => measure.toLowerCase() === element.toLowerCase())\r\n        );\r\n\r\n        const notCommonElements = [...notInArray1, ...notInArray2];\r\n\r\n        Log.Info(\"Grain Does Not Exist: \" + notCommonElements); // Output: elements that are not common\r\n\r\n        ScopeQuery = `Select ([Version].[Version Name].[${VersionName}]* [Forecast Iteration].[Forecast Iteration Type].[${ForecastIterationType}] ) on row, ({Measure.[Location Scope],Measure.[Item Scope],Measure.[Account Scope],Measure.[Channel Scope],Measure.[Region Scope],Measure.[PnL Scope],Measure.[Demand Domain Scope]}) on column;`\r\n\r\n        var PnLScope = ExtractMeasure(ScopeQuery, 'PnL Scope');\r\n        var LocationScope = ExtractMeasure(ScopeQuery, 'Location Scope');\r\n        var ItemScope = ExtractMeasure(ScopeQuery, 'Item Scope');\r\n        var AccountScope = ExtractMeasure(ScopeQuery, 'Account Scope');\r\n        var ChannelScope = ExtractMeasure(ScopeQuery, 'Channel Scope');\r\n        var RegionScope = ExtractMeasure(ScopeQuery, 'Region Scope');\r\n        var DemandDomainScope = ExtractMeasure(ScopeQuery, 'Demand Domain Scope');\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"PnL\".toLowerCase())) {\r\n            PnLScope = \"Planning PnL\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Location\".toLowerCase())) {\r\n            LocationScope = \"Planning Location\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Item\".toLowerCase())) {\r\n            ItemScope = \"Planning Item\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Account\".toLowerCase())) {\r\n            AccountScope = \"Planning Account\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Channel\".toLowerCase())) {\r\n            ChannelScope = \"Planning Channel\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Region\".toLowerCase())) {\r\n            RegionScope = \"Planning Region\";\r\n        }\r\n\r\n        if (notCommonElements.some(element => element.toLowerCase() === \"Demand Domain\".toLowerCase())) {\r\n            DemandDomainScope = \"Planning Demand Domain\";\r\n        }\r\n\r\n\t\tparsedParams['Item Scope'] = ItemScope;\r\n        parsedParams['Account Scope'] = AccountScope;\r\n        parsedParams['Channel Scope'] = ChannelScope;\r\n        parsedParams['Region Scope'] = RegionScope;\r\n        parsedParams['Demand Domain Scope'] = DemandDomainScope;\r\n        parsedParams['Location Scope'] = LocationScope;\r\n        parsedParams['PnL Scope'] = PnLScope;\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ScopeLevelCheck: ScopeLevelCheck,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ScopeLevelCheck",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "623b5afe-1cb5-7c43-0d1b-a27941f924b5",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212976,
    "Description": "Validation for delete iteration type",
    "Documentation": "define('o9.DemandPlanning.DeleteValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\n\r\nvar ForecastIterationType  = parsedParams.ForecastIterationType;\r\n\r\n\r\n\r\n\r\nvar Query =  'select ([Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'].relatedmembers([Forecast Iteration]));';\r\nvar QueryData = cellsetModule.createCellSet(queryModule.select(Query));\r\n\r\nif (QueryData.rowCount >0)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Found iterations linked to selected Iteration Type. Please delete all child iterations before proceeding..'\r\n\t\r\n\t\r\n}\r\n\r\n \r\n}\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.DeleteValidation',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n//Log method logs to the webapi log\r\n\r\n\r\nvar ForecastIterationType  = parsedParams.ForecastIterationType;\r\n\r\n\r\n\r\n\r\nvar Query =  'select ([Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'].relatedmembers([Forecast Iteration]));';\r\nvar QueryData = cellsetModule.createCellSet(queryModule.select(Query));\r\n\r\nif (QueryData.rowCount >0)\r\n{\r\n\tRuleOutputToUI =\r\n\t{\r\n\tStatus: 'Error',\r\n\tMessage: 'Found iterations linked to selected Iteration Type. Please delete all child iterations before proceeding..'\r\n\t\r\n\t\r\n}\r\n\r\n \r\n}\r\n\r\n};\r\n  \r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.DeleteValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "5c1b4230-9298-f95e-1650-2ed62c4b6f8b",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212977,
    "Description": "Forecast Iteration Type Validation",
    "Documentation": "define('o9.DemandPlanning.IterationType',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\r\n//Log method logs to the webapi log\r\n\r\nvar IterationType = parsedParams.ForecastIterationType;\r\n\r\nvar InputStream = parsedParams.InputStream;\r\nLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\nvar SQuery= `select ([Forecast Iteration].[Forecast Iteration Type].filter(#.Name startswith([${IterationType}_${InputStream}_])));`;\r\nvar datacell= cellsetModule.createCellSet(queryModule.select(SQuery));\r\n\r\nif(datacell.rowCount>0)\r\n{\r\n    RuleOutputToUI =\r\n    {\r\n    Status: 'Error',\r\n    Message: 'This Iteration Type already exists!'    \r\n    };\r\n\r\n}\r\n\r\n\r\nLog.Info(\"Forecast Disaggregation Validation Complete\");\r\n\r\n};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.IterationType',['o9/data/query', 'o9/data/cellset','o9.web.api'],function(){\r\n    var validation = function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\n\r\n    var queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\r\n//Log method logs to the webapi log\r\n\r\nvar IterationType = parsedParams.ForecastIterationType;\r\n\r\nvar InputStream = parsedParams.InputStream;\r\nLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\nvar SQuery= `select ([Forecast Iteration].[Forecast Iteration Type].filter(#.Name startswith([${IterationType}_${InputStream}_])));`;\r\nvar datacell= cellsetModule.createCellSet(queryModule.select(SQuery));\r\n\r\nif(datacell.rowCount>0)\r\n{\r\n    RuleOutputToUI =\r\n    {\r\n    Status: 'Error',\r\n    Message: 'This Iteration Type already exists!'    \r\n    };\r\n\r\n}\r\n\r\n\r\nLog.Info(\"Forecast Disaggregation Validation Complete\");\r\n\r\n};\r\n    return {\r\n        validation : validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.IterationType",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "cebb0ecb-5e11-4da1-df5a-6cb524adc4b3",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212978,
    "Description": "NewItemEANID",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemEANID'\r\ndefine('o9.DemandPlanning.NewItemEANID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemEANID function\r\n    var NewItemEANID = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemEANIDQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[EAN ID] );';\r\n        var NewItemEANIDDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemEANIDQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemEANIDQuery : ' + NewItemEANIDQuery);\r\n\t\t// Check if NewEANID is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemEANIDDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"EANID\"\r\n            var NewItemEANIDList = NewItemEANIDDataCellSet.attributeMembers(\"Item\", \"EAN ID\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemEANID -> NewItemEANIDList : ' + NewItemEANIDList);\r\n\r\n            // Extract the names from the result and store in NewEANID\r\n            var NewEANID = NewItemEANIDList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemEANID'] = NewEANID[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemEANID'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemEANID function as part of the module\r\n    return {\r\n        NewItemEANID: NewItemEANID\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemEANID'\r\ndefine('o9.DemandPlanning.NewItemEANID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemEANID function\r\n    var NewItemEANID = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemEANIDQuery = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[EAN ID] );';\r\n        var NewItemEANIDDataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemEANIDQuery));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemEANIDQuery : ' + NewItemEANIDQuery);\r\n\t\t// Check if NewEANID is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemEANIDDataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"EANID\"\r\n            var NewItemEANIDList = NewItemEANIDDataCellSet.attributeMembers(\"Item\", \"EAN ID\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemEANID -> NewItemEANIDList : ' + NewItemEANIDList);\r\n\r\n            // Extract the names from the result and store in NewEANID\r\n            var NewEANID = NewItemEANIDList.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemEANID'] = NewEANID[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemEANID'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemEANID function as part of the module\r\n    return {\r\n        NewItemEANID: NewItemEANID\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemEANID",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "d63406b4-b771-f913-ce25-1f024fce230d",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212979,
    "Description": "Forecast Exceptions for DP Retail",
    "Documentation": "// Module definition\r\ndefine('o9.DemandPlanning.ForecastException', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var Rule = parsedParams.Rule;\r\n\t\tvar ItemScope = parsedParams.ItemScope;\r\n\t\tvar LocationScope = parsedParams.LocationScope;\r\n\t\tvar ChannelScope = parsedParams.ChannelScope;\r\n        \r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Data Object Type: \" + DataObject);\r\n        Log.Info(\"Rule ID: \" + Rule);\r\n        Log.Info(\"Item L2: \" + ItemScope);\r\n\t\tLog.Info(\"Location Country \" + LocationScope);\r\n\t\tLog.Info(\"Channel: \" + ChannelScope);\r\n\t\t\r\n         \r\n\t\t// Incrementing Rule by 1\r\n\r\n\t\tif (Rule == \"Rule_1000\")\r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Cartesian Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object].[L2 x Channel x Location Country Exception]); Measure.[Data Object Rule Count] = 1001; end scope;';\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object].[L2 x Channel x Location Country Exception]); Measure.[Data Object Rule Count] = Measure.[Data Object Rule Count] +1;end scope;';\r\n\t\t}\r\n\t\tLog.Info(\"Rule Initialization Query: \"+RuleInitializationQuery);\r\n\t\tqueryModule.update(RuleInitializationQuery);\r\n\r\n    };\r\n\r\n    // Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "Code": "// Module definition\r\ndefine('o9.DemandPlanning.ForecastException', ['o9/data/query', 'o9/data/cellset', 'o9.web.api'], function () {\r\n\r\n    // Validation function accepting o9Params as input\r\n    var validation = function (o9Params) {\r\n\r\n        // Parsing input parameters\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Retrieving required modules\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        \r\n        // Extract input parameters\r\n        var Version = parsedParams.Version;\r\n\t\tvar DataObject = parsedParams.DataObject;\r\n        var Rule = parsedParams.Rule;\r\n\t\tvar ItemScope = parsedParams.ItemScope;\r\n\t\tvar LocationScope = parsedParams.LocationScope;\r\n\t\tvar ChannelScope = parsedParams.ChannelScope;\r\n        \r\n\t\tvar RuleInitializationQuery = \" \";\r\n\t\tvar error_Count=0;\r\n        \r\n        // Logging extracted parameters for validation\r\n        Log.Info(\"Version: \" + Version);\r\n        Log.Info(\"Data Object Type: \" + DataObject);\r\n        Log.Info(\"Rule ID: \" + Rule);\r\n        Log.Info(\"Item L2: \" + ItemScope);\r\n\t\tLog.Info(\"Location Country \" + LocationScope);\r\n\t\tLog.Info(\"Channel: \" + ChannelScope);\r\n\t\t\r\n         \r\n\t\t// Incrementing Rule by 1\r\n\r\n\t\tif (Rule == \"Rule_1000\")\r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Cartesian Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object].[L2 x Channel x Location Country Exception]); Measure.[Data Object Rule Count] = 1001; end scope;';\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tRuleInitializationQuery = 'Scope:([Version].[Version Name].Filter( #.Name == \"'+Version+'\") * [Data Object].[Data Object].[L2 x Channel x Location Country Exception]); Measure.[Data Object Rule Count] = Measure.[Data Object Rule Count] +1;end scope;';\r\n\t\t}\r\n\t\tLog.Info(\"Rule Initialization Query: \"+RuleInitializationQuery);\r\n\t\tqueryModule.update(RuleInitializationQuery);\r\n\r\n    };\r\n\r\n    // Returning the validation function\r\n    return {\r\n        validation: validation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.ForecastException",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "708e50c2-9bd4-acee-5af3-42113db107ba",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212980,
    "Description": "Populate existing account parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingAccountParameterNoPL', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\tvar ExistingAccountString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Account: \" +IterationType);\r\n\t\tLog.Info(\"STMT Account\");\r\n\t\t\r\n\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n        var ExistingShiftPatternsAccountQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsAccountDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsAccountQuery));\r\n        Log.Info(ExistingShiftPatternsAccountDataCellSet);\r\n        var ExistingShiftPatternsAccountList = ExistingShiftPatternsAccountDataCellSet.attributeMembers(\"Account\",AccountScope);\r\n        Log.Info('All Account list : ' + ExistingShiftPatternsAccountList);\r\n        var ExistingShiftPatternsAccount = ExistingShiftPatternsAccountList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => '[' + i);\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => i + ']');\r\n        Log.Info('Existing account member : ' + ExistingShiftPatternsAccount);\r\n        if (ExistingShiftPatternsAccount.length === 0){\r\n            ExistingShiftPatternsAccount = \"[]\";\r\n        }\r\n       \r\n\r\n      \r\n        parsedParams['ExistingAccountString'] = ExistingShiftPatternsAccount.toString();\r\n        Log.Info(\"ExistingAccountString: \" + ExistingShiftPatternsAccount.toString());\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ExistingAccountString: ExistingAccountString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingAccountParameterNoPL', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\tvar ExistingAccountString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n\t\tLog.Info(\"Check Iteration Type Account: \" +IterationType);\r\n\t\tLog.Info(\"STMT Account\");\r\n\t\t\r\n\t\t\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n        var ExistingShiftPatternsAccountQuery ='(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsAccountDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsAccountQuery));\r\n        Log.Info(ExistingShiftPatternsAccountDataCellSet);\r\n        var ExistingShiftPatternsAccountList = ExistingShiftPatternsAccountDataCellSet.attributeMembers(\"Account\",AccountScope);\r\n        Log.Info('All Account list : ' + ExistingShiftPatternsAccountList);\r\n        var ExistingShiftPatternsAccount = ExistingShiftPatternsAccountList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => '[' + i);\r\n        ExistingShiftPatternsAccount = ExistingShiftPatternsAccount.map(i => i + ']');\r\n        Log.Info('Existing account member : ' + ExistingShiftPatternsAccount);\r\n        if (ExistingShiftPatternsAccount.length === 0){\r\n            ExistingShiftPatternsAccount = \"[]\";\r\n        }\r\n       \r\n\r\n      \r\n        parsedParams['ExistingAccountString'] = ExistingShiftPatternsAccount.toString();\r\n        Log.Info(\"ExistingAccountString: \" + ExistingShiftPatternsAccount.toString());\r\n\r\n        return parsedParams;\r\n    };\r\n    return {\r\n        ExistingAccountString: ExistingAccountString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingAccountParameterNoPL",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "8e2289e7-c98b-d8f9-5217-346edd641d8f",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212981,
    "Description": "NewItemRGM1",
    "Documentation": "// Define a module named 'o9.DemandPlanning.NewItemRGM1'\r\ndefine('o9.DemandPlanning.NewItemRGM1', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemRGM1 function\r\n    var NewItemRGM1 = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemRGM1Query = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[RGM1] );';\r\n        var NewItemRGM1DataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemRGM1Query));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemRGM1Query : ' + NewItemRGM1Query);\r\n\t\t// Check if NewRGM1 is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemRGM1DataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"RGM1\"\r\n            var NewItemRGM1List = NewItemRGM1DataCellSet.attributeMembers(\"Item\", \"RGM1\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemRGM1 -> NewItemRGM1List : ' + NewItemRGM1List);\r\n\r\n            // Extract the names from the result and store in NewRGM1\r\n            var NewRGM1 = NewItemRGM1List.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemRGM1'] = NewRGM1[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemRGM1'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemRGM1 function as part of the module\r\n    return {\r\n        NewItemRGM1: NewItemRGM1\r\n    };\r\n});",
    "Code": "// Define a module named 'o9.DemandPlanning.NewItemRGM1'\r\ndefine('o9.DemandPlanning.NewItemRGM1', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    // Define the NewItemRGM1 function\r\n    var NewItemRGM1 = function (o9Params) {\r\n        // Parsing data from LS (Local Storage?) to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        // Get the NewItem from the parsed parameters\r\n        var ExistingItem = parsedParams.ExistingItem;\r\n        // Create a query to retrieve data\r\n        var NewItemRGM1Query = 'Select ([Item].[Item].[' + ExistingItem + '] * [Item].[RGM1] );';\r\n        var NewItemRGM1DataCellSet = cellsetModule.createCellSet(queryModule.select(NewItemRGM1Query));\r\n\t\t    // Log the query for debugging\r\n            Log.Info('NewItemRGM1Query : ' + NewItemRGM1Query);\r\n\t\t// Check if NewRGM1 is null or falsy, and replace with \"Dummy\" if so\r\n        if (NewItemRGM1DataCellSet.rowCount > 0) {\r\n\r\n            // Extract the attribute members for \"Item\" and \"RGM1\"\r\n            var NewItemRGM1List = NewItemRGM1DataCellSet.attributeMembers(\"Item\", \"RGM1\");\r\n\r\n            // Log the result for debugging\r\n            Log.Info('o9.demandplanning.NewItemRGM1 -> NewItemRGM1List : ' + NewItemRGM1List);\r\n\r\n            // Extract the names from the result and store in NewRGM1\r\n            var NewRGM1 = NewItemRGM1List.map(function (item) {\r\n                return item['Name'];\r\n            });\r\n\r\n            parsedParams['NewItemRGM1'] = NewRGM1[0];\r\n        } \r\n        else {\r\n            parsedParams['NewItemRGM1'] = \"Dummy\";\r\n        }\r\n\r\n        // Return the modified parameters\r\n        return parsedParams;\r\n    };\r\n\r\n    // Return the NewItemRGM1 function as part of the module\r\n    return {\r\n        NewItemRGM1: NewItemRGM1\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.NewItemRGM1",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "3196d1d8-66d2-f96d-ff0c-b8d916b4f314",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212982,
    "Description": "JavaScript to create stat member",
    "Documentation": "define('o9.DemandPlanning.CreateStatMember', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    function findValueByKey(array, key) {\r\n       const item = array.find(item => item.name === key);\r\n       return item ? item.Member : undefined;\r\n       }\r\n       \r\n   var CreateStatData = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ForecastIteration = parsedParams.ForecastIteration;\r\n                   var ForecastIterationType = parsedParams.ForecastIterationType\r\n                   var MW=parsedParams.MediumWeight\r\n                   Log.Info(\"ForecastIterationType: \"+ForecastIterationType);\r\n                  var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\":'+MW+'};'\r\n                  Log.Info(\"Parameterized Stat Member procedure :\"+createmember)\r\n                  var creatememberData = queryModule.select(createmember)\r\n                  Log.Info(\"Parameterized Create Stat Member procedure :\"+creatememberData)\r\n\r\n\t\t\t\t  \r\n\t\t\t\r\n\t\t\t\t  \r\n\t\t\t\t  if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t  Log.Info(\"Passed Iteration is FI PL \")\r\n\t\t\t\t  var Preprocess = 'exec procedure o9DP013PreprocessPLScope{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+ForecastIterationType+'\"};'\r\n\t\t\t\t  Log.Info(\"PreprocessForPL :\"+Preprocess)\r\n\t\t\t\t  var PreprocessData = queryModule.select(Preprocess)\r\n                  }\r\n\r\n\t\t\t\t  \r\n                   const ItemHigh = [\r\n                   {name: 'Item', level: 1},\r\n                   {name: 'Reporting Item', Member: 'Reporting Item Members'},\r\n                   {name: 'Planning Item', Member: 'Planning Item Members'},\r\n                   {name: 'L1', Member: 'L1 Members'},\r\n                   {name: 'L2', Member: 'L2 Members'},\r\n                   {name: 'L3', Member: 'L3 Members'},\r\n                   {name: 'L4', Member: 'L4 Members'},\r\n                   {name: 'L5', Member: 'L5 Members'},\r\n                   {name: 'L6', Member: 'L6 Members'},\r\n                   {name: 'All Item', Member: 'All Item Members'},\r\n                   {name: 'Transition Item', Member: 'Transition Item Members'}\r\n                   ]\r\n                   \r\n                   \r\n                   var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Item Level]}) on column;';\r\n                   var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n                   Log.Info('CellSet'+ItemDataCellSet)\r\n                   var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Level'));\r\n                   Log.Info(\"ItemLevels: \"+ItemLevels);\r\n                   \r\n                   \r\n                   \r\n                   const itemvalue = findValueByKey(ItemHigh,ItemLevels );\r\n   \r\n                   var ItemValuecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item] ) on row, ({Measure.[Stat Item Members]}) on column;'))\r\n                   if(ItemValuecellset.rowCount>0){\r\n                   \r\n                   var ItemStat = 'createmember ([Item].[Stat Item] = {, Measure.[Stat Item Members]}, [Item].[Stat Item$DisplayName]={Measure.[Stat Item Members Display Name],}, [Item].[Segmentation LOB] = {,Measure.[Segmentation LOB Members]},[Item].[Segmentation LOB$DisplayName]={Measure.[Segmentation LOB Members Display Name],}, [Item].[Stat Item Group] = {,Measure.[Stat Item Group Members]},[Item].[Stat Item Group$DisplayName]={Measure.[Stat Item Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item]);';\r\n\t\t\t\t   var ItemStatData = queryModule.select(ItemStat)\r\n                   }\r\n                   \r\n                   const AccHigh = [\r\n                   { name: 'Account' },\r\n                   { name: 'Planning Account', Member: 'Planning Account Members' },\r\n                   { name: 'Account L1', Member: 'Account L1 Members' },\r\n                   { name: 'Account L2', Member: 'Account L2 Members' },\r\n                   { name: 'Account L3', Member: 'Account L3 Members' },\r\n                   { name: 'Account L4', Member: 'Account L4 Members' },\r\n                   { name: 'All Account', Member: 'All Account Members' },\r\n                               ]\r\n                               \r\n                   var AccountQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Account Level]}) on column;';\r\n                   var AccountDataCellSet=cellsetModule.createCellSet(queryModule.select(AccountQuery));\r\n                   Log.Info('CellSet'+AccountDataCellSet)\r\n                   var AccountLevels=AccountDataCellSet.row(0).cell(AccountDataCellSet.measureColumnIndex('Account Level'));\r\n                   Log.Info(\"AccountLevels: \"+AccountLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Accountvalue = findValueByKey(AccHigh,AccountLevels );\r\n   \r\n   \r\n                   var accountvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Account].[Planning Account] ) on row, ({Measure.[Stat Account Members]}) on column;'))\r\n                   if(accountvaluecellset.rowCount>0){\r\n                   \r\n                   var AccountStat = 'createmember ([Account].[Stat Account] = {, Measure.[Stat Account Members]},[Account].[Stat Account$DisplayName]={Measure.[Stat Account Members Display Name],}, [Account].[Stat Account Group] = {,Measure.[Stat Account Group Members]},[Account].[Stat Account Group$DisplayName]={Measure.[Stat Account Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Account].[Planning Account]);';\r\n                   var AccountStatData = queryModule.select(AccountStat)\r\n                   }\r\n   \r\n                   const LocHigh = [\r\n                   { name: 'Location Type', Member: 'Location Type Members' },\r\n                   { name: 'Location', Member: 'Location Members'},\r\n                   { name: 'Planning Location', Member: 'Planning Location Members'},\r\n                   { name: 'Reporting Location', Member: 'Reporting Location Members' },\r\n                   { name: 'Location Region', Member: 'Location Region Members' },\r\n                   { name: 'Location Country', Member: 'Location Country Members' },\r\n                   { name: 'All Location', Member: 'All Location Members' }\r\n                                   ]\r\n                               \r\n                   \r\n                   var LocationQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Location Level]}) on column;';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationDataCellSet=cellsetModule.createCellSet(queryModule.select(LocationQuery));\r\n                   Log.Info('CellSet'+LocationDataCellSet)\r\n                   var LocationLevels=LocationDataCellSet.row(0).cell(LocationDataCellSet.measureColumnIndex('Location Level'));\r\n                   Log.Info(\"LocationLevels: \"+LocationLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Locationvalue = findValueByKey(LocHigh,LocationLevels );\r\n   \r\n                   var Locationvaluecellset= cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Location].[Location] ) on row, ({Measure.[Stat Location Members]}) on column;'))\r\n                   if(Locationvaluecellset.rowCount>0){\r\n                   \r\n                   var LocationStat ='createmember ([Location].[Stat Location] = {, Measure.[Stat Location Members]},[Location].[Stat Location$DisplayName]={Measure.[Stat Location Members Display Name],}, [Location].[All Location] = {,Measure.[All Location Members]},[Location].[All Location$DisplayName]={Measure.[All Location Members Display Name],}, [Location].[Stat Location Group] = {,Measure.[Stat Location Group Members]},[Location].[Stat Location Group$DisplayName]={Measure.[Stat Location Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Location].[Location]);';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationStatData = queryModule.select(LocationStat)\t\r\n               }\r\n                   const ChanHigh = [\r\n                   { name: 'Channel' },\r\n                   { name: 'Planning Channel', Member: 'Planning Channel Members'  },\r\n                   { name: 'Channel L1', Member: 'Channel L1 Members' },\r\n                   { name: 'Channel L2', Member: 'Channel L2 Members' },\r\n                   { name: 'All Channel', Member: 'All Channel Members' }\r\n                               ]\r\n                               \r\n                   var ChanQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Channel Level]}) on column;';\r\n                   var ChannelDataCellSet=cellsetModule.createCellSet(queryModule.select(ChanQuery));\r\n                   Log.Info('CellSet'+ChannelDataCellSet)\r\n                   var ChannelLevels=ChannelDataCellSet.row(0).cell(ChannelDataCellSet.measureColumnIndex('Channel Level'));\r\n                   Log.Info(\"ChannelLevels: \"+ChannelLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Chanvalue = findValueByKey(ChanHigh,ChannelLevels );\r\n   \r\n                   var chanvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Channel].[Planning Channel] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Channel Members]}) on column;'))\r\n                   if(chanvaluecellset.rowCount>0){\r\n                   var ChannelStat = 'createmember ([Channel].[Stat Channel] = {, Measure.[Stat Channel Members]},[Channel].[Stat Channel$DisplayName]={Measure.[Stat Channel Members Display Name],}, [Channel].[Stat Channel Group] = {,Measure.[Stat Channel Group Members]},[Channel].[Stat Channel Group$DisplayName]={Measure.[Stat Channel Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Channel].[Planning Channel]);';\r\n                   var ChannelStatData = queryModule.select(ChannelStat)\r\n   \r\n                   }\r\n                   \r\n                   \r\n                   \r\n                   const RegHigh = [\r\n                   { name: 'Region' },\r\n                   { name: 'Planning Region', Member:'Planning Region Members'  },\r\n                   { name: 'Region L1', Member: 'Region L1 Members' },\r\n                   { name: 'Region L2', Member: 'Region L2 Members' },\r\n                   { name: 'Region L3', Member: 'Region L3 Members' },\r\n                   { name: 'Region L4', Member: 'Region L4 Members' },\r\n                   { name: 'All Region', Member: 'All Region Members' },\r\n                           ]\r\n                   \r\n                   \r\n                   var RegQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Region Level]}) on column;';\r\n                   var RegionDataCellSet=cellsetModule.createCellSet(queryModule.select(RegQuery));\r\n                   Log.Info('CellSet'+RegionDataCellSet)\r\n                   var RegionlLevels=RegionDataCellSet.row(0).cell(RegionDataCellSet.measureColumnIndex('Region Level'));\r\n                   Log.Info(\"RegionlLevels: \"+RegionlLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Regvalue = findValueByKey(RegHigh,RegionlLevels );\r\n   \r\n                   var regvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Region].[Planning Region] ) on row, ({Measure.[Stat Region Members]}) on column;'))\r\n                   if(regvaluecellset.rowCount>0){\r\n                   \r\n                   var RegionStat = 'createmember ([Region].[Stat Region] = {, Measure.[Stat Region Members]}, [Region].[Stat Region$DisplayName]={Measure.[Stat Region Members Display Name],}, [Region].[Stat Region Group] = {,Measure.[Stat Region Group Members]},[Region].[Stat Region Group$DisplayName]={Measure.[Stat Region Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Region].[Planning Region]);';\r\n                   var RegionStatData = queryModule.select(RegionStat)\r\n               }\r\n                   \r\n                   \r\n                   const PnLHigh = [\r\n                   { name: 'PnL' },\r\n                   { name: 'Planning PnL',Member: 'Planning PnL Members'  },\r\n                   { name: 'PnL L1', Member: 'PnL L1 Members' },\r\n                   { name: 'PnL L2', Member: 'PnL L2 Members' },\r\n                   { name: 'PnL L3', Member: 'PnL L3 Members' },\r\n                   { name: 'PnL L4', Member: 'PnL L4 Members' },\r\n                   { name: 'All PnL', Member: 'All PnL Members' },\r\n                               ]\r\n              \r\n                   var PnLQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[PnL Level]}) on column;';\r\n                   var PnLDataCellSet=cellsetModule.createCellSet(queryModule.select(PnLQuery));\r\n                   Log.Info('CellSet'+PnLDataCellSet)\r\n                   var PnLLevels=PnLDataCellSet.row(0).cell(PnLDataCellSet.measureColumnIndex('PnL Level'));\r\n                   Log.Info(\"PnLLevels: \"+PnLLevels);\r\n                   \r\n                   \r\n                   \r\n                   const PnLvalue = findValueByKey(PnLHigh,PnLLevels );\r\n                   var PnLvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [PnL].[Planning PnL] ) on row, ({Measure.[Stat PnL Members]}) on column;'))\r\n                   if(PnLvaluecellset.rowCount>0){\r\n                   var PnLStat = 'createmember ([PnL].[Stat PnL] = {, Measure.[Stat PnL Members]},[PnL].[Stat PnL$DisplayName]={Measure.[Stat PnL Members Display Name],}, [PnL].[Stat PnL Group] = {,Measure.[Stat PnL Group Members]},[PnL].[Stat PnL Group$DisplayName]={Measure.[Stat PnL Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [PnL].[Planning PnL]);';\r\n                   var PnLStatData = queryModule.select(PnLStat)\r\n               }\r\n                   \r\n                   \r\n                   \r\n                   const DeDHigh = [\r\n                   { name: 'Demand Domain' },\r\n                   { name: 'Planning Demand Domain', Member: 'Planning Demand Domain Members'},\r\n                   { name: 'Demand Domain L1', Member: 'Demand Domain L1 Members' },\r\n                   { name: 'Demand Domain L2', Member: 'Demand Domain L2 Members' },\r\n                   { name: 'Demand Domain L3', Member: 'Demand Domain L3 Members' },\r\n                   { name: 'Demand Domain L4', Member: 'Demand Domain L4 Members' },\r\n                   { name: 'All Demand Domain', Member: 'All Demand Domain Members' },\r\n                   {name: 'Transition Demand Domain', Member: 'Transition Demand Domain Members'}\r\n                               ]\r\n                               \r\n                               \r\n                   var DemandDomainQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Demand Domain Level]}) on column;';\r\n                   var DemandDomainQueryDataCellSet=cellsetModule.createCellSet(queryModule.select(DemandDomainQuery));\r\n                   Log.Info('CellSet'+DemandDomainQueryDataCellSet)\r\n                   var DemandDomainLevels=DemandDomainQueryDataCellSet.row(0).cell(DemandDomainQueryDataCellSet.measureColumnIndex('Demand Domain Level'));\r\n                   Log.Info(\"DemandDomainLevels: \"+DemandDomainLevels);\r\n                   \r\n                   \r\n                   \r\n                   const DemandDomainvalue = findValueByKey(DeDHigh,DemandDomainLevels );\r\n                   var DDvalCellset=cellsetModule.createCellSet(queryModule.select('Select ([Demand Domain].[Planning Demand Domain] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Demand Domain Members]}) on column;'))\r\n                   if(DDvalCellset.rowCount>0){\r\n                   var DemandDomainStat = 'createmember ([Demand Domain].[Stat Demand Domain] = {, Measure.[Stat Demand Domain Members]},[Demand Domain].[Stat Demand Domain$DisplayName]={Measure.[Stat Demand Domain Members Display Name],}, [Demand Domain].[Stat Demand Domain Group] = {,Measure.[Stat Demand Domain Group Members]},[Demand Domain].[Stat Demand Domain Group$DisplayName]={Measure.[Stat Demand Domain Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Demand Domain].[Planning Demand Domain]);';\r\n                   queryModule.select(DemandDomainStat)\r\n               }\r\n   \r\n                   \r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n                   \r\n                   var RunstatactualMW = 'exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"), (DataTransferMode, \"csv\")};'\r\n                   var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n                   if(MW){\r\n                        queryModule.select(RunstatactualMW)\r\n                        Log.Info(\"Create Stat Actual exec medium weight call: \" + RunstatactualMW)\r\n                   }\r\n                   else {\r\n                        queryModule.select(RunStatActual)\r\n                        Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n                   }     \r\n\t\t\t\t   if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t   var PostProcessPL = 'exec procedure o9DP014PostprocessPLScope {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+ForecastIterationType+'\"};'\r\n\t\t\t\t    queryModule.select(PostProcessPL)\r\n\t\t\t\t   }\r\n\t\t\t\t   \t\t\t\t   \r\n                   var Setupstatparameter = 'exec procedure o9DP0160SetupStatParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+ForecastIterationType+'\", \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n                    queryModule.select(Setupstatparameter)\r\n                   Log.Info(\"Setup Stat Parmeters :\" + Setupstatparameter)\r\n                   \r\n                   var Setupcmlparameter = 'exec procedure o9DP0167SetupCMLParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n\t\t\t\t   queryModule.select(Setupcmlparameter)\r\n\r\n                   Log.Info(\"Setup CML Parmeters :\" + Setupcmlparameter)\r\n                   \r\n\t\t\t\t   var lastsixmonthactual = 'exec procedure o9DP0103PopulateStatActualL6M {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\"};';\r\n\t\t\t\t   queryModule.select(lastsixmonthactual)\r\n\r\n                   Log.Info(\"Stat Actual L6M :\" + lastsixmonthactual)\r\n                   \r\n                   var AlgoParamAssoc='exec procedure o9DP013PopulateAlgoParamAssociation {\"VersionName\": [\"'+VersionName+'\"]};'\r\n                   queryModule.select(AlgoParamAssoc)\r\n\t\t\t\t   Log.Info(\"Procedure to populate algo association :\" + AlgoParamAssoc)\r\n\r\n                   var StatParams= 'exec procedure o9DP012PopulateStatDefaults {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   queryModule.select(StatParams)\r\n\t\t\t\t   Log.Info(\"Procedure to populate Stat Params :\" + StatParams)\r\n\r\n\t\t\t\t   \r\n                   var SetupRules = 'exec procedure o9DP0053PopulatePlannerRule {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   var SetupRulesData = queryModule.select(SetupRules)\r\n                   Log.Info(\"Procedure to populate Stat Rules :\" + SetupRulesData)\r\n\r\n                   \r\n               return parsedParams;\r\n               }\r\n   \r\n   \r\n   return {\r\n       CreateStatData:CreateStatData\r\n       \r\n   }\r\n   \r\n   });",
    "Code": "define('o9.DemandPlanning.CreateStatMember', ['o9/data/query', 'o9/data/cellset'], function () {  \r\n    \r\n    \r\n    function findValueByKey(array, key) {\r\n       const item = array.find(item => item.name === key);\r\n       return item ? item.Member : undefined;\r\n       }\r\n       \r\n   var CreateStatData = function(o9Params){ \r\n                   var queryModule = require('o9/data/query');\r\n                   var cellsetModule = require('o9/data/cellset');\r\n                   var parsedParams = JSON.parse(o9Params);\r\n                   var VersionName = parsedParams.VersionName;\r\n                   var ForecastIteration = parsedParams.ForecastIteration;\r\n                   var ForecastIterationType = parsedParams.ForecastIterationType\r\n                   var MW=parsedParams.MediumWeight\r\n                   Log.Info(\"ForecastIterationType: \"+ForecastIterationType);\r\n                  var createmember = 'exec procedure o9DP006CreateStatMeasures{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration+'\",\"MediumWeight\":'+MW+'};'\r\n                  Log.Info(\"Parameterized Stat Member procedure :\"+createmember)\r\n                  var creatememberData = queryModule.select(createmember)\r\n                  Log.Info(\"Parameterized Create Stat Member procedure :\"+creatememberData)\r\n\r\n\t\t\t\t  \r\n\t\t\t\r\n\t\t\t\t  \r\n\t\t\t\t  if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t  Log.Info(\"Passed Iteration is FI PL \")\r\n\t\t\t\t  var Preprocess = 'exec procedure o9DP013PreprocessPLScope{\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+ForecastIterationType+'\"};'\r\n\t\t\t\t  Log.Info(\"PreprocessForPL :\"+Preprocess)\r\n\t\t\t\t  var PreprocessData = queryModule.select(Preprocess)\r\n                  }\r\n\r\n\t\t\t\t  \r\n                   const ItemHigh = [\r\n                   {name: 'Item', level: 1},\r\n                   {name: 'Reporting Item', Member: 'Reporting Item Members'},\r\n                   {name: 'Planning Item', Member: 'Planning Item Members'},\r\n                   {name: 'L1', Member: 'L1 Members'},\r\n                   {name: 'L2', Member: 'L2 Members'},\r\n                   {name: 'L3', Member: 'L3 Members'},\r\n                   {name: 'L4', Member: 'L4 Members'},\r\n                   {name: 'L5', Member: 'L5 Members'},\r\n                   {name: 'L6', Member: 'L6 Members'},\r\n                   {name: 'All Item', Member: 'All Item Members'},\r\n                   {name: 'Transition Item', Member: 'Transition Item Members'}\r\n                   ]\r\n                   \r\n                   \r\n                   var ItemQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Item Level]}) on column;';\r\n                   var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemQuery));\r\n                   Log.Info('CellSet'+ItemDataCellSet)\r\n                   var ItemLevels=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Level'));\r\n                   Log.Info(\"ItemLevels: \"+ItemLevels);\r\n                   \r\n                   \r\n                   \r\n                   const itemvalue = findValueByKey(ItemHigh,ItemLevels );\r\n   \r\n                   var ItemValuecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item] ) on row, ({Measure.[Stat Item Members]}) on column;'))\r\n                   if(ItemValuecellset.rowCount>0){\r\n                   \r\n                   var ItemStat = 'createmember ([Item].[Stat Item] = {, Measure.[Stat Item Members]}, [Item].[Stat Item$DisplayName]={Measure.[Stat Item Members Display Name],}, [Item].[Segmentation LOB] = {,Measure.[Segmentation LOB Members]},[Item].[Segmentation LOB$DisplayName]={Measure.[Segmentation LOB Members Display Name],}, [Item].[Stat Item Group] = {,Measure.[Stat Item Group Members]},[Item].[Stat Item Group$DisplayName]={Measure.[Stat Item Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Item].[Planning Item]);';\r\n\t\t\t\t   var ItemStatData = queryModule.select(ItemStat)\r\n                   }\r\n                   \r\n                   const AccHigh = [\r\n                   { name: 'Account' },\r\n                   { name: 'Planning Account', Member: 'Planning Account Members' },\r\n                   { name: 'Account L1', Member: 'Account L1 Members' },\r\n                   { name: 'Account L2', Member: 'Account L2 Members' },\r\n                   { name: 'Account L3', Member: 'Account L3 Members' },\r\n                   { name: 'Account L4', Member: 'Account L4 Members' },\r\n                   { name: 'All Account', Member: 'All Account Members' },\r\n                               ]\r\n                               \r\n                   var AccountQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Account Level]}) on column;';\r\n                   var AccountDataCellSet=cellsetModule.createCellSet(queryModule.select(AccountQuery));\r\n                   Log.Info('CellSet'+AccountDataCellSet)\r\n                   var AccountLevels=AccountDataCellSet.row(0).cell(AccountDataCellSet.measureColumnIndex('Account Level'));\r\n                   Log.Info(\"AccountLevels: \"+AccountLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Accountvalue = findValueByKey(AccHigh,AccountLevels );\r\n   \r\n   \r\n                   var accountvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Account].[Planning Account] ) on row, ({Measure.[Stat Account Members]}) on column;'))\r\n                   if(accountvaluecellset.rowCount>0){\r\n                   \r\n                   var AccountStat = 'createmember ([Account].[Stat Account] = {, Measure.[Stat Account Members]},[Account].[Stat Account$DisplayName]={Measure.[Stat Account Members Display Name],}, [Account].[Stat Account Group] = {,Measure.[Stat Account Group Members]},[Account].[Stat Account Group$DisplayName]={Measure.[Stat Account Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Account].[Planning Account]);';\r\n                   var AccountStatData = queryModule.select(AccountStat)\r\n                   }\r\n   \r\n                   const LocHigh = [\r\n                   { name: 'Location Type', Member: 'Location Type Members' },\r\n                   { name: 'Location', Member: 'Location Members'},\r\n                   { name: 'Planning Location', Member: 'Planning Location Members'},\r\n                   { name: 'Reporting Location', Member: 'Reporting Location Members' },\r\n                   { name: 'Location Region', Member: 'Location Region Members' },\r\n                   { name: 'Location Country', Member: 'Location Country Members' },\r\n                   { name: 'All Location', Member: 'All Location Members' }\r\n                                   ]\r\n                               \r\n                   \r\n                   var LocationQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Location Level]}) on column;';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationDataCellSet=cellsetModule.createCellSet(queryModule.select(LocationQuery));\r\n                   Log.Info('CellSet'+LocationDataCellSet)\r\n                   var LocationLevels=LocationDataCellSet.row(0).cell(LocationDataCellSet.measureColumnIndex('Location Level'));\r\n                   Log.Info(\"LocationLevels: \"+LocationLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Locationvalue = findValueByKey(LocHigh,LocationLevels );\r\n   \r\n                   var Locationvaluecellset= cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Location].[Location] ) on row, ({Measure.[Stat Location Members]}) on column;'))\r\n                   if(Locationvaluecellset.rowCount>0){\r\n                   \r\n                   var LocationStat ='createmember ([Location].[Stat Location] = {, Measure.[Stat Location Members]},[Location].[Stat Location$DisplayName]={Measure.[Stat Location Members Display Name],}, [Location].[All Location] = {,Measure.[All Location Members]},[Location].[All Location$DisplayName]={Measure.[All Location Members Display Name],}, [Location].[Stat Location Group] = {,Measure.[Stat Location Group Members]},[Location].[Stat Location Group$DisplayName]={Measure.[Stat Location Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Location].[Location]);';\r\n                   Log.Info(LocationQuery)\r\n                   var LocationStatData = queryModule.select(LocationStat)\t\r\n               }\r\n                   const ChanHigh = [\r\n                   { name: 'Channel' },\r\n                   { name: 'Planning Channel', Member: 'Planning Channel Members'  },\r\n                   { name: 'Channel L1', Member: 'Channel L1 Members' },\r\n                   { name: 'Channel L2', Member: 'Channel L2 Members' },\r\n                   { name: 'All Channel', Member: 'All Channel Members' }\r\n                               ]\r\n                               \r\n                   var ChanQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Channel Level]}) on column;';\r\n                   var ChannelDataCellSet=cellsetModule.createCellSet(queryModule.select(ChanQuery));\r\n                   Log.Info('CellSet'+ChannelDataCellSet)\r\n                   var ChannelLevels=ChannelDataCellSet.row(0).cell(ChannelDataCellSet.measureColumnIndex('Channel Level'));\r\n                   Log.Info(\"ChannelLevels: \"+ChannelLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Chanvalue = findValueByKey(ChanHigh,ChannelLevels );\r\n   \r\n                   var chanvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Channel].[Planning Channel] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Channel Members]}) on column;'))\r\n                   if(chanvaluecellset.rowCount>0){\r\n                   var ChannelStat = 'createmember ([Channel].[Stat Channel] = {, Measure.[Stat Channel Members]},[Channel].[Stat Channel$DisplayName]={Measure.[Stat Channel Members Display Name],}, [Channel].[Stat Channel Group] = {,Measure.[Stat Channel Group Members]},[Channel].[Stat Channel Group$DisplayName]={Measure.[Stat Channel Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Channel].[Planning Channel]);';\r\n                   var ChannelStatData = queryModule.select(ChannelStat)\r\n   \r\n                   }\r\n                   \r\n                   \r\n                   \r\n                   const RegHigh = [\r\n                   { name: 'Region' },\r\n                   { name: 'Planning Region', Member:'Planning Region Members'  },\r\n                   { name: 'Region L1', Member: 'Region L1 Members' },\r\n                   { name: 'Region L2', Member: 'Region L2 Members' },\r\n                   { name: 'Region L3', Member: 'Region L3 Members' },\r\n                   { name: 'Region L4', Member: 'Region L4 Members' },\r\n                   { name: 'All Region', Member: 'All Region Members' },\r\n                           ]\r\n                   \r\n                   \r\n                   var RegQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Region Level]}) on column;';\r\n                   var RegionDataCellSet=cellsetModule.createCellSet(queryModule.select(RegQuery));\r\n                   Log.Info('CellSet'+RegionDataCellSet)\r\n                   var RegionlLevels=RegionDataCellSet.row(0).cell(RegionDataCellSet.measureColumnIndex('Region Level'));\r\n                   Log.Info(\"RegionlLevels: \"+RegionlLevels);\r\n                   \r\n                   \r\n                   \r\n                   const Regvalue = findValueByKey(RegHigh,RegionlLevels );\r\n   \r\n                   var regvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [Region].[Planning Region] ) on row, ({Measure.[Stat Region Members]}) on column;'))\r\n                   if(regvaluecellset.rowCount>0){\r\n                   \r\n                   var RegionStat = 'createmember ([Region].[Stat Region] = {, Measure.[Stat Region Members]}, [Region].[Stat Region$DisplayName]={Measure.[Stat Region Members Display Name],}, [Region].[Stat Region Group] = {,Measure.[Stat Region Group Members]},[Region].[Stat Region Group$DisplayName]={Measure.[Stat Region Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Region].[Planning Region]);';\r\n                   var RegionStatData = queryModule.select(RegionStat)\r\n               }\r\n                   \r\n                   \r\n                   const PnLHigh = [\r\n                   { name: 'PnL' },\r\n                   { name: 'Planning PnL',Member: 'Planning PnL Members'  },\r\n                   { name: 'PnL L1', Member: 'PnL L1 Members' },\r\n                   { name: 'PnL L2', Member: 'PnL L2 Members' },\r\n                   { name: 'PnL L3', Member: 'PnL L3 Members' },\r\n                   { name: 'PnL L4', Member: 'PnL L4 Members' },\r\n                   { name: 'All PnL', Member: 'All PnL Members' },\r\n                               ]\r\n              \r\n                   var PnLQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[PnL Level]}) on column;';\r\n                   var PnLDataCellSet=cellsetModule.createCellSet(queryModule.select(PnLQuery));\r\n                   Log.Info('CellSet'+PnLDataCellSet)\r\n                   var PnLLevels=PnLDataCellSet.row(0).cell(PnLDataCellSet.measureColumnIndex('PnL Level'));\r\n                   Log.Info(\"PnLLevels: \"+PnLLevels);\r\n                   \r\n                   \r\n                   \r\n                   const PnLvalue = findValueByKey(PnLHigh,PnLLevels );\r\n                   var PnLvaluecellset=cellsetModule.createCellSet(queryModule.select('Select ([Version].[Version Name].['+VersionName+']* [PnL].[Planning PnL] ) on row, ({Measure.[Stat PnL Members]}) on column;'))\r\n                   if(PnLvaluecellset.rowCount>0){\r\n                   var PnLStat = 'createmember ([PnL].[Stat PnL] = {, Measure.[Stat PnL Members]},[PnL].[Stat PnL$DisplayName]={Measure.[Stat PnL Members Display Name],}, [PnL].[Stat PnL Group] = {,Measure.[Stat PnL Group Members]},[PnL].[Stat PnL Group$DisplayName]={Measure.[Stat PnL Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [PnL].[Planning PnL]);';\r\n                   var PnLStatData = queryModule.select(PnLStat)\r\n               }\r\n                   \r\n                   \r\n                   \r\n                   const DeDHigh = [\r\n                   { name: 'Demand Domain' },\r\n                   { name: 'Planning Demand Domain', Member: 'Planning Demand Domain Members'},\r\n                   { name: 'Demand Domain L1', Member: 'Demand Domain L1 Members' },\r\n                   { name: 'Demand Domain L2', Member: 'Demand Domain L2 Members' },\r\n                   { name: 'Demand Domain L3', Member: 'Demand Domain L3 Members' },\r\n                   { name: 'Demand Domain L4', Member: 'Demand Domain L4 Members' },\r\n                   { name: 'All Demand Domain', Member: 'All Demand Domain Members' },\r\n                   {name: 'Transition Demand Domain', Member: 'Transition Demand Domain Members'}\r\n                               ]\r\n                               \r\n                               \r\n                   var DemandDomainQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration].['+ForecastIteration+'] ) on row, ({Measure.[Demand Domain Level]}) on column;';\r\n                   var DemandDomainQueryDataCellSet=cellsetModule.createCellSet(queryModule.select(DemandDomainQuery));\r\n                   Log.Info('CellSet'+DemandDomainQueryDataCellSet)\r\n                   var DemandDomainLevels=DemandDomainQueryDataCellSet.row(0).cell(DemandDomainQueryDataCellSet.measureColumnIndex('Demand Domain Level'));\r\n                   Log.Info(\"DemandDomainLevels: \"+DemandDomainLevels);\r\n                   \r\n                   \r\n                   \r\n                   const DemandDomainvalue = findValueByKey(DeDHigh,DemandDomainLevels );\r\n                   var DDvalCellset=cellsetModule.createCellSet(queryModule.select('Select ([Demand Domain].[Planning Demand Domain] * [Version].[Version Name].['+VersionName+']) on row, ({Measure.[Stat Demand Domain Members]}) on column;'))\r\n                   if(DDvalCellset.rowCount>0){\r\n                   var DemandDomainStat = 'createmember ([Demand Domain].[Stat Demand Domain] = {, Measure.[Stat Demand Domain Members]},[Demand Domain].[Stat Demand Domain$DisplayName]={Measure.[Stat Demand Domain Members Display Name],}, [Demand Domain].[Stat Demand Domain Group] = {,Measure.[Stat Demand Domain Group Members]},[Demand Domain].[Stat Demand Domain Group$DisplayName]={Measure.[Stat Demand Domain Group Members Display Name],}) using scope ([Version].[Version Name].['+VersionName+'] * [Demand Domain].[Planning Demand Domain]);';\r\n                   queryModule.select(DemandDomainStat)\r\n               }\r\n   \r\n                   \r\n                var NullActuals='Scope: ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"})) ;Measure.[Stat Actual]=null;end scope;'\r\n                queryModule.select(NullActuals)\r\n                   \r\n                   var RunstatactualMW = 'exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(ExecutionMode, \"MediumWeight\"), (DataTransferMode, \"csv\")};'\r\n                   var RunStatActual= ' exec plugin instance [DP063GenerateStatActual] for measures {Measure.[Stat Actual]} using scope ( [Channel].[Stat Channel] * [Demand Domain].[Stat Demand Domain] * [Version].[Version Name].['+VersionName+'] * [Region].[Stat Region] * [Account].[Stat Account] * [PnL].[Stat PnL] * [Location].[Stat Location] * [Time].[Partial Week] * [Item].[Stat Item] * &AllForecastIterations.filter(#.Name in{\"'+ForecastIteration+'\"}) ) using arguments {(\"IncludeNullRows\", False),(\"SparkProfileConfig\", \"unsliced_high\")};'\r\n                   if(MW){\r\n                        queryModule.select(RunstatactualMW)\r\n                        Log.Info(\"Create Stat Actual exec medium weight call: \" + RunstatactualMW)\r\n                   }\r\n                   else {\r\n                        queryModule.select(RunStatActual)\r\n                        Log.Info(\"Create Stat Actual exec cluster mode call: \"+RunStatActual)\r\n                   }     \r\n\t\t\t\t   if(ForecastIteration == 'FI-PL'){\r\n\t\t\t\t   var PostProcessPL = 'exec procedure o9DP014PostprocessPLScope {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+ForecastIterationType+'\"};'\r\n\t\t\t\t    queryModule.select(PostProcessPL)\r\n\t\t\t\t   }\r\n\t\t\t\t   \t\t\t\t   \r\n                   var Setupstatparameter = 'exec procedure o9DP0160SetupStatParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIterationType\" : \"'+ForecastIterationType+'\", \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n                    queryModule.select(Setupstatparameter)\r\n                   Log.Info(\"Setup Stat Parmeters :\" + Setupstatparameter)\r\n                   \r\n                   var Setupcmlparameter = 'exec procedure o9DP0167SetupCMLParameters {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\",\"MediumWeight\":'+MW+'};';\r\n\t\t\t\t   queryModule.select(Setupcmlparameter)\r\n\r\n                   Log.Info(\"Setup CML Parmeters :\" + Setupcmlparameter)\r\n                   \r\n\t\t\t\t   var lastsixmonthactual = 'exec procedure o9DP0103PopulateStatActualL6M {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : \"'+ForecastIteration +'\"};';\r\n\t\t\t\t   queryModule.select(lastsixmonthactual)\r\n\r\n                   Log.Info(\"Stat Actual L6M :\" + lastsixmonthactual)\r\n                   \r\n                   var AlgoParamAssoc='exec procedure o9DP013PopulateAlgoParamAssociation {\"VersionName\": [\"'+VersionName+'\"]};'\r\n                   queryModule.select(AlgoParamAssoc)\r\n\t\t\t\t   Log.Info(\"Procedure to populate algo association :\" + AlgoParamAssoc)\r\n\r\n                   var StatParams= 'exec procedure o9DP012PopulateStatDefaults {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   queryModule.select(StatParams)\r\n\t\t\t\t   Log.Info(\"Procedure to populate Stat Params :\" + StatParams)\r\n\r\n\t\t\t\t   \r\n                   var SetupRules = 'exec procedure o9DP0053PopulatePlannerRule {\"VersionName\" : [\"'+VersionName+'\"], \"ForecastIteration\" : [\"'+ForecastIteration+'\"]};'\r\n                   var SetupRulesData = queryModule.select(SetupRules)\r\n                   Log.Info(\"Procedure to populate Stat Rules :\" + SetupRulesData)\r\n\r\n                   \r\n               return parsedParams;\r\n               }\r\n   \r\n   \r\n   return {\r\n       CreateStatData:CreateStatData\r\n       \r\n   }\r\n   \r\n   });",
    "ModuleName": "o9.DemandPlanning.CreateStatMember",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0b23befc-0243-c268-6d84-1250f3b402bd",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212983,
    "Description": "Populate Existing PnL parameter",
    "Documentation": "define('o9.DemandPlanning.ExistingPnLParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingPnLString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT PnL\");\r\n\t\tLog.Info(\"Check Iteration Type PnL: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var ExistingShiftPatternsPnLQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsPnLDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsPnLQuery));\r\n        Log.Info(ExistingShiftPatternsPnLDataCellSet);\r\n        var ExistingShiftPatternsPnLList = ExistingShiftPatternsPnLDataCellSet.attributeMembers(\"PnL\",PnLScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsPnLList : ' + ExistingShiftPatternsPnLList);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsPnLQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsPnLDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsPnLQuery));\r\n        Log.Info(ExistingShiftPatternsPnLDataCellSet);\r\n        var ExistingShiftPatternsPnLList = ExistingShiftPatternsPnLDataCellSet.attributeMembers(\"PnL\",PnLScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsPnLList : ' + ExistingShiftPatternsPnLList);\r\n\t\t\r\n\t\t}\r\n\t\t\r\n        var ExistingShiftPatternsPnL = ExistingShiftPatternsPnLList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsPnL = ExistingShiftPatternsPnL.map(i => '[' + i);\r\n        ExistingShiftPatternsPnL = ExistingShiftPatternsPnL.map(i => i + ']');\r\n        Log.Info(\"All PnL: \"+ExistingShiftPatternsPnL);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsPnL : ' + ExistingShiftPatternsPnL);\r\n        if (ExistingShiftPatternsPnL.length === 0){\r\n            ExistingShiftPatternsPnL = \"[]\";\r\n        }\r\n        parsedParams['ExistingPnLString'] = ExistingShiftPatternsPnL.toString();\r\n        Log.Info(\"ExistingPnLString: \" + ExistingShiftPatternsPnL.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingPnLString: ExistingPnLString,\r\n    };\r\n    \r\n});",
    "Code": "define('o9.DemandPlanning.ExistingPnLParameter', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n\t\r\n\tvar ExistingPnLString = function (o9Params) {\r\n        // Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType = parsedParams.ForecastIterationType;\r\n        Log.Info(\"STMT PnL\");\r\n\t\tLog.Info(\"Check Iteration Type PnL: \" +IterationType);\r\n\t\t\r\n\t\tvar AccountScope = parsedParams.AccountScope;\r\n        Log.Info(\"STMT Account1:\" +AccountScope);\r\n        var ItemScope = parsedParams.ItemScope;\r\n        var LocationScope = parsedParams.LocationScope;\r\n        var ChannelScope = parsedParams.ChannelScope;\r\n        var PnLScope = parsedParams.PnLScope;\r\n        var DemandDomainScope = parsedParams.DemandDomainScope;\r\n        var RegionScope = parsedParams.RegionScope;\r\n\r\n\r\n        Log.Info(\"Version Name: \" + VersionName);\r\n\t\t\r\n\t\tInputStream = IterationType.split('_');\r\n        InputStream = InputStream[1];\r\n\t\tLog.Info('Input Stream :' +InputStream)\r\n\t\t\r\n\t\tif (InputStream=='Actual') {\r\n\r\n        var ExistingShiftPatternsPnLQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.[Assortment Stat]}) on column include nulls).filter(Measure.[Assortment Stat]>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsPnLDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsPnLQuery));\r\n        Log.Info(ExistingShiftPatternsPnLDataCellSet);\r\n        var ExistingShiftPatternsPnLList = ExistingShiftPatternsPnLDataCellSet.attributeMembers(\"PnL\",PnLScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsPnLList : ' + ExistingShiftPatternsPnLList);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\telse {\r\n\t\tvar ExistingShiftPatternsPnLQuery = '(Select ( [Region].[Planning Region].relatedmembers(['+RegionScope+']) * [Item].[Planning Item].relatedmembers(['+ItemScope+']) * [PnL].[Planning PnL].relatedmembers(['+PnLScope+']) * [Location].[Location].relatedmembers(['+LocationScope+']) * [Demand Domain].[Planning Demand Domain].relatedmembers(['+DemandDomainScope+']) * [Account].[Planning Account].relatedmembers(['+AccountScope+']) * [Channel].[Planning Channel].relatedmembers(['+ChannelScope+']) *&CWVAndScenarios.['+VersionName+'] * &AllForecastIterationTypes.['+IterationType+']) on row, ({Measure.[Forecast Iteration Selection],Measure.['+InputStream+']}) on column include nulls).filter(Measure.['+InputStream+']>0 && (isnull(Measure.[Forecast Iteration Selection]) || Measure.[Forecast Iteration Selection]==\"FI-PL\")) ;'\r\n        var ExistingShiftPatternsPnLDataCellSet = cellsetModule.createCellSet(queryModule.select(ExistingShiftPatternsPnLQuery));\r\n        Log.Info(ExistingShiftPatternsPnLDataCellSet);\r\n        var ExistingShiftPatternsPnLList = ExistingShiftPatternsPnLDataCellSet.attributeMembers(\"PnL\",PnLScope);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsPnLList : ' + ExistingShiftPatternsPnLList);\r\n\t\t\r\n\t\t}\r\n\t\t\r\n        var ExistingShiftPatternsPnL = ExistingShiftPatternsPnLList.map(function (item) {\r\n            return item['Name'];\r\n        });\r\n\r\n        ExistingShiftPatternsPnL = ExistingShiftPatternsPnL.map(i => '[' + i);\r\n        ExistingShiftPatternsPnL = ExistingShiftPatternsPnL.map(i => i + ']');\r\n        Log.Info(\"All PnL: \"+ExistingShiftPatternsPnL);\r\n        Log.Info('o9.DemandPlanning.ExistingItemString -> ExistingShiftPatternsPnL : ' + ExistingShiftPatternsPnL);\r\n        if (ExistingShiftPatternsPnL.length === 0){\r\n            ExistingShiftPatternsPnL = \"[]\";\r\n        }\r\n        parsedParams['ExistingPnLString'] = ExistingShiftPatternsPnL.toString();\r\n        Log.Info(\"ExistingPnLString: \" + ExistingShiftPatternsPnL.toString());\r\n\r\n        return parsedParams;\r\n\t};\r\n    return {\r\n        ExistingPnLString: ExistingPnLString,\r\n    };\r\n    \r\n});",
    "ModuleName": "o9.DemandPlanning.ExistingPnLParameter",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4cb8c423-57b8-b4a0-af8f-0734fa1f53b0",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212984,
    "Description": "To validate full scope",
    "Documentation": "define('o9.DemandPlanning.FullScopeValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var ScopeValidation = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Version Name: \" +VersionName);\r\n\t\tLog.Info(\"Check Iteration Type Item: \" +IterationType);\r\n\r\n\t\tvar ScopeIntersection = 'Select ([Version].[Version Name].['+VersionName +'] * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] * [Region].[Planning Region] * [Location].[Location] * [Channel].[Planning Channel] * [PnL].[Planning PnL] * [Item].[Planning Item] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] ) on row, ({Measure.[Forecast Iteration Selection]}) on column;';\r\n\t\t\r\n\t\tvar AssortmentStat = 'Select ([Version].[Version Name].['+VersionName +'] * [Region].[Planning Region] * [Location].[Location] * [Channel].[Planning Channel] * [PnL].[Planning PnL] * [Item].[Planning Item] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] ) on row, ({Measure.[Assortment Stat]}) on column;'\r\n\t\t\r\n\t\t// Execute both queries and compare the results\r\n        var CountofScopeIntersection = cellsetModule.createCellSet(queryModule.select(ScopeIntersection));\r\n        var CountofAssortmentStat = cellsetModule.createCellSet(queryModule.select(AssortmentStat));\r\n\t\t\r\n\t\tif (CountofScopeIntersection.rowCount == CountofAssortmentStat.rowCount){\r\n\t\tRuleOutputToUI = \r\n\t\t{\r\n\t\tStatus: 'Error',\r\n\t\tMessage: 'Full scope is already selected for selected Iteration Type'\r\n\t\t\r\n\t\t};\r\n\t\t}\r\n\r\n\t};\t\r\nreturn {\r\n        ScopeValidation : ScopeValidation\r\n    };\r\n});",
    "Code": "define('o9.DemandPlanning.FullScopeValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var ScopeValidation = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var IterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Version Name: \" +VersionName);\r\n\t\tLog.Info(\"Check Iteration Type Item: \" +IterationType);\r\n\r\n\t\tvar ScopeIntersection = 'Select ([Version].[Version Name].['+VersionName +'] * [Forecast Iteration].[Forecast Iteration Type].['+IterationType+'] * [Region].[Planning Region] * [Location].[Location] * [Channel].[Planning Channel] * [PnL].[Planning PnL] * [Item].[Planning Item] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] ) on row, ({Measure.[Forecast Iteration Selection]}) on column;';\r\n\t\t\r\n\t\tvar AssortmentStat = 'Select ([Version].[Version Name].['+VersionName +'] * [Region].[Planning Region] * [Location].[Location] * [Channel].[Planning Channel] * [PnL].[Planning PnL] * [Item].[Planning Item] * [Demand Domain].[Planning Demand Domain] * [Account].[Planning Account] ) on row, ({Measure.[Assortment Stat]}) on column;'\r\n\t\t\r\n\t\t// Execute both queries and compare the results\r\n        var CountofScopeIntersection = cellsetModule.createCellSet(queryModule.select(ScopeIntersection));\r\n        var CountofAssortmentStat = cellsetModule.createCellSet(queryModule.select(AssortmentStat));\r\n\t\t\r\n\t\tif (CountofScopeIntersection.rowCount == CountofAssortmentStat.rowCount){\r\n\t\tRuleOutputToUI = \r\n\t\t{\r\n\t\tStatus: 'Error',\r\n\t\tMessage: 'Full scope is already selected for selected Iteration Type'\r\n\t\t\r\n\t\t};\r\n\t\t}\r\n\r\n\t};\t\r\nreturn {\r\n        ScopeValidation : ScopeValidation\r\n    };\r\n});",
    "ModuleName": "o9.DemandPlanning.FullScopeValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "53b36b7f-9119-6979-b322-ff0ddd8eca80",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212985,
    "Description": "Lower then the levels",
    "Documentation": "define('o9.DemandPlanning.LowerLevels', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n\r\n\tvar findLowestInHierarchy = function(itemScope, itemGroup, hierarchyItems) {\r\n    Log.Info(\"In function: findLowestInHierarchy\");\r\n    Log.Info(\"Item Scope: \" + itemScope + \", Item Group: \" + itemGroup);\r\n    \r\n    // Find items matching itemScope or itemGroup\r\n    const matchingItems = hierarchyItems.filter(item => item.name === itemScope || item.name === itemGroup);\r\n    \r\n    if (matchingItems.length === 0) {\r\n        Log.Info(\"No matching items found.\");\r\n        return \"No matching items\";\r\n    }\r\n    \r\n    // Find the lowest level among the matched items\r\n    let lowestItem = matchingItems[0].name;\r\n    let lowestLevel = matchingItems[0].level;\r\n\r\n    matchingItems.forEach(item => {\r\n        if (item.level < lowestLevel) {\r\n            lowestLevel = item.level;\r\n            lowestItem = item.name;\r\n        }\r\n    });\r\n\r\n    Log.Info(\"Lowest Item: \" + lowestItem + \", Lowest Level: \" + lowestLevel);\r\n    \r\n    // Find all items that are at or below the lowest level\r\n    const lowerItemList = hierarchyItems.filter(item => item.level <= lowestLevel);\r\n    \r\n    // Format the output list\r\n    const formattedLowerItemList = lowerItemList.map(item => `[${item.name}]`).join(\", \");\r\n    \r\n    return formattedLowerItemList;\r\n};\r\n\r\n\t\r\n\r\n\r\n      var LowerItems = function (o9Params) {\r\n          //Parsing data from LS to the script\r\n          var queryModule = require('o9/data/query');\r\n          var cellsetModule = require('o9/data/cellset');\r\n          var parsedParams = JSON.parse(o9Params);\r\n  \r\n          var VersionName = parsedParams.VersionName;\r\n          var ForecastIterationType =parsedParams.ForecastIterationType;\r\n          \r\n          Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n          \r\n          const ItemHigh=[\r\n            {name: 'Planning Item', level:1},\r\n            {name: 'L1' , level:2},\r\n            {name: 'L2', level:3},\r\n            {name: 'L3', level:4},\r\n            {name: 'L4', level:5},\r\n            {name: 'L5', level:6},\r\n            {name: 'L6',level:7},\r\n            {name: 'All Item',level:8},\r\n              \r\n          ]\r\n  \r\n          var ItemScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Item Scope]}) on column;';\r\n          var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemScopeQuery));\r\n\t\t\r\n      \r\n          var ItemScope=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Scope'));\r\n\t\t  \r\n\t\t  var Itemgroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Item Group Filter]}) on column;';\r\n\t\t\tvar ItemgroupfilterCellset = cellsetModule.createCellSet(queryModule.select(Itemgroupfilter));\r\n\t\t\tvar ItemGroup=\"\"\r\n\t\t\t// Check if the ItemGroup value is null, and if so, return early\r\n\t\t\tif(ItemgroupfilterCellset.rowCount>0){\r\n\t\t\tItemGroup = ItemgroupfilterCellset.row(0).cell(ItemgroupfilterCellset.measureColumnIndex('Stat Item Group Filter'));}\r\n\t\t\telse {ItemGroup = \"All Item\"}\r\n\t\t\t\r\n          const LowerItems=findLowestInHierarchy(ItemScope,ItemGroup,ItemHigh);\r\n          Log.Info(\"Lower Items: \"+LowerItems);\r\n          parsedParams['Lower Items']=LowerItems;\r\n          \r\n          return parsedParams;\r\n      };\r\n      var LowerChannels = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const ChannelHigh=[\r\n            \r\n            {name: 'Planning Channel', level:2},\r\n            {name: 'Channel L1', level:3},\r\n            {name: 'Channel L2' , level:4},\r\n            {name: 'All Channel', level:5},\r\n            \r\n        ]\r\n\r\n        var ChannelScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Channel Scope]}) on column;';\r\n        var ChannelDataCellSet=cellsetModule.createCellSet(queryModule.select(ChannelScopeQuery));\r\n       \r\n        var ChannelScope=ChannelDataCellSet.row(0).cell(ChannelDataCellSet.measureColumnIndex('Channel Scope'));\r\n        Log.Info(\"ChannelScope: \"+ChannelScope);\r\n\t\tvar ChannelGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Channel Group Filter]}) on column;';\r\n\t\tvar ChannelGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(ChannelGroupfilter));\r\n\t\tvar ChannelGroup = \"\"\r\n\r\n\t\t// Check if the ChannelGroup value is null, and if so, return early\r\n\t\tif(ChannelGroupfilterCellset.rowCount > 0) {\r\n\t\tChannelGroup = ChannelGroupfilterCellset.row(0).cell(ChannelGroupfilterCellset.measureColumnIndex('Stat Channel Group Filter'));\r\n\t\t} else {\r\n\t\tChannelGroup = \"All Channel\";\r\n}\r\n\r\n\t\t\t\r\n        const LowerChannels=findLowestInHierarchy(ChannelGroup,ChannelScope,ChannelHigh);\r\n        Log.Info(\"Lower Channels: \"+LowerChannels);\r\n        parsedParams['Lower Channels']=LowerChannels;\r\n        \r\n        return parsedParams;\r\n    };\r\n    var LowerAccounts = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const AccountHigh=[\r\n            \r\n            {name: 'Planning Account', level:2},\r\n            {name: 'Account L1', level:3},\r\n            {name: 'Account L2' , level:4},\r\n            {name: 'Account L3', level:5},\r\n            {name: 'Account L4', level:6},\r\n            {name: 'All Account', level:7},\r\n            \r\n        ]\r\n\r\n        var AccountScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Account Scope]}) on column;';\r\n        var AccountDataCellSet=cellsetModule.createCellSet(queryModule.select(AccountScopeQuery));\r\n       \r\n        var AccountScope=AccountDataCellSet.row(0).cell(AccountDataCellSet.measureColumnIndex('Account Scope'));\r\n        Log.Info(\"AccountScope: \"+AccountScope);\r\n\t\t\r\n\t\tvar AccountGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Account Group Filter]}) on column;';\r\n\t\tvar AccountGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(AccountGroupfilter));\r\n\t\tvar AccountGroup = \"\"\r\n\r\n// Check if the AccountGroup value is null, and if so, return early\r\n\t\tif(AccountGroupfilterCellset.rowCount > 0) {\r\n\t\tAccountGroup = AccountGroupfilterCellset.row(0).cell(AccountGroupfilterCellset.measureColumnIndex('Stat Account Group Filter'));\r\n\t\t} else {\r\n\t\tAccountGroup = \"All Account\";\r\n\t\t\t}\r\n\r\n        const LowerAccounts=findLowestInHierarchy(AccountScope,AccountGroup,AccountHigh);\r\n        Log.Info(\"Lower Accounts: \"+LowerAccounts);\r\n        parsedParams['Lower Accounts']=LowerAccounts;\r\n        \r\n        return parsedParams;\r\n    };\r\n    var LowerRegions = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const RegionHigh=[\r\n            {name: 'Planning Region', level:2},\r\n            {name: 'Region L1', level:3},\r\n            {name: 'Region L2' , level:4},\r\n            {name: 'Region L3', level:5},\r\n            {name: 'Region L4', level:6},\r\n            {name: 'All Region', level:7},\r\n            \r\n        ]\r\n\r\n        var RegionScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Region Scope]}) on column;';\r\n        var RegionDataCellSet=cellsetModule.createCellSet(queryModule.select(RegionScopeQuery));\r\n       \r\n        var RegionScope=RegionDataCellSet.row(0).cell(RegionDataCellSet.measureColumnIndex('Region Scope'));\r\n        Log.Info(\"RegionScope: \"+RegionScope);\r\n\t\tvar RegionGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Region Group Filter]}) on column;';\r\n\t\tvar RegionGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(RegionGroupfilter));\r\n\t\tvar RegionGroup = \"\"\r\n\r\n\t\t// Check if the RegionGroup value is null, and if so, return early\r\n\t\tif(RegionGroupfilterCellset.rowCount > 0) {\r\n\t\tRegionGroup = RegionGroupfilterCellset.row(0).cell(RegionGroupfilterCellset.measureColumnIndex('Stat Region Group Filter'));\r\n\t\t} else {\r\n\t\tRegionGroup = \"All Region\";\r\n\t\t\t}\r\n\r\n        const LowerRegions=findLowestInHierarchy(RegionScope,RegionGroup,RegionHigh);\r\n        Log.Info(\"Lower Regions: \"+LowerRegions);\r\n        parsedParams['Lower Regions']=LowerRegions;\r\n        \r\n        return parsedParams;\r\n    };\r\n    var LowerLocations = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const LocationHigh=[\r\n            {name: 'Location Region', level:3},\r\n            {name: 'Location Country' , level:4},\r\n            {name: 'All Location', level:5}\r\n            \r\n        ]\r\n\r\n        var LocationScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Location Scope]}) on column;';\r\n        var LocationDataCellSet=cellsetModule.createCellSet(queryModule.select(LocationScopeQuery));\r\n       \r\n        var LocationScope=LocationDataCellSet.row(0).cell(LocationDataCellSet.measureColumnIndex('Location Scope'));\r\n        Log.Info(\"LocationScope: \"+LocationScope);\r\n        \r\n\t\tvar LocationGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Location Group Filter]}) on column;';\r\n\t\tvar LocationGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(LocationGroupfilter));\r\n\t\tvar LocationGroup = \"\"\r\n\r\n\t\t\t// Check if the LocationGroup value is null, and if so, return early\r\n\t\tif(LocationGroupfilterCellset.rowCount > 0) {\r\n\t\tLocationGroup = LocationGroupfilterCellset.row(0).cell(LocationGroupfilterCellset.measureColumnIndex('Stat Location Group Filter'));\r\n\t\t} else {\r\n\t\tLocationGroup = \"All Location\";\r\n\t\t}\r\n\r\n\t\tconst LowerLocations=findLowestInHierarchy(LocationScope,LocationGroup,LocationHigh);\r\n        Log.Info(\"Lower Locations: \"+LowerLocations);\r\n        parsedParams['Lower Locations']=LowerLocations;\r\n        \r\n        return parsedParams;\r\n    };  \r\n    var LowerPnLs = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const PnLHigh=[\r\n\r\n            {name: 'Planning PnL', level:2},\r\n            {name: 'PnL L1', level:3},\r\n            {name: 'PnL L2' , level:4},\r\n            {name: 'PnL L3', level:5},\r\n            {name: 'PnL L4', level:6},\r\n            {name: 'All PnL', level:7},\r\n            \r\n        ]\r\n\r\n        var PnLScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[PnL Scope]}) on column;';\r\n        var PnLDataCellSet=cellsetModule.createCellSet(queryModule.select(PnLScopeQuery));\r\n       \r\n        var PnLScope=PnLDataCellSet.row(0).cell(PnLDataCellSet.measureColumnIndex('PnL Scope'));\r\n        Log.Info(\"PnLScope: \"+PnLScope);\r\n\t\tvar PnLGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat PnL Group Filter]}) on column;';\r\n\t\tvar PnLGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(PnLGroupfilter));\r\n\t\tvar PnLGroup = \"\"\r\n\r\n\t\t// Check if the PnLGroup value is null, and if so, return early\r\n\t\tif(PnLGroupfilterCellset.rowCount > 0) {\r\n\t\tPnLGroup = PnLGroupfilterCellset.row(0).cell(PnLGroupfilterCellset.measureColumnIndex('Stat PnL Group Filter'));\r\n\t\t} else {\r\n\t\tPnLGroup = \"All PnL\";\r\n\t\t}\r\n\r\n        const LowerPnLs=findLowestInHierarchy(PnLScope,PnLGroup,PnLHigh);\r\n        Log.Info(\"Lower PnLs: \"+LowerPnLs);\r\n        parsedParams['Lower PnLs']=LowerPnLs;\r\n        \r\n        return parsedParams;\r\n    };  \r\n    \r\n    var LowerDemandDomains = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const DemandDomainHigh=[\r\n\r\n            {name: 'Planning Demand Domain', level:2},\r\n            {name: 'Demand Domain L1', level:3},\r\n            {name: 'Demand Domain L2' , level:4},\r\n            {name: 'Demand Domain L3', level:5},\r\n            {name: 'Demand Domain L4', level:6},\r\n            {name: 'All Demand Domain', level:7},\r\n            \r\n        ]\r\n\r\n        var DemandDomainScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Demand Domain Scope]}) on column;';\r\n        var DemandDomainDataCellSet=cellsetModule.createCellSet(queryModule.select(DemandDomainScopeQuery));\r\n       \r\n        var DemandDomainScope=DemandDomainDataCellSet.row(0).cell(DemandDomainDataCellSet.measureColumnIndex('Demand Domain Scope'));\r\n        Log.Info(\"Demand Domain Scope: \"+DemandDomainScope);\r\n\t\tvar DemandDomainGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Demand Domain Group Filter]}) on column;';\r\n\t\tvar DemandDomainGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(DemandDomainGroupfilter));\r\n\t\tvar DemandDomainGroup = \"\"\r\n\r\n// Check if the DemandDomainGroup value is null, and if so, return early\r\n\t\tif(DemandDomainGroupfilterCellset.rowCount > 0) {\r\n\t\tDemandDomainGroup = DemandDomainGroupfilterCellset.row(0).cell(DemandDomainGroupfilterCellset.measureColumnIndex('Stat Demand Domain Group Filter'));\r\n\t\t} else {\r\n\t\tDemandDomainGroup = \"All Demand Domain\";\r\n\t\t}\r\n\r\n        const LowerDemandDomains=findLowestInHierarchy(DemandDomainScope,DemandDomainGroup,DemandDomainHigh);\r\n        Log.Info(\"Lower Demand Domains: \"+LowerDemandDomains);\r\n        parsedParams['Lower Demand Domains']=LowerDemandDomains;\r\n        \r\n        return parsedParams;\r\n    };     \r\n\r\n\r\n    return {\r\n       LowerItems:LowerItems,\r\n       LowerChannels:LowerChannels,\r\n       LowerAccounts:LowerAccounts,\r\n       LowerRegions:LowerRegions,\r\n       LowerLocations:LowerLocations,\r\n       LowerPnLs:LowerPnLs,\r\n       LowerDemandDomains:LowerDemandDomains\r\n    };\r\n  \r\n  });",
    "Code": "define('o9.DemandPlanning.LowerLevels', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    \r\n\r\n\tvar findLowestInHierarchy = function(itemScope, itemGroup, hierarchyItems) {\r\n    Log.Info(\"In function: findLowestInHierarchy\");\r\n    Log.Info(\"Item Scope: \" + itemScope + \", Item Group: \" + itemGroup);\r\n    \r\n    // Find items matching itemScope or itemGroup\r\n    const matchingItems = hierarchyItems.filter(item => item.name === itemScope || item.name === itemGroup);\r\n    \r\n    if (matchingItems.length === 0) {\r\n        Log.Info(\"No matching items found.\");\r\n        return \"No matching items\";\r\n    }\r\n    \r\n    // Find the lowest level among the matched items\r\n    let lowestItem = matchingItems[0].name;\r\n    let lowestLevel = matchingItems[0].level;\r\n\r\n    matchingItems.forEach(item => {\r\n        if (item.level < lowestLevel) {\r\n            lowestLevel = item.level;\r\n            lowestItem = item.name;\r\n        }\r\n    });\r\n\r\n    Log.Info(\"Lowest Item: \" + lowestItem + \", Lowest Level: \" + lowestLevel);\r\n    \r\n    // Find all items that are at or below the lowest level\r\n    const lowerItemList = hierarchyItems.filter(item => item.level <= lowestLevel);\r\n    \r\n    // Format the output list\r\n    const formattedLowerItemList = lowerItemList.map(item => `[${item.name}]`).join(\", \");\r\n    \r\n    return formattedLowerItemList;\r\n};\r\n\r\n\t\r\n\r\n\r\n      var LowerItems = function (o9Params) {\r\n          //Parsing data from LS to the script\r\n          var queryModule = require('o9/data/query');\r\n          var cellsetModule = require('o9/data/cellset');\r\n          var parsedParams = JSON.parse(o9Params);\r\n  \r\n          var VersionName = parsedParams.VersionName;\r\n          var ForecastIterationType =parsedParams.ForecastIterationType;\r\n          \r\n          Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n          \r\n          const ItemHigh=[\r\n            {name: 'Planning Item', level:1},\r\n            {name: 'L1' , level:2},\r\n            {name: 'L2', level:3},\r\n            {name: 'L3', level:4},\r\n            {name: 'L4', level:5},\r\n            {name: 'L5', level:6},\r\n            {name: 'L6',level:7},\r\n            {name: 'All Item',level:8},\r\n              \r\n          ]\r\n  \r\n          var ItemScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Item Scope]}) on column;';\r\n          var ItemDataCellSet=cellsetModule.createCellSet(queryModule.select(ItemScopeQuery));\r\n\t\t\r\n      \r\n          var ItemScope=ItemDataCellSet.row(0).cell(ItemDataCellSet.measureColumnIndex('Item Scope'));\r\n\t\t  \r\n\t\t  var Itemgroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Item Group Filter]}) on column;';\r\n\t\t\tvar ItemgroupfilterCellset = cellsetModule.createCellSet(queryModule.select(Itemgroupfilter));\r\n\t\t\tvar ItemGroup=\"\"\r\n\t\t\t// Check if the ItemGroup value is null, and if so, return early\r\n\t\t\tif(ItemgroupfilterCellset.rowCount>0){\r\n\t\t\tItemGroup = ItemgroupfilterCellset.row(0).cell(ItemgroupfilterCellset.measureColumnIndex('Stat Item Group Filter'));}\r\n\t\t\telse {ItemGroup = \"All Item\"}\r\n\t\t\t\r\n          const LowerItems=findLowestInHierarchy(ItemScope,ItemGroup,ItemHigh);\r\n          Log.Info(\"Lower Items: \"+LowerItems);\r\n          parsedParams['Lower Items']=LowerItems;\r\n          \r\n          return parsedParams;\r\n      };\r\n      var LowerChannels = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const ChannelHigh=[\r\n            \r\n            {name: 'Planning Channel', level:2},\r\n            {name: 'Channel L1', level:3},\r\n            {name: 'Channel L2' , level:4},\r\n            {name: 'All Channel', level:5},\r\n            \r\n        ]\r\n\r\n        var ChannelScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Channel Scope]}) on column;';\r\n        var ChannelDataCellSet=cellsetModule.createCellSet(queryModule.select(ChannelScopeQuery));\r\n       \r\n        var ChannelScope=ChannelDataCellSet.row(0).cell(ChannelDataCellSet.measureColumnIndex('Channel Scope'));\r\n        Log.Info(\"ChannelScope: \"+ChannelScope);\r\n\t\tvar ChannelGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Channel Group Filter]}) on column;';\r\n\t\tvar ChannelGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(ChannelGroupfilter));\r\n\t\tvar ChannelGroup = \"\"\r\n\r\n\t\t// Check if the ChannelGroup value is null, and if so, return early\r\n\t\tif(ChannelGroupfilterCellset.rowCount > 0) {\r\n\t\tChannelGroup = ChannelGroupfilterCellset.row(0).cell(ChannelGroupfilterCellset.measureColumnIndex('Stat Channel Group Filter'));\r\n\t\t} else {\r\n\t\tChannelGroup = \"All Channel\";\r\n}\r\n\r\n\t\t\t\r\n        const LowerChannels=findLowestInHierarchy(ChannelGroup,ChannelScope,ChannelHigh);\r\n        Log.Info(\"Lower Channels: \"+LowerChannels);\r\n        parsedParams['Lower Channels']=LowerChannels;\r\n        \r\n        return parsedParams;\r\n    };\r\n    var LowerAccounts = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const AccountHigh=[\r\n            \r\n            {name: 'Planning Account', level:2},\r\n            {name: 'Account L1', level:3},\r\n            {name: 'Account L2' , level:4},\r\n            {name: 'Account L3', level:5},\r\n            {name: 'Account L4', level:6},\r\n            {name: 'All Account', level:7},\r\n            \r\n        ]\r\n\r\n        var AccountScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Account Scope]}) on column;';\r\n        var AccountDataCellSet=cellsetModule.createCellSet(queryModule.select(AccountScopeQuery));\r\n       \r\n        var AccountScope=AccountDataCellSet.row(0).cell(AccountDataCellSet.measureColumnIndex('Account Scope'));\r\n        Log.Info(\"AccountScope: \"+AccountScope);\r\n\t\t\r\n\t\tvar AccountGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Account Group Filter]}) on column;';\r\n\t\tvar AccountGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(AccountGroupfilter));\r\n\t\tvar AccountGroup = \"\"\r\n\r\n// Check if the AccountGroup value is null, and if so, return early\r\n\t\tif(AccountGroupfilterCellset.rowCount > 0) {\r\n\t\tAccountGroup = AccountGroupfilterCellset.row(0).cell(AccountGroupfilterCellset.measureColumnIndex('Stat Account Group Filter'));\r\n\t\t} else {\r\n\t\tAccountGroup = \"All Account\";\r\n\t\t\t}\r\n\r\n        const LowerAccounts=findLowestInHierarchy(AccountScope,AccountGroup,AccountHigh);\r\n        Log.Info(\"Lower Accounts: \"+LowerAccounts);\r\n        parsedParams['Lower Accounts']=LowerAccounts;\r\n        \r\n        return parsedParams;\r\n    };\r\n    var LowerRegions = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const RegionHigh=[\r\n            {name: 'Planning Region', level:2},\r\n            {name: 'Region L1', level:3},\r\n            {name: 'Region L2' , level:4},\r\n            {name: 'Region L3', level:5},\r\n            {name: 'Region L4', level:6},\r\n            {name: 'All Region', level:7},\r\n            \r\n        ]\r\n\r\n        var RegionScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Region Scope]}) on column;';\r\n        var RegionDataCellSet=cellsetModule.createCellSet(queryModule.select(RegionScopeQuery));\r\n       \r\n        var RegionScope=RegionDataCellSet.row(0).cell(RegionDataCellSet.measureColumnIndex('Region Scope'));\r\n        Log.Info(\"RegionScope: \"+RegionScope);\r\n\t\tvar RegionGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Region Group Filter]}) on column;';\r\n\t\tvar RegionGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(RegionGroupfilter));\r\n\t\tvar RegionGroup = \"\"\r\n\r\n\t\t// Check if the RegionGroup value is null, and if so, return early\r\n\t\tif(RegionGroupfilterCellset.rowCount > 0) {\r\n\t\tRegionGroup = RegionGroupfilterCellset.row(0).cell(RegionGroupfilterCellset.measureColumnIndex('Stat Region Group Filter'));\r\n\t\t} else {\r\n\t\tRegionGroup = \"All Region\";\r\n\t\t\t}\r\n\r\n        const LowerRegions=findLowestInHierarchy(RegionScope,RegionGroup,RegionHigh);\r\n        Log.Info(\"Lower Regions: \"+LowerRegions);\r\n        parsedParams['Lower Regions']=LowerRegions;\r\n        \r\n        return parsedParams;\r\n    };\r\n    var LowerLocations = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const LocationHigh=[\r\n            {name: 'Location Region', level:3},\r\n            {name: 'Location Country' , level:4},\r\n            {name: 'All Location', level:5}\r\n            \r\n        ]\r\n\r\n        var LocationScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Location Scope]}) on column;';\r\n        var LocationDataCellSet=cellsetModule.createCellSet(queryModule.select(LocationScopeQuery));\r\n       \r\n        var LocationScope=LocationDataCellSet.row(0).cell(LocationDataCellSet.measureColumnIndex('Location Scope'));\r\n        Log.Info(\"LocationScope: \"+LocationScope);\r\n        \r\n\t\tvar LocationGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Location Group Filter]}) on column;';\r\n\t\tvar LocationGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(LocationGroupfilter));\r\n\t\tvar LocationGroup = \"\"\r\n\r\n\t\t\t// Check if the LocationGroup value is null, and if so, return early\r\n\t\tif(LocationGroupfilterCellset.rowCount > 0) {\r\n\t\tLocationGroup = LocationGroupfilterCellset.row(0).cell(LocationGroupfilterCellset.measureColumnIndex('Stat Location Group Filter'));\r\n\t\t} else {\r\n\t\tLocationGroup = \"All Location\";\r\n\t\t}\r\n\r\n\t\tconst LowerLocations=findLowestInHierarchy(LocationScope,LocationGroup,LocationHigh);\r\n        Log.Info(\"Lower Locations: \"+LowerLocations);\r\n        parsedParams['Lower Locations']=LowerLocations;\r\n        \r\n        return parsedParams;\r\n    };  \r\n    var LowerPnLs = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const PnLHigh=[\r\n\r\n            {name: 'Planning PnL', level:2},\r\n            {name: 'PnL L1', level:3},\r\n            {name: 'PnL L2' , level:4},\r\n            {name: 'PnL L3', level:5},\r\n            {name: 'PnL L4', level:6},\r\n            {name: 'All PnL', level:7},\r\n            \r\n        ]\r\n\r\n        var PnLScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[PnL Scope]}) on column;';\r\n        var PnLDataCellSet=cellsetModule.createCellSet(queryModule.select(PnLScopeQuery));\r\n       \r\n        var PnLScope=PnLDataCellSet.row(0).cell(PnLDataCellSet.measureColumnIndex('PnL Scope'));\r\n        Log.Info(\"PnLScope: \"+PnLScope);\r\n\t\tvar PnLGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat PnL Group Filter]}) on column;';\r\n\t\tvar PnLGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(PnLGroupfilter));\r\n\t\tvar PnLGroup = \"\"\r\n\r\n\t\t// Check if the PnLGroup value is null, and if so, return early\r\n\t\tif(PnLGroupfilterCellset.rowCount > 0) {\r\n\t\tPnLGroup = PnLGroupfilterCellset.row(0).cell(PnLGroupfilterCellset.measureColumnIndex('Stat PnL Group Filter'));\r\n\t\t} else {\r\n\t\tPnLGroup = \"All PnL\";\r\n\t\t}\r\n\r\n        const LowerPnLs=findLowestInHierarchy(PnLScope,PnLGroup,PnLHigh);\r\n        Log.Info(\"Lower PnLs: \"+LowerPnLs);\r\n        parsedParams['Lower PnLs']=LowerPnLs;\r\n        \r\n        return parsedParams;\r\n    };  \r\n    \r\n    var LowerDemandDomains = function (o9Params) {\r\n        //Parsing data from LS to the script\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n\r\n        var VersionName = parsedParams.VersionName;\r\n        var ForecastIterationType =parsedParams.ForecastIterationType;\r\n        \r\n        Log.Info(\"Params: \"+VersionName+ForecastIterationType);\r\n        \r\n        const DemandDomainHigh=[\r\n\r\n            {name: 'Planning Demand Domain', level:2},\r\n            {name: 'Demand Domain L1', level:3},\r\n            {name: 'Demand Domain L2' , level:4},\r\n            {name: 'Demand Domain L3', level:5},\r\n            {name: 'Demand Domain L4', level:6},\r\n            {name: 'All Demand Domain', level:7},\r\n            \r\n        ]\r\n\r\n        var DemandDomainScopeQuery='Select ([Version].[Version Name].['+VersionName+'] * [Forecast Iteration].[Forecast Iteration Type].['+ForecastIterationType+'] ) on row, ({Measure.[Demand Domain Scope]}) on column;';\r\n        var DemandDomainDataCellSet=cellsetModule.createCellSet(queryModule.select(DemandDomainScopeQuery));\r\n       \r\n        var DemandDomainScope=DemandDomainDataCellSet.row(0).cell(DemandDomainDataCellSet.measureColumnIndex('Demand Domain Scope'));\r\n        Log.Info(\"Demand Domain Scope: \"+DemandDomainScope);\r\n\t\tvar DemandDomainGroupfilter = 'Select ([Version].[Version Name].['+VersionName+'] ) on row, ({Measure.[Stat Demand Domain Group Filter]}) on column;';\r\n\t\tvar DemandDomainGroupfilterCellset = cellsetModule.createCellSet(queryModule.select(DemandDomainGroupfilter));\r\n\t\tvar DemandDomainGroup = \"\"\r\n\r\n// Check if the DemandDomainGroup value is null, and if so, return early\r\n\t\tif(DemandDomainGroupfilterCellset.rowCount > 0) {\r\n\t\tDemandDomainGroup = DemandDomainGroupfilterCellset.row(0).cell(DemandDomainGroupfilterCellset.measureColumnIndex('Stat Demand Domain Group Filter'));\r\n\t\t} else {\r\n\t\tDemandDomainGroup = \"All Demand Domain\";\r\n\t\t}\r\n\r\n        const LowerDemandDomains=findLowestInHierarchy(DemandDomainScope,DemandDomainGroup,DemandDomainHigh);\r\n        Log.Info(\"Lower Demand Domains: \"+LowerDemandDomains);\r\n        parsedParams['Lower Demand Domains']=LowerDemandDomains;\r\n        \r\n        return parsedParams;\r\n    };     \r\n\r\n\r\n    return {\r\n       LowerItems:LowerItems,\r\n       LowerChannels:LowerChannels,\r\n       LowerAccounts:LowerAccounts,\r\n       LowerRegions:LowerRegions,\r\n       LowerLocations:LowerLocations,\r\n       LowerPnLs:LowerPnLs,\r\n       LowerDemandDomains:LowerDemandDomains\r\n    };\r\n  \r\n  });",
    "ModuleName": "o9.DemandPlanning.LowerLevels",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "a95fa721-686d-dd7a-35fd-fe3600718118",
    "ModuleId": "273029c8-d2db-4c26-91c2-c6ade5ef2bd4"
  },
  {
    "Id": 212986,
    "Description": "Copy ranging metrics",
    "Documentation": "define('o9.CopyRangeMetricsJS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar CopyRangeMetricsJS = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing CopyRangeMetricsJS plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\t// var queryModule = require('o9/data/query');\r\n\t\t// var cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\t// const cellsetMod = require('o9/data/cellset');\r\n\t\t// const queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar LikeItem=String(parsedParams.LikeItem);\r\n        var SellingSeason = String(parsedParams.SellingSeason);\r\n\t\tvar RangedChannel = parsedParams.RangedChannel.join('\", \"');\r\n\t\tvar RangedStores = parsedParams.RangedStores.join('\", \"');\t\t\r\n\t\tvar CurrentItem = parsedParams.CurrentItemToFilterDataSource;\r\n\r\n\t\tvar execprocquery = 'exec procedure AP47CopyRangeMetrics {\"Version\": \"'+Version+'\" ,\"RangedChannel\": [\"'+RangedChannel+'\"],\"LikeItem\": \"'+LikeItem+'\",\"CurrentItem\": \"'+CurrentItem+'\",  \"SellingSeason\": \"'+SellingSeason+'\", \"RangedStores\": [\"'+RangedStores+'\"]};' ;\r\n\t\tLog.Info(\"--------------------Running the exec procedure--------------------\");\r\n        Log.Info(execprocquery);\r\n        queryMod.update(execprocquery);\r\n\t};\r\n\treturn \t{\r\n\t\tCopyRangeMetricsJS : CopyRangeMetricsJS\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.CopyRangeMetricsJS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar CopyRangeMetricsJS = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing CopyRangeMetricsJS plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\t// var queryModule = require('o9/data/query');\r\n\t\t// var cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\t// const cellsetMod = require('o9/data/cellset');\r\n\t\t// const queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar Version = parsedParams.Version;\r\n\t\tvar LikeItem=String(parsedParams.LikeItem);\r\n        var SellingSeason = String(parsedParams.SellingSeason);\r\n\t\tvar RangedChannel = parsedParams.RangedChannel.join('\", \"');\r\n\t\tvar RangedStores = parsedParams.RangedStores.join('\", \"');\t\t\r\n\t\tvar CurrentItem = parsedParams.CurrentItemToFilterDataSource;\r\n\r\n\t\tvar execprocquery = 'exec procedure AP47CopyRangeMetrics {\"Version\": \"'+Version+'\" ,\"RangedChannel\": [\"'+RangedChannel+'\"],\"LikeItem\": \"'+LikeItem+'\",\"CurrentItem\": \"'+CurrentItem+'\",  \"SellingSeason\": \"'+SellingSeason+'\", \"RangedStores\": [\"'+RangedStores+'\"]};' ;\r\n\t\tLog.Info(\"--------------------Running the exec procedure--------------------\");\r\n        Log.Info(execprocquery);\r\n        queryMod.update(execprocquery);\r\n\t};\r\n\treturn \t{\r\n\t\tCopyRangeMetricsJS : CopyRangeMetricsJS\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.CopyRangeMetricsJS",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "5ed5f59d-ee80-4102-9cd8-052e54511ffd",
    "ModuleId": "97428148-218e-4b85-81d1-68ef84f70b05"
  },
  {
    "Id": 212987,
    "Description": "Validates that the user input for creating new styles is valid",
    "Documentation": "define('o9.ValidateCreateStyleInput', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ValidateCreateStyleInput = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing ValidateCreateStyleInput plugin------------------------------------------------------------\");\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\tvar queryModule = require('o9/data/query');\r\n\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\tconst cellsetMod = require('o9/data/cellset');\r\n\t\tconst queryMod = require('o9/data/query');\r\n\r\n\t\tvar Versionvar = String(parsedParams.Version);\r\n\t\tvar NumStyles=Number(parsedParams.NumNewStyles);\r\n\t\tvar NumSCs=Number(parsedParams.NumNewSCPH);\r\n\t\tvar TotalNumSCs=Number(parsedParams.ProductNumStyleNumStyleColors);\r\n        var ItemClassFB = String(parsedParams.ItemClass);\r\n        var SellingSeasonFB = String(parsedParams.SellingSeason);\r\n\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the Version------------------------------------------------------------\");\r\n\t\tLog.Info(Versionvar);\t\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the NumStyles------------------------------------------------------------\");\r\n\t\tLog.Info(NumStyles);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the NumSCs------------------------------------------------------------\");\r\n\t\tLog.Info(NumSCs);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the threshold for the maximum number of style colors to be created------------------------------------------------------------\");\r\n\t\tLog.Info(TotalNumSCs);\t\r\n\r\n        // var itemQuery1=\"Select ([Version].[Version Name].[\"+Versionvar+\"] *  [Item].[L3].[\"+ItemClassFB+\"] ) on row, ({ Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3]}) on column;\";\r\n        // Log.Info(\"------------------------------------------------------------This is the select query to get the Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3] measures------------------------------------------------------------\");\r\n        // Log.Info(itemQuery1);\r\n        // var Itemlist1= cellsetMod.createCellSet(queryMod.select(itemQuery1));\t\t\t\t\r\n        // Log.Info(\"------------------------------------------------------------This is the data type of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(typeof Itemlist1);\r\n        // Log.Info(\"------------------------------------------------------------This is the length of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(JSON.stringify(Itemlist1));           \r\n\r\n        var itemQuery2=\"Select ([Version].[Version Name].[\"+Versionvar+\"] * [Selling Season].[Selling Season].[\"+SellingSeasonFB+\"]* [Item].[L3].[\"+ItemClassFB+\"] ) on row,  (  {Measure.[End Week L3 SS],Measure.[Start Week L3 SS]}) on column;\";\r\n        Log.Info(\"------------------------------------------------------------This is the select query to get the  Measure.[End Week L3 SS],Measure.[Start Week L3 SS] measures------------------------------------------------------------\");\r\n        Log.Info(itemQuery2);\r\n        var Itemlist2= cellsetMod.createCellSet(queryMod.select(itemQuery2));\t\t\t\t\r\n        Log.Info(\"------------------------------------------------------------This is the data type of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(typeof Itemlist2);\r\n        \r\n        Log.Info(\"------------------------------------------------------------This is the variable Itemlist2------------------------------------------------------------\");\r\n        Log.Info(JSON.stringify(Itemlist2));\r\n\r\n        // let itemlist1jsonstring = JSON.stringify(Itemlist1);\r\n        // let itemlist1json = JSON.parse(itemlist1jsonstring);\r\n\r\n\r\n\r\n        let itemlist2jsonstring = JSON.stringify(Itemlist2);\r\n        let itemlist2json = JSON.parse(itemlist2jsonstring);\r\n        Log.Info(\"------------------------------------------------------------This is the length of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(itemlist2json[\"rowCount\"])\r\n\r\n\r\n\r\n\r\n        if ( itemlist2json[\"rowCount\"] > 0){\r\n\t\t// if (itemlist1json[\"rowCount\"] > 0 && itemlist2json[\"rowCount\"] > 0) {\r\n            // var CPL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('CP L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the CPL3var------------------------------------------------------------\");\r\n            // Log.Info(CPL3var);  \r\n            // var SellThroughL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('Sell Through % L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the SellThroughL3var------------------------------------------------------------\");\r\n            // Log.Info(SellThroughL3var);                \t\r\n            // var WOSL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('WOS L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the WOS L3------------------------------------------------------------\");\r\n            // Log.Info(WOSL3var); \r\n            var StartWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('Start Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the Start Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(StartWeekL3SSvar);    \r\n            var EndWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('End Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the End Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(EndWeekL3SSvar);             \r\n        } \r\n        else {\r\n            Log.Info(\"------------------------------------------------------------Class default values are not available------------------------------------------------------------\");\r\n            RuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"Class default values are not available\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n           \r\n        }\r\n\r\n      \r\n\r\n\t\tif (NumStyles <= 0) {\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is less than or equal to 0------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+ NumStyles + \" ,to be created is invalid. Please set a positive integer value\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\telse if (Number.isInteger(NumStyles) ===  false){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is not an integer------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+NumStyles+\" ,to be created is invalid. Please set a positive integer\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n\t\telse if (NumStyles > 100){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+ NumStyles+\" ,to be created is invalid. Please set a positive integer value less than 100\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n\r\n\t\telse if (NumStyles * NumSCs > TotalNumSCs){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The total number of placeholder style colors to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the total number of new style colors, \"+ NumStyles * NumSCs +\" ,to be created is invalid. Please set a positive integer value less than \" + TotalNumSCs\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\t\t\r\n\r\n\t\telse if (NumSCs <= 0) {\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is less than or equal to 0------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+NumSCs+\" ,to be created is invalid. Please set a positive integer value\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\telse if (Number.isInteger(NumSCs) ===  false){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is not an integer------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+NumSCs+\" ,to be created is invalid. Please set a positive integer\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\t\telse if (NumSCs > 100){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+ NumSCs+\" ,to be created is invalid. Please set a positive integer value less than 100\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n\t\t// else if (itemlist1json[\"rowCount\"] === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }   \r\n\r\n\t\telse if (itemlist2json[\"rowCount\"] === 0 ){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}    \r\n\r\n   \r\n\r\n\t\t// else if (CPL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for CP is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for CP is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }      \r\n\t\t// else if (SellThroughL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for Sell Through % is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for Sell Through % is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\t\t// else if (WOSL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for WOS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for WOS is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\r\n         \r\n\t\telse if (StartWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for Start Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for Start Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t} \r\n\r\n\t\telse if (EndWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for End Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for End Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}                                  \r\n\r\n\t\telse {\r\n\r\n \r\n\r\n\t\t\tLog.Info(\"------------------------------------------------------------Valid input. Placeholders will be created------------------------------------------------------------\");\r\n\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tValidateCreateStyleInput : ValidateCreateStyleInput\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.ValidateCreateStyleInput', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ValidateCreateStyleInput = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing ValidateCreateStyleInput plugin------------------------------------------------------------\");\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\tvar queryModule = require('o9/data/query');\r\n\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\tconst cellsetMod = require('o9/data/cellset');\r\n\t\tconst queryMod = require('o9/data/query');\r\n\r\n\t\tvar Versionvar = String(parsedParams.Version);\r\n\t\tvar NumStyles=Number(parsedParams.NumNewStyles);\r\n\t\tvar NumSCs=Number(parsedParams.NumNewSCPH);\r\n\t\tvar TotalNumSCs=Number(parsedParams.ProductNumStyleNumStyleColors);\r\n        var ItemClassFB = String(parsedParams.ItemClass);\r\n        var SellingSeasonFB = String(parsedParams.SellingSeason);\r\n\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the Version------------------------------------------------------------\");\r\n\t\tLog.Info(Versionvar);\t\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the NumStyles------------------------------------------------------------\");\r\n\t\tLog.Info(NumStyles);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the NumSCs------------------------------------------------------------\");\r\n\t\tLog.Info(NumSCs);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the threshold for the maximum number of style colors to be created------------------------------------------------------------\");\r\n\t\tLog.Info(TotalNumSCs);\t\r\n\r\n        // var itemQuery1=\"Select ([Version].[Version Name].[\"+Versionvar+\"] *  [Item].[L3].[\"+ItemClassFB+\"] ) on row, ({ Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3]}) on column;\";\r\n        // Log.Info(\"------------------------------------------------------------This is the select query to get the Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3] measures------------------------------------------------------------\");\r\n        // Log.Info(itemQuery1);\r\n        // var Itemlist1= cellsetMod.createCellSet(queryMod.select(itemQuery1));\t\t\t\t\r\n        // Log.Info(\"------------------------------------------------------------This is the data type of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(typeof Itemlist1);\r\n        // Log.Info(\"------------------------------------------------------------This is the length of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(JSON.stringify(Itemlist1));           \r\n\r\n        var itemQuery2=\"Select ([Version].[Version Name].[\"+Versionvar+\"] * [Selling Season].[Selling Season].[\"+SellingSeasonFB+\"]* [Item].[L3].[\"+ItemClassFB+\"] ) on row,  (  {Measure.[End Week L3 SS],Measure.[Start Week L3 SS]}) on column;\";\r\n        Log.Info(\"------------------------------------------------------------This is the select query to get the  Measure.[End Week L3 SS],Measure.[Start Week L3 SS] measures------------------------------------------------------------\");\r\n        Log.Info(itemQuery2);\r\n        var Itemlist2= cellsetMod.createCellSet(queryMod.select(itemQuery2));\t\t\t\t\r\n        Log.Info(\"------------------------------------------------------------This is the data type of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(typeof Itemlist2);\r\n        \r\n        Log.Info(\"------------------------------------------------------------This is the variable Itemlist2------------------------------------------------------------\");\r\n        Log.Info(JSON.stringify(Itemlist2));\r\n\r\n        // let itemlist1jsonstring = JSON.stringify(Itemlist1);\r\n        // let itemlist1json = JSON.parse(itemlist1jsonstring);\r\n\r\n\r\n\r\n        let itemlist2jsonstring = JSON.stringify(Itemlist2);\r\n        let itemlist2json = JSON.parse(itemlist2jsonstring);\r\n        Log.Info(\"------------------------------------------------------------This is the length of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(itemlist2json[\"rowCount\"])\r\n\r\n\r\n\r\n\r\n        if ( itemlist2json[\"rowCount\"] > 0){\r\n\t\t// if (itemlist1json[\"rowCount\"] > 0 && itemlist2json[\"rowCount\"] > 0) {\r\n            // var CPL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('CP L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the CPL3var------------------------------------------------------------\");\r\n            // Log.Info(CPL3var);  \r\n            // var SellThroughL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('Sell Through % L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the SellThroughL3var------------------------------------------------------------\");\r\n            // Log.Info(SellThroughL3var);                \t\r\n            // var WOSL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('WOS L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the WOS L3------------------------------------------------------------\");\r\n            // Log.Info(WOSL3var); \r\n            var StartWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('Start Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the Start Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(StartWeekL3SSvar);    \r\n            var EndWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('End Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the End Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(EndWeekL3SSvar);             \r\n        } \r\n        else {\r\n            Log.Info(\"------------------------------------------------------------Class default values are not available------------------------------------------------------------\");\r\n            RuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"Class default values are not available\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n           \r\n        }\r\n\r\n      \r\n\r\n\t\tif (NumStyles <= 0) {\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is less than or equal to 0------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+ NumStyles + \" ,to be created is invalid. Please set a positive integer value\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\telse if (Number.isInteger(NumStyles) ===  false){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is not an integer------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+NumStyles+\" ,to be created is invalid. Please set a positive integer\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n\t\telse if (NumStyles > 100){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+ NumStyles+\" ,to be created is invalid. Please set a positive integer value less than 100\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n\r\n\t\telse if (NumStyles * NumSCs > TotalNumSCs){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The total number of placeholder style colors to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the total number of new style colors, \"+ NumStyles * NumSCs +\" ,to be created is invalid. Please set a positive integer value less than \" + TotalNumSCs\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\t\t\r\n\r\n\t\telse if (NumSCs <= 0) {\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is less than or equal to 0------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+NumSCs+\" ,to be created is invalid. Please set a positive integer value\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\telse if (Number.isInteger(NumSCs) ===  false){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is not an integer------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new styles, \"+NumSCs+\" ,to be created is invalid. Please set a positive integer\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\t\telse if (NumSCs > 100){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+ NumSCs+\" ,to be created is invalid. Please set a positive integer value less than 100\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n\t\t// else if (itemlist1json[\"rowCount\"] === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }   \r\n\r\n\t\telse if (itemlist2json[\"rowCount\"] === 0 ){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}    \r\n\r\n   \r\n\r\n\t\t// else if (CPL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for CP is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for CP is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }      \r\n\t\t// else if (SellThroughL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for Sell Through % is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for Sell Through % is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\t\t// else if (WOSL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for WOS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for WOS is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\r\n         \r\n\t\telse if (StartWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for Start Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for Start Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t} \r\n\r\n\t\telse if (EndWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for End Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for End Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}                                  \r\n\r\n\t\telse {\r\n\r\n \r\n\r\n\t\t\tLog.Info(\"------------------------------------------------------------Valid input. Placeholders will be created------------------------------------------------------------\");\r\n\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tValidateCreateStyleInput : ValidateCreateStyleInput\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.ValidateCreateStyleInput",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "9270fda2-5bbb-f4ae-696f-86ab4b14e952",
    "ModuleId": "f248c782-eff0-4b45-beed-353b2a64cedd"
  },
  {
    "Id": 212988,
    "Description": "Validates that the input for creating new style colors is valid or not",
    "Documentation": "define('o9.ValidateCreateStyleColorInput', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ValidateCreateStyleColorInput = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing ValidateCreateStyleColorInput plugin------------------------------------------------------------\");\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\tvar queryModule = require('o9/data/query');\r\n\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\tconst cellsetMod = require('o9/data/cellset');\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar Versionvar = String(parsedParams.Version);\r\n\t\tvar NumNewSCPHs=Number(parsedParams.NumNewSCPH);\r\n\t\tvar MaxNumNewSCPHs=Number(parsedParams.MaxNumStyleColors);\r\n        var ItemClassFB = String(parsedParams.ItemClass);\r\n        var SellingSeasonFB = String(parsedParams.SellingSeason);\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the Version------------------------------------------------------------\");\r\n\t\tLog.Info(Versionvar);\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the NumNewSCPHs------------------------------------------------------------\");\r\n\t\tLog.Info(NumNewSCPHs);\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the max number of style colors that can be created in a single go------------------------------------------------------------\");\r\n\t\tLog.Info(MaxNumNewSCPHs);\t\r\n\r\n        // var itemQuery1=\"Select ([Version].[Version Name].[\"+Versionvar+\"] *  [Item].[L3].[\"+ItemClassFB+\"] ) on row, ({ Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3]}) on column;\";\r\n        // Log.Info(\"------------------------------------------------------------This is the select query to get the Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3] measures------------------------------------------------------------\");\r\n        // Log.Info(itemQuery1);\r\n        // var Itemlist1= cellsetMod.createCellSet(queryMod.select(itemQuery1));\t\t\t\t\r\n        // Log.Info(\"------------------------------------------------------------This is the data type of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(typeof Itemlist1);\r\n        // Log.Info(\"------------------------------------------------------------This is the length of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(JSON.stringify(Itemlist1));           \r\n\r\n        var itemQuery2=\"Select ([Version].[Version Name].[\"+Versionvar+\"] * [Selling Season].[Selling Season].[\"+SellingSeasonFB+\"]* [Item].[L3].[\"+ItemClassFB+\"] ) on row,  (  {Measure.[End Week L3 SS],Measure.[Start Week L3 SS]}) on column;\";\r\n        Log.Info(\"------------------------------------------------------------This is the select query to get the  Measure.[End Week L3 SS],Measure.[Start Week L3 SS] measures------------------------------------------------------------\");\r\n        Log.Info(itemQuery2);\r\n        var Itemlist2= cellsetMod.createCellSet(queryMod.select(itemQuery2));\t\t\t\t\r\n        Log.Info(\"------------------------------------------------------------This is the data type of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(typeof Itemlist2);\r\n        \r\n        Log.Info(\"------------------------------------------------------------This is the variable Itemlist2------------------------------------------------------------\");\r\n        Log.Info(JSON.stringify(Itemlist2));\r\n\r\n        // let itemlist1jsonstring = JSON.stringify(Itemlist1);\r\n        // let itemlist1json = JSON.parse(itemlist1jsonstring);\r\n\r\n\r\n\r\n        let itemlist2jsonstring = JSON.stringify(Itemlist2);\r\n        let itemlist2json = JSON.parse(itemlist2jsonstring);\r\n        Log.Info(\"------------------------------------------------------------This is the length of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(itemlist2json[\"rowCount\"])\r\n\r\n\r\n\r\n        if ( itemlist2json[\"rowCount\"] > 0) {\r\n\t\t\t// if (itemlist1json[\"rowCount\"] > 0 && itemlist2json[\"rowCount\"] > 0) {\r\n            // var CPL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('CP L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the CPL3var------------------------------------------------------------\");\r\n            // Log.Info(CPL3var);  \r\n            // var SellThroughL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('Sell Through % L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the SellThroughL3var------------------------------------------------------------\");\r\n            // Log.Info(SellThroughL3var);                \t\r\n            // var WOSL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('WOS L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the WOS L3------------------------------------------------------------\");\r\n            // Log.Info(WOSL3var); \r\n            var StartWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('Start Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the Start Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(StartWeekL3SSvar);    \r\n            var EndWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('End Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the End Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(EndWeekL3SSvar);             \r\n        } \r\n        else {\r\n            Log.Info(\"------------------------------------------------------------Class default values are not available------------------------------------------------------------\");\r\n            RuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"Class default values are not available\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n           \r\n        }\r\n\t\r\n\r\n\r\n\r\n\r\n\t\tif (NumNewSCPHs <= 0) {\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is less than or equal to 0------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+NumNewSCPHs+\",to be created is invalid. Please set a positive integer value\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\telse if (Number.isInteger(NumNewSCPHs) ===  false){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is not an integer------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+NumNewSCPHs+\",to be created is invalid. Please set a positive integer\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\t\telse if (NumNewSCPHs > MaxNumNewSCPHs){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+ NumNewSCPHs+\",to be created is invalid. Please set a positive integer value less than \" +  MaxNumNewSCPHs\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n        // else if (itemlist1json[\"rowCount\"] === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }   \r\n\r\n\t\telse if (itemlist2json[\"rowCount\"] === 0 ){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}    \r\n\r\n   \r\n\r\n\t\t// else if (CPL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for CP is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for CP is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }      \r\n\t\t// else if (SellThroughL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for Sell Through % is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for Sell Through % is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\t\t// else if (WOSL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for WOS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for WOS is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\r\n         \r\n\t\telse if (StartWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for Start Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for Start Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t} \r\n\r\n\t\telse if (EndWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for End Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for End Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}                                  \r\n\r\n\t\telse {\r\n\t\t\tLog.Info(\"------------------------------------------------------------Valid input. Placeholders will be created------------------------------------------------------------\");\r\n\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tValidateCreateStyleColorInput : ValidateCreateStyleColorInput\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.ValidateCreateStyleColorInput', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ValidateCreateStyleColorInput = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing ValidateCreateStyleColorInput plugin------------------------------------------------------------\");\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\tvar queryModule = require('o9/data/query');\r\n\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\tconst cellsetMod = require('o9/data/cellset');\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar Versionvar = String(parsedParams.Version);\r\n\t\tvar NumNewSCPHs=Number(parsedParams.NumNewSCPH);\r\n\t\tvar MaxNumNewSCPHs=Number(parsedParams.MaxNumStyleColors);\r\n        var ItemClassFB = String(parsedParams.ItemClass);\r\n        var SellingSeasonFB = String(parsedParams.SellingSeason);\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the Version------------------------------------------------------------\");\r\n\t\tLog.Info(Versionvar);\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the NumNewSCPHs------------------------------------------------------------\");\r\n\t\tLog.Info(NumNewSCPHs);\r\n\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the max number of style colors that can be created in a single go------------------------------------------------------------\");\r\n\t\tLog.Info(MaxNumNewSCPHs);\t\r\n\r\n        // var itemQuery1=\"Select ([Version].[Version Name].[\"+Versionvar+\"] *  [Item].[L3].[\"+ItemClassFB+\"] ) on row, ({ Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3]}) on column;\";\r\n        // Log.Info(\"------------------------------------------------------------This is the select query to get the Measure.[CP L3], Measure.[Sell Through % L3], Measure.[WOS L3] measures------------------------------------------------------------\");\r\n        // Log.Info(itemQuery1);\r\n        // var Itemlist1= cellsetMod.createCellSet(queryMod.select(itemQuery1));\t\t\t\t\r\n        // Log.Info(\"------------------------------------------------------------This is the data type of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(typeof Itemlist1);\r\n        // Log.Info(\"------------------------------------------------------------This is the length of Itemlist1------------------------------------------------------------\");\r\n        // Log.Info(JSON.stringify(Itemlist1));           \r\n\r\n        var itemQuery2=\"Select ([Version].[Version Name].[\"+Versionvar+\"] * [Selling Season].[Selling Season].[\"+SellingSeasonFB+\"]* [Item].[L3].[\"+ItemClassFB+\"] ) on row,  (  {Measure.[End Week L3 SS],Measure.[Start Week L3 SS]}) on column;\";\r\n        Log.Info(\"------------------------------------------------------------This is the select query to get the  Measure.[End Week L3 SS],Measure.[Start Week L3 SS] measures------------------------------------------------------------\");\r\n        Log.Info(itemQuery2);\r\n        var Itemlist2= cellsetMod.createCellSet(queryMod.select(itemQuery2));\t\t\t\t\r\n        Log.Info(\"------------------------------------------------------------This is the data type of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(typeof Itemlist2);\r\n        \r\n        Log.Info(\"------------------------------------------------------------This is the variable Itemlist2------------------------------------------------------------\");\r\n        Log.Info(JSON.stringify(Itemlist2));\r\n\r\n        // let itemlist1jsonstring = JSON.stringify(Itemlist1);\r\n        // let itemlist1json = JSON.parse(itemlist1jsonstring);\r\n\r\n\r\n\r\n        let itemlist2jsonstring = JSON.stringify(Itemlist2);\r\n        let itemlist2json = JSON.parse(itemlist2jsonstring);\r\n        Log.Info(\"------------------------------------------------------------This is the length of Itemlist2------------------------------------------------------------\");\r\n        Log.Info(itemlist2json[\"rowCount\"])\r\n\r\n\r\n\r\n        if ( itemlist2json[\"rowCount\"] > 0) {\r\n\t\t\t// if (itemlist1json[\"rowCount\"] > 0 && itemlist2json[\"rowCount\"] > 0) {\r\n            // var CPL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('CP L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the CPL3var------------------------------------------------------------\");\r\n            // Log.Info(CPL3var);  \r\n            // var SellThroughL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('Sell Through % L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the SellThroughL3var------------------------------------------------------------\");\r\n            // Log.Info(SellThroughL3var);                \t\r\n            // var WOSL3var = String (Itemlist1.row(0).cell(Itemlist1.measureColumnIndex('WOS L3')));\r\n            // Log.Info(\"------------------------------------------------------------The value of the WOS L3------------------------------------------------------------\");\r\n            // Log.Info(WOSL3var); \r\n            var StartWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('Start Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the Start Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(StartWeekL3SSvar);    \r\n            var EndWeekL3SSvar = String (Itemlist2.row(0).cell(Itemlist2.measureColumnIndex('End Week L3 SS')));\r\n            Log.Info(\"------------------------------------------------------------The value of the End Week L3 SS------------------------------------------------------------\");\r\n            Log.Info(EndWeekL3SSvar);             \r\n        } \r\n        else {\r\n            Log.Info(\"------------------------------------------------------------Class default values are not available------------------------------------------------------------\");\r\n            RuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"Class default values are not available\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n           \r\n        }\r\n\t\r\n\r\n\r\n\r\n\r\n\t\tif (NumNewSCPHs <= 0) {\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder styles to be created is less than or equal to 0------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+NumNewSCPHs+\",to be created is invalid. Please set a positive integer value\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\telse if (Number.isInteger(NumNewSCPHs) ===  false){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is not an integer------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+NumNewSCPHs+\",to be created is invalid. Please set a positive integer\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\t\t}\r\n\t\telse if (NumNewSCPHs > MaxNumNewSCPHs){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The number of placeholder style colors to be created is greater than 100------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The input for the number of new style colors, \"+ NumNewSCPHs+\",to be created is invalid. Please set a positive integer value less than \" +  MaxNumNewSCPHs\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}\r\n        // else if (itemlist1json[\"rowCount\"] === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default values for CP, Sell Through % and WOS are unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }   \r\n\r\n\t\telse if (itemlist2json[\"rowCount\"] === 0 ){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default values for Start Week SS and End Week SS are unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}    \r\n\r\n   \r\n\r\n\t\t// else if (CPL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for CP is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for CP is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// }      \r\n\t\t// else if (SellThroughL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for Sell Through % is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for Sell Through % is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\t\t// else if (WOSL3var.trim().length === 0){\r\n\t\t// \tLog.Info(\"------------------------------------------------------------The class default value for WOS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t// \tRuleOutputToUI = {\r\n\t\t// \t\t\t\tStatus: 'Error',\r\n\t\t// \t\t\t\tMessage: \"The class default value for WOS is unavailable. Placeholders won't be created\"\r\n\t\t// \t\t\t};\r\n\t\t// \t\t\treturn;\r\n\r\n\r\n\t\t// } \r\n\r\n         \r\n\t\telse if (StartWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for Start Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for Start Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t} \r\n\r\n\t\telse if (EndWeekL3SSvar.trim().length === 0){\r\n\t\t\tLog.Info(\"------------------------------------------------------------The class default value for End Week SS is unavailable. Placeholders won't be created------------------------------------------------------------\");\r\n\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: \"The class default value for End Week SS is unavailable. Placeholders won't be created\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\r\n\r\n\t\t}                                  \r\n\r\n\t\telse {\r\n\t\t\tLog.Info(\"------------------------------------------------------------Valid input. Placeholders will be created------------------------------------------------------------\");\r\n\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tValidateCreateStyleColorInput : ValidateCreateStyleColorInput\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.ValidateCreateStyleColorInput",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "49c22d21-8273-2041-70ff-818d63b1c12a",
    "ModuleId": "f248c782-eff0-4b45-beed-353b2a64cedd"
  },
  {
    "Id": 212989,
    "Description": "Checks if the placeholder is real",
    "Documentation": "define('o9.CheckRealItemDelete', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar CheckRealItemDelete = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing CheckRealItemDelete plugin------------------------------------------------------------\");\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\tvar queryModule = require('o9/data/query');\r\n\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\tconst cellsetMod = require('o9/data/cellset');\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar StyleCl=String(parsedParams.StyleColor);\r\n\t\tvar CCArray=StyleCl.split(',');\r\n\t\tvar Versionvar = String(parsedParams.Version);\r\n\t\tvar PHToDelete = String(parsedParams.RemovefromLBorDeletePH);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the Version------------------------------------------------------------\");\r\n\t\tLog.Info(Versionvar);\t\t\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the PHToDelete------------------------------------------------------------\");\r\n\t\tLog.Info(PHToDelete);\r\n\r\n\t\tfor(i = 0; i <CCArray.length; i++){\r\n\r\n\t\t\tif (PHToDelete === \"true\") {\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------The placeholder has to be deleted------------------------------------------------------------\");\r\n\t\t\t\t\r\n\t\t\t\tvar itemQuery=\"Select ([Version].[Version Name].[\"+Versionvar+\"] * [Item].[Planning Item].[\"+CCArray[i]+\"]) on row,  ({Measure.[Is Real Item Property]}) on column;\";\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------This is the select query to get the Is Real Item Property measure------------------------------------------------------------\");\r\n\t\t\t\tLog.Info(itemQuery);\r\n\t\t\t\tvar Itemlist= cellsetMod.createCellSet(queryMod.select(itemQuery));\t\t\t\t\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------The value of the Itemlist------------------------------------------------------------\");\r\n\t\t\t\tLog.Info(Itemlist);\r\n                var Itemlistvar =Number (Itemlist.row(0).cell(Itemlist.measureColumnIndex('Is Real Item Property')));\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------The value of the Itemlistvar------------------------------------------------------------\");\r\n\t\t\t\tLog.Info(Itemlistvar);\r\n                Log.Info(\"------------------------------------------------------------This is the value of the StyleCl------------------------------------------------------------\");\r\n                Log.Info(StyleCl);\r\n\r\n\r\n\t\t\t\t\r\n\t\r\n\t\t\t\tif (Itemlistvar === 1) {\r\n\t\t\t\t\tLog.Info(\"------------------------------------------------------------The placeholder cannot be deleted as the Is Real Item Property is 1------------------------------------------------------------\");\r\n\t\t\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: 'The placeholder cannot be deleted as it\\'s a real item'\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\telse if (Itemlistvar === 0){\r\n\t\t\t\t\tLog.Info(\"------------------------------------------------------------The placeholder can be deleted------------------------------------------------------------\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar delmember = 'deletemember ([Item].[Planning Item] = {,['+CCArray[i]+']}) CASCADE ;';\r\n\t\t\t\t\tqueryMod.update(delmember);\r\n\t\r\n\t\t\t\t}\r\n\r\n                else {\r\n                    Log.Info(\"------------------------------------------------------------The input to delete placeholder is unclear. Terminating the plugin------------------------------------------------------------\");\r\n\r\n                }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tCheckRealItemDelete : CheckRealItemDelete\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.CheckRealItemDelete', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar CheckRealItemDelete = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing CheckRealItemDelete plugin------------------------------------------------------------\");\r\n\t\tvar parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\t\r\n\t\t// initiatlize the query modules\r\n\t\tvar queryModule = require('o9/data/query');\r\n\t\tvar cellsetModule = require('o9/data/cellset');\r\n\t\t\r\n\t\tconst cellsetMod = require('o9/data/cellset');\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar StyleCl=String(parsedParams.StyleColor);\r\n\t\tvar CCArray=StyleCl.split(',');\r\n\t\tvar Versionvar = String(parsedParams.Version);\r\n\t\tvar PHToDelete = String(parsedParams.RemovefromLBorDeletePH);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the Version------------------------------------------------------------\");\r\n\t\tLog.Info(Versionvar);\t\t\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the PHToDelete------------------------------------------------------------\");\r\n\t\tLog.Info(PHToDelete);\r\n\r\n\t\tfor(i = 0; i <CCArray.length; i++){\r\n\r\n\t\t\tif (PHToDelete === \"true\") {\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------The placeholder has to be deleted------------------------------------------------------------\");\r\n\t\t\t\t\r\n\t\t\t\tvar itemQuery=\"Select ([Version].[Version Name].[\"+Versionvar+\"] * [Item].[Planning Item].[\"+CCArray[i]+\"]) on row,  ({Measure.[Is Real Item Property]}) on column;\";\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------This is the select query to get the Is Real Item Property measure------------------------------------------------------------\");\r\n\t\t\t\tLog.Info(itemQuery);\r\n\t\t\t\tvar Itemlist= cellsetMod.createCellSet(queryMod.select(itemQuery));\t\t\t\t\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------The value of the Itemlist------------------------------------------------------------\");\r\n\t\t\t\tLog.Info(Itemlist);\r\n                var Itemlistvar =Number (Itemlist.row(0).cell(Itemlist.measureColumnIndex('Is Real Item Property')));\r\n\t\t\t\tLog.Info(\"------------------------------------------------------------The value of the Itemlistvar------------------------------------------------------------\");\r\n\t\t\t\tLog.Info(Itemlistvar);\r\n                Log.Info(\"------------------------------------------------------------This is the value of the StyleCl------------------------------------------------------------\");\r\n                Log.Info(StyleCl);\r\n\r\n\r\n\t\t\t\t\r\n\t\r\n\t\t\t\tif (Itemlistvar === 1) {\r\n\t\t\t\t\tLog.Info(\"------------------------------------------------------------The placeholder cannot be deleted as the Is Real Item Property is 1------------------------------------------------------------\");\r\n\t\t\t\t\tRuleOutputToUI = {\r\n\t\t\t\t\t\tStatus: 'Error',\r\n\t\t\t\t\t\tMessage: 'The placeholder cannot be deleted as it\\'s a real item'\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\telse if (Itemlistvar === 0){\r\n\t\t\t\t\tLog.Info(\"------------------------------------------------------------The placeholder can be deleted------------------------------------------------------------\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar delmember = 'deletemember ([Item].[Planning Item] = {,['+CCArray[i]+']}) CASCADE ;';\r\n\t\t\t\t\tqueryMod.update(delmember);\r\n\t\r\n\t\t\t\t}\r\n\r\n                else {\r\n                    Log.Info(\"------------------------------------------------------------The input to delete placeholder is unclear. Terminating the plugin------------------------------------------------------------\");\r\n\r\n                }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tCheckRealItemDelete : CheckRealItemDelete\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.CheckRealItemDelete",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0ea8ecc1-66e4-111b-b5aa-059297a38bfe",
    "ModuleId": "f248c782-eff0-4b45-beed-353b2a64cedd"
  },
  {
    "Id": 212990,
    "Description": "DailySolverStartAndEndDate",
    "Documentation": "define('o9.referencesupplyplanning.DSolverStartAndEndDate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DailySolverStartAndEndDate= function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar StartBucket = parsedParams.StartBucket;\r\n    var EndBucket = parsedParams.EndBucket;\r\n\tvar CurrentBucket = parsedParams.CurrentBucket;\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\t\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &DailySolverStartBucket.element(0).Name;';\t\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &DailySolverEndBucket.element(0).Name;';\t\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &DailySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingDayIsCurrent = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[Day$IsCurrent]={NULL,});';\r\n\tLog.Info(\"NullExisitingDayIsCurrent ... \" + NullExisitingDayIsCurrent); \r\n    queryModule.update(NullExisitingDayIsCurrent);}\r\n\t\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[D Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n    queryModule.update(NullExisitingStartBucket);}\r\n\t\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[D Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n    queryModule.update(NullExisitingEndBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[D Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket); \r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\t\r\n\tvar SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket); \r\n    queryModule.update(SetCurrentBucket);\r\n\t\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[D Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket); \r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\t\t\r\n\tvar SetDayIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n\tLog.Info(\"SetDayIsCurrent ... \" + SetDayIsCurrent); \r\n    queryModule.update(SetDayIsCurrent);\r\n\t\r\n\tvar SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n    queryModule.update(SetStartBucket);\r\n\t\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[D Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n    queryModule.update(SetPropertyStartBucket);\r\n\t\r\n\tvar SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n    queryModule.update(SetEndBucket);\r\n\t\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[D Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n    queryModule.update(SetPropertyEndBucket);\r\n\t\r\n\t\r\n};\r\n\t\r\nreturn {\r\n\tDailySolverStartAndEndDate:DailySolverStartAndEndDate\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.DSolverStartAndEndDate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DailySolverStartAndEndDate= function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar StartBucket = parsedParams.StartBucket;\r\n    var EndBucket = parsedParams.EndBucket;\r\n\tvar CurrentBucket = parsedParams.CurrentBucket;\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\t\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &DailySolverStartBucket.element(0).Name;';\t\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &DailySolverEndBucket.element(0).Name;';\t\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &DailySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingDayIsCurrent = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[Day$IsCurrent]={NULL,});';\r\n\tLog.Info(\"NullExisitingDayIsCurrent ... \" + NullExisitingDayIsCurrent); \r\n    queryModule.update(NullExisitingDayIsCurrent);}\r\n\t\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[D Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n    queryModule.update(NullExisitingStartBucket);}\r\n\t\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[D Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n    queryModule.update(NullExisitingEndBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[D Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket); \r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\t\r\n\tvar SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket); \r\n    queryModule.update(SetCurrentBucket);\r\n\t\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[D Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket); \r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\t\t\r\n\tvar SetDayIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n\tLog.Info(\"SetDayIsCurrent ... \" + SetDayIsCurrent); \r\n    queryModule.update(SetDayIsCurrent);\r\n\t\r\n\tvar SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n    queryModule.update(SetStartBucket);\r\n\t\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[D Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n    queryModule.update(SetPropertyStartBucket);\r\n\t\r\n\tvar SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n    queryModule.update(SetEndBucket);\r\n\t\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[D Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n    queryModule.update(SetPropertyEndBucket);\r\n\t\r\n\t\r\n};\r\n\t\r\nreturn {\r\n\tDailySolverStartAndEndDate:DailySolverStartAndEndDate\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.DSolverStartAndEndDate",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "b7e6d19e-86ba-46c4-86ff-e58192ae7296",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212991,
    "Description": "Run plan procedure in a batch",
    "Documentation": "define('o9.referencesupplyplanning.RunPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var RunPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar extensionWeeks = 'Select ([Version].[Version Name].['+Version+']) on row, ({sum(Measure.[Solver Extension Weeks],0) as transient.[Extension Week]}) on column;'\r\n\tvar getExtensionWeeks = queryModule.select(extensionWeeks);\r\n\tvar cellsetExtensionWeeks = cellsetModule.createCellSet(getExtensionWeeks);\r\n\tvar ExtensionWeeks = cellsetExtensionWeeks.row(0).cell(cellsetExtensionWeeks.measureColumnIndex('Extension Week'));\r\n\t\r\n\tvar varyingCapacityBuckets = 'Select ([Version].[Version Name].['+Version+']) on row, ({Measure.[W Varying Capacity Buckets]}) on column;'\r\n\tvar getVaryingCapacityBuckets = queryModule.select(varyingCapacityBuckets);\r\n\tvar cellsetVaryingCapacityBuckets = cellsetModule.createCellSet(getVaryingCapacityBuckets);\r\n\tvar VaryingCapacityBuckets = cellsetVaryingCapacityBuckets.row(0).cell(cellsetVaryingCapacityBuckets.measureColumnIndex('W Varying Capacity Buckets'));\r\n\t\r\n\tvar queryForPotential3 = 'select Time.[Week].filter(#.Key ==dateadd(&SolverEndBucket.first.Key, '+ExtensionWeeks+', \"Week\")).element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n    var SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\t\r\n\tvar queryforPreProcess1 = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"' + Version + '\"};';\r\n\tLog.Info(\"queryforPreProcess1 ... \" + queryforPreProcess1);\r\n\tqueryModule.update(queryforPreProcess1);\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar queryforPreProcess2 = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"queryforPreProcess2 ... \" + queryforPreProcess2);\r\n\tqueryModule.update(queryforPreProcess2);\r\n\t\r\n\tvar queryForMRPpreprocess = 'exec procedure PreSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    //Log.Info(\"SCS Command ... \" + queryForMRPpreprocess);\r\n\t//queryModule.update(queryForMRPpreprocess);\r\n\t\r\n\tvar queryForExecution = 'exec procedure RunConstrainedPlanWeekly {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\",\"WVaryingCapacityBuckets\" : \"' + VaryingCapacityBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\t\r\n\tvar queryForMRPpostprocess = 'exec procedure PostSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    //Log.Info(\"SCS Command ... \" + queryForMRPpostprocess);\r\n\t//queryModule.update(queryForMRPpostprocess);\r\n\t\r\n\tif(Financial === true){\r\n\t\tvar mpfinancialprestep = 'exec procedure RunMPFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar mpfinancialpoststep = 'exec procedure RunMPFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Financial Pre Process ... \" + mpfinancialprestep);\r\n\t\tLog.Info(\"Financial Post Process ... \" + mpfinancialpoststep);\r\n\t\tqueryModule.update(mpfinancialprestep);\r\n\t\tqueryModule.update(mpfinancialpoststep);\r\n\t}\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunPlanBatch:RunPlanBatch\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.RunPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var RunPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar extensionWeeks = 'Select ([Version].[Version Name].['+Version+']) on row, ({sum(Measure.[Solver Extension Weeks],0) as transient.[Extension Week]}) on column;'\r\n\tvar getExtensionWeeks = queryModule.select(extensionWeeks);\r\n\tvar cellsetExtensionWeeks = cellsetModule.createCellSet(getExtensionWeeks);\r\n\tvar ExtensionWeeks = cellsetExtensionWeeks.row(0).cell(cellsetExtensionWeeks.measureColumnIndex('Extension Week'));\r\n\t\r\n\tvar varyingCapacityBuckets = 'Select ([Version].[Version Name].['+Version+']) on row, ({Measure.[W Varying Capacity Buckets]}) on column;'\r\n\tvar getVaryingCapacityBuckets = queryModule.select(varyingCapacityBuckets);\r\n\tvar cellsetVaryingCapacityBuckets = cellsetModule.createCellSet(getVaryingCapacityBuckets);\r\n\tvar VaryingCapacityBuckets = cellsetVaryingCapacityBuckets.row(0).cell(cellsetVaryingCapacityBuckets.measureColumnIndex('W Varying Capacity Buckets'));\r\n\t\r\n\tvar queryForPotential3 = 'select Time.[Week].filter(#.Key ==dateadd(&SolverEndBucket.first.Key, '+ExtensionWeeks+', \"Week\")).element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n    var SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\t\r\n\tvar queryforPreProcess1 = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"' + Version + '\"};';\r\n\tLog.Info(\"queryforPreProcess1 ... \" + queryforPreProcess1);\r\n\tqueryModule.update(queryforPreProcess1);\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar queryforPreProcess2 = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"queryforPreProcess2 ... \" + queryforPreProcess2);\r\n\tqueryModule.update(queryforPreProcess2);\r\n\t\r\n\tvar queryForMRPpreprocess = 'exec procedure PreSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    //Log.Info(\"SCS Command ... \" + queryForMRPpreprocess);\r\n\t//queryModule.update(queryForMRPpreprocess);\r\n\t\r\n\tvar queryForExecution = 'exec procedure RunConstrainedPlanWeekly {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\",\"WVaryingCapacityBuckets\" : \"' + VaryingCapacityBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\t\r\n\tvar queryForMRPpostprocess = 'exec procedure PostSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    //Log.Info(\"SCS Command ... \" + queryForMRPpostprocess);\r\n\t//queryModule.update(queryForMRPpostprocess);\r\n\t\r\n\tif(Financial === true){\r\n\t\tvar mpfinancialprestep = 'exec procedure RunMPFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar mpfinancialpoststep = 'exec procedure RunMPFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Financial Pre Process ... \" + mpfinancialprestep);\r\n\t\tLog.Info(\"Financial Post Process ... \" + mpfinancialpoststep);\r\n\t\tqueryModule.update(mpfinancialprestep);\r\n\t\tqueryModule.update(mpfinancialpoststep);\r\n\t}\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunPlanBatch:RunPlanBatch\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.RunPlanBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "a2c388a9-38e5-4cca-9260-2991abd921c7",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212992,
    "Description": "JS to run the LP solver action button via batch",
    "Documentation": "define('o9.referencesupplyplanning.RunWeeklyLPPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunWeeklyLPPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar SolverName = parsedParams.LPSolverName;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var SourcingProportionsQuery = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"' + Version + '\"};';\r\n\tqueryModule.update(SourcingProportionsQuery);\r\n\t\r\n\t\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar queryforPreProcess2 = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"queryforPreProcess2 ... \" + queryforPreProcess2);\r\n\tqueryModule.update(queryforPreProcess2);\r\n\t\r\n\t\r\n\t\r\n\tvar queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Weekly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Weekly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Weekly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets],Measure.[W Plan Current Bucket],Measure.[W Plan Start Bucket], Measure.[W Plan End Bucket],Measure.[W LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\r\n\t\tvar LPSolverName = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W LP Solver Name'));\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RunWeeklyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"WSolverGlobalBuildLateLimit\" : '+GlobalBuildLateLimit+', \"WLPSolverName\" : \"'+LPSolverName+'\" , \"GeneratePeggings\" : true,\"WCampaignHorizon\":0,\"WIsMIP\":false};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunWeeklyLPPlanBatch:RunWeeklyLPPlanBatch\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.RunWeeklyLPPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunWeeklyLPPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar SolverName = parsedParams.LPSolverName;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var SourcingProportionsQuery = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"' + Version + '\"};';\r\n\tqueryModule.update(SourcingProportionsQuery);\r\n\t\r\n\t\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar queryforPreProcess2 = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"queryforPreProcess2 ... \" + queryforPreProcess2);\r\n\tqueryModule.update(queryforPreProcess2);\r\n\t\r\n\t\r\n\t\r\n\tvar queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Weekly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Weekly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Weekly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets],Measure.[W Plan Current Bucket],Measure.[W Plan Start Bucket], Measure.[W Plan End Bucket],Measure.[W LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\r\n\t\tvar LPSolverName = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W LP Solver Name'));\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RunWeeklyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"WSolverGlobalBuildLateLimit\" : '+GlobalBuildLateLimit+', \"WLPSolverName\" : \"'+LPSolverName+'\" , \"GeneratePeggings\" : true,\"WCampaignHorizon\":0,\"WIsMIP\":false};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunWeeklyLPPlanBatch:RunWeeklyLPPlanBatch\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.RunWeeklyLPPlanBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "2b5cdad3-4364-1538-a2d4-1db059f39274",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212993,
    "Description": "Seeding Transactional Data from CTM to MP",
    "Documentation": "define('o9.referencesupplyplanning.SeedMPTransaction', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var SeedMPTransaction = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\t\r\n    Log.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[MP Demand Seed Aggregation Parameter], Measure.[MP Distribution Seed Parameter], Measure.[MP Manufacturing Seed Parameter], Measure.[MP Procurement Seed Parameter]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar DemandSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Demand Seed Aggregation Parameter'));\r\n\tvar DistributionSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Distribution Seed Parameter'));\r\n\tvar ManufacturingSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Manufacturing Seed Parameter'));\r\n\tvar ProcurementSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Procurement Seed Parameter'));\r\n\t\r\n\t\r\n\tvar queryForExecution = 'exec procedure RunMPSeedTransaction {\"Version\" : \"' + Version + '\", \"ProcurementAggregation_Param\" : ' + ProcurementSeed + ' , \"ManufacturingAggregation_Param\" : ' + ManufacturingSeed + ', \"DistributionAggregated_Param\" : ' + DistributionSeed + ',\"DemandAggregated_Param\" : ' + DemandSeed + '};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tSeedMPTransaction:SeedMPTransaction\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.SeedMPTransaction', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var SeedMPTransaction = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\t\r\n    Log.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[MP Demand Seed Aggregation Parameter], Measure.[MP Distribution Seed Parameter], Measure.[MP Manufacturing Seed Parameter], Measure.[MP Procurement Seed Parameter]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar DemandSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Demand Seed Aggregation Parameter'));\r\n\tvar DistributionSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Distribution Seed Parameter'));\r\n\tvar ManufacturingSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Manufacturing Seed Parameter'));\r\n\tvar ProcurementSeed = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('MP Procurement Seed Parameter'));\r\n\t\r\n\t\r\n\tvar queryForExecution = 'exec procedure RunMPSeedTransaction {\"Version\" : \"' + Version + '\", \"ProcurementAggregation_Param\" : ' + ProcurementSeed + ' , \"ManufacturingAggregation_Param\" : ' + ManufacturingSeed + ', \"DistributionAggregated_Param\" : ' + DistributionSeed + ',\"DemandAggregated_Param\" : ' + DemandSeed + '};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tSeedMPTransaction:SeedMPTransaction\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.SeedMPTransaction",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "9086781c-89ff-4034-bdd4-0647de6c0f57",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212994,
    "Description": "DailySegmentedFullRun",
    "Documentation": "define('o9.referenceSP.DailySegmentedFullRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var SegmentedFullRun = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        \r\n        var Version = parsedParams.Version;\r\n\t\t\r\n\t\tvar MNSegmentNumber = parsedParams.MNSegmentNumber;\r\n\t\tvar MNSegmentNumber2 = parsedParams.MNSegmentNumber2;\r\n\t\tvar MNSegmentNumber3 = parsedParams.MNSegmentNumber3;\r\n\t\t\r\n\r\n        var SegmentNumber = parsedParams.SegmentNumber;\r\n       \r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        Log.Info('[Segmented Full Run JS] => Passed Fields Version is ' + Version);\r\n\t\tLog.Info('[Segmented Full Run JS] => Passed Fields SegmentNumber is ' + SegmentNumber);\r\n\t\tif (SegmentNumber !== null && (MNSegmentNumber !== null || MNSegmentNumber2 !== null || MNSegmentNumber3 !== null)){\r\n\t\t\tLog.Error(\"Both Segment and Item Location are there\");\r\n\t\t\tRuleOutputToUI = {Status: 'Error',Message: 'Both Segment Number and Material Nodes are selected'};\r\n            return;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (SegmentNumber === null || SegmentNumber === undefined) {\r\n\t\t\tLog.Info(\"Segment Number is empty\");\r\n\t\t\t}       \r\n\t\t\telse{\r\n\t\t\tListofSegmentNumber = Object.values(SegmentNumber)\r\n\t\t\t\r\n\t\t\tfor (let Number of ListofSegmentNumber){\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + Number);\r\n\t\t\t\tvar scopetopopulateflag = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + Number + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflag);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + MNSegmentNumber + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber2 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber2 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + MNSegmentNumber2 + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber2);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber3 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber3 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + MNSegmentNumber3 + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber3);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n    \r\n    };\r\n\r\n\r\n    return {\r\n        SegmentedFullRun: SegmentedFullRun\r\n    };\r\n});",
    "Code": "define('o9.referenceSP.DailySegmentedFullRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var SegmentedFullRun = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        \r\n        var Version = parsedParams.Version;\r\n\t\t\r\n\t\tvar MNSegmentNumber = parsedParams.MNSegmentNumber;\r\n\t\tvar MNSegmentNumber2 = parsedParams.MNSegmentNumber2;\r\n\t\tvar MNSegmentNumber3 = parsedParams.MNSegmentNumber3;\r\n\t\t\r\n\r\n        var SegmentNumber = parsedParams.SegmentNumber;\r\n       \r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        Log.Info('[Segmented Full Run JS] => Passed Fields Version is ' + Version);\r\n\t\tLog.Info('[Segmented Full Run JS] => Passed Fields SegmentNumber is ' + SegmentNumber);\r\n\t\tif (SegmentNumber !== null && (MNSegmentNumber !== null || MNSegmentNumber2 !== null || MNSegmentNumber3 !== null)){\r\n\t\t\tLog.Error(\"Both Segment and Item Location are there\");\r\n\t\t\tRuleOutputToUI = {Status: 'Error',Message: 'Both Segment Number and Material Nodes are selected'};\r\n            return;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (SegmentNumber === null || SegmentNumber === undefined) {\r\n\t\t\tLog.Info(\"Segment Number is empty\");\r\n\t\t\t}       \r\n\t\t\telse{\r\n\t\t\tListofSegmentNumber = Object.values(SegmentNumber)\r\n\t\t\t\r\n\t\t\tfor (let Number of ListofSegmentNumber){\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + Number);\r\n\t\t\t\tvar scopetopopulateflag = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + Number + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflag);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + MNSegmentNumber + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber2 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber2 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + MNSegmentNumber2 + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber2);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber3 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber3 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Day] * [Demand].[DemandID] ) ; Measure.[D Demand Graph Flag] = if (Measure.[D Item Segment Number] == ' + MNSegmentNumber3 + ') then True else Measure.[D Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber3);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n    \r\n    };\r\n\r\n\r\n    return {\r\n        SegmentedFullRun: SegmentedFullRun\r\n    };\r\n});",
    "ModuleName": "o9.referenceSP.DailySegmentedFullRun",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "1e775fbe-33e5-6196-d610-94bb0ac07367",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212995,
    "Description": "New JS AB for solver",
    "Documentation": "define('o9.referencesupplyplanning.AFRunPlanInt', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var AFRunPlanInt = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan;\r\n\tvar Item = parsedParams.Item;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Logging Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Starting the Javascript for AF Solver..\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"Logging ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"Logging VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t\r\n\t//var HardQuarProcedure = 'exec procedure HardQuarantineMasterProcedure {\"Version\":\"'+Version+'\", \"Weekly\":true};';\r\n\t//var ExecuteHardQuarProcedure = queryModule.select(HardQuarProcedure);\r\n\t//Log.Info(\"Logging HardQuarantineMasterProcedure.. \" + ExecuteHardQuarProcedure);\r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\", \"RunIDParent\":\"'+RunIDParent+'\", \"ActionType\":\"'+ActionType+'\", \"Product\":\"'+Product+'\", \"ScenarioCount\":'+ScenarioCount+', \"VersionCount\":'+VersionCount+', \"ScenarioName\":\"'+Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"Logging ActionStartProcedure.. \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket is... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket is... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(queryForPotential3);\r\n\tLog.Info(\"Solver End Bucket is... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].['+Version+'] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n    var SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\t\r\n\tvar PopPropProcedure = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"'+Version+'\"};';\r\n\tvar ExecutePopPropProcedure = queryModule.update(PopPropProcedure);\r\n\tLog.Info(\"Logging PopulateSourcingProportionsToWeeklySolver.. \" + ExecutePopPropProcedure);\r\n\t\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar DepPlanAggWeek = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"Logging DeploymentPlanAggregationToWeek ... \" + DepPlanAggWeek);\r\n\tqueryModule.update(DepPlanAggWeek);\r\n\t\r\n\t//var MRPPreProcess = 'exec procedure PreSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n\t//queryModule.update(MRPPreProcess);\r\n    //Log.Info(\"Logging MRPPreProcess.. \" + MRPPreProcess);\r\n\t\r\n\tvar RunConstrainedPlan = 'exec procedure RunConstrainedPlanWeeklyItemScoped {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\",\"Item\" : \"' + Item + '\"};';\r\n    Log.Info(\"Logging RunConstrainedPlanWeeklyItemScoped.. \" + RunConstrainedPlan);\r\n\tqueryModule.update(RunConstrainedPlan);\r\n\t\r\n\tif(Financial === true){\r\n\t\tvar mpfinancialprestep = 'exec procedure RunMPFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar mpfinancialpoststep = 'exec procedure RunMPFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Logging Financial Pre Process ... \" + mpfinancialprestep);\r\n\t\tLog.Info(\"Logging Financial Post Process ... \" + mpfinancialpoststep);\r\n\t\tqueryModule.update(mpfinancialprestep);\r\n\t\tqueryModule.update(mpfinancialpoststep);\r\n\t}\r\n\t\r\n\t/* var MRPPostProcess = 'exec procedure PostSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    Log.Info(\"Logging MRPPostProcess.. \" + MRPPostProcess);\r\n\tqueryModule.update(MRPPostProcess); */\r\n\t\r\n\t/* var MasterShipment = 'exec procedure WMasterShipmentTruckStorageRequirements {\"Version\" : \"'+Version+'\"};';\r\n    Log.Info(\"Logging MasterShipment.. \" + MasterShipment);\r\n\tqueryModule.update(MasterShipment); */\r\n\t\r\n\t/* var SourcingAttainmentReport = 'exec procedure SourcingAttainmentReportWeekly {\"Version\" : \"'+Version+'\", \"DataObject\" : \"Week To Month\"};';\r\n    Log.Info(\"Logging SourcingAttainmentReport.. \" + SourcingAttainmentReport);\r\n\tqueryModule.update(SourcingAttainmentReport); */\r\n\t\r\n\tvar PostAnalytics = 'exec procedure SupplyPlan0600PostAnalytics_Weekly {\"Version\" : \"'+Version+'\"};';\r\n    Log.Info(\"Logging PostAnalytics.. \" + PostAnalytics);\r\n\tqueryModule.update(PostAnalytics);\r\n\t\r\n\ttry {\r\n\tvar queryForBTG = 'Select ([Version].[Version Name].['+Version+'] ) on row, ({(if(coalesce(Measure.[W BTG Enable Report],false) == true) then \"true\" else \"false\") as transient.[Param Value]}) on column;';\r\n\tvar BTGQResponse = queryModule.select(queryForBTG);\r\n\tvar dataT3 = cellsetModule.createCellSet(BTGQResponse);\r\n\tvar EnableBTG = dataT3.row(0).cell(dataT3.measureColumnIndex('Param Value'));\r\n\t}\r\n\tcatch(err) {\r\n\t\tvar EnableBTG = false;\r\n\t}\r\n\tLog.Info(\"BTG FLAGGGGGGG = \" +EnableBTG);\r\n\t\r\n\tvar EnableBTGProc = 'exec procedure BTG_WMSPMasterProcedure {\"Version\" : \"'+Version+'\", \"EnableBTG\": '+EnableBTG+'};';\r\n    Log.Info(\"Logging EnableBTG.. \" + EnableBTGProc);\r\n\tqueryModule.update(EnableBTGProc);\r\n\t\r\n\tvar ActionEndProcedure = 'exec procedure ActionEnd {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\"};';\r\n\tvar ExecuteActionEndProcedure = queryModule.select(ActionEndProcedure);\r\n\tLog.Info(\"Logging ActionEndProcedure.. \" + ExecuteActionEndProcedure);\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tAFRunPlanInt:AFRunPlanInt\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.AFRunPlanInt', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var AFRunPlanInt = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan;\r\n\tvar Item = parsedParams.Item;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Logging Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Starting the Javascript for AF Solver..\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"Logging ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"Logging VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t\r\n\t//var HardQuarProcedure = 'exec procedure HardQuarantineMasterProcedure {\"Version\":\"'+Version+'\", \"Weekly\":true};';\r\n\t//var ExecuteHardQuarProcedure = queryModule.select(HardQuarProcedure);\r\n\t//Log.Info(\"Logging HardQuarantineMasterProcedure.. \" + ExecuteHardQuarProcedure);\r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\", \"RunIDParent\":\"'+RunIDParent+'\", \"ActionType\":\"'+ActionType+'\", \"Product\":\"'+Product+'\", \"ScenarioCount\":'+ScenarioCount+', \"VersionCount\":'+VersionCount+', \"ScenarioName\":\"'+Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"Logging ActionStartProcedure.. \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket is... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket is... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(queryForPotential3);\r\n\tLog.Info(\"Solver End Bucket is... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].['+Version+'] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n    var SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\t\r\n\tvar PopPropProcedure = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"'+Version+'\"};';\r\n\tvar ExecutePopPropProcedure = queryModule.update(PopPropProcedure);\r\n\tLog.Info(\"Logging PopulateSourcingProportionsToWeeklySolver.. \" + ExecutePopPropProcedure);\r\n\t\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar DepPlanAggWeek = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"Logging DeploymentPlanAggregationToWeek ... \" + DepPlanAggWeek);\r\n\tqueryModule.update(DepPlanAggWeek);\r\n\t\r\n\t//var MRPPreProcess = 'exec procedure PreSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n\t//queryModule.update(MRPPreProcess);\r\n    //Log.Info(\"Logging MRPPreProcess.. \" + MRPPreProcess);\r\n\t\r\n\tvar RunConstrainedPlan = 'exec procedure RunConstrainedPlanWeeklyItemScoped {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\",\"Item\" : \"' + Item + '\"};';\r\n    Log.Info(\"Logging RunConstrainedPlanWeeklyItemScoped.. \" + RunConstrainedPlan);\r\n\tqueryModule.update(RunConstrainedPlan);\r\n\t\r\n\tif(Financial === true){\r\n\t\tvar mpfinancialprestep = 'exec procedure RunMPFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar mpfinancialpoststep = 'exec procedure RunMPFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Logging Financial Pre Process ... \" + mpfinancialprestep);\r\n\t\tLog.Info(\"Logging Financial Post Process ... \" + mpfinancialpoststep);\r\n\t\tqueryModule.update(mpfinancialprestep);\r\n\t\tqueryModule.update(mpfinancialpoststep);\r\n\t}\r\n\t\r\n\t/* var MRPPostProcess = 'exec procedure PostSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    Log.Info(\"Logging MRPPostProcess.. \" + MRPPostProcess);\r\n\tqueryModule.update(MRPPostProcess); */\r\n\t\r\n\t/* var MasterShipment = 'exec procedure WMasterShipmentTruckStorageRequirements {\"Version\" : \"'+Version+'\"};';\r\n    Log.Info(\"Logging MasterShipment.. \" + MasterShipment);\r\n\tqueryModule.update(MasterShipment); */\r\n\t\r\n\t/* var SourcingAttainmentReport = 'exec procedure SourcingAttainmentReportWeekly {\"Version\" : \"'+Version+'\", \"DataObject\" : \"Week To Month\"};';\r\n    Log.Info(\"Logging SourcingAttainmentReport.. \" + SourcingAttainmentReport);\r\n\tqueryModule.update(SourcingAttainmentReport); */\r\n\t\r\n\tvar PostAnalytics = 'exec procedure SupplyPlan0600PostAnalytics_Weekly {\"Version\" : \"'+Version+'\"};';\r\n    Log.Info(\"Logging PostAnalytics.. \" + PostAnalytics);\r\n\tqueryModule.update(PostAnalytics);\r\n\t\r\n\ttry {\r\n\tvar queryForBTG = 'Select ([Version].[Version Name].['+Version+'] ) on row, ({(if(coalesce(Measure.[W BTG Enable Report],false) == true) then \"true\" else \"false\") as transient.[Param Value]}) on column;';\r\n\tvar BTGQResponse = queryModule.select(queryForBTG);\r\n\tvar dataT3 = cellsetModule.createCellSet(BTGQResponse);\r\n\tvar EnableBTG = dataT3.row(0).cell(dataT3.measureColumnIndex('Param Value'));\r\n\t}\r\n\tcatch(err) {\r\n\t\tvar EnableBTG = false;\r\n\t}\r\n\tLog.Info(\"BTG FLAGGGGGGG = \" +EnableBTG);\r\n\t\r\n\tvar EnableBTGProc = 'exec procedure BTG_WMSPMasterProcedure {\"Version\" : \"'+Version+'\", \"EnableBTG\": '+EnableBTG+'};';\r\n    Log.Info(\"Logging EnableBTG.. \" + EnableBTGProc);\r\n\tqueryModule.update(EnableBTGProc);\r\n\t\r\n\tvar ActionEndProcedure = 'exec procedure ActionEnd {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\"};';\r\n\tvar ExecuteActionEndProcedure = queryModule.select(ActionEndProcedure);\r\n\tLog.Info(\"Logging ActionEndProcedure.. \" + ExecuteActionEndProcedure);\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tAFRunPlanInt:AFRunPlanInt\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.AFRunPlanInt",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "a5ddd450-16bf-9eec-1475-2319f9b4077c",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212996,
    "Description": "Daily LP Solver Java script",
    "Documentation": "define('o9.referencesupplyplanning.RunDailyLPPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunDailyLPPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar SolverName = parsedParams.LPSolverName;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var SourcingProportionsQuery = 'exec procedure PopulateSourcingProportionsToDailySolver {\"Version\" : \"' + Version + '\"};';\r\n\tqueryModule.update(SourcingProportionsQuery);\r\n\t\r\n\tvar queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Monthly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Monthly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Monthly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit],Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\tvar peggingQuery = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Monthly PDO Generation and Transfer] * [Version].[Version Name].[' + Version + ']*  {Measure.[Supply Interaction IsActive]});';\r\n\tvar PeggingLSResponse = queryModule.select(peggingQuery);\r\n\tvar PeggingdataCellSet = cellsetModule.createCellSet(PeggingLSResponse);\r\n\t\r\n\t//var GeneratePegging = PeggingdataCellSet.row(0).cell(PeggingdataCellSet.measureColumnIndex('Supply Interaction IsActive'));\r\n\tvar GeneratePegging = true;\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\r\n\t\r\n\r\n\t\r\n\r\n\tvar queryForExecution = 'exec procedure RunDailyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ', \"DLPSolverName\" : \"' + SolverName + '\",\"DSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ', \"GeneratePeggings\" : '+ GeneratePegging +',\"DCampaignHorizon\":0,\"DIsMIP\":false};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunDailyLPPlanBatch:RunDailyLPPlanBatch\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.RunDailyLPPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunDailyLPPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar SolverName = parsedParams.LPSolverName;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var SourcingProportionsQuery = 'exec procedure PopulateSourcingProportionsToDailySolver {\"Version\" : \"' + Version + '\"};';\r\n\tqueryModule.update(SourcingProportionsQuery);\r\n\t\r\n\tvar queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Monthly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Monthly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Monthly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit],Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\tvar peggingQuery = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Monthly PDO Generation and Transfer] * [Version].[Version Name].[' + Version + ']*  {Measure.[Supply Interaction IsActive]});';\r\n\tvar PeggingLSResponse = queryModule.select(peggingQuery);\r\n\tvar PeggingdataCellSet = cellsetModule.createCellSet(PeggingLSResponse);\r\n\t\r\n\t//var GeneratePegging = PeggingdataCellSet.row(0).cell(PeggingdataCellSet.measureColumnIndex('Supply Interaction IsActive'));\r\n\tvar GeneratePegging = true;\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\r\n\t\r\n\r\n\t\r\n\r\n\tvar queryForExecution = 'exec procedure RunDailyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ', \"DLPSolverName\" : \"' + SolverName + '\",\"DSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ', \"GeneratePeggings\" : '+ GeneratePegging +',\"DCampaignHorizon\":0,\"DIsMIP\":false};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunDailyLPPlanBatch:RunDailyLPPlanBatch\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.RunDailyLPPlanBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "21d5185f-4a4b-e571-f76e-6cf787e91890",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212997,
    "Description": "JS code for Integration AF MP Solver",
    "Documentation": "define('o9.referencesupplyplanning.AFRunPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var AFRunPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan;\r\n\tvar Item = parsedParams.Item;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Logging Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Logging Javascript for AF Solver..\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"Logging ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"Logging VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t\r\n\t//var HardQuarProcedure = 'exec procedure HardQuarantineMasterProcedure {\"Version\":\"'+Version+'\", \"Weekly\":true};';\r\n\t//var ExecuteHardQuarProcedure = queryModule.select(HardQuarProcedure);\r\n\t//Log.Info(\"Logging HardQuarantineMasterProcedure.. \" + ExecuteHardQuarProcedure);\r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\", \"RunIDParent\":\"'+RunIDParent+'\", \"ActionType\":\"'+ActionType+'\", \"Product\":\"'+Product+'\", \"ScenarioCount\":'+ScenarioCount+', \"VersionCount\":'+VersionCount+', \"ScenarioName\":\"'+Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"Logging ActionStartProcedure.. \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(queryForPotential3);\r\n\tLog.Info(\"Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].['+Version+'] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n    var SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\t\r\n\tvar PopPropProcedure = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"'+Version+'\"};';\r\n\tvar ExecutePopPropProcedure = queryModule.update(PopPropProcedure);\r\n\tLog.Info(\"Logging PopulateSourcingProportionsToWeeklySolver.. \" + ExecutePopPropProcedure);\r\n\t\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar DepPlanAggWeek = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"Logging DeploymentPlanAggregationToWeek ... \" + DepPlanAggWeek);\r\n\tqueryModule.update(DepPlanAggWeek);\r\n\t\r\n\t//var MRPPreProcess = 'exec procedure PreSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n\t//queryModule.update(MRPPreProcess);\r\n    //Log.Info(\"Logging MRPPreProcess.. \" + MRPPreProcess);\r\n\t\r\n\tvar RunConstrainedPlan = 'exec procedure RunConstrainedPlanWeeklyIP {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\",\"Item\" : \"' + Item + '\"};';\r\n    Log.Info(\"Logging RunConstrainedPlanWeeklyIP.. \" + RunConstrainedPlan);\r\n\tqueryModule.update(RunConstrainedPlan);\r\n\t\r\n\tif(Financial === true){\r\n\t\tvar mpfinancialprestep = 'exec procedure RunMPFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar mpfinancialpoststep = 'exec procedure RunMPFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Logging Financial Pre Process ... \" + mpfinancialprestep);\r\n\t\tLog.Info(\"Logging Financial Post Process ... \" + mpfinancialpoststep);\r\n\t\tqueryModule.update(mpfinancialprestep);\r\n\t\tqueryModule.update(mpfinancialpoststep);\r\n\t}\r\n\t\r\n\t/* var MRPPostProcess = 'exec procedure PostSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    Log.Info(\"Logging MRPPostProcess.. \" + MRPPostProcess);\r\n\tqueryModule.update(MRPPostProcess); */\r\n\t\r\n\t/* var MasterShipment = 'exec procedure WMasterShipmentTruckStorageRequirements {\"Version\" : \"'+Version+'\"};';\r\n    Log.Info(\"Logging MasterShipment.. \" + MasterShipment);\r\n\tqueryModule.update(MasterShipment); */\r\n\t\r\n\tvar SourcingAttainmentReport = 'exec procedure SourcingAttainmentReportWeekly {\"Version\" : \"'+Version+'\", \"DataObject\" : \"Week To Month\"};';\r\n    Log.Info(\"Logging SourcingAttainmentReport.. \" + SourcingAttainmentReport);\r\n\tqueryModule.update(SourcingAttainmentReport);\r\n\t\r\n\tvar ExceptionMaster = 'exec procedure ExceptionsPlanningMasterProcedure {\"Version\" : [\"'+Version+'\"]};';\r\n    Log.Info(\"Logging ExceptionMaster.. \" + ExceptionMaster);\r\n\tqueryModule.update(ExceptionMaster);\r\n\t\r\n\ttry {\r\n\tvar queryForBTG = 'Select ([Version].[Version Name].['+Version+'] ) on row, ({(if(coalesce(Measure.[W BTG Enable Report],false) == true) then \"true\" else \"false\") as transient.[Param Value]}) on column;';\r\n\tvar BTGQResponse = queryModule.select(queryForBTG);\r\n\tvar dataT3 = cellsetModule.createCellSet(BTGQResponse);\r\n\tvar EnableBTG = dataT3.row(0).cell(dataT3.measureColumnIndex('Param Value'));\r\n\t}\r\n\tcatch(err) {\r\n\t\tvar EnableBTG = false;\r\n\t}\r\n\tLog.Info(\"BTG FLAGGGGGGG = \" +EnableBTG);\r\n\t\r\n\tvar EnableBTGProc = 'exec procedure BTG_WMSPMasterProcedure {\"Version\" : \"'+Version+'\", \"EnableBTG\": '+EnableBTG+'};';\r\n    Log.Info(\"Logging EnableBTG.. \" + EnableBTGProc);\r\n\tqueryModule.update(EnableBTGProc);\r\n\t\r\n\tvar ActionEndProcedure = 'exec procedure ActionEnd {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\"};';\r\n\tvar ExecuteActionEndProcedure = queryModule.select(ActionEndProcedure);\r\n\tLog.Info(\"Logging ActionEndProcedure.. \" + ExecuteActionEndProcedure);\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tAFRunPlanBatch:AFRunPlanBatch\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.AFRunPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var AFRunPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan;\r\n\tvar Item = parsedParams.Item;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Logging Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Logging Javascript for AF Solver..\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"Logging ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"Logging VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t\r\n\t//var HardQuarProcedure = 'exec procedure HardQuarantineMasterProcedure {\"Version\":\"'+Version+'\", \"Weekly\":true};';\r\n\t//var ExecuteHardQuarProcedure = queryModule.select(HardQuarProcedure);\r\n\t//Log.Info(\"Logging HardQuarantineMasterProcedure.. \" + ExecuteHardQuarProcedure);\r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\", \"RunIDParent\":\"'+RunIDParent+'\", \"ActionType\":\"'+ActionType+'\", \"Product\":\"'+Product+'\", \"ScenarioCount\":'+ScenarioCount+', \"VersionCount\":'+VersionCount+', \"ScenarioName\":\"'+Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"Logging ActionStartProcedure.. \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(queryForPotential3);\r\n\tLog.Info(\"Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].['+Version+'] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n    var SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\t\r\n\tvar PopPropProcedure = 'exec procedure PopulateSourcingProportionsToWeeklySolver {\"Version\" : \"'+Version+'\"};';\r\n\tvar ExecutePopPropProcedure = queryModule.update(PopPropProcedure);\r\n\tLog.Info(\"Logging PopulateSourcingProportionsToWeeklySolver.. \" + ExecutePopPropProcedure);\r\n\t\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Deployment Plan Aggregation] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n    Log.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\t\r\n\tvar DeploymentSourceVersion = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\tvar DepPlanAggWeek = 'exec procedure DeploymentPlanAggregationToWeek {\"SourceVersion\" : \"' + DeploymentSourceVersion + '\", \"TargetVersion\" : \"' + Version + '\", \"DPAggPrefix\" : \"DPAggPrefix\", \"DataObject\" : \"Deployment Plan Aggregation\"};';\r\n\tLog.Info(\"Logging DeploymentPlanAggregationToWeek ... \" + DepPlanAggWeek);\r\n\tqueryModule.update(DepPlanAggWeek);\r\n\t\r\n\t//var MRPPreProcess = 'exec procedure PreSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n\t//queryModule.update(MRPPreProcess);\r\n    //Log.Info(\"Logging MRPPreProcess.. \" + MRPPreProcess);\r\n\t\r\n\tvar RunConstrainedPlan = 'exec procedure RunConstrainedPlanWeeklyIP {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\",\"Item\" : \"' + Item + '\"};';\r\n    Log.Info(\"Logging RunConstrainedPlanWeeklyIP.. \" + RunConstrainedPlan);\r\n\tqueryModule.update(RunConstrainedPlan);\r\n\t\r\n\tif(Financial === true){\r\n\t\tvar mpfinancialprestep = 'exec procedure RunMPFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar mpfinancialpoststep = 'exec procedure RunMPFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Logging Financial Pre Process ... \" + mpfinancialprestep);\r\n\t\tLog.Info(\"Logging Financial Post Process ... \" + mpfinancialpoststep);\r\n\t\tqueryModule.update(mpfinancialprestep);\r\n\t\tqueryModule.update(mpfinancialpoststep);\r\n\t}\r\n\t\r\n\t/* var MRPPostProcess = 'exec procedure PostSolverConstrainedRequirementsPlanGenerationBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"]};';\r\n    Log.Info(\"Logging MRPPostProcess.. \" + MRPPostProcess);\r\n\tqueryModule.update(MRPPostProcess); */\r\n\t\r\n\t/* var MasterShipment = 'exec procedure WMasterShipmentTruckStorageRequirements {\"Version\" : \"'+Version+'\"};';\r\n    Log.Info(\"Logging MasterShipment.. \" + MasterShipment);\r\n\tqueryModule.update(MasterShipment); */\r\n\t\r\n\tvar SourcingAttainmentReport = 'exec procedure SourcingAttainmentReportWeekly {\"Version\" : \"'+Version+'\", \"DataObject\" : \"Week To Month\"};';\r\n    Log.Info(\"Logging SourcingAttainmentReport.. \" + SourcingAttainmentReport);\r\n\tqueryModule.update(SourcingAttainmentReport);\r\n\t\r\n\tvar ExceptionMaster = 'exec procedure ExceptionsPlanningMasterProcedure {\"Version\" : [\"'+Version+'\"]};';\r\n    Log.Info(\"Logging ExceptionMaster.. \" + ExceptionMaster);\r\n\tqueryModule.update(ExceptionMaster);\r\n\t\r\n\ttry {\r\n\tvar queryForBTG = 'Select ([Version].[Version Name].['+Version+'] ) on row, ({(if(coalesce(Measure.[W BTG Enable Report],false) == true) then \"true\" else \"false\") as transient.[Param Value]}) on column;';\r\n\tvar BTGQResponse = queryModule.select(queryForBTG);\r\n\tvar dataT3 = cellsetModule.createCellSet(BTGQResponse);\r\n\tvar EnableBTG = dataT3.row(0).cell(dataT3.measureColumnIndex('Param Value'));\r\n\t}\r\n\tcatch(err) {\r\n\t\tvar EnableBTG = false;\r\n\t}\r\n\tLog.Info(\"BTG FLAGGGGGGG = \" +EnableBTG);\r\n\t\r\n\tvar EnableBTGProc = 'exec procedure BTG_WMSPMasterProcedure {\"Version\" : \"'+Version+'\", \"EnableBTG\": '+EnableBTG+'};';\r\n    Log.Info(\"Logging EnableBTG.. \" + EnableBTGProc);\r\n\tqueryModule.update(EnableBTGProc);\r\n\t\r\n\tvar ActionEndProcedure = 'exec procedure ActionEnd {\"User\":\"'+User+'\", \"RunID\":\"'+RunID+'\"};';\r\n\tvar ExecuteActionEndProcedure = queryModule.select(ActionEndProcedure);\r\n\tLog.Info(\"Logging ActionEndProcedure.. \" + ExecuteActionEndProcedure);\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tAFRunPlanBatch:AFRunPlanBatch\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.AFRunPlanBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "1005f285-0d81-3358-63f6-268c9eb5e8bb",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212998,
    "Description": "JavaScript to run Monthly LP Solver",
    "Documentation": "define('o9.referencesupplyplanning.RunMonthlyLPPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunMonthlyLPPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar SolverName = parsedParams.LPSolverName;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &MonthlySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Monthly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &MonthlySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Monthly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &MonthlySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Monthly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\tvar peggingQuery = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Monthly PDO Generation and Transfer] * [Version].[Version Name].[' + Version + ']*  {Measure.[Supply Interaction IsActive]});';\r\n\tvar PeggingLSResponse = queryModule.select(peggingQuery);\r\n\tvar PeggingdataCellSet = cellsetModule.createCellSet(PeggingLSResponse);\r\n\t\r\n\tvar GeneratePegging = true;\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\t\r\n\r\n\t\r\n\r\n\tvar queryForExecution = 'exec procedure RunMonthlyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ', \"MLPSolverName\" : \"' + SolverName + '\",\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ', \"GeneratePeggings\" : true,\"MCampaignHorizon\":0,\"MIsMIP\":false};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunMonthlyLPPlanBatch:RunMonthlyLPPlanBatch\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.RunMonthlyLPPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunMonthlyLPPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar SolverName = parsedParams.LPSolverName;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &MonthlySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Monthly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &MonthlySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Monthly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &MonthlySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Monthly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\tvar peggingQuery = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Monthly PDO Generation and Transfer] * [Version].[Version Name].[' + Version + ']*  {Measure.[Supply Interaction IsActive]});';\r\n\tvar PeggingLSResponse = queryModule.select(peggingQuery);\r\n\tvar PeggingdataCellSet = cellsetModule.createCellSet(PeggingLSResponse);\r\n\t\r\n\tvar GeneratePegging = true;\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\t\r\n\r\n\t\r\n\r\n\tvar queryForExecution = 'exec procedure RunMonthlyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ', \"MLPSolverName\" : \"' + SolverName + '\",\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ', \"GeneratePeggings\" : true,\"MCampaignHorizon\":0,\"MIsMIP\":false};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunMonthlyLPPlanBatch:RunMonthlyLPPlanBatch\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.RunMonthlyLPPlanBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "6fcfeee4-5d62-4381-a4f1-15f509ed5518",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 212999,
    "Description": "SegmentedFullRun",
    "Documentation": "define('o9.referenceSP.SegmentedFullRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var SegmentedFullRun = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        \r\n        var Version = parsedParams.Version;\r\n\t\t\r\n\t\tvar MNSegmentNumber = parsedParams.MNSegmentNumber;\r\n\t\tvar MNSegmentNumber2 = parsedParams.MNSegmentNumber2;\r\n\t\tvar MNSegmentNumber3 = parsedParams.MNSegmentNumber3;\r\n\t\t\r\n\r\n        var SegmentNumber = parsedParams.SegmentNumber;\r\n       \r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        Log.Info('[Segmented Full Run JS] => Passed Fields Version is ' + Version);\r\n\t\tLog.Info('[Segmented Full Run JS] => Passed Fields SegmentNumber is ' + SegmentNumber);\r\n\t\tif (SegmentNumber !== null && (MNSegmentNumber !== null || MNSegmentNumber2 !== null || MNSegmentNumber3 !== null)){\r\n\t\t\tLog.Error(\"Both Segment and Item Location are there\");\r\n\t\t\tRuleOutputToUI = {Status: 'Error',Message: 'Both Segment Number and Material Nodes are selected'};\r\n            return;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (SegmentNumber === null || SegmentNumber === undefined) {\r\n\t\t\tLog.Info(\"Segment Number is empty\");\r\n\t\t\t}       \r\n\t\t\telse{\r\n\t\t\tListofSegmentNumber = Object.values(SegmentNumber)\r\n\t\t\t\r\n\t\t\tfor (let Number of ListofSegmentNumber){\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + Number);\r\n\t\t\t\tvar scopetopopulateflag = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + Number + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflag);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + MNSegmentNumber + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber2 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber2 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + MNSegmentNumber2 + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber2);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber3 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber3 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + MNSegmentNumber3 + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber3);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n    \r\n    };\r\n\r\n\r\n    return {\r\n        SegmentedFullRun: SegmentedFullRun\r\n    };\r\n});",
    "Code": "define('o9.referenceSP.SegmentedFullRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var SegmentedFullRun = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        \r\n        var Version = parsedParams.Version;\r\n\t\t\r\n\t\tvar MNSegmentNumber = parsedParams.MNSegmentNumber;\r\n\t\tvar MNSegmentNumber2 = parsedParams.MNSegmentNumber2;\r\n\t\tvar MNSegmentNumber3 = parsedParams.MNSegmentNumber3;\r\n\t\t\r\n\r\n        var SegmentNumber = parsedParams.SegmentNumber;\r\n       \r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        Log.Info('[Segmented Full Run JS] => Passed Fields Version is ' + Version);\r\n\t\tLog.Info('[Segmented Full Run JS] => Passed Fields SegmentNumber is ' + SegmentNumber);\r\n\t\tif (SegmentNumber !== null && (MNSegmentNumber !== null || MNSegmentNumber2 !== null || MNSegmentNumber3 !== null)){\r\n\t\t\tLog.Error(\"Both Segment and Item Location are there\");\r\n\t\t\tRuleOutputToUI = {Status: 'Error',Message: 'Both Segment Number and Material Nodes are selected'};\r\n            return;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (SegmentNumber === null || SegmentNumber === undefined) {\r\n\t\t\tLog.Info(\"Segment Number is empty\");\r\n\t\t\t}       \r\n\t\t\telse{\r\n\t\t\tListofSegmentNumber = Object.values(SegmentNumber)\r\n\t\t\t\r\n\t\t\tfor (let Number of ListofSegmentNumber){\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + Number);\r\n\t\t\t\tvar scopetopopulateflag = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + Number + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflag);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + MNSegmentNumber + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber2 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber2 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + MNSegmentNumber2 + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber2);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (MNSegmentNumber3 !== null){\r\n\t\t\t\t\r\n\t\t\t\tLog.Info('[Segmented Run] => SegmentNumber : ' + MNSegmentNumber);\r\n\t\t\t\tvar scopetopopulateflagMNSegmNumber3 = 'scope: ([Version].[Version Name].filter(#.Name in {\"'+Version+'\"}) * [Location].[Location] * [Sales Domain].[Customer Group] * [Item].[Item] * [Demand Type].[Demand Type] * [Time].[Week] * [Demand].[DemandID] ) ; Measure.[W Demand Graph Flag] = if (Measure.[W Item Segment Number] == ' + MNSegmentNumber3 + ') then True else Measure.[W Demand Graph Flag];end scope;'\r\n\t\t\t\tqueryModule.update(scopetopopulateflagMNSegmNumber3);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n    \r\n    };\r\n\r\n\r\n    return {\r\n        SegmentedFullRun: SegmentedFullRun\r\n    };\r\n});",
    "ModuleName": "o9.referenceSP.SegmentedFullRun",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "fcdb5d8a-2b7c-bc29-264b-4c0ef809d7ba",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213000,
    "Description": "Java script to run requirements plan Batch",
    "Documentation": "define('o9.referencesupplyplanning.RunRequirementsPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunRequirementsPlan = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],Measure.[W Solver Flag Inventory Plan Type],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\tvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\tvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverFlagNoPeggings = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSolverFlagSupplyCodePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverFlagShelfLifePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPLatePlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RequirementsPlanGenerationWithinandBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"], \"SolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"SolverStartingBucket\" : \"' + SolverStartBucket + '\", \"SolverEndingBucket\" : \"' + SolverEndBucket + '\",\"SolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"SolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"SolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"SolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"SolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"SolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"SolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"MaterialConstrained\" : \"true\",\"CapacityConstrained\" : \"false\",\"SolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"SolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"SolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"SolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"SolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"SolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"SolverDemandBuildAheadLimit\" : \"' + SCPSolverDemandBuildAheadLimit + '\",\"SolverDemandBuildLateLimit\" : \"' + SCPSolverDemandBuildLateLimit + '\",\"NoPeggings\" : \"' + SCPSolverFlagNoPeggings + '\",\"SupplyCodePlan\" : \"' + SCPSolverFlagSupplyCodePlan + '\",\"ShelfLifePlan\" : \"' + SCPSolverFlagShelfLifePlan +'\",\"PlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"MinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"LatePlanStrategy\" : \"' + SCPLatePlanStrategy + '\",\"DemandSliceThreshold\" : \"' + SCPSolverDemandSliceThreshold + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunRequirementsPlan:RunRequirementsPlan\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.RunRequirementsPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunRequirementsPlan = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n    var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],Measure.[W Solver Flag Inventory Plan Type],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\tvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\tvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\tvar SCPSolverFlagNoPeggings = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\tvar SCPSolverFlagSupplyCodePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverFlagShelfLifePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\tvar SCPLatePlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RequirementsPlanGenerationWithinandBeyondSupplierleadTimes {\"Version\" : [\"' + Version + '\"], \"SolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"SolverStartingBucket\" : \"' + SolverStartBucket + '\", \"SolverEndingBucket\" : \"' + SolverEndBucket + '\",\"SolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"SolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"SolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"SolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"SolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"SolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"SolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"MaterialConstrained\" : \"true\",\"CapacityConstrained\" : \"false\",\"SolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"SolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"SolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"SolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"SolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"SolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"SolverDemandBuildAheadLimit\" : \"' + SCPSolverDemandBuildAheadLimit + '\",\"SolverDemandBuildLateLimit\" : \"' + SCPSolverDemandBuildLateLimit + '\",\"NoPeggings\" : \"' + SCPSolverFlagNoPeggings + '\",\"SupplyCodePlan\" : \"' + SCPSolverFlagSupplyCodePlan + '\",\"ShelfLifePlan\" : \"' + SCPSolverFlagShelfLifePlan +'\",\"PlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"MinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"LatePlanStrategy\" : \"' + SCPLatePlanStrategy + '\",\"DemandSliceThreshold\" : \"' + SCPSolverDemandSliceThreshold + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunRequirementsPlan:RunRequirementsPlan\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.RunRequirementsPlan",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0ffd135a-28df-4838-acdb-63705ec6efdb",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213001,
    "Description": "Replenishment Scoped Solver Run in a batch",
    "Documentation": "define('o9.referencesupplyplanning.ReplenishmentScopedSolverRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n  var DailyRunPlan = function(o9Params){\r\nvar queryModule = require('o9/data/query');\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar Version = parsedParams.Version;\r\nvar RunID = parsedParams.RunID;\r\nvar ActionType = parsedParams.ActionType;\r\nvar Product = parsedParams.Product;\r\nvar User = parsedParams.User;\r\nvar RunIDParent = parsedParams.RunIDParent;\r\nvar Financial = parsedParams.RunFinancialPlan;\r\nvar cellsetModule = require('o9/data/cellset');\r\nLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\nLog.Info(\"Executing Javasrcipt\");\r\nvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\nvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\nLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\nvar ScenarioCount = getScenarioCount.Result;\r\nvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\nvar getVersionCount = queryModule.select(queryForVersionCount);\r\nLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\nvar VersionCount = getVersionCount.Result;\r\nvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\nvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\nLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\r\n  var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n  var lsResponse = queryModule.select(queryForPotential);\r\n  Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n  var DailySolverStartBucket = lsResponse.Result;\r\n\r\nvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n  var lsResponse2 = queryModule.select(queryForPotential2);\r\n  Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\nvar DailySolverCurrentBucket = lsResponse2.Result;\r\n\r\nvar queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n  var lsResponse3 = queryModule.select(queryForPotential3);\r\n  Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\nvar DailySolverEndBucket = lsResponse3.Result;\r\n\r\nvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n  var lsResponse4 = queryModule.select(queryForPotential4);\r\n  Log.Info(\"SCSParameters ... \" + lsResponse4);\r\nvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n  \r\nvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\nvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\nvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\nvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\nvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\nvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\nvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\nvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\nvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\nvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\nvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\nvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\nvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\nvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\nvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\nvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\nvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\r\nvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\nvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\nvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\nvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\nvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\nvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\nvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\nvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\nvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\r\n// Fetching the IdentifySegmentsDaily procedure\r\nvar identifySegments_Daily = 'exec procedure IdentifySegmentsDaily {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\"};';\r\nLog.Info(\"IdentifySegmentsDaily ... \" + identifySegments_Daily);\r\nqueryModule.update(identifySegments_Daily);\r\n\r\n\r\n// Fetching the addSequenceToNetworkSegmentID_Daily procedure\r\nvar addSequenceToNetworkSegmentID_Daily='exec procedure AddSequenceToNetworkSegmentID_Daily {\"Version\" : [\"' + Version + '\"]};';\r\nLog.Info(\" AddSequenceToNetworkSegmentID_Daily... \" + addSequenceToNetworkSegmentID_Daily);\r\nqueryModule.update(addSequenceToNetworkSegmentID_Daily);\r\n\r\n// Fetching the DailyInputBaselinePopulation procedure\r\nvar InputBaselinePopulation_Daily ='exec procedure DailyInputBaselinePopulation {\"Version\" : \"' + Version + '\"};';\r\nLog.Info(\"DailyInputBaselinePopulation ... \" + InputBaselinePopulation_Daily);\r\nqueryModule.update(InputBaselinePopulation_Daily);\r\n\r\n// Fetching the Replenishment_DemandSelection procedure\r\nvar demandSelection =  'exec procedure  Replenishment_DemandSelection {\"Version\" : [\"' + Version + '\"]};';\r\nLog.Info(\"demandSelection ... \" + demandSelection);\r\nqueryModule.update(demandSelection);\r\n\r\n\r\nvar queryForExecution = 'exec procedure Replenishment_ScopedSolverRun {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + '};';\r\n  Log.Info(\"SCS Command ... \" + queryForExecution);\r\nqueryModule.update(queryForExecution);\r\nif(Financial === true){\r\n  var ctfinancialprestep = 'exec procedure RunCTFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n  var ctfinancialpoststep = 'exec procedure RunCTFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n  Log.Info(\"Financial Pre Process ... \" + ctfinancialprestep);\r\n  Log.Info(\"Financial Post Process ... \" + ctfinancialpoststep);\r\n  queryModule.update(ctfinancialprestep);\r\n  queryModule.update(ctfinancialpoststep);\r\n}\r\n};\r\n\r\n\r\nreturn {\r\n  DailyRunPlan:DailyRunPlan\r\n};\r\n});",
    "Code": "define('o9.referencesupplyplanning.ReplenishmentScopedSolverRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n  var DailyRunPlan = function(o9Params){\r\nvar queryModule = require('o9/data/query');\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar Version = parsedParams.Version;\r\nvar RunID = parsedParams.RunID;\r\nvar ActionType = parsedParams.ActionType;\r\nvar Product = parsedParams.Product;\r\nvar User = parsedParams.User;\r\nvar RunIDParent = parsedParams.RunIDParent;\r\nvar Financial = parsedParams.RunFinancialPlan;\r\nvar cellsetModule = require('o9/data/cellset');\r\nLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\nLog.Info(\"Executing Javasrcipt\");\r\nvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\nvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\nLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\nvar ScenarioCount = getScenarioCount.Result;\r\nvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\nvar getVersionCount = queryModule.select(queryForVersionCount);\r\nLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\nvar VersionCount = getVersionCount.Result;\r\nvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\nvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\nLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\r\n  var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n  var lsResponse = queryModule.select(queryForPotential);\r\n  Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n  var DailySolverStartBucket = lsResponse.Result;\r\n\r\nvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n  var lsResponse2 = queryModule.select(queryForPotential2);\r\n  Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\nvar DailySolverCurrentBucket = lsResponse2.Result;\r\n\r\nvar queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n  var lsResponse3 = queryModule.select(queryForPotential3);\r\n  Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\nvar DailySolverEndBucket = lsResponse3.Result;\r\n\r\nvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n  var lsResponse4 = queryModule.select(queryForPotential4);\r\n  Log.Info(\"SCSParameters ... \" + lsResponse4);\r\nvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n  \r\nvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\nvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\nvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\nvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\nvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\nvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\nvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\nvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\nvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\nvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\nvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\nvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\nvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\nvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\nvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\nvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\nvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\r\nvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\nvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\nvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\nvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\nvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\nvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\nvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\nvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\nvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\r\n// Fetching the IdentifySegmentsDaily procedure\r\nvar identifySegments_Daily = 'exec procedure IdentifySegmentsDaily {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\"};';\r\nLog.Info(\"IdentifySegmentsDaily ... \" + identifySegments_Daily);\r\nqueryModule.update(identifySegments_Daily);\r\n\r\n\r\n// Fetching the addSequenceToNetworkSegmentID_Daily procedure\r\nvar addSequenceToNetworkSegmentID_Daily='exec procedure AddSequenceToNetworkSegmentID_Daily {\"Version\" : [\"' + Version + '\"]};';\r\nLog.Info(\" AddSequenceToNetworkSegmentID_Daily... \" + addSequenceToNetworkSegmentID_Daily);\r\nqueryModule.update(addSequenceToNetworkSegmentID_Daily);\r\n\r\n// Fetching the DailyInputBaselinePopulation procedure\r\nvar InputBaselinePopulation_Daily ='exec procedure DailyInputBaselinePopulation {\"Version\" : \"' + Version + '\"};';\r\nLog.Info(\"DailyInputBaselinePopulation ... \" + InputBaselinePopulation_Daily);\r\nqueryModule.update(InputBaselinePopulation_Daily);\r\n\r\n// Fetching the Replenishment_DemandSelection procedure\r\nvar demandSelection =  'exec procedure  Replenishment_DemandSelection {\"Version\" : [\"' + Version + '\"]};';\r\nLog.Info(\"demandSelection ... \" + demandSelection);\r\nqueryModule.update(demandSelection);\r\n\r\n\r\nvar queryForExecution = 'exec procedure Replenishment_ScopedSolverRun {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + '};';\r\n  Log.Info(\"SCS Command ... \" + queryForExecution);\r\nqueryModule.update(queryForExecution);\r\nif(Financial === true){\r\n  var ctfinancialprestep = 'exec procedure RunCTFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n  var ctfinancialpoststep = 'exec procedure RunCTFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n  Log.Info(\"Financial Pre Process ... \" + ctfinancialprestep);\r\n  Log.Info(\"Financial Post Process ... \" + ctfinancialpoststep);\r\n  queryModule.update(ctfinancialprestep);\r\n  queryModule.update(ctfinancialpoststep);\r\n}\r\n};\r\n\r\n\r\nreturn {\r\n  DailyRunPlan:DailyRunPlan\r\n};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.ReplenishmentScopedSolverRun",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "f31ba62a-8141-40f2-bc94-f1898d3f105a",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213002,
    "Description": "Run Deployment plan procedure in a batch",
    "Documentation": "define('o9.referencesupplyplanning.DeploymentRunPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeploymentRunPlan = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar DataObject = parsedParams.DataObject;\r\n\tvar DeleteandCreateScenario = parsedParams.DeleteandCreateScenario;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tif(DeleteandCreateScenario === true){\r\n\t\tvar delscenario = 'Deleteversion (\"Deployment Plan\");';\r\n\t\tqueryModule.update(delscenario);\r\n\t\tvar createscenario = 'CreateScenario(0, 1, \"Deployment Plan\");';\r\n\t\tqueryModule.update(createscenario);\r\n\t\tVersion = \"Deployment Plan\"\r\n\t}\r\n    var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n    var DailySolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\n\tvar DailySolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar extensionDays = 'Select ([Version].[Version Name].['+Version+']) on row, ({sum(Measure.[Solver Extension Days],0) as transient.[Extension Day]}) on column;'\r\n\tvar getExtensionDays = queryModule.select(extensionDays);\r\n\tvar cellsetExtensionDays = cellsetModule.createCellSet(getExtensionDays);\r\n\tvar ExtensionDays = cellsetExtensionDays.row(0).cell(cellsetExtensionDays.measureColumnIndex('Extension Day'));\r\n\t\r\n\tvar varyingCapacityBuckets = 'Select ([Version].[Version Name].['+Version+']) on row, ({Measure.[D Varying Capacity Buckets]}) on column;'\r\n\tvar getVaryingCapacityBuckets = queryModule.select(varyingCapacityBuckets);\r\n\tvar cellsetVaryingCapacityBuckets = cellsetModule.createCellSet(getVaryingCapacityBuckets);\r\n\tvar VaryingCapacityBuckets = cellsetVaryingCapacityBuckets.row(0).cell(cellsetVaryingCapacityBuckets.measureColumnIndex('D Varying Capacity Buckets'));\r\n\t\r\n\tvar queryForPotential3 = 'select Time.[Day].filter(#.Key ==dateadd(&DeploymentSolverEndBucket.first.Key, '+ExtensionDays+', \"Day\")).element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\n\tvar DailySolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],Measure.[D Solver Flag Inventory Plan Type],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Solver Demand Slice Threshold],Measure.[D Late Plan Strategy],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\tvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n\tvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\r\n\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + ',\"DVaryingCapacityBuckets\" : \"' + VaryingCapacityBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t// Uncomment to enable production plan handoff\r\n\t\r\n\t/*\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Production Plan Handoff] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n\tLog.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\tvar MPScenarioName = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\tvar queryforProductionPlanHandoff = 'exec procedure ProductionPlanHandoff {\"DataObject\": \"Production Plan Handoff\",\"SourceVersion\" : \"'+ MPScenarioName +'\", \"TargetVersion\" : \"' + Version + '\"};';\r\n\tqueryModule.update(queryforProductionPlanHandoff);\r\n\t*/\r\n\t\r\n\t//var queryforExceptionsPlan = 'exec procedure ExceptionsPlanningMasterProcedureDaily {\"Version\" : [\"' + Version + '\"]};';\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Production Plan Handoff] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n\tLog.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\tvar MPScenarioName = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\t// var queryforPreprocess = 'exec procedure DeploymentPlanPreprocess {\"Version\" : \"' + Version + '\"};';\r\n\tvar queryforPreprocess = 'exec procedure DeploymentPlanPreProcessingMaster {\"TargetVersion\" : \"' + Version + '\", \"DataObject\": \"'+ DataObject +'\", \"SourceVersion\" : \"'+ MPScenarioName +'\"};';\r\n\t\r\n\t\r\n\tvar queryforPostProcess = 'exec procedure DeploymentPlanPostProcessingMaster {\"Version\" : \"[' + Version + ']\"};';\r\n\t\r\n\t// Executing Queries\r\n\tqueryModule.update(queryforPreprocess);\r\n\tqueryModule.update(queryForExecution);\r\n\tqueryModule.update(queryforPostProcess);\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDeploymentRunPlan:DeploymentRunPlan\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.DeploymentRunPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeploymentRunPlan = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar DataObject = parsedParams.DataObject;\r\n\tvar DeleteandCreateScenario = parsedParams.DeleteandCreateScenario;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tif(DeleteandCreateScenario === true){\r\n\t\tvar delscenario = 'Deleteversion (\"Deployment Plan\");';\r\n\t\tqueryModule.update(delscenario);\r\n\t\tvar createscenario = 'CreateScenario(0, 1, \"Deployment Plan\");';\r\n\t\tqueryModule.update(createscenario);\r\n\t\tVersion = \"Deployment Plan\"\r\n\t}\r\n    var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n    var DailySolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\n\tvar DailySolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar extensionDays = 'Select ([Version].[Version Name].['+Version+']) on row, ({sum(Measure.[Solver Extension Days],0) as transient.[Extension Day]}) on column;'\r\n\tvar getExtensionDays = queryModule.select(extensionDays);\r\n\tvar cellsetExtensionDays = cellsetModule.createCellSet(getExtensionDays);\r\n\tvar ExtensionDays = cellsetExtensionDays.row(0).cell(cellsetExtensionDays.measureColumnIndex('Extension Day'));\r\n\t\r\n\tvar varyingCapacityBuckets = 'Select ([Version].[Version Name].['+Version+']) on row, ({Measure.[D Varying Capacity Buckets]}) on column;'\r\n\tvar getVaryingCapacityBuckets = queryModule.select(varyingCapacityBuckets);\r\n\tvar cellsetVaryingCapacityBuckets = cellsetModule.createCellSet(getVaryingCapacityBuckets);\r\n\tvar VaryingCapacityBuckets = cellsetVaryingCapacityBuckets.row(0).cell(cellsetVaryingCapacityBuckets.measureColumnIndex('D Varying Capacity Buckets'));\r\n\t\r\n\tvar queryForPotential3 = 'select Time.[Day].filter(#.Key ==dateadd(&DeploymentSolverEndBucket.first.Key, '+ExtensionDays+', \"Day\")).element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\n\tvar DailySolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],Measure.[D Solver Flag Inventory Plan Type],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Solver Demand Slice Threshold],Measure.[D Late Plan Strategy],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\tvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n\tvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\r\n\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + ',\"DVaryingCapacityBuckets\" : \"' + VaryingCapacityBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t// Uncomment to enable production plan handoff\r\n\t\r\n\t/*\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Production Plan Handoff] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n\tLog.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\tvar MPScenarioName = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\tvar queryforProductionPlanHandoff = 'exec procedure ProductionPlanHandoff {\"DataObject\": \"Production Plan Handoff\",\"SourceVersion\" : \"'+ MPScenarioName +'\", \"TargetVersion\" : \"' + Version + '\"};';\r\n\tqueryModule.update(queryforProductionPlanHandoff);\r\n\t*/\r\n\t\r\n\t//var queryforExceptionsPlan = 'exec procedure ExceptionsPlanningMasterProcedureDaily {\"Version\" : [\"' + Version + '\"]};';\r\n\t\r\n\tvar queryForPotential5 = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Production Plan Handoff] * &CWV ) on row, ({Measure.[Supply Interaction Source Version Name]}) on column;';\r\n\tvar lsResponse5 = queryModule.select(queryForPotential5);\r\n\tLog.Info(\"lsResponse5 ... \" + lsResponse5);\r\n\tvar dataCellSet2 = cellsetModule.createCellSet(lsResponse5);\r\n\tvar MPScenarioName = dataCellSet2.row(0).cell(dataCellSet2.measureColumnIndex('Supply Interaction Source Version Name'));\r\n\t\r\n\t// var queryforPreprocess = 'exec procedure DeploymentPlanPreprocess {\"Version\" : \"' + Version + '\"};';\r\n\tvar queryforPreprocess = 'exec procedure DeploymentPlanPreProcessingMaster {\"TargetVersion\" : \"' + Version + '\", \"DataObject\": \"'+ DataObject +'\", \"SourceVersion\" : \"'+ MPScenarioName +'\"};';\r\n\t\r\n\t\r\n\tvar queryforPostProcess = 'exec procedure DeploymentPlanPostProcessingMaster {\"Version\" : \"[' + Version + ']\"};';\r\n\t\r\n\t// Executing Queries\r\n\tqueryModule.update(queryforPreprocess);\r\n\tqueryModule.update(queryForExecution);\r\n\tqueryModule.update(queryforPostProcess);\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDeploymentRunPlan:DeploymentRunPlan\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.DeploymentRunPlan",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "13798112-64ef-4d2f-b820-a49a0f050248",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213003,
    "Description": "JavaScript to run Monthly SCS Solver",
    "Documentation": "define('o9.referencesupplyplanning.RunMonthlyPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunMonthlyPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.Plan;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &MonthlySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Monthly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &MonthlySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Monthly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &MonthlySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Monthly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RunMonthlyBasicPlan {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"MSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"MSolverCapacityBandsToMinimizeLatenes\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"MSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"MSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"MSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"MSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"MSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"MSolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"MSolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"MSolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"MSolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"MSolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"MNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"MSolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\tif(Financial === true){\r\n\t\tvar monthlyfinancialprestep = 'exec procedure RunMonthlyFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar monthlyfinancialpoststep = 'exec procedure RunMonthlyFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Financial Pre Process ... \" + monthlyfinancialprestep);\r\n\t\tLog.Info(\"Financial Post Process ... \" + monthlyfinancialpoststep);\r\n\t\tqueryModule.update(monthlyfinancialprestep);\r\n\t\tqueryModule.update(monthlyfinancialpoststep);\r\n\t}\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunMonthlyPlanBatch:RunMonthlyPlanBatch\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.RunMonthlyPlanBatch', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RunMonthlyPlanBatch = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.Plan;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t//var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\t//var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t//Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &MonthlySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Monthly Solver Start Bucket ... \" + lsResponse);\r\n    var SolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &MonthlySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Monthly Solver Current Bucket ... \" + lsResponse2);\r\n\tvar SolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar queryForPotential3 = 'SELECT &MonthlySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Monthly Solver End Bucket ... \" + lsResponse3);\r\n\tvar SolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RunMonthlyBasicPlan {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"MSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"MSolverCapacityBandsToMinimizeLatenes\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"MSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"MSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"MSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"MSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"MSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"MSolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"MSolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"MSolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"MSolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"MSolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"MNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"MSolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\tif(Financial === true){\r\n\t\tvar monthlyfinancialprestep = 'exec procedure RunMonthlyFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar monthlyfinancialpoststep = 'exec procedure RunMonthlyFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Financial Pre Process ... \" + monthlyfinancialprestep);\r\n\t\tLog.Info(\"Financial Post Process ... \" + monthlyfinancialpoststep);\r\n\t\tqueryModule.update(monthlyfinancialprestep);\r\n\t\tqueryModule.update(monthlyfinancialpoststep);\r\n\t}\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tRunMonthlyPlanBatch:RunMonthlyPlanBatch\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.RunMonthlyPlanBatch",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "643ecfe8-eebb-429f-8ec7-2c32db383402",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213004,
    "Description": "Procurement Scoped Solver Run in the batch",
    "Documentation": "define('o9.referencesupplyplanning.ProcurementScopedSolverRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n  var RunRequirementsPlan = function(o9Params){\r\nvar queryModule = require('o9/data/query');\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar Version = parsedParams.Version;\r\nvar RunID = parsedParams.RunID;\r\nvar ActionType = parsedParams.ActionType;\r\nvar Product = parsedParams.Product;\r\nvar User = parsedParams.User;\r\nvar RunIDParent = parsedParams.RunIDParent;\r\nvar cellsetModule = require('o9/data/cellset');\r\nLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\nLog.Info(\"Executing Javasrcipt\");\r\nvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\nvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\nLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\nvar ScenarioCount = getScenarioCount.Result;\r\nvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\nvar getVersionCount = queryModule.select(queryForVersionCount);\r\nLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\nvar VersionCount = getVersionCount.Result;\r\nvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\nvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\nLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n  var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n  var lsResponse = queryModule.select(queryForPotential);\r\n  Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n  var SolverStartBucket = lsResponse.Result;\r\n\r\nvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n  var lsResponse2 = queryModule.select(queryForPotential2);\r\n  Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\nvar SolverCurrentBucket = lsResponse2.Result;\r\n\r\nvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n  var lsResponse3 = queryModule.select(queryForPotential3);\r\n  Log.Info(\"Solver End Bucket ... \" + lsResponse3);\r\nvar SolverEndBucket = lsResponse3.Result;\r\n\r\nvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],Measure.[W Solver Flag Inventory Plan Type],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Skip SS For Unviable Buckets]});';\r\n  var lsResponse4 = queryModule.select(queryForPotential4);\r\n  Log.Info(\"SCSParameters ... \" + lsResponse4);\r\nvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n  \r\nvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\nvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\nvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\nvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\nvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type'));\r\nvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\nvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\nvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\nvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\nvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\nvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\nvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\nvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\nvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\nvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\nvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\nvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\nvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\nvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\nvar SCPSolverFlagNoPeggings = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\nvar SCPSolverFlagSupplyCodePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\nvar SCPSolverFlagShelfLifePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\nvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\nvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\nvar SCPLatePlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\nvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\nvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n// Fetching the InputBaselinePopulation procedure\r\nvar InputBaselinePopulation_Weekly ='exec procedure InputBaselinePopulation {\"Version\" : \"' + Version + '\"};';\r\nLog.Info(\"InputBaselinePopulation ... \" + InputBaselinePopulation_Weekly);\r\nqueryModule.update(InputBaselinePopulation_Weekly);\r\n\r\n\r\n// Fetching the IdentifySegmentsWeekly procedure\r\nvar IdentifySegments_Weekly = 'exec procedure IdentifySegmentsWeekly {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\"};';\r\nLog.Info(\"IdentifySegmentsWeekly ... \" + IdentifySegments_Weekly);\r\nqueryModule.update(IdentifySegments_Weekly);\r\n\r\n\r\n// Fetching the addSequenceToNetworkSegmentID_Weekly procedure\r\nvar AddSequenceToNetworkSegmentID_Weekly='exec procedure AddSequenceToNetworkSegmentID_Weekly {\"Version\" : \"' + Version + '\"};';\r\nLog.Info(\" AddSequenceToNetworkSegmentID_Weekly... \" + AddSequenceToNetworkSegmentID_Weekly);\r\nqueryModule.update(AddSequenceToNetworkSegmentID_Weekly);\r\n\r\n// Fetching the Procurement_DemandSelection procedure\r\nvar ProcurementDemandSelection='exec procedure Procurement_DemandSelection {\"Version\" : [\"' + Version + '\"]};';\r\nLog.Info(\"Procurement_DemandSelection ... \" + ProcurementDemandSelection);\r\nqueryModule.update(ProcurementDemandSelection);\r\n\r\nvar queryForExecution = 'exec procedure Procurement_ScopedSolverRun {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' +SCPMaterialConstrained+ '\",\"WCapacityConstrained\" : \"' +SCPCapacityConstrained+ '\",\"WStorageConstrained\" : \"' +SCPStorageConstrained+ '\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + ',\"WNoPeggings\" : \"' + SCPSolverFlagNoPeggings + '\",\"WSupplyCodePlan\" : \"' + SCPSolverFlagSupplyCodePlan + '\",\"WShelfLifePlan\" : \"' + SCPSolverFlagShelfLifePlan +'\",\"WPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"WMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"WLatePlanStrategy\" : \"' + SCPLatePlanStrategy + '\",\"WDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"WSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n  Log.Info(\"SCS Command ... \" + queryForExecution);\r\nqueryModule.update(queryForExecution);\r\n\r\n\r\n// post solver processes\r\n//  Fetching the TruncateSuggestedOrderOutputSPO procedure\r\n// var TruncateSuggestedOrderOutputSPO= 'exec procedure TruncateSuggestedOrderOutputSPO {\"Version\" :  \"' + Version + '\"};';\r\n// Log.Info(\"TruncateSuggestedOrderOutputSPO ... \" + TruncateSuggestedOrderOutputSPO);\r\n// queryModule.update(TruncateSuggestedOrderOutputSPO);\r\n\r\n// //  Fetching the SuggestedOrder_SPO_Retail procedure\r\n// var SuggestedOrderSPORetail = 'exec procedure SuggestedOrder_SPO_Retail {\"Version\" : [\"' + Version + '\"]};';\r\n// Log.Info(\"SuggestedOrder_SPO_Retail ... \" + SuggestedOrderSPORetail);\r\n// queryModule.update(SuggestedOrderSPORetail);\r\n\r\n// //  Fetching the WeeklyItemSubstitutionOutput_Retail procedure\r\n// var WeeklyItemSubstitutionOutputRetail = 'exec procedure WeeklyItemSubstitutionOutput_Retail {\"Version\" : [\"' + Version + '\"]};';\r\n// Log.Info(\"WeeklyItemSubstitutionOutput_Retail ... \" + WeeklyItemSubstitutionOutputRetail);\r\n// queryModule.update(WeeklyItemSubstitutionOutputRetail);\r\n};\r\n\r\n\r\nreturn {\r\n  RunRequirementsPlan:RunRequirementsPlan\r\n};\r\n});",
    "Code": "define('o9.referencesupplyplanning.ProcurementScopedSolverRun', ['o9/data/query', 'o9/data/cellset'], function () {\r\n  var RunRequirementsPlan = function(o9Params){\r\nvar queryModule = require('o9/data/query');\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar Version = parsedParams.Version;\r\nvar RunID = parsedParams.RunID;\r\nvar ActionType = parsedParams.ActionType;\r\nvar Product = parsedParams.Product;\r\nvar User = parsedParams.User;\r\nvar RunIDParent = parsedParams.RunIDParent;\r\nvar cellsetModule = require('o9/data/cellset');\r\nLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\nLog.Info(\"Executing Javasrcipt\");\r\nvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\nvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\nLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\nvar ScenarioCount = getScenarioCount.Result;\r\nvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\nvar getVersionCount = queryModule.select(queryForVersionCount);\r\nLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\nvar VersionCount = getVersionCount.Result;\r\nvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\nvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\nLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n  var queryForPotential = 'SELECT &SolverStartBucket.element(0).Name;';\r\n  var lsResponse = queryModule.select(queryForPotential);\r\n  Log.Info(\"Solver Start Bucket ... \" + lsResponse);\r\n  var SolverStartBucket = lsResponse.Result;\r\n\r\nvar queryForPotential2 = 'SELECT &SolverCurrentBucket.element(0).Name;';\r\n  var lsResponse2 = queryModule.select(queryForPotential2);\r\n  Log.Info(\"Solver Current Bucket ... \" + lsResponse2);\r\nvar SolverCurrentBucket = lsResponse2.Result;\r\n\r\nvar queryForPotential3 = 'SELECT &SolverEndBucket.element(0).Name;';\r\n  var lsResponse3 = queryModule.select(queryForPotential3);\r\n  Log.Info(\"Solver End Bucket ... \" + lsResponse3);\r\nvar SolverEndBucket = lsResponse3.Result;\r\n\r\nvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],Measure.[W Solver Flag Inventory Plan Type],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Skip SS For Unviable Buckets]});';\r\n  var lsResponse4 = queryModule.select(queryForPotential4);\r\n  Log.Info(\"SCSParameters ... \" + lsResponse4);\r\nvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n  \r\nvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\nvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\nvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\nvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\nvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type'));\r\nvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\nvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\nvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\nvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\nvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\nvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\nvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\nvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\nvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\nvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\nvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\nvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\nvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\nvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\nvar SCPSolverFlagNoPeggings = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\nvar SCPSolverFlagSupplyCodePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\nvar SCPSolverFlagShelfLifePlan = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\nvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\nvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\nvar SCPLatePlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\nvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\nvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n// Fetching the InputBaselinePopulation procedure\r\nvar InputBaselinePopulation_Weekly ='exec procedure InputBaselinePopulation {\"Version\" : \"' + Version + '\"};';\r\nLog.Info(\"InputBaselinePopulation ... \" + InputBaselinePopulation_Weekly);\r\nqueryModule.update(InputBaselinePopulation_Weekly);\r\n\r\n\r\n// Fetching the IdentifySegmentsWeekly procedure\r\nvar IdentifySegments_Weekly = 'exec procedure IdentifySegmentsWeekly {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\"};';\r\nLog.Info(\"IdentifySegmentsWeekly ... \" + IdentifySegments_Weekly);\r\nqueryModule.update(IdentifySegments_Weekly);\r\n\r\n\r\n// Fetching the addSequenceToNetworkSegmentID_Weekly procedure\r\nvar AddSequenceToNetworkSegmentID_Weekly='exec procedure AddSequenceToNetworkSegmentID_Weekly {\"Version\" : \"' + Version + '\"};';\r\nLog.Info(\" AddSequenceToNetworkSegmentID_Weekly... \" + AddSequenceToNetworkSegmentID_Weekly);\r\nqueryModule.update(AddSequenceToNetworkSegmentID_Weekly);\r\n\r\n// Fetching the Procurement_DemandSelection procedure\r\nvar ProcurementDemandSelection='exec procedure Procurement_DemandSelection {\"Version\" : [\"' + Version + '\"]};';\r\nLog.Info(\"Procurement_DemandSelection ... \" + ProcurementDemandSelection);\r\nqueryModule.update(ProcurementDemandSelection);\r\n\r\nvar queryForExecution = 'exec procedure Procurement_ScopedSolverRun {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' +SCPMaterialConstrained+ '\",\"WCapacityConstrained\" : \"' +SCPCapacityConstrained+ '\",\"WStorageConstrained\" : \"' +SCPStorageConstrained+ '\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + ',\"WNoPeggings\" : \"' + SCPSolverFlagNoPeggings + '\",\"WSupplyCodePlan\" : \"' + SCPSolverFlagSupplyCodePlan + '\",\"WShelfLifePlan\" : \"' + SCPSolverFlagShelfLifePlan +'\",\"WPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"WMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"WLatePlanStrategy\" : \"' + SCPLatePlanStrategy + '\",\"WDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"WSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n  Log.Info(\"SCS Command ... \" + queryForExecution);\r\nqueryModule.update(queryForExecution);\r\n\r\n\r\n// post solver processes\r\n//  Fetching the TruncateSuggestedOrderOutputSPO procedure\r\n// var TruncateSuggestedOrderOutputSPO= 'exec procedure TruncateSuggestedOrderOutputSPO {\"Version\" :  \"' + Version + '\"};';\r\n// Log.Info(\"TruncateSuggestedOrderOutputSPO ... \" + TruncateSuggestedOrderOutputSPO);\r\n// queryModule.update(TruncateSuggestedOrderOutputSPO);\r\n\r\n// //  Fetching the SuggestedOrder_SPO_Retail procedure\r\n// var SuggestedOrderSPORetail = 'exec procedure SuggestedOrder_SPO_Retail {\"Version\" : [\"' + Version + '\"]};';\r\n// Log.Info(\"SuggestedOrder_SPO_Retail ... \" + SuggestedOrderSPORetail);\r\n// queryModule.update(SuggestedOrderSPORetail);\r\n\r\n// //  Fetching the WeeklyItemSubstitutionOutput_Retail procedure\r\n// var WeeklyItemSubstitutionOutputRetail = 'exec procedure WeeklyItemSubstitutionOutput_Retail {\"Version\" : [\"' + Version + '\"]};';\r\n// Log.Info(\"WeeklyItemSubstitutionOutput_Retail ... \" + WeeklyItemSubstitutionOutputRetail);\r\n// queryModule.update(WeeklyItemSubstitutionOutputRetail);\r\n};\r\n\r\n\r\nreturn {\r\n  RunRequirementsPlan:RunRequirementsPlan\r\n};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.ProcurementScopedSolverRun",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "a69c218a-5dc6-fc7c-41ce-067fb2100f0c",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213005,
    "Description": "Run Daily plan procedure in a batch",
    "Documentation": "define('o9.referencesupplyplanning.DRunPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DailyRunPlan = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n    var DailySolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\n\tvar DailySolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar extensionDays = 'Select ([Version].[Version Name].['+Version+']) on row, ({sum(Measure.[Solver Extension Days],0) as transient.[Extension Day]}) on column;'\r\n\tvar getExtensionDays = queryModule.select(extensionDays);\r\n\tvar cellsetExtensionDays = cellsetModule.createCellSet(getExtensionDays);\r\n\tvar ExtensionDays = cellsetExtensionDays.row(0).cell(cellsetExtensionDays.measureColumnIndex('Extension Day'));\r\n\t\r\n\tvar varyingCapacityBuckets = 'Select ([Version].[Version Name].['+Version+']) on row, ({Measure.[D Varying Capacity Buckets]}) on column;'\r\n\tvar getVaryingCapacityBuckets = queryModule.select(varyingCapacityBuckets);\r\n\tvar cellsetVaryingCapacityBuckets = cellsetModule.createCellSet(getVaryingCapacityBuckets);\r\n\tvar VaryingCapacityBuckets = cellsetVaryingCapacityBuckets.row(0).cell(cellsetVaryingCapacityBuckets.measureColumnIndex('D Varying Capacity Buckets'));\r\n\t\r\n\tvar queryForPotential3 = 'select Time.[Day].filter(#.Key ==dateadd(&DailySolverEndBucket.first.Key, '+ExtensionDays+', \"Day\")).element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\n\tvar DailySolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\tvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n\tvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\r\n\t\r\n\tvar SourcingProportion = 'exec procedure PopulateSourcingProportionsToDailySolver {\"Version\" : \"' + Version + '\"};';\r\n\tLog.Info(\"SourcingProportion ... \" + SourcingProportion);\r\n\tqueryModule.update(SourcingProportion);\r\n\t\r\n\t\r\n\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + ',\"DVaryingCapacityBuckets\" : \"' + VaryingCapacityBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\tif(Financial === true){\r\n\t\tvar ctfinancialprestep = 'exec procedure RunCTFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar ctfinancialpoststep = 'exec procedure RunCTFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Financial Pre Process ... \" + ctfinancialprestep);\r\n\t\tLog.Info(\"Financial Post Process ... \" + ctfinancialpoststep);\r\n\t\tqueryModule.update(ctfinancialprestep);\r\n\t\tqueryModule.update(ctfinancialpoststep);\r\n\t}\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDailyRunPlan:DailyRunPlan\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.DRunPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DailyRunPlan = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar Financial = parsedParams.RunFinancialPlan\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n    var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n    var DailySolverStartBucket = lsResponse.Result;\r\n\r\n\tvar queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\n\tvar DailySolverCurrentBucket = lsResponse2.Result;\r\n\t\r\n\tvar extensionDays = 'Select ([Version].[Version Name].['+Version+']) on row, ({sum(Measure.[Solver Extension Days],0) as transient.[Extension Day]}) on column;'\r\n\tvar getExtensionDays = queryModule.select(extensionDays);\r\n\tvar cellsetExtensionDays = cellsetModule.createCellSet(getExtensionDays);\r\n\tvar ExtensionDays = cellsetExtensionDays.row(0).cell(cellsetExtensionDays.measureColumnIndex('Extension Day'));\r\n\t\r\n\tvar varyingCapacityBuckets = 'Select ([Version].[Version Name].['+Version+']) on row, ({Measure.[D Varying Capacity Buckets]}) on column;'\r\n\tvar getVaryingCapacityBuckets = queryModule.select(varyingCapacityBuckets);\r\n\tvar cellsetVaryingCapacityBuckets = cellsetModule.createCellSet(getVaryingCapacityBuckets);\r\n\tvar VaryingCapacityBuckets = cellsetVaryingCapacityBuckets.row(0).cell(cellsetVaryingCapacityBuckets.measureColumnIndex('D Varying Capacity Buckets'));\r\n\t\r\n\tvar queryForPotential3 = 'select Time.[Day].filter(#.Key ==dateadd(&DailySolverEndBucket.first.Key, '+ExtensionDays+', \"Day\")).element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\n\tvar DailySolverEndBucket = lsResponse3.Result;\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\tvar SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n\tvar SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\r\n\t\r\n\tvar SourcingProportion = 'exec procedure PopulateSourcingProportionsToDailySolver {\"Version\" : \"' + Version + '\"};';\r\n\tLog.Info(\"SourcingProportion ... \" + SourcingProportion);\r\n\tqueryModule.update(SourcingProportion);\r\n\t\r\n\t\r\n\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + ',\"DVaryingCapacityBuckets\" : \"' + VaryingCapacityBuckets + '\"};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\tif(Financial === true){\r\n\t\tvar ctfinancialprestep = 'exec procedure RunCTFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n\t\tvar ctfinancialpoststep = 'exec procedure RunCTFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n\t\tLog.Info(\"Financial Pre Process ... \" + ctfinancialprestep);\r\n\t\tLog.Info(\"Financial Post Process ... \" + ctfinancialpoststep);\r\n\t\tqueryModule.update(ctfinancialprestep);\r\n\t\tqueryModule.update(ctfinancialpoststep);\r\n\t}\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDailyRunPlan:DailyRunPlan\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.DRunPlan",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "489d9e32-8f78-4bd7-bb44-be3271126196",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213006,
    "Description": "SolverStartAndEndDate",
    "Documentation": "define('o9.referencesupplyplanning.SolverStartAndEndDate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SolverStartAndEndDate= function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar StartBucket = parsedParams.StartBucket;\r\n    var EndBucket = parsedParams.EndBucket;\r\n\tvar CurrentBucket = parsedParams.CurrentBucket;\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\t\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &SolverStartBucket.element(0).Name;';\t\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &SolverEndBucket.element(0).Name;';\t\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &SolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingWeekIsCurrent = 'updatemember(Time.[Week]={,\"'+ ExistingCurrentBucket +'\"},[Time].[Week$IsCurrent]={NULL,});';\r\n\tLog.Info(\"NullExisitingWeekIsCurrent ... \" + NullExisitingWeekIsCurrent); \r\n    queryModule.update(NullExisitingWeekIsCurrent);}\r\n\t\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Week]={,\"'+ ExistingStartBucket +'\"},[Time].[W Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n    queryModule.update(NullExisitingStartBucket);}\r\n\t\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Week]={,\"'+ ExistingEndBucket +'\"},[Time].[W Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n    queryModule.update(NullExisitingEndBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Week]={,\"'+ ExistingCurrentBucket +'\"},[Time].[W Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket); \r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\t\r\n\tvar SetCurrentBucket = 'cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket); \r\n    queryModule.update(SetCurrentBucket);\r\n\t\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Week]={,\"'+ CurrentBucket +'\"},[Time].[W Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket); \r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\t\t\r\n\tvar SetWeekIsCurrent = 'updatemember(Time.[Week]={,\"'+ CurrentBucket +'\"},[Time].[Week$IsCurrent]={TRUE,});';\r\n\tLog.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent); \r\n    queryModule.update(SetWeekIsCurrent);\r\n\t\r\n\tvar SetStartBucket = 'cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n    queryModule.update(SetStartBucket);\r\n\t\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Week]={,\"'+ StartBucket +'\"},[Time].[W Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n    queryModule.update(SetPropertyStartBucket);\r\n\t\r\n\tvar SetEndBucket = 'cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n    queryModule.update(SetEndBucket);\r\n\t\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Week]={,\"'+ EndBucket +'\"},[Time].[W Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n    queryModule.update(SetPropertyEndBucket);\r\n\t\r\n\t\r\n};\r\n\t\r\nreturn {\r\n\tSolverStartAndEndDate:SolverStartAndEndDate\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.SolverStartAndEndDate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SolverStartAndEndDate= function(o9Params){\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar StartBucket = parsedParams.StartBucket;\r\n    var EndBucket = parsedParams.EndBucket;\r\n\tvar CurrentBucket = parsedParams.CurrentBucket;\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\t\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &SolverStartBucket.element(0).Name;';\t\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &SolverEndBucket.element(0).Name;';\t\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &SolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingWeekIsCurrent = 'updatemember(Time.[Week]={,\"'+ ExistingCurrentBucket +'\"},[Time].[Week$IsCurrent]={NULL,});';\r\n\tLog.Info(\"NullExisitingWeekIsCurrent ... \" + NullExisitingWeekIsCurrent); \r\n    queryModule.update(NullExisitingWeekIsCurrent);}\r\n\t\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Week]={,\"'+ ExistingStartBucket +'\"},[Time].[W Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n    queryModule.update(NullExisitingStartBucket);}\r\n\t\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Week]={,\"'+ ExistingEndBucket +'\"},[Time].[W Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n    queryModule.update(NullExisitingEndBucket);}\r\n\t\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Week]={,\"'+ ExistingCurrentBucket +'\"},[Time].[W Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket); \r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\t\r\n\tvar SetCurrentBucket = 'cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket); \r\n    queryModule.update(SetCurrentBucket);\r\n\t\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Week]={,\"'+ CurrentBucket +'\"},[Time].[W Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket); \r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\t\t\r\n\tvar SetWeekIsCurrent = 'updatemember(Time.[Week]={,\"'+ CurrentBucket +'\"},[Time].[Week$IsCurrent]={TRUE,});';\r\n\tLog.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent); \r\n    queryModule.update(SetWeekIsCurrent);\r\n\t\r\n\tvar SetStartBucket = 'cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n    queryModule.update(SetStartBucket);\r\n\t\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Week]={,\"'+ StartBucket +'\"},[Time].[W Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n    queryModule.update(SetPropertyStartBucket);\r\n\t\r\n\tvar SetEndBucket = 'cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n    queryModule.update(SetEndBucket);\r\n\t\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Week]={,\"'+ EndBucket +'\"},[Time].[W Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n    queryModule.update(SetPropertyEndBucket);\r\n\t\r\n\t\r\n};\r\n\t\r\nreturn {\r\n\tSolverStartAndEndDate:SolverStartAndEndDate\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.SolverStartAndEndDate",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "a67dd457-cf02-4ae3-824a-0a1cb7a5a3a9",
    "ModuleId": "0f784411-720c-4319-bc9a-c0994d2eb20e"
  },
  {
    "Id": 213007,
    "Description": "PublishProportionMonthToWeek",
    "Documentation": "define('o9.referencesupplyplanning.PublishProportionMonthToWeek', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishProportionMonthToWeek= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromWeekTemp = ' select (TO.[Time].[Week] ) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ FromMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Asc limit 1;';\r\n\tvar lsResponse4 = queryModule.select(FromWeekTemp);\r\n\r\n\tvar FromWeek = lsResponse4[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromWeek ...\" + FromWeek);\r\n\t\r\n\tvar ToMonthTemp ='select &PlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToWeekTemp = 'select (TO.[Time].[Week]) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ ToMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Desc limit 1;';\r\n\tvar lsResponse5 = queryModule.select(ToWeekTemp);\r\n\tvar ToWeek = lsResponse5[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToWeek ...\" + ToWeek);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingProportionsFromMonthToWeek {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromWeek\" :\"'+ FromWeek +'\", \"ToWeek\" :\"'+ ToWeek +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishProportionMonthToWeek:PublishProportionMonthToWeek\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.PublishProportionMonthToWeek', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishProportionMonthToWeek= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromWeekTemp = ' select (TO.[Time].[Week] ) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ FromMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Asc limit 1;';\r\n\tvar lsResponse4 = queryModule.select(FromWeekTemp);\r\n\r\n\tvar FromWeek = lsResponse4[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromWeek ...\" + FromWeek);\r\n\t\r\n\tvar ToMonthTemp ='select &PlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToWeekTemp = 'select (TO.[Time].[Week]) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ ToMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Desc limit 1;';\r\n\tvar lsResponse5 = queryModule.select(ToWeekTemp);\r\n\tvar ToWeek = lsResponse5[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToWeek ...\" + ToWeek);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingProportionsFromMonthToWeek {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromWeek\" :\"'+ FromWeek +'\", \"ToWeek\" :\"'+ ToWeek +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishProportionMonthToWeek:PublishProportionMonthToWeek\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.PublishProportionMonthToWeek",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "76422b4a-ae5b-41da-ad1d-ea1dd4088045",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213008,
    "Description": "Update Rule for Resource Consumed Per",
    "Documentation": "define('o9.SupplyPlanning280WUpdateRule.ResourceConsumedPer', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar IDBCPLineSpeed = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Paty = parsedParams.DMItemAttribute1;\r\n\tvar Coty = parsedParams.DMItemAttribute2;\r\n\tvar L5 = parsedParams.DMItemAttribute3;\r\n\tvar Itty = parsedParams.DMItemType;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar Resource = parsedParams.DMResource;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}else{\r\n\t\tSetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item PackageType] = null ; end scope;';\r\n\t\tLog.Info(\"Package Type is NULL\"); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Type is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}else{\r\n\t\tSetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ContainerType] = null ; end scope;';\r\n\t\tLog.Info(\"Container Type is NULL\"); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}else{\r\n\t\tSetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Location Location] = null ; end scope;';\r\n\t\tLog.Info(\"Location is NULL\"); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (Resource !== null){\r\n\t\tvar SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Resource is/are \" + Resource); \r\n    \tqueryModule.update(SetResource);\r\n\t}else{\r\n\t\tSetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Resource Resource] = null ; end scope;';\r\n\t\tLog.Info(\"Resource is NULL\"); \r\n    \tqueryModule.update(SetResource);\r\n\t}\r\n    if (L5 !== null){\r\n\t\tvar SetL5 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item L5] = \\\"'+ L5 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L5 is/are \" + L5); \r\n    \tqueryModule.update(SetL5);                                         \r\n\t}else{\r\n\t\tSetL5 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item L5] = null ; end scope;';\r\n\t\tLog.Info(\"L5 is NULL\"); \r\n    \tqueryModule.update(SetL5);\r\n\t}\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tIDBCPLineSpeed:IDBCPLineSpeed\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning280WUpdateRule.ResourceConsumedPer', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar IDBCPLineSpeed = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Paty = parsedParams.DMItemAttribute1;\r\n\tvar Coty = parsedParams.DMItemAttribute2;\r\n\tvar L5 = parsedParams.DMItemAttribute3;\r\n\tvar Itty = parsedParams.DMItemType;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar Resource = parsedParams.DMResource;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}else{\r\n\t\tSetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item PackageType] = null ; end scope;';\r\n\t\tLog.Info(\"Package Type is NULL\"); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Type is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}else{\r\n\t\tSetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ContainerType] = null ; end scope;';\r\n\t\tLog.Info(\"Container Type is NULL\"); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}else{\r\n\t\tSetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Location Location] = null ; end scope;';\r\n\t\tLog.Info(\"Location is NULL\"); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (Resource !== null){\r\n\t\tvar SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Resource is/are \" + Resource); \r\n    \tqueryModule.update(SetResource);\r\n\t}else{\r\n\t\tSetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Resource Resource] = null ; end scope;';\r\n\t\tLog.Info(\"Resource is NULL\"); \r\n    \tqueryModule.update(SetResource);\r\n\t}\r\n    if (L5 !== null){\r\n\t\tvar SetL5 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item L5] = \\\"'+ L5 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L5 is/are \" + L5); \r\n    \tqueryModule.update(SetL5);                                         \r\n\t}else{\r\n\t\tSetL5 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item L5] = null ; end scope;';\r\n\t\tLog.Info(\"L5 is NULL\"); \r\n    \tqueryModule.update(SetL5);\r\n\t}\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tIDBCPLineSpeed:IDBCPLineSpeed\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning280WUpdateRule.ResourceConsumedPer",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "57152dcb-5533-b271-c38d-590af4f29d3a",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213009,
    "Description": "RowCountValidation",
    "Documentation": "define('o9.referencemodel.RowCountValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RowCountValidation = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.RowCountValidation\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('o9 Params.....'+ o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar RowCountDefinition = ParsedParams.RowCountDefinition;\r\n\tvar Type = ParsedParams.Type;\r\n\tvar Version = ParsedParams.Version;\r\n\t\r\n\tif(Type.includes('Master Data Count') === true){\r\n\tLog.Info(\"Calling Namedsets\");\r\n\tvar queryForDimData ='Select(&'+RowCountDefinition+'.count);';\r\n\tvar getDimCount = queryModule.select(queryForDimData);\r\n\tif (getDimCount)\r\n\t{\r\n\t    RuleOutputToUI = \r\n\t    {\r\n\t        Status: 'Success',\r\n                Message: 'Invalid Namedset'\r\n\t    };\r\n\t}\r\n\tLog.Info(\"Dimension Row count\" +  JSON.stringify(getDimCount));\r\n\tvar MasterDataCount = getDimCount.Result;\r\n\t}\r\n\telse {\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+RowCountDefinition+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar queryForFactData = 'Select ([Version].[Version Name].[' + Version + '] * {DistinctCount(';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' ['+dim+'].['+attribute+'] *';\r\n\t\t\t\t\tqueryForFactData = queryForFactData.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tqueryForFactData = queryForFactData.concat('Measure.['+RowCountDefinition+']) as Transient.[RowCount]}) on row, () on column;');\r\n\t\t\tvar getFactData = queryModule.select(queryForFactData);\r\n\t\t\tLog.Info(\"Fact Data Count\" +  JSON.stringify(getFactData));\r\n\t}\r\n\t\r\n\t};\r\n\r\nreturn {\r\n\tRowCountValidation:RowCountValidation\r\n\t};\r\n});",
    "Code": "define('o9.referencemodel.RowCountValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var RowCountValidation = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.RowCountValidation\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('o9 Params.....'+ o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar RowCountDefinition = ParsedParams.RowCountDefinition;\r\n\tvar Type = ParsedParams.Type;\r\n\tvar Version = ParsedParams.Version;\r\n\t\r\n\tif(Type.includes('Master Data Count') === true){\r\n\tLog.Info(\"Calling Namedsets\");\r\n\tvar queryForDimData ='Select(&'+RowCountDefinition+'.count);';\r\n\tvar getDimCount = queryModule.select(queryForDimData);\r\n\tif (getDimCount)\r\n\t{\r\n\t    RuleOutputToUI = \r\n\t    {\r\n\t        Status: 'Success',\r\n                Message: 'Invalid Namedset'\r\n\t    };\r\n\t}\r\n\tLog.Info(\"Dimension Row count\" +  JSON.stringify(getDimCount));\r\n\tvar MasterDataCount = getDimCount.Result;\r\n\t}\r\n\telse {\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+RowCountDefinition+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar queryForFactData = 'Select ([Version].[Version Name].[' + Version + '] * {DistinctCount(';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' ['+dim+'].['+attribute+'] *';\r\n\t\t\t\t\tqueryForFactData = queryForFactData.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tqueryForFactData = queryForFactData.concat('Measure.['+RowCountDefinition+']) as Transient.[RowCount]}) on row, () on column;');\r\n\t\t\tvar getFactData = queryModule.select(queryForFactData);\r\n\t\t\tLog.Info(\"Fact Data Count\" +  JSON.stringify(getFactData));\r\n\t}\r\n\t\r\n\t};\r\n\r\nreturn {\r\n\tRowCountValidation:RowCountValidation\r\n\t};\r\n});",
    "ModuleName": "o9.referencemodel.RowCountValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "8e903125-3625-44c9-b60d-3bf302f5fa6c",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213010,
    "Description": "Bulk Scenario Merge",
    "Documentation": "define('o9.SupplyPlan006D.BulkScenarioMerge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkScenarioMerge = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006W.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar SourceScenario = ParsedParams.Source;\r\n\tvar TargetScenario = ParsedParams.Target;\r\n\tvar Demand = ParsedParams.Demand ;\r\n\tvar Inventory = ParsedParams.Inventory ;\r\n\tvar Transactional = ParsedParams.Transactional ;\r\n\tvar CapacityMFG = ParsedParams.CapacityMFG ;\r\n\tvar CapacityDIST = ParsedParams.CapacityDIST ;\r\n\tvar CapacityPROC = ParsedParams.CapacityPROC ;\r\n\tvar NetworkMFG = ParsedParams.NetworkMFG ;\r\n\tvar NetworkDIST = ParsedParams.NetworkDIST ;\r\n\tvar NetworkPROC = ParsedParams.NetworkPROC ;\r\n\r\n\tvar Copy = function(M){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+M+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = 'Scope:([Version].[Version Name].['+TargetScenario+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\t\tquery = query.concat('Measure.['+M+'] = Measure.['+M+']@(Version.[Version Name].['+SourceScenario+']);\\nend scope;');\r\n\t\t\tqueryModule.update(query);\r\n\t};\r\n\t\r\n\tvar PassMeasurestoCopy = function(MG){\r\n\t\tvar Measures = cellsetModule.createCellSet(MG);\r\n\t\tif(Measures.rowCount > 0){\r\n\t\t\tfor (var i = 1; i < Measures.colCount ; i++){\r\n\t\t\tvar M = Measures.row(0).cell(i);\r\n\t\t\tLog.Info(\"Measure\"+M);\r\n\t\t\tif(M !== null){\r\n\t\t\t\tCopy(M);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar DemandFunction = function(){\r\n\t\tvar getDemandMeasures = 'Select (&CWV) on row, ({Measure.[D Demand Parameter 1], Measure.[D Demand Parameter 10], Measure.[D Demand Parameter 2], Measure.[D Demand Parameter 3], Measure.[D Demand Parameter 4], Measure.[D Demand Parameter 5], Measure.[D Demand Parameter 6], Measure.[D Demand Parameter 7], Measure.[D Demand Parameter 8], Measure.[D Demand Parameter 9]}) on column;';\r\n\t\tvar DemandMG = queryModule.select(getDemandMeasures);\r\n\t\tPassMeasurestoCopy(DemandMG);\r\n\t};\r\n\t\r\n\tvar InventoryFunction = function(){\r\n\t\tvar getInventoryMeasures = 'Select (&CWV) on row, ({Measure.[D Inventory Parameter 1], Measure.[D Inventory Parameter 10], Measure.[D Inventory Parameter 2], Measure.[D Inventory Parameter 3], Measure.[D Inventory Parameter 4], Measure.[D Inventory Parameter 5], Measure.[D Inventory Parameter 6], Measure.[D Inventory Parameter 7], Measure.[D Inventory Parameter 8], Measure.[D Inventory Parameter 9]}) on column;';\r\n\t\tvar InventoryMG = queryModule.select(getInventoryMeasures);\r\n\t\tPassMeasurestoCopy(InventoryMG);\r\n\t};\r\n\t\r\n\tvar TransactionalFunction = function(){\r\n\t\tvar getTransactionalMeasures = 'Select (&CWV) on row, ({Measure.[D Transactional Parameter 1], Measure.[D Transactional Parameter 10], Measure.[D Transactional Parameter 11], Measure.[D Transactional Parameter 12], Measure.[D Transactional Parameter 13], Measure.[D Transactional Parameter 14], Measure.[D Transactional Parameter 2], Measure.[D Transactional Parameter 3], Measure.[D Transactional Parameter 4], Measure.[D Transactional Parameter 5], Measure.[D Transactional Parameter 6], Measure.[D Transactional Parameter 7], Measure.[D Transactional Parameter 8], Measure.[D Transactional Parameter 9]}) on column;';\r\n\t\tvar TransactionalMG = queryModule.select(getTransactionalMeasures);\r\n\t\tPassMeasurestoCopy(TransactionalMG);\r\n\t};\r\n\t\r\n\tvar CapacityMFGFunction = function(){\r\n\t\tvar getCapacityMFGMeasures = 'Select (&CWV) on row, ({Measure.[Capacity MFG Parameter 1], Measure.[Capacity MFG Parameter 10], Measure.[Capacity MFG Parameter 2], Measure.[Capacity MFG Parameter 3], Measure.[Capacity MFG Parameter 4], Measure.[Capacity MFG Parameter 5], Measure.[Capacity MFG Parameter 6], Measure.[Capacity MFG Parameter 7], Measure.[Capacity MFG Parameter 8], Measure.[Capacity MFG Parameter 9]}) on column;';\r\n\t\tvar CapacityMFGMG = queryModule.select(getCapacityMFGMeasures);\r\n\t\tPassMeasurestoCopy(CapacityMFGMG);\r\n\t};\r\n\t\r\n\tvar CapacityDISTFunction = function(){\r\n\t\tvar getCapacityDISTMeasures = 'Select (&CWV) on row, ({Measure.[Capacity DIST Parameter 1], Measure.[Capacity DIST Parameter 10], Measure.[Capacity DIST Parameter 11], Measure.[Capacity DIST Parameter 12], Measure.[Capacity DIST Parameter 2], Measure.[Capacity DIST Parameter 3], Measure.[Capacity DIST Parameter 4], Measure.[Capacity DIST Parameter 5], Measure.[Capacity DIST Parameter 6], Measure.[Capacity DIST Parameter 7], Measure.[Capacity DIST Parameter 8], Measure.[Capacity DIST Parameter 9]}) on column;';\r\n\t\tvar CapacityDISTMG = queryModule.select(getCapacityDISTMeasures);\r\n\t\tPassMeasurestoCopy(CapacityDISTMG);\r\n\t};\r\n\t\r\n\tvar CapacityPROCFunction = function(){\r\n\t\tvar getCapacityPROCMeasures = 'Select (&CWV) on row, ({Measure.[Capacity PROC Parameter 1], Measure.[Capacity PROC Parameter 10], Measure.[Capacity PROC Parameter 2], Measure.[Capacity PROC Parameter 3], Measure.[Capacity PROC Parameter 4], Measure.[Capacity PROC Parameter 5], Measure.[Capacity PROC Parameter 6], Measure.[Capacity PROC Parameter 7], Measure.[Capacity PROC Parameter 8], Measure.[Capacity PROC Parameter 9]}) on column;';\r\n\t\tvar CapacityPROCMG = queryModule.select(getCapacityPROCMeasures);\r\n\t\tPassMeasurestoCopy(CapacityPROCMG);\r\n\t};\r\n\t\r\n\tvar NetworkMFGFunction = function(){\r\n\t\tvar getNetworkMFGMeasures = 'Select (&CWV) on row, ({Measure.[D Network MFG Parameter 1], Measure.[D Network MFG Parameter 10], Measure.[D Network MFG Parameter 11], Measure.[D Network MFG Parameter 12], Measure.[D Network MFG Parameter 13], Measure.[D Network MFG Parameter 14], Measure.[D Network MFG Parameter 15], Measure.[D Network MFG Parameter 16], Measure.[D Network MFG Parameter 17], Measure.[D Network MFG Parameter 2], Measure.[D Network MFG Parameter 3], Measure.[D Network MFG Parameter 4], Measure.[D Network MFG Parameter 5], Measure.[D Network MFG Parameter 6], Measure.[D Network MFG Parameter 7], Measure.[D Network MFG Parameter 8], Measure.[D Network MFG Parameter 9]}) on column;';\r\n\t\tvar NetworkMFGMG = queryModule.select(getNetworkMFGMeasures);\r\n\t\tPassMeasurestoCopy(NetworkMFGMG);\r\n\t};\r\n\t\r\n\tvar NetworkDISTFunction = function(){\r\n\t\tvar getNetworkDISTMeasures = 'Select (&CWV) on row, ({Measure.[D Network DIST Parameter 1], Measure.[D Network DIST Parameter 10], Measure.[D Network DIST Parameter 11], Measure.[D Network DIST Parameter 2], Measure.[D Network DIST Parameter 3], Measure.[D Network DIST Parameter 4], Measure.[D Network DIST Parameter 5], Measure.[D Network DIST Parameter 6], Measure.[D Network DIST Parameter 7], Measure.[D Network DIST Parameter 8], Measure.[D Network DIST Parameter 9]}) on column;';\r\n\t\tvar NetworkDISTMG = queryModule.select(getNetworkDISTMeasures);\r\n\t\tPassMeasurestoCopy(NetworkDISTMG);\r\n\t};\r\n\t\r\n\tvar NetworkPROCFunction = function(){\r\n\t\tvar getNetworkPROCMeasures = 'Select (&CWV) on row, ({Measure.[D Network PROC Parameter 1], Measure.[D Network PROC Parameter 10], Measure.[D Network PROC Parameter 11], Measure.[D Network PROC Parameter 2], Measure.[D Network PROC Parameter 3], Measure.[D Network PROC Parameter 4], Measure.[D Network PROC Parameter 5], Measure.[D Network PROC Parameter 6], Measure.[D Network PROC Parameter 7], Measure.[D Network PROC Parameter 8], Measure.[D Network PROC Parameter 9]}) on column;';\r\n\t\tvar NetworkPROCMG = queryModule.select(getNetworkPROCMeasures);\r\n\t\tPassMeasurestoCopy(NetworkPROCMG);\r\n\t};\r\n\t\r\n\tif(Demand === true){DemandFunction();}\r\n\t\r\n\tif(Inventory === true){InventoryFunction();}\r\n\t\r\n\tif(Transactional === true){TransactionalFunction();}\r\n\t\r\n\tif(CapacityMFG === true){CapacityMFGFunction();}\r\n\t\r\n\tif(CapacityDIST === true){CapacityDISTFunction();}\r\n\t\r\n\tif(CapacityPROC === true){CapacityPROCFunction();}\r\n\t\r\n\tif(NetworkMFG === true){NetworkMFGFunction();}\r\n\t\r\n\tif(NetworkDIST === true){NetworkDISTFunction();}\r\n\t\r\n\tif(NetworkPROC === true){NetworkPROCFunction();}\r\n\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tBulkScenarioMerge:BulkScenarioMerge\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan006D.BulkScenarioMerge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkScenarioMerge = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006W.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar SourceScenario = ParsedParams.Source;\r\n\tvar TargetScenario = ParsedParams.Target;\r\n\tvar Demand = ParsedParams.Demand ;\r\n\tvar Inventory = ParsedParams.Inventory ;\r\n\tvar Transactional = ParsedParams.Transactional ;\r\n\tvar CapacityMFG = ParsedParams.CapacityMFG ;\r\n\tvar CapacityDIST = ParsedParams.CapacityDIST ;\r\n\tvar CapacityPROC = ParsedParams.CapacityPROC ;\r\n\tvar NetworkMFG = ParsedParams.NetworkMFG ;\r\n\tvar NetworkDIST = ParsedParams.NetworkDIST ;\r\n\tvar NetworkPROC = ParsedParams.NetworkPROC ;\r\n\r\n\tvar Copy = function(M){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+M+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = 'Scope:([Version].[Version Name].['+TargetScenario+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\t\tquery = query.concat('Measure.['+M+'] = Measure.['+M+']@(Version.[Version Name].['+SourceScenario+']);\\nend scope;');\r\n\t\t\tqueryModule.update(query);\r\n\t};\r\n\t\r\n\tvar PassMeasurestoCopy = function(MG){\r\n\t\tvar Measures = cellsetModule.createCellSet(MG);\r\n\t\tif(Measures.rowCount > 0){\r\n\t\t\tfor (var i = 1; i < Measures.colCount ; i++){\r\n\t\t\tvar M = Measures.row(0).cell(i);\r\n\t\t\tLog.Info(\"Measure\"+M);\r\n\t\t\tif(M !== null){\r\n\t\t\t\tCopy(M);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar DemandFunction = function(){\r\n\t\tvar getDemandMeasures = 'Select (&CWV) on row, ({Measure.[D Demand Parameter 1], Measure.[D Demand Parameter 10], Measure.[D Demand Parameter 2], Measure.[D Demand Parameter 3], Measure.[D Demand Parameter 4], Measure.[D Demand Parameter 5], Measure.[D Demand Parameter 6], Measure.[D Demand Parameter 7], Measure.[D Demand Parameter 8], Measure.[D Demand Parameter 9]}) on column;';\r\n\t\tvar DemandMG = queryModule.select(getDemandMeasures);\r\n\t\tPassMeasurestoCopy(DemandMG);\r\n\t};\r\n\t\r\n\tvar InventoryFunction = function(){\r\n\t\tvar getInventoryMeasures = 'Select (&CWV) on row, ({Measure.[D Inventory Parameter 1], Measure.[D Inventory Parameter 10], Measure.[D Inventory Parameter 2], Measure.[D Inventory Parameter 3], Measure.[D Inventory Parameter 4], Measure.[D Inventory Parameter 5], Measure.[D Inventory Parameter 6], Measure.[D Inventory Parameter 7], Measure.[D Inventory Parameter 8], Measure.[D Inventory Parameter 9]}) on column;';\r\n\t\tvar InventoryMG = queryModule.select(getInventoryMeasures);\r\n\t\tPassMeasurestoCopy(InventoryMG);\r\n\t};\r\n\t\r\n\tvar TransactionalFunction = function(){\r\n\t\tvar getTransactionalMeasures = 'Select (&CWV) on row, ({Measure.[D Transactional Parameter 1], Measure.[D Transactional Parameter 10], Measure.[D Transactional Parameter 11], Measure.[D Transactional Parameter 12], Measure.[D Transactional Parameter 13], Measure.[D Transactional Parameter 14], Measure.[D Transactional Parameter 2], Measure.[D Transactional Parameter 3], Measure.[D Transactional Parameter 4], Measure.[D Transactional Parameter 5], Measure.[D Transactional Parameter 6], Measure.[D Transactional Parameter 7], Measure.[D Transactional Parameter 8], Measure.[D Transactional Parameter 9]}) on column;';\r\n\t\tvar TransactionalMG = queryModule.select(getTransactionalMeasures);\r\n\t\tPassMeasurestoCopy(TransactionalMG);\r\n\t};\r\n\t\r\n\tvar CapacityMFGFunction = function(){\r\n\t\tvar getCapacityMFGMeasures = 'Select (&CWV) on row, ({Measure.[Capacity MFG Parameter 1], Measure.[Capacity MFG Parameter 10], Measure.[Capacity MFG Parameter 2], Measure.[Capacity MFG Parameter 3], Measure.[Capacity MFG Parameter 4], Measure.[Capacity MFG Parameter 5], Measure.[Capacity MFG Parameter 6], Measure.[Capacity MFG Parameter 7], Measure.[Capacity MFG Parameter 8], Measure.[Capacity MFG Parameter 9]}) on column;';\r\n\t\tvar CapacityMFGMG = queryModule.select(getCapacityMFGMeasures);\r\n\t\tPassMeasurestoCopy(CapacityMFGMG);\r\n\t};\r\n\t\r\n\tvar CapacityDISTFunction = function(){\r\n\t\tvar getCapacityDISTMeasures = 'Select (&CWV) on row, ({Measure.[Capacity DIST Parameter 1], Measure.[Capacity DIST Parameter 10], Measure.[Capacity DIST Parameter 11], Measure.[Capacity DIST Parameter 12], Measure.[Capacity DIST Parameter 2], Measure.[Capacity DIST Parameter 3], Measure.[Capacity DIST Parameter 4], Measure.[Capacity DIST Parameter 5], Measure.[Capacity DIST Parameter 6], Measure.[Capacity DIST Parameter 7], Measure.[Capacity DIST Parameter 8], Measure.[Capacity DIST Parameter 9]}) on column;';\r\n\t\tvar CapacityDISTMG = queryModule.select(getCapacityDISTMeasures);\r\n\t\tPassMeasurestoCopy(CapacityDISTMG);\r\n\t};\r\n\t\r\n\tvar CapacityPROCFunction = function(){\r\n\t\tvar getCapacityPROCMeasures = 'Select (&CWV) on row, ({Measure.[Capacity PROC Parameter 1], Measure.[Capacity PROC Parameter 10], Measure.[Capacity PROC Parameter 2], Measure.[Capacity PROC Parameter 3], Measure.[Capacity PROC Parameter 4], Measure.[Capacity PROC Parameter 5], Measure.[Capacity PROC Parameter 6], Measure.[Capacity PROC Parameter 7], Measure.[Capacity PROC Parameter 8], Measure.[Capacity PROC Parameter 9]}) on column;';\r\n\t\tvar CapacityPROCMG = queryModule.select(getCapacityPROCMeasures);\r\n\t\tPassMeasurestoCopy(CapacityPROCMG);\r\n\t};\r\n\t\r\n\tvar NetworkMFGFunction = function(){\r\n\t\tvar getNetworkMFGMeasures = 'Select (&CWV) on row, ({Measure.[D Network MFG Parameter 1], Measure.[D Network MFG Parameter 10], Measure.[D Network MFG Parameter 11], Measure.[D Network MFG Parameter 12], Measure.[D Network MFG Parameter 13], Measure.[D Network MFG Parameter 14], Measure.[D Network MFG Parameter 15], Measure.[D Network MFG Parameter 16], Measure.[D Network MFG Parameter 17], Measure.[D Network MFG Parameter 2], Measure.[D Network MFG Parameter 3], Measure.[D Network MFG Parameter 4], Measure.[D Network MFG Parameter 5], Measure.[D Network MFG Parameter 6], Measure.[D Network MFG Parameter 7], Measure.[D Network MFG Parameter 8], Measure.[D Network MFG Parameter 9]}) on column;';\r\n\t\tvar NetworkMFGMG = queryModule.select(getNetworkMFGMeasures);\r\n\t\tPassMeasurestoCopy(NetworkMFGMG);\r\n\t};\r\n\t\r\n\tvar NetworkDISTFunction = function(){\r\n\t\tvar getNetworkDISTMeasures = 'Select (&CWV) on row, ({Measure.[D Network DIST Parameter 1], Measure.[D Network DIST Parameter 10], Measure.[D Network DIST Parameter 11], Measure.[D Network DIST Parameter 2], Measure.[D Network DIST Parameter 3], Measure.[D Network DIST Parameter 4], Measure.[D Network DIST Parameter 5], Measure.[D Network DIST Parameter 6], Measure.[D Network DIST Parameter 7], Measure.[D Network DIST Parameter 8], Measure.[D Network DIST Parameter 9]}) on column;';\r\n\t\tvar NetworkDISTMG = queryModule.select(getNetworkDISTMeasures);\r\n\t\tPassMeasurestoCopy(NetworkDISTMG);\r\n\t};\r\n\t\r\n\tvar NetworkPROCFunction = function(){\r\n\t\tvar getNetworkPROCMeasures = 'Select (&CWV) on row, ({Measure.[D Network PROC Parameter 1], Measure.[D Network PROC Parameter 10], Measure.[D Network PROC Parameter 11], Measure.[D Network PROC Parameter 2], Measure.[D Network PROC Parameter 3], Measure.[D Network PROC Parameter 4], Measure.[D Network PROC Parameter 5], Measure.[D Network PROC Parameter 6], Measure.[D Network PROC Parameter 7], Measure.[D Network PROC Parameter 8], Measure.[D Network PROC Parameter 9]}) on column;';\r\n\t\tvar NetworkPROCMG = queryModule.select(getNetworkPROCMeasures);\r\n\t\tPassMeasurestoCopy(NetworkPROCMG);\r\n\t};\r\n\t\r\n\tif(Demand === true){DemandFunction();}\r\n\t\r\n\tif(Inventory === true){InventoryFunction();}\r\n\t\r\n\tif(Transactional === true){TransactionalFunction();}\r\n\t\r\n\tif(CapacityMFG === true){CapacityMFGFunction();}\r\n\t\r\n\tif(CapacityDIST === true){CapacityDISTFunction();}\r\n\t\r\n\tif(CapacityPROC === true){CapacityPROCFunction();}\r\n\t\r\n\tif(NetworkMFG === true){NetworkMFGFunction();}\r\n\t\r\n\tif(NetworkDIST === true){NetworkDISTFunction();}\r\n\t\r\n\tif(NetworkPROC === true){NetworkPROCFunction();}\r\n\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tBulkScenarioMerge:BulkScenarioMerge\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan006D.BulkScenarioMerge",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "78dc4df3-d313-4404-83e3-60b236a78f37",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213011,
    "Description": "SupplyPlanning400DUpdateRule.DISTShippingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DUpdateRule.DISTShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTShippingCalendar :DISTShippingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DUpdateRule.DISTShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTShippingCalendar :DISTShippingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DUpdateRule.DISTShippingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "6a733b59-bc8e-3668-6e9e-cc7d5d8c9192",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213012,
    "Description": "Update Rule for Weekly Production Cycle",
    "Documentation": "define('o9.SupplyPlanningUpdateRule.SupplyPlan190WProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190WProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.DMRule;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}else{\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item PackageType] = null ; end scope;';\n\t\tLog.Info(\"Package Type is NULL\"); \n    \tqueryModule.update(SetPackageType);\n    }\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}else{\n        SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item L2] = null ; end scope;';\n\t\tLog.Info(\"L2 is NULL\"); \n    \tqueryModule.update(SetItemL2);\n    }\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}else{\n        SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerType] = null ; end scope;';\n\t\tLog.Info(\"Container Type is NULL\"); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}else{\n        SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = null ; end scope;';\n\t\tLog.Info(\"Container Type Name is NULL\"); \n    \tqueryModule.update(SetContainerTypeName);\n    }\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}else{\n        SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Location Location] = null ; end scope;';\n\t\tLog.Info(\"Location is NULL\"); \n    \tqueryModule.update(SetLocation);\n    }\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}else{\n        SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Resource Resource] = null ; end scope;';\n\t\tLog.Info(\"Resource is NULL\"); \n    \tqueryModule.update(SetResource);\n    }\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190WProductionCycles:SupplyPlan190WProductionCycles\n};\n});",
    "Code": "define('o9.SupplyPlanningUpdateRule.SupplyPlan190WProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190WProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.DMRule;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}else{\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item PackageType] = null ; end scope;';\n\t\tLog.Info(\"Package Type is NULL\"); \n    \tqueryModule.update(SetPackageType);\n    }\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}else{\n        SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item L2] = null ; end scope;';\n\t\tLog.Info(\"L2 is NULL\"); \n    \tqueryModule.update(SetItemL2);\n    }\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}else{\n        SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerType] = null ; end scope;';\n\t\tLog.Info(\"Container Type is NULL\"); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}else{\n        SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = null ; end scope;';\n\t\tLog.Info(\"Container Type Name is NULL\"); \n    \tqueryModule.update(SetContainerTypeName);\n    }\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}else{\n        SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Location Location] = null ; end scope;';\n\t\tLog.Info(\"Location is NULL\"); \n    \tqueryModule.update(SetLocation);\n    }\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}else{\n        SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Resource Resource] = null ; end scope;';\n\t\tLog.Info(\"Resource is NULL\"); \n    \tqueryModule.update(SetResource);\n    }\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190WProductionCycles:SupplyPlan190WProductionCycles\n};\n});",
    "ModuleName": "o9.SupplyPlanningUpdateRule.SupplyPlan190WProductionCycles",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "a1f5d2f9-a288-3a97-ebf0-4b9aaeb8acb8",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213013,
    "Description": "SupplyPlan230StorageMaterialNode",
    "Documentation": "define('o9.SupplyPlanningCreateRule.SupplyPlan230StorageMaterialNode', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SupplyPlan230StorageMaterialNode = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar RuleSequence = parsedParams.o9StorageMaterialNodeRuleFinal;\r\n\tvar ItemL2 = parsedParams.DMItemAttribute1;\r\n    var ItemL4 = parsedParams.DMItemAttribute2;\r\n\tvar ItemType = parsedParams.DMItemAttribute3;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar StorageID = parsedParams.DMStorageID;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemType +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + ItemType); \r\n    queryModule.update(SetItemType);\r\n\r\n\r\n    if (ItemL2 !== null){\r\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L2] = \\\"'+ ItemL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItemL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}\r\n\r\n\tif (ItemL4 !== null){\r\n\t\tvar SetItemL4 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L4] = \\\"'+ ItemL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L4 is/are \" + ItemL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (StorageID !== null){\r\n\t\tvar SetStorageID = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Storage Storage ID] = \\\"'+ StorageID +'\\\" ; end scope;';\r\n\t\tLog.Info(\"StorageID is/are \" + StorageID); \r\n    \tqueryModule.update(SetStorageID);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tSupplyPlan230StorageMaterialNode:SupplyPlan230StorageMaterialNode\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanningCreateRule.SupplyPlan230StorageMaterialNode', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SupplyPlan230StorageMaterialNode = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar RuleSequence = parsedParams.o9StorageMaterialNodeRuleFinal;\r\n\tvar ItemL2 = parsedParams.DMItemAttribute1;\r\n    var ItemL4 = parsedParams.DMItemAttribute2;\r\n\tvar ItemType = parsedParams.DMItemAttribute3;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar StorageID = parsedParams.DMStorageID;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemType +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + ItemType); \r\n    queryModule.update(SetItemType);\r\n\r\n\r\n    if (ItemL2 !== null){\r\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L2] = \\\"'+ ItemL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItemL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}\r\n\r\n\tif (ItemL4 !== null){\r\n\t\tvar SetItemL4 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L4] = \\\"'+ ItemL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L4 is/are \" + ItemL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (StorageID !== null){\r\n\t\tvar SetStorageID = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Storage Storage ID] = \\\"'+ StorageID +'\\\" ; end scope;';\r\n\t\tLog.Info(\"StorageID is/are \" + StorageID); \r\n    \tqueryModule.update(SetStorageID);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tSupplyPlan230StorageMaterialNode:SupplyPlan230StorageMaterialNode\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanningCreateRule.SupplyPlan230StorageMaterialNode",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "9778e9e1-7656-1248-ab07-fbc4682db9b8",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213014,
    "Description": "MinimumShippableAge",
    "Documentation": "define('o9.SupplyPlanningCreateRule.MinimumShippableAge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MinimumShippableAge = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.o9CSSDRuleFinal;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Loca = parsedParams.DMLocation;\r\n\tvar Lore = parsedParams.DMLocationAttribute1;\r\n    var SDCG = parsedParams.DMSalesDomainCustomerGroup;\r\n\tvar SDCh = parsedParams.DMSalesDomainChannel;\r\n\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n    if (Loca !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location] = \\\"'+ Loca +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Loca); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (Lore !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location Region] = \\\"'+ Lore +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + Lore); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n    if (SDCG !== null){\r\n\t\tvar SetCustomerGroup = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Customer Group] = \\\"'+ SDCG +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Customer Group is/are \" + SDCG); \r\n    \tqueryModule.update(SetCustomerGroup);\r\n\t}\r\n\r\n\t/*if (SDCh !== null){\r\n\t\tvar SetChannel = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Channel L1] = \\\"'+ SDCh +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Channel L1 is/are \" + SDCh); \r\n    \tqueryModule.update(SetChannel);\r\n\t}*/\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMinimumShippableAge:MinimumShippableAge\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanningCreateRule.MinimumShippableAge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MinimumShippableAge = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.o9CSSDRuleFinal;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Loca = parsedParams.DMLocation;\r\n\tvar Lore = parsedParams.DMLocationAttribute1;\r\n    var SDCG = parsedParams.DMSalesDomainCustomerGroup;\r\n\tvar SDCh = parsedParams.DMSalesDomainChannel;\r\n\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n    if (Loca !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location] = \\\"'+ Loca +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Loca); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (Lore !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location Region] = \\\"'+ Lore +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + Lore); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n    if (SDCG !== null){\r\n\t\tvar SetCustomerGroup = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Customer Group] = \\\"'+ SDCG +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Customer Group is/are \" + SDCG); \r\n    \tqueryModule.update(SetCustomerGroup);\r\n\t}\r\n\r\n\t/*if (SDCh !== null){\r\n\t\tvar SetChannel = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Channel L1] = \\\"'+ SDCh +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Channel L1 is/are \" + SDCh); \r\n    \tqueryModule.update(SetChannel);\r\n\t}*/\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMinimumShippableAge:MinimumShippableAge\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanningCreateRule.MinimumShippableAge",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "846a75c5-1007-c791-bb69-c16fc885db20",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213015,
    "Description": "Publish Priority From Month To Week",
    "Documentation": "define('o9.referencesupplyplanning.PublishPriorityMonthToWeek', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishPriorityMonthToWeek= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromWeekTemp = ' select (TO.[Time].[Week] ) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ FromMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Asc limit 1;';\r\n\tvar lsResponse4 = queryModule.select(FromWeekTemp);\r\n\r\n\tvar FromWeek = lsResponse4[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromWeek ...\" + FromWeek);\r\n\t\r\n\tvar ToMonthTemp ='select &PlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToWeekTemp = 'select (TO.[Time].[Week]) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ ToMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Desc limit 1;';\r\n\tvar lsResponse5 = queryModule.select(ToWeekTemp);\r\n\tvar ToWeek = lsResponse5[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToWeek ...\" + ToWeek);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingPriorityFromMonthToWeek {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromWeek\" :\"'+ FromWeek +'\", \"ToWeek\" :\"'+ ToWeek +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishPriorityMonthToWeek:PublishPriorityMonthToWeek\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.PublishPriorityMonthToWeek', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishPriorityMonthToWeek= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromWeekTemp = ' select (TO.[Time].[Week] ) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ FromMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Asc limit 1;';\r\n\tvar lsResponse4 = queryModule.select(FromWeekTemp);\r\n\r\n\tvar FromWeek = lsResponse4[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromWeek ...\" + FromWeek);\r\n\t\r\n\tvar ToMonthTemp ='select &PlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToWeekTemp = 'select (TO.[Time].[Week]) where {Version.[Version Name].['+ SourceVersion +'], FROM.[Time].[Month].['+ ToMonth +'], RelationshipType.[014.001 Supply Interaction Month to Week Association]} orderby To.[Time].[Week].Key Desc limit 1;';\r\n\tvar lsResponse5 = queryModule.select(ToWeekTemp);\r\n\tvar ToWeek = lsResponse5[\"Meta\"][0][\"DimensionValues\"][0][\"Name\"];;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToWeek ...\" + ToWeek);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingPriorityFromMonthToWeek {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromWeek\" :\"'+ FromWeek +'\", \"ToWeek\" :\"'+ ToWeek +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishPriorityMonthToWeek:PublishPriorityMonthToWeek\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.PublishPriorityMonthToWeek",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4bdbc9a0-0bd7-4c16-a2c6-94663b1a061e",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213016,
    "Description": "MultiDestinations",
    "Documentation": "define('o9.SupplyPlan170CreateRule.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rule = parsedParams.o9BodLaneRuleFinal;\r\n\tvar FromLoc = parsedParams.Activity1BODLaneFromLoc;\r\n    var ToLoc = parsedParams.Activity1BODLaneToLoc;\r\n\tvar Transmode = parsedParams.Activity2TransMode;\r\n\tvar Prefix = parsedParams.PrefixFB;\r\n\t\r\n\tLog.Info('..................Starting with a Smile..................');\r\n\r\n\t//Populating Measure.[Activity1 From Location]\r\n    var SetFromLoc = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 From Location] = \\\"'+ FromLoc +'\\\" ; end scope;';\r\n\tLog.Info('Source Location is '+ FromLoc);\r\n\tqueryModule.update(SetFromLoc);\r\n\t\r\n\t//Populating Measure.[Activity1 To Location]\r\n\tvar SetToLoc = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 To Location] = \\\"'+ ToLoc +'\\\" ; end scope;';\r\n\tLog.Info(\"Destination Locations are \"+ ToLoc); \r\n    queryModule.update(SetToLoc);\t\r\n\r\n\t//Populating Measure.[Activity2 Transmode]\r\n\tvar SetTransmode = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity2 Transmode] = \\\"'+ Transmode +'\\\" ; end scope;';\r\n\tLog.Info(\"Transmode used \"+ Transmode); \r\n    queryModule.update(SetTransmode);\r\n\r\n\tvar SplitToLoc = String(ToLoc).split(\",\");\r\n\r\n\tif (Prefix === null){\r\n\t\tvar UsePF = \"False\";\r\n\t\tLog.Info('Prefix availability '+ UsePF);\r\n\t}\r\n\telse {\r\n\t\tUsePF = \"True\";\r\n\t\tLog.Info('Prefix availability '+ UsePF)\r\n\t}\r\n\r\n\t//Populating Concatinated String for Measure.[Activity1 BODLane]\r\n\tvar concatelane = [];\r\n\tif (UsePF === \"True\"){\r\n\t\tfor (var a = 0; a < SplitToLoc.length; a++){\r\n\t\tconcatelane[a] = `${Prefix}_From_${FromLoc}_To_${SplitToLoc[a]}` ;\r\n\t\tvar b = a+1;\r\n\t\tLog.Info('Lane '+ b +\" is \"+ concatelane[a]);\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var c = 0; c < SplitToLoc.length; c++){\r\n\t\t\tconcatelane[c] = `Lane_From_${FromLoc}_To_${SplitToLoc[c]}` ;\r\n\t\t\tvar d = c+1;\r\n\t\t\tLog.Info('Lane '+ d +\" is \"+ concatelane[c]);\r\n\t\t\t}\r\n\t}\r\n\tvar Smile = concatelane[0];\r\n\r\n\tif (SplitToLoc.length > 1){\r\n\t\tvar flag = \"True\";\r\n\t\tLog.Info('Lanes to be created are more than 1 '+ flag);\r\n\t}\r\n\r\n\tif (flag === \"True\"){\r\n\t\tfor (var j = 0; j < SplitToLoc.length-1; j++){\r\n\t\t\tvar IDB = `${Smile},${concatelane[j+1]}`;\r\n\t\t\tSmile = IDB;\r\n\t\t\tvar r = j+1;\r\n\t\t\tLog.Info('Check '+ r +\" = \"+ Smile);\r\n\t\t}\r\n\t}\r\n\tLog.Info('Activity1 BODLane '+ Smile);\r\n\r\n\tvar CreateLane = `Cartesian Scope: ([Version].[Version Name].[${Version}] * [Data Object].[Data Object].[Item BODLane Association] * [DM Rule].[Rule].[${Rule}]); Measure.[Activity1 BODLane] = \\\"${Smile}\\\"; end scope;`;\r\n\tLog.Info('Measure.[Activity1 BODLane] = \\\"' + Smile + \"\\\"\");\r\n\tqueryModule.update(CreateLane);\r\n\r\n\t//Populating Activity1 Members \r\n\tif (UsePF === \"True\"){\r\n\t\t\tfor (var i = 0; i < SplitToLoc.length; i++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[i]);\r\n\t\t\t\r\n\t\t\tvar CreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[i]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            var SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"}, Activity1.[Prefix]={\\\"${Prefix}\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\r\n            Log.Info('Prefix set as '+ Prefix);\t\t\r\n\t\t\tvar DCCount = i + 1;\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var k = 0; k < SplitToLoc.length; k++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[k]);\r\n\t\t\t\r\n\t\t\tCreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[k]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"}, Activity1.[Prefix]={\\\"Lane\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\t\t\r\n            Log.Info('Prefix set as Lane');\r\n\t\t\tDCCount = k + 1;\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tLog.Info('Total Lanes created are ' + DCCount);\r\n\t\r\n\tLog.Info('..................Ending with a Cheesy Smile..................');\r\n\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan170CreateRule.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rule = parsedParams.o9BodLaneRuleFinal;\r\n\tvar FromLoc = parsedParams.Activity1BODLaneFromLoc;\r\n    var ToLoc = parsedParams.Activity1BODLaneToLoc;\r\n\tvar Transmode = parsedParams.Activity2TransMode;\r\n\tvar Prefix = parsedParams.PrefixFB;\r\n\t\r\n\tLog.Info('..................Starting with a Smile..................');\r\n\r\n\t//Populating Measure.[Activity1 From Location]\r\n    var SetFromLoc = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 From Location] = \\\"'+ FromLoc +'\\\" ; end scope;';\r\n\tLog.Info('Source Location is '+ FromLoc);\r\n\tqueryModule.update(SetFromLoc);\r\n\t\r\n\t//Populating Measure.[Activity1 To Location]\r\n\tvar SetToLoc = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 To Location] = \\\"'+ ToLoc +'\\\" ; end scope;';\r\n\tLog.Info(\"Destination Locations are \"+ ToLoc); \r\n    queryModule.update(SetToLoc);\t\r\n\r\n\t//Populating Measure.[Activity2 Transmode]\r\n\tvar SetTransmode = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity2 Transmode] = \\\"'+ Transmode +'\\\" ; end scope;';\r\n\tLog.Info(\"Transmode used \"+ Transmode); \r\n    queryModule.update(SetTransmode);\r\n\r\n\tvar SplitToLoc = String(ToLoc).split(\",\");\r\n\r\n\tif (Prefix === null){\r\n\t\tvar UsePF = \"False\";\r\n\t\tLog.Info('Prefix availability '+ UsePF);\r\n\t}\r\n\telse {\r\n\t\tUsePF = \"True\";\r\n\t\tLog.Info('Prefix availability '+ UsePF)\r\n\t}\r\n\r\n\t//Populating Concatinated String for Measure.[Activity1 BODLane]\r\n\tvar concatelane = [];\r\n\tif (UsePF === \"True\"){\r\n\t\tfor (var a = 0; a < SplitToLoc.length; a++){\r\n\t\tconcatelane[a] = `${Prefix}_From_${FromLoc}_To_${SplitToLoc[a]}` ;\r\n\t\tvar b = a+1;\r\n\t\tLog.Info('Lane '+ b +\" is \"+ concatelane[a]);\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var c = 0; c < SplitToLoc.length; c++){\r\n\t\t\tconcatelane[c] = `Lane_From_${FromLoc}_To_${SplitToLoc[c]}` ;\r\n\t\t\tvar d = c+1;\r\n\t\t\tLog.Info('Lane '+ d +\" is \"+ concatelane[c]);\r\n\t\t\t}\r\n\t}\r\n\tvar Smile = concatelane[0];\r\n\r\n\tif (SplitToLoc.length > 1){\r\n\t\tvar flag = \"True\";\r\n\t\tLog.Info('Lanes to be created are more than 1 '+ flag);\r\n\t}\r\n\r\n\tif (flag === \"True\"){\r\n\t\tfor (var j = 0; j < SplitToLoc.length-1; j++){\r\n\t\t\tvar IDB = `${Smile},${concatelane[j+1]}`;\r\n\t\t\tSmile = IDB;\r\n\t\t\tvar r = j+1;\r\n\t\t\tLog.Info('Check '+ r +\" = \"+ Smile);\r\n\t\t}\r\n\t}\r\n\tLog.Info('Activity1 BODLane '+ Smile);\r\n\r\n\tvar CreateLane = `Cartesian Scope: ([Version].[Version Name].[${Version}] * [Data Object].[Data Object].[Item BODLane Association] * [DM Rule].[Rule].[${Rule}]); Measure.[Activity1 BODLane] = \\\"${Smile}\\\"; end scope;`;\r\n\tLog.Info('Measure.[Activity1 BODLane] = \\\"' + Smile + \"\\\"\");\r\n\tqueryModule.update(CreateLane);\r\n\r\n\t//Populating Activity1 Members \r\n\tif (UsePF === \"True\"){\r\n\t\t\tfor (var i = 0; i < SplitToLoc.length; i++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[i]);\r\n\t\t\t\r\n\t\t\tvar CreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[i]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            var SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"}, Activity1.[Prefix]={\\\"${Prefix}\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\r\n            Log.Info('Prefix set as '+ Prefix);\t\t\r\n\t\t\tvar DCCount = i + 1;\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var k = 0; k < SplitToLoc.length; k++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[k]);\r\n\t\t\t\r\n\t\t\tCreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[k]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"}, Activity1.[Prefix]={\\\"Lane\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\t\t\r\n            Log.Info('Prefix set as Lane');\r\n\t\t\tDCCount = k + 1;\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tLog.Info('Total Lanes created are ' + DCCount);\r\n\t\r\n\tLog.Info('..................Ending with a Cheesy Smile..................');\r\n\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan170CreateRule.MultiDestinations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "fc3ebde6-4292-8d99-adf8-a1addb638ef1",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213017,
    "Description": "Update Multi Item Attributes",
    "Documentation": "define('o9.SupplyPlan170UpdateRule.MultiItemAttributes', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiItemAttributes = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var queryModule = require('o9/data/query');\r\n\tvar Daob = parsedParams.DataObject;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Paty = parsedParams.PackageType;\r\n\tvar Itty = parsedParams.ItemType;\r\n\tvar Coty = parsedParams.ContainerType;\r\n\tvar Itst = parsedParams.ItemStage;\r\n\tvar ItL1 = parsedParams.ItemL1;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n    var SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n    Log.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n    if (Paty !== null){\r\n\t    var SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Package Types is/are \" + Paty); \r\n        queryModule.update(SetPackageType);\r\n    }else{\r\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item PackageType] = null ; end scope;';\r\n\t    Log.Info(\"Package Type is NULL\"); \r\n        queryModule.update(SetPackageType);\r\n    }\r\n    \r\n\tif (Coty !== null){\r\n\t    var SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Container Types is/are \" + Coty); \r\n        queryModule.update(SetContainerType);\r\n\t}else{\r\n\t    SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ContainerType] = null ; end scope;';\r\n\t    Log.Info(\"Container Types is NULL\"); \r\n        queryModule.update(SetContainerType);        \r\n    }\r\n\t\r\n\tif (Itst !== null){\r\n\t    var SetItemStage = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item Item Stage] = \\\"'+ Itst +'\\\" ; end scope;';\r\n\t    Log.Info(\"Item Stage is/are \" + Itst); \r\n        queryModule.update(SetItemStage);\r\n\t}else{\r\n\t    SetItemStage = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item Item Stage] = null ; end scope;';\r\n\t    Log.Info(\"Item Stage is NULL\"); \r\n        queryModule.update(SetItemStage);       \r\n    }\r\n\t\r\n\tif (ItL1 !== null){\r\n\t    var SetItemL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item L1] = \\\"'+ ItL1 +'\\\" ; end scope;';\r\n\t    Log.Info(\"L1 is/are \" + ItL1); \r\n        queryModule.update(SetItemL1);\r\n    }else{\r\n        SetItemL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item L1] = null ; end scope;';\r\n        Log.Info(\"L1 is NULL\"); \r\n        queryModule.update(SetItemL1);    \r\n    }\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiItemAttributes:MultiItemAttributes\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan170UpdateRule.MultiItemAttributes', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiItemAttributes = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var queryModule = require('o9/data/query');\r\n\tvar Daob = parsedParams.DataObject;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Paty = parsedParams.PackageType;\r\n\tvar Itty = parsedParams.ItemType;\r\n\tvar Coty = parsedParams.ContainerType;\r\n\tvar Itst = parsedParams.ItemStage;\r\n\tvar ItL1 = parsedParams.ItemL1;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n    var SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n    Log.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n    if (Paty !== null){\r\n\t    var SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Package Types is/are \" + Paty); \r\n        queryModule.update(SetPackageType);\r\n    }else{\r\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item PackageType] = null ; end scope;';\r\n\t    Log.Info(\"Package Type is NULL\"); \r\n        queryModule.update(SetPackageType);\r\n    }\r\n    \r\n\tif (Coty !== null){\r\n\t    var SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Container Types is/are \" + Coty); \r\n        queryModule.update(SetContainerType);\r\n\t}else{\r\n\t    SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ContainerType] = null ; end scope;';\r\n\t    Log.Info(\"Container Types is NULL\"); \r\n        queryModule.update(SetContainerType);        \r\n    }\r\n\t\r\n\tif (Itst !== null){\r\n\t    var SetItemStage = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item Item Stage] = \\\"'+ Itst +'\\\" ; end scope;';\r\n\t    Log.Info(\"Item Stage is/are \" + Itst); \r\n        queryModule.update(SetItemStage);\r\n\t}else{\r\n\t    SetItemStage = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item Item Stage] = null ; end scope;';\r\n\t    Log.Info(\"Item Stage is NULL\"); \r\n        queryModule.update(SetItemStage);       \r\n    }\r\n\t\r\n\tif (ItL1 !== null){\r\n\t    var SetItemL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item L1] = \\\"'+ ItL1 +'\\\" ; end scope;';\r\n\t    Log.Info(\"L1 is/are \" + ItL1); \r\n        queryModule.update(SetItemL1);\r\n    }else{\r\n        SetItemL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item L1] = null ; end scope;';\r\n        Log.Info(\"L1 is NULL\"); \r\n        queryModule.update(SetItemL1);    \r\n    }\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiItemAttributes:MultiItemAttributes\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan170UpdateRule.MultiItemAttributes",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "403e8550-f39a-eaa5-2a09-6be1122fc3c8",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213018,
    "Description": "MinimumShippableAge",
    "Documentation": "define('o9.SupplyPlanningUpdateRule.MinimumShippableAge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MinimumShippableAge = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Loca = parsedParams.DMLocation;\r\n\tvar Lore = parsedParams.DMLocationRegion;\r\n    var SDCG = parsedParams.DMSalesDomainCustomerGroup;\r\n\tvar SDCh = parsedParams.DMSalesDomainChannel;\r\n\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}else{\r\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item PackageType] = null ; end scope;';\r\n\t\tLog.Info(\"Package Type is NULL\"); \r\n    \tqueryModule.update(SetPackageType);\r\n    }\r\n\r\n    if (Loca !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location] = \\\"'+ Loca +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Loca); \r\n    \tqueryModule.update(SetLocation);\r\n\t}else{\r\n        SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location] = null ; end scope;';\r\n\t\tLog.Info(\"Location is NULL\"); \r\n    \tqueryModule.update(SetLocation);\r\n    }\r\n\r\n\tif (Lore !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location Region] = \\\"'+ Lore +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + Lore); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}else{\r\n        SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location Region] = null ; end scope;';\r\n\t\tLog.Info(\"Location Region is NULL\"); \r\n    \tqueryModule.update(SetLocationRegion);\r\n    }\r\n\r\n    if (SDCG !== null){\r\n\t\tvar SetCustomerGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Customer Group] = \\\"'+ SDCG +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Customer Group is/are \" + SDCG); \r\n    \tqueryModule.update(SetCustomerGroup);\r\n\t}else{\r\n        SetCustomerGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Customer Group] = null ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Customer Group is NULL\"); \r\n    \tqueryModule.update(SetCustomerGroup);\r\n    }\r\n\r\n\t/*if (SDCh !== null){\r\n\t\tvar SetChannel = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Channel L1] = \\\"'+ SDCh +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Channel is/are \" + SDCh); \r\n    \tqueryModule.update(SetChannel);\r\n\t}else{\r\n        SetChannel = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Channel L1] = null ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Channel is NULL\"); \r\n    \tqueryModule.update(SetChannel);\r\n    }*/\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMinimumShippableAge:MinimumShippableAge\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanningUpdateRule.MinimumShippableAge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MinimumShippableAge = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Loca = parsedParams.DMLocation;\r\n\tvar Lore = parsedParams.DMLocationRegion;\r\n    var SDCG = parsedParams.DMSalesDomainCustomerGroup;\r\n\tvar SDCh = parsedParams.DMSalesDomainChannel;\r\n\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}else{\r\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Item PackageType] = null ; end scope;';\r\n\t\tLog.Info(\"Package Type is NULL\"); \r\n    \tqueryModule.update(SetPackageType);\r\n    }\r\n\r\n    if (Loca !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location] = \\\"'+ Loca +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Loca); \r\n    \tqueryModule.update(SetLocation);\r\n\t}else{\r\n        SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location] = null ; end scope;';\r\n\t\tLog.Info(\"Location is NULL\"); \r\n    \tqueryModule.update(SetLocation);\r\n    }\r\n\r\n\tif (Lore !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location Region] = \\\"'+ Lore +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + Lore); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}else{\r\n        SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Location Location Region] = null ; end scope;';\r\n\t\tLog.Info(\"Location Region is NULL\"); \r\n    \tqueryModule.update(SetLocationRegion);\r\n    }\r\n\r\n    if (SDCG !== null){\r\n\t\tvar SetCustomerGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Customer Group] = \\\"'+ SDCG +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Customer Group is/are \" + SDCG); \r\n    \tqueryModule.update(SetCustomerGroup);\r\n\t}else{\r\n        SetCustomerGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Customer Group] = null ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Customer Group is NULL\"); \r\n    \tqueryModule.update(SetCustomerGroup);\r\n    }\r\n\r\n\t/*if (SDCh !== null){\r\n\t\tvar SetChannel = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Channel L1] = \\\"'+ SDCh +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Channel is/are \" + SDCh); \r\n    \tqueryModule.update(SetChannel);\r\n\t}else{\r\n        SetChannel = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[CSSD Maintenance]); Measure.[Sales Domain Channel L1] = null ; end scope;';\r\n\t\tLog.Info(\"Sales Domain Channel is NULL\"); \r\n    \tqueryModule.update(SetChannel);\r\n    }*/\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMinimumShippableAge:MinimumShippableAge\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanningUpdateRule.MinimumShippableAge",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "79546c10-f327-4b9f-1b2e-a5209d195066",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213019,
    "Description": "Run Plan Batch For Bos To Quantity (Daily)",
    "Documentation": "define('o9.referencesupplyplanning.DBosToQuantity', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DBosToQuantity = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result; \r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n\tvar queryForPotential1 = 'Select Version.[Version Name].[' + Version + '].Key;';\r\n\tvar lsResponse1 = queryModule.select(queryForPotential1);\r\n    Log.Info(\"Version Key ... \" + lsResponse1);\r\n    var SCPVersionKey = lsResponse1.Result;\r\n\t\r\n\t\r\n\tvar queryForPotential2 = 'Select ([Version].[Version Name].[' + Version + '] * {(if (Measure.[D Inventory Planning Parameter] == 1) then \"true\" else \"false\") as Transient.[Param Value A],(if (Measure.[D Inventory Planning Parameter] == 2) then \"true\" else \"false\") as Transient.[Param Value B],(if (Measure.[D Inventory Planning Parameter] == 3) then \"true\" else \"false\") as Transient.[Param Value C],(if (Measure.[D Inventory Planning Parameter] == 4) then \"true\" else \"false\") as Transient.[Param Value D],(if (Measure.[D Solver Flag Inventory Plan policy] == \"MIN_MAX\") then \"true\" else \"false\") as Transient.[Param Value E],(if (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"true\" else \"false\") as Transient.[Param Value F]});';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse2);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse2);\r\n\t\t\r\n\tvar SCPIndependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value A'));\r\n\tvar SCPDependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value B'));\r\n\tvar SCPIndependentAndDependentDemand = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value C'));\r\n\tvar SCPAdvancedInventoryPlanning = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value D'));\r\n\tvar SCPMIN_MAX = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value E'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value F'));\r\n\t\t\r\n    var queryForExecution = 'exec procedure WeeklyBosToQuantityConversionMasterProcedure {\"Version\" : \"' + Version + '\", \"IndependentDemandOnly\" : ' + SCPIndependentDemandOnly + ', \"DependentDemandOnly\" : ' + SCPDependentDemandOnly + ', \"IndependentAndDependentDemand\" : ' + SCPIndependentAndDependentDemand + ', \"AdvancedInventoryPlanning\" : ' + SCPAdvancedInventoryPlanning + ', \"MIN_MAX\" : ' + SCPMIN_MAX + ',\"InventoryPlanType\" : ' + SCPSolverFlagInventoryPlanType + ',\"VersionKey\" : ' + SCPVersionKey + '};';\r\n\tLog.Info(\"WeeklyBosToQuantityConversionMasterProcedure ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\r\n\tvar queryforPostProcess = 'deleteversion(\"D Bos To Quantity Scenario\");';\r\n    Log.Info(\"deleting Version ... \" + queryforPostProcess);\r\n\tqueryModule.update(queryforPostProcess);\r\n\t\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDBosToQuantity:DBosToQuantity\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.DBosToQuantity', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DBosToQuantity = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result; \r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n\tvar queryForPotential1 = 'Select Version.[Version Name].[' + Version + '].Key;';\r\n\tvar lsResponse1 = queryModule.select(queryForPotential1);\r\n    Log.Info(\"Version Key ... \" + lsResponse1);\r\n    var SCPVersionKey = lsResponse1.Result;\r\n\t\r\n\t\r\n\tvar queryForPotential2 = 'Select ([Version].[Version Name].[' + Version + '] * {(if (Measure.[D Inventory Planning Parameter] == 1) then \"true\" else \"false\") as Transient.[Param Value A],(if (Measure.[D Inventory Planning Parameter] == 2) then \"true\" else \"false\") as Transient.[Param Value B],(if (Measure.[D Inventory Planning Parameter] == 3) then \"true\" else \"false\") as Transient.[Param Value C],(if (Measure.[D Inventory Planning Parameter] == 4) then \"true\" else \"false\") as Transient.[Param Value D],(if (Measure.[D Solver Flag Inventory Plan policy] == \"MIN_MAX\") then \"true\" else \"false\") as Transient.[Param Value E],(if (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"true\" else \"false\") as Transient.[Param Value F]});';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse2);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse2);\r\n\t\t\r\n\tvar SCPIndependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value A'));\r\n\tvar SCPDependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value B'));\r\n\tvar SCPIndependentAndDependentDemand = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value C'));\r\n\tvar SCPAdvancedInventoryPlanning = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value D'));\r\n\tvar SCPMIN_MAX = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value E'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value F'));\r\n\t\t\r\n    var queryForExecution = 'exec procedure WeeklyBosToQuantityConversionMasterProcedure {\"Version\" : \"' + Version + '\", \"IndependentDemandOnly\" : ' + SCPIndependentDemandOnly + ', \"DependentDemandOnly\" : ' + SCPDependentDemandOnly + ', \"IndependentAndDependentDemand\" : ' + SCPIndependentAndDependentDemand + ', \"AdvancedInventoryPlanning\" : ' + SCPAdvancedInventoryPlanning + ', \"MIN_MAX\" : ' + SCPMIN_MAX + ',\"InventoryPlanType\" : ' + SCPSolverFlagInventoryPlanType + ',\"VersionKey\" : ' + SCPVersionKey + '};';\r\n\tLog.Info(\"WeeklyBosToQuantityConversionMasterProcedure ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\r\n\tvar queryforPostProcess = 'deleteversion(\"D Bos To Quantity Scenario\");';\r\n    Log.Info(\"deleting Version ... \" + queryforPostProcess);\r\n\tqueryModule.update(queryforPostProcess);\r\n\t\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDBosToQuantity:DBosToQuantity\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.DBosToQuantity",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "d83a6362-b332-48c6-ac9f-70979a28bb99",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213020,
    "Description": "SupplyPlanning400DCreateRule.DISTReceivingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DCreateRule.DISTReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTReceivingCalendar :DISTReceivingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DCreateRule.DISTReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTReceivingCalendar :DISTReceivingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DCreateRule.DISTReceivingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "3692d9a5-e957-7107-184d-39003e5bdfec",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213021,
    "Description": "SupplyPlanning400DUpdateRule.PROCReceivingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DUpdateRule.PROCReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCReceivingCalendar :PROCReceivingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DUpdateRule.PROCReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCReceivingCalendar :PROCReceivingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DUpdateRule.PROCReceivingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "514c5033-dea8-85e1-4279-7f9c720b384c",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213022,
    "Description": "Generate Delete Data (Truncate) commands for those Measure Groups for which the flag is set false.",
    "Documentation": "define('o9.SupplyPlan007W.NetChangeFlag', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var NetChangeFlag = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan007W.NetChangeFlag\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Scenario = ParsedParams.Version;\r\n\tvar getNCMeasureGroups = 'Select ([Version].[Version Name] * [OutFiles].[OutFiles Table Name] ) on row, ({Measure.[NC Enabled Measure Groups], Measure.[NC Flag]}) on column;';\r\n\tvar NCMG = queryModule.select(getNCMeasureGroups);\r\n\tvar MeasureGroups = cellsetModule.createCellSet(NCMG);\r\n\tvar string1;\r\n\tvar query = \"\";\r\n\tfor (var i = 0; i < MeasureGroups.rowCount ; i++){\r\n\t\tvar NCFlag = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('NC Flag'));\r\n\t\tvar MG = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('NC Enabled Measure Groups'));\r\n\t\tLog.Info(NCFlag);\r\n\t\tLog.Info(MG);\r\n\t\tif (NCFlag === false){\r\n\t\tstring1 = 'TRUNCATE DATA FOR MODEL ['+MG+'] with Versionname ['+Scenario+'];\\n';\r\n\t\tquery = query.concat(string1);\r\n\t\t}\t\r\n\t}\r\n\tLog.Info(query);\r\n\tqueryModule.update(query);\r\n};   \r\n\t\r\nreturn {\r\n\tNetChangeFlag:NetChangeFlag\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan007W.NetChangeFlag', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var NetChangeFlag = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan007W.NetChangeFlag\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Scenario = ParsedParams.Version;\r\n\tvar getNCMeasureGroups = 'Select ([Version].[Version Name] * [OutFiles].[OutFiles Table Name] ) on row, ({Measure.[NC Enabled Measure Groups], Measure.[NC Flag]}) on column;';\r\n\tvar NCMG = queryModule.select(getNCMeasureGroups);\r\n\tvar MeasureGroups = cellsetModule.createCellSet(NCMG);\r\n\tvar string1;\r\n\tvar query = \"\";\r\n\tfor (var i = 0; i < MeasureGroups.rowCount ; i++){\r\n\t\tvar NCFlag = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('NC Flag'));\r\n\t\tvar MG = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('NC Enabled Measure Groups'));\r\n\t\tLog.Info(NCFlag);\r\n\t\tLog.Info(MG);\r\n\t\tif (NCFlag === false){\r\n\t\tstring1 = 'TRUNCATE DATA FOR MODEL ['+MG+'] with Versionname ['+Scenario+'];\\n';\r\n\t\tquery = query.concat(string1);\r\n\t\t}\t\r\n\t}\r\n\tLog.Info(query);\r\n\tqueryModule.update(query);\r\n};   \r\n\t\r\nreturn {\r\n\tNetChangeFlag:NetChangeFlag\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan007W.NetChangeFlag",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "fab6fd57-2fe3-4907-9ed7-c047f35b6890",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213023,
    "Description": "Update Rule for Storage Material Node Association",
    "Documentation": "define('o9.SupplyPlanningUpdateRule.SupplyPlan230StorageMaterialNode', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SupplyPlan230StorageMaterialNode = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar RuleSequence = parsedParams.o9StorageMaterialNodeRuleFinal;\r\n\tvar ItemL2 = parsedParams.DMItemAttribute1;\r\n    var ItemL4 = parsedParams.DMItemAttribute2;\r\n\tvar ItemType = parsedParams.DMItemAttribute3;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar StorageID = parsedParams.DMStorageID;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemType +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + ItemType); \r\n    queryModule.update(SetItemType);\r\n\r\n\r\n    if (ItemL2 !== null){\r\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L2] = \\\"'+ ItemL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItemL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}\r\n\r\n\tif (ItemL4 !== null){\r\n\t\tvar SetItemL4 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L4] = \\\"'+ ItemL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L4 is/are \" + ItemL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (StorageID !== null){\r\n\t\tvar SetStorageID = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Storage Storage ID] = \\\"'+ StorageID +'\\\" ; end scope;';\r\n\t\tLog.Info(\"StorageID is/are \" + StorageID); \r\n    \tqueryModule.update(SetStorageID);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tSupplyPlan230StorageMaterialNode:SupplyPlan230StorageMaterialNode\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanningUpdateRule.SupplyPlan230StorageMaterialNode', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SupplyPlan230StorageMaterialNode = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar RuleSequence = parsedParams.o9StorageMaterialNodeRuleFinal;\r\n\tvar ItemL2 = parsedParams.DMItemAttribute1;\r\n    var ItemL4 = parsedParams.DMItemAttribute2;\r\n\tvar ItemType = parsedParams.DMItemAttribute3;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar StorageID = parsedParams.DMStorageID;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemType +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + ItemType); \r\n    queryModule.update(SetItemType);\r\n\r\n\r\n    if (ItemL2 !== null){\r\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L2] = \\\"'+ ItemL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItemL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}\r\n\r\n\tif (ItemL4 !== null){\r\n\t\tvar SetItemL4 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Item L4] = \\\"'+ ItemL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L4 is/are \" + ItemL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (StorageID !== null){\r\n\t\tvar SetStorageID = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ RuleSequence +'] * [Data Object].[Data Object].[Storage Material Node Maintenance]); Measure.[Storage Storage ID] = \\\"'+ StorageID +'\\\" ; end scope;';\r\n\t\tLog.Info(\"StorageID is/are \" + StorageID); \r\n    \tqueryModule.update(SetStorageID);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tSupplyPlan230StorageMaterialNode:SupplyPlan230StorageMaterialNode\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanningUpdateRule.SupplyPlan230StorageMaterialNode",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "f0313cbd-ca95-827d-698a-906e7519ad91",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213024,
    "Description": "SupplyPlanning400DUpdateRule.DISTReceivingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DUpdateRule.DISTReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTReceivingCalendar :DISTReceivingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DUpdateRule.DISTReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Receiving Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTReceivingCalendar :DISTReceivingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DUpdateRule.DISTReceivingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "934fe260-b171-89ee-37ab-aaa6eed7ff80",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213025,
    "Description": "JAVASCRIPT FOR CREATING NEW BOM",
    "Documentation": "define('o9.referencesupplyplanning.CopyNetwork', ['o9/data/query', 'o9/data/cellset'], function () {\r\n var CreateNewBOMNew= function(o9Params){\r\n var parsedParams = JSON.parse(o9Params);\r\n var Version = parsedParams.Version;\r\n  var FromBOM = parsedParams.FromBOM;\r\n var queryModule = require('o9/data/query');\r\n  \r\n var QueryForFromItem ='Select ([Location].[Location] * [Item].[Item]  * [Version].[Version Name].['+ Version +']) on row,({Measure.[MFG Associated Resource],Measure.[MFG Resource Cons Rate],Measure.[MFG New Routing],Measure.[MFG New BOM]}) on column where{Measure.[MFG Create New BOM] == true};';\r\n \r\n  var BOM = 'Scope:(Version.[Version Name].['+ Version +'] * Item.Item * Location.Location);Measure.[MFG New BOM] = if(Measure.[MFG Create New BOM] == true) then \"BOM-V1.1-for-\"+Item.#.Name+\"-at-\"+Location.#.Name;End scope;';\r\n Log.Info(\"BOM ... \" + BOM); \r\n             queryModule.update(BOM);\r\n             \r\n\r\n             \r\n var CreateBOM = 'CreateMember(Activity1.[Activity1]={,Measure.[MFG New BOM]},Activity1 .[Activity Type1]={,\"Manufacturing\"},Activity1 .[Activity All1]={,\"All\"},Activity1.[BOM Plan Type]={,\"MP and OP\"}) using scope (Version.[Version Name].['+ Version +'] * [Location].[Location] *Item.Item ) where{Measure.[MFG Create New BOM] == true};';\r\n Log.Info(\"CreateBOM ... \" + CreateBOM); \r\n             queryModule.update(CreateBOM);\r\n             \r\n\r\n var queryForPotential = QueryForFromItem;\r\n var cellsetModule = require('o9/data/cellset');\r\n var lsResponse = queryModule.select(queryForPotential);\r\n var dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n \r\n    for (i = 0; i < dataCellSet.rowCount; i++) {\r\n var Location= dataCellSet.row(i).cell(dataCellSet.memberColumnIndex('Location', 'Location')).Name;\r\n var Item = dataCellSet.row(i).cell(dataCellSet.memberColumnIndex('Item', 'Item')).Name;\r\n  var BOMNew = dataCellSet.row(i).cell(dataCellSet.measureColumnIndex('MFG New BOM'));\r\n \r\n var BOMProduced = 'cartesian scope:([Activity1].[Activity1].['+ BOMNew +'] * [Location].[Location].['+ Location +']* [Item].[Item].['+ Item +'] * [Version].[Version Name].['+ Version +']); Measure.[o9 BOM Quantity Produced Per] = 1 ; end scope;';\r\n Log.Info(\"BOMProduced ... \" + BOMProduced); \r\n             queryModule.update(BOMProduced);\r\n var BOMAssoc = 'cartesian scope:([Activity1].[Activity1].['+ BOMNew +'] * [Location].[Location].['+ Location +']* [Item].[Item].['+ Item +'] * [Version].[Version Name].['+ Version +']); Measure.[o9 BOM Association] = 1 ; end scope;';\r\n Log.Info(\"BOMAssoc ... \" + BOMAssoc); \r\n             queryModule.update(BOMAssoc);\r\n//added activity2, meausre change \r\n\r\n//CHANGED MEASURE TO Final Resource Routing Association] AND ADDED ACTIVITY2            \r\n\r\n             \r\n     var QueryForBOMConsumed ='Select ([Activity1].[Activity1].['+ FromBOM +'] * [Location].[Location] * [Item].[Item] * [Version].[Version Name].['+ Version +']) on row,({Measure.[o9 BOM Quantity Consumed Per]}) on column where {Measure.[Final BOM Quantity Consumed Per]>0};';\r\n var queryForPotential3 = QueryForBOMConsumed ;\r\n var lsResponse3 = queryModule.select(queryForPotential3);\r\n var dataCellSet3 = cellsetModule.createCellSet(lsResponse3);\r\n \r\n  for(j = 0; j< dataCellSet3.rowCount; j++) {\r\n var ConsumedItem = dataCellSet3.row(j).cell(dataCellSet3.memberColumnIndex('Item', 'Item')).Name;\r\n var LocationCon = dataCellSet3.row(j).cell(dataCellSet3.memberColumnIndex('Location', 'Location')).Name;\r\n var QtyConsPer = dataCellSet3.row(j).cell(dataCellSet3.measureColumnIndex('Final BOM Quantity Consumed Per'));\r\n \r\n var BOMConsumed = 'cartesian scope:([Activity1].[Activity1].['+ BOMNew +'] * [Location].[Location].['+ Location +']* [Item].[Item].['+ ConsumedItem +'] * [Version].[Version Name].['+ Version +']); Measure.[Final BOM Quantity Consumed Per] = '+ QtyConsPer +' ; end scope;';\r\n         Log.Info(\"BOMConsumed ... \" + BOMConsumed); \r\n             queryModule.update(BOMConsumed);\r\n }\r\n\t\t\t \r\n    }\r\n    \r\n  \r\n \r\n};\r\n\r\n return {\r\n CreateNewBOMNew:CreateNewBOMNew\r\n };\r\n});",
    "Code": "define('o9.referencesupplyplanning.CopyNetwork', ['o9/data/query', 'o9/data/cellset'], function () {\r\n var CreateNewBOMNew= function(o9Params){\r\n var parsedParams = JSON.parse(o9Params);\r\n var Version = parsedParams.Version;\r\n  var FromBOM = parsedParams.FromBOM;\r\n var queryModule = require('o9/data/query');\r\n  \r\n var QueryForFromItem ='Select ([Location].[Location] * [Item].[Item]  * [Version].[Version Name].['+ Version +']) on row,({Measure.[MFG Associated Resource],Measure.[MFG Resource Cons Rate],Measure.[MFG New Routing],Measure.[MFG New BOM]}) on column where{Measure.[MFG Create New BOM] == true};';\r\n \r\n  var BOM = 'Scope:(Version.[Version Name].['+ Version +'] * Item.Item * Location.Location);Measure.[MFG New BOM] = if(Measure.[MFG Create New BOM] == true) then \"BOM-V1.1-for-\"+Item.#.Name+\"-at-\"+Location.#.Name;End scope;';\r\n Log.Info(\"BOM ... \" + BOM); \r\n             queryModule.update(BOM);\r\n             \r\n\r\n             \r\n var CreateBOM = 'CreateMember(Activity1.[Activity1]={,Measure.[MFG New BOM]},Activity1 .[Activity Type1]={,\"Manufacturing\"},Activity1 .[Activity All1]={,\"All\"},Activity1.[BOM Plan Type]={,\"MP and OP\"}) using scope (Version.[Version Name].['+ Version +'] * [Location].[Location] *Item.Item ) where{Measure.[MFG Create New BOM] == true};';\r\n Log.Info(\"CreateBOM ... \" + CreateBOM); \r\n             queryModule.update(CreateBOM);\r\n             \r\n\r\n var queryForPotential = QueryForFromItem;\r\n var cellsetModule = require('o9/data/cellset');\r\n var lsResponse = queryModule.select(queryForPotential);\r\n var dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n \r\n    for (i = 0; i < dataCellSet.rowCount; i++) {\r\n var Location= dataCellSet.row(i).cell(dataCellSet.memberColumnIndex('Location', 'Location')).Name;\r\n var Item = dataCellSet.row(i).cell(dataCellSet.memberColumnIndex('Item', 'Item')).Name;\r\n  var BOMNew = dataCellSet.row(i).cell(dataCellSet.measureColumnIndex('MFG New BOM'));\r\n \r\n var BOMProduced = 'cartesian scope:([Activity1].[Activity1].['+ BOMNew +'] * [Location].[Location].['+ Location +']* [Item].[Item].['+ Item +'] * [Version].[Version Name].['+ Version +']); Measure.[o9 BOM Quantity Produced Per] = 1 ; end scope;';\r\n Log.Info(\"BOMProduced ... \" + BOMProduced); \r\n             queryModule.update(BOMProduced);\r\n var BOMAssoc = 'cartesian scope:([Activity1].[Activity1].['+ BOMNew +'] * [Location].[Location].['+ Location +']* [Item].[Item].['+ Item +'] * [Version].[Version Name].['+ Version +']); Measure.[o9 BOM Association] = 1 ; end scope;';\r\n Log.Info(\"BOMAssoc ... \" + BOMAssoc); \r\n             queryModule.update(BOMAssoc);\r\n//added activity2, meausre change \r\n\r\n//CHANGED MEASURE TO Final Resource Routing Association] AND ADDED ACTIVITY2            \r\n\r\n             \r\n     var QueryForBOMConsumed ='Select ([Activity1].[Activity1].['+ FromBOM +'] * [Location].[Location] * [Item].[Item] * [Version].[Version Name].['+ Version +']) on row,({Measure.[o9 BOM Quantity Consumed Per]}) on column where {Measure.[Final BOM Quantity Consumed Per]>0};';\r\n var queryForPotential3 = QueryForBOMConsumed ;\r\n var lsResponse3 = queryModule.select(queryForPotential3);\r\n var dataCellSet3 = cellsetModule.createCellSet(lsResponse3);\r\n \r\n  for(j = 0; j< dataCellSet3.rowCount; j++) {\r\n var ConsumedItem = dataCellSet3.row(j).cell(dataCellSet3.memberColumnIndex('Item', 'Item')).Name;\r\n var LocationCon = dataCellSet3.row(j).cell(dataCellSet3.memberColumnIndex('Location', 'Location')).Name;\r\n var QtyConsPer = dataCellSet3.row(j).cell(dataCellSet3.measureColumnIndex('Final BOM Quantity Consumed Per'));\r\n \r\n var BOMConsumed = 'cartesian scope:([Activity1].[Activity1].['+ BOMNew +'] * [Location].[Location].['+ Location +']* [Item].[Item].['+ ConsumedItem +'] * [Version].[Version Name].['+ Version +']); Measure.[Final BOM Quantity Consumed Per] = '+ QtyConsPer +' ; end scope;';\r\n         Log.Info(\"BOMConsumed ... \" + BOMConsumed); \r\n             queryModule.update(BOMConsumed);\r\n }\r\n\t\t\t \r\n    }\r\n    \r\n  \r\n \r\n};\r\n\r\n return {\r\n CreateNewBOMNew:CreateNewBOMNew\r\n };\r\n});",
    "ModuleName": "o9.referencesupplyplanning.CopyNetwork",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0c763e86-fba8-9794-7819-90e89115c3a0",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213026,
    "Description": "SupplyPlanning400DCreateRule.DISTShippingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DCreateRule.DISTShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTShippingCalendar :DISTShippingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DCreateRule.DISTShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar DISTShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily DIST Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tDISTShippingCalendar :DISTShippingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DCreateRule.DISTShippingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "e9ec50b7-a3a2-bdfb-90eb-63431793554a",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213027,
    "Description": "ExpiryDays",
    "Documentation": "define('o9.SupplyPlanningUpdateRule.ExpiryDays', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ExpiryDays = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Coty = parsedParams.DMItemAttribute2;\r\n\tvar ItL2 = parsedParams.DMItemAttribute3;\r\n    var ItL4 = parsedParams.DMItemAttribute4;\r\n\tvar Magr = parsedParams.DMItemAttribute5;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}else{\r\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item PackageType] = null ; end scope;';\r\n\t\tLog.Info(\"Package Type is NULL\"); \r\n    \tqueryModule.update(SetPackageType);\r\n    }\r\n\r\n    if (ItL2 !== null){\r\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}else{\r\n        SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L2] = null ; end scope;';\r\n\t\tLog.Info(\"L2 is NULL\"); \r\n    \tqueryModule.update(SetItemL2);\r\n    }\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Types is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}else{\r\n        SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ContainerType] = null ; end scope;';\r\n\t\tLog.Info(\"Container Type is NULL\"); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n    if (Magr !== null){\r\n\t\tvar SetMaterialGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item Material Group] = \\\"'+ Magr +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Material Groups is/are \" + Magr); \r\n    \tqueryModule.update(SetMaterialGroup);\r\n\t}else{\r\n        SetMaterialGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item Material Group] = null ; end scope;';\r\n\t\tLog.Info(\"Material Group is NULL\"); \r\n    \tqueryModule.update(SetMaterialGroup);\r\n    }\r\n\r\n\tif (ItL4 !== null){\r\n\t\tvar SetItemL4 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L4] = \\\"'+ ItL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + ItL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}else{\r\n        SetItemL4 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L4] = null ; end scope;';\r\n\t\tLog.Info(\"Location is NULL\"); \r\n    \tqueryModule.update(SetItemL4);\r\n    }\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tExpiryDays:ExpiryDays\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanningUpdateRule.ExpiryDays', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ExpiryDays = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRule;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Coty = parsedParams.DMItemAttribute2;\r\n\tvar ItL2 = parsedParams.DMItemAttribute3;\r\n    var ItL4 = parsedParams.DMItemAttribute4;\r\n\tvar Magr = parsedParams.DMItemAttribute5;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}else{\r\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item PackageType] = null ; end scope;';\r\n\t\tLog.Info(\"Package Type is NULL\"); \r\n    \tqueryModule.update(SetPackageType);\r\n    }\r\n\r\n    if (ItL2 !== null){\r\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}else{\r\n        SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L2] = null ; end scope;';\r\n\t\tLog.Info(\"L2 is NULL\"); \r\n    \tqueryModule.update(SetItemL2);\r\n    }\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Types is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}else{\r\n        SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ContainerType] = null ; end scope;';\r\n\t\tLog.Info(\"Container Type is NULL\"); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n    if (Magr !== null){\r\n\t\tvar SetMaterialGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item Material Group] = \\\"'+ Magr +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Material Groups is/are \" + Magr); \r\n    \tqueryModule.update(SetMaterialGroup);\r\n\t}else{\r\n        SetMaterialGroup = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item Material Group] = null ; end scope;';\r\n\t\tLog.Info(\"Material Group is NULL\"); \r\n    \tqueryModule.update(SetMaterialGroup);\r\n    }\r\n\r\n\tif (ItL4 !== null){\r\n\t\tvar SetItemL4 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L4] = \\\"'+ ItL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + ItL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}else{\r\n        SetItemL4 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L4] = null ; end scope;';\r\n\t\tLog.Info(\"Location is NULL\"); \r\n    \tqueryModule.update(SetItemL4);\r\n    }\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tExpiryDays:ExpiryDays\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanningUpdateRule.ExpiryDays",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "609244ee-cb81-69fc-8a52-58ba69da03a5",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213028,
    "Description": "Create Rule for Daily Production Cycle",
    "Documentation": "define('o9.SupplyPlanningCreateRule.SupplyPlan190DProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190DProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.o9ProductionCycleRuleFinal;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190DProductionCycles:SupplyPlan190DProductionCycles\n};\n});",
    "Code": "define('o9.SupplyPlanningCreateRule.SupplyPlan190DProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190DProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.o9ProductionCycleRuleFinal;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190DProductionCycles:SupplyPlan190DProductionCycles\n};\n});",
    "ModuleName": "o9.SupplyPlanningCreateRule.SupplyPlan190DProductionCycles",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "73172a97-d600-0b77-79dd-e9311ec9ad8d",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213029,
    "Description": "Run Plan Batch For Bos To Quantity (Weekly)",
    "Documentation": "define('o9.referencesupplyplanning.WBosToQuantity', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var WBosToQuantity = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n\tvar queryForPotential1 = 'Select Version.[Version Name].[' + Version + '].Key;';\r\n\tvar lsResponse1 = queryModule.select(queryForPotential1);\r\n    Log.Info(\"Version Key ... \" + lsResponse1);\r\n    var SCPVersionKey = lsResponse1.Result;\r\n\t\r\n\tvar queryForPotential2 = 'Select ([Version].[Version Name].[' + Version + '] * {(if (Measure.[W Inventory Planning Parameter] == 1) then \"true\" else \"false\") as Transient.[Param Value A],(if (Measure.[W Inventory Planning Parameter] == 2) then \"true\" else \"false\") as Transient.[Param Value B],(if (Measure.[W Inventory Planning Parameter] == 3) then \"true\" else \"false\") as Transient.[Param Value C],(if (Measure.[W Inventory Planning Parameter] == 4) then \"true\" else \"false\") as Transient.[Param Value D],(if (Measure.[W Solver Flag Inventory Plan policy] == \"MIN_MAX\") then \"true\" else \"false\") as Transient.[Param Value E],(if (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"true\" else \"false\") as Transient.[Param Value F]});';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse2);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse2);\r\n\t\t\r\n\tvar SCPIndependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value A'));\r\n\tvar SCPDependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value B'));\r\n\tvar SCPIndependentAndDependentDemand = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value C'));\r\n\tvar SCPAdvancedInventoryPlanning = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value D'));\r\n\tvar SCPMIN_MAX = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value E'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value F'));\r\n\t\r\n\tvar queryForExecution = 'exec procedure WeeklyBosToQuantityConversionMasterProcedure {\"Version\" : \"' + Version + '\", \"IndependentDemandOnly\" : ' + SCPIndependentDemandOnly + ', \"DependentDemandOnly\" : ' + SCPDependentDemandOnly + ', \"IndependentAndDependentDemand\" : ' + SCPIndependentAndDependentDemand + ', \"AdvancedInventoryPlanning\" : ' + SCPAdvancedInventoryPlanning + ', \"MIN_MAX\" : ' + SCPMIN_MAX + ',\"InventoryPlanType\" : ' + SCPSolverFlagInventoryPlanType + ',\"VersionKey\" : ' + SCPVersionKey + '};';\r\n\tLog.Info(\"WeeklyBosToQuantityConversionMasterProcedure ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\t\r\n\t\r\n\t\r\n\r\n\tvar queryforPostProcess = 'deleteversion(\"W Bos To Quantity Scenario\");';\r\n    Log.Info(\"deleting Version ... \" + queryforPostProcess);\r\n\tqueryModule.update(queryforPostProcess);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tWBosToQuantity:WBosToQuantity\r\n\t};\r\n\t});",
    "Code": "define('o9.referencesupplyplanning.WBosToQuantity', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var WBosToQuantity = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Executing Javasrcipt\");\r\n\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\tvar ScenarioCount = getScenarioCount.Result;\r\n\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\tvar VersionCount = getVersionCount.Result;\r\n\t\r\n\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\tLog.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n\t\r\n\tvar queryForPotential1 = 'Select Version.[Version Name].[' + Version + '].Key;';\r\n\tvar lsResponse1 = queryModule.select(queryForPotential1);\r\n    Log.Info(\"Version Key ... \" + lsResponse1);\r\n    var SCPVersionKey = lsResponse1.Result;\r\n\t\r\n\tvar queryForPotential2 = 'Select ([Version].[Version Name].[' + Version + '] * {(if (Measure.[W Inventory Planning Parameter] == 1) then \"true\" else \"false\") as Transient.[Param Value A],(if (Measure.[W Inventory Planning Parameter] == 2) then \"true\" else \"false\") as Transient.[Param Value B],(if (Measure.[W Inventory Planning Parameter] == 3) then \"true\" else \"false\") as Transient.[Param Value C],(if (Measure.[W Inventory Planning Parameter] == 4) then \"true\" else \"false\") as Transient.[Param Value D],(if (Measure.[W Solver Flag Inventory Plan policy] == \"MIN_MAX\") then \"true\" else \"false\") as Transient.[Param Value E],(if (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"true\" else \"false\") as Transient.[Param Value F]});';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse2);\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse2);\r\n\t\t\r\n\tvar SCPIndependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value A'));\r\n\tvar SCPDependentDemandOnly = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value B'));\r\n\tvar SCPIndependentAndDependentDemand = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value C'));\r\n\tvar SCPAdvancedInventoryPlanning = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value D'));\r\n\tvar SCPMIN_MAX = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value E'));\r\n\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Param Value F'));\r\n\t\r\n\tvar queryForExecution = 'exec procedure WeeklyBosToQuantityConversionMasterProcedure {\"Version\" : \"' + Version + '\", \"IndependentDemandOnly\" : ' + SCPIndependentDemandOnly + ', \"DependentDemandOnly\" : ' + SCPDependentDemandOnly + ', \"IndependentAndDependentDemand\" : ' + SCPIndependentAndDependentDemand + ', \"AdvancedInventoryPlanning\" : ' + SCPAdvancedInventoryPlanning + ', \"MIN_MAX\" : ' + SCPMIN_MAX + ',\"InventoryPlanType\" : ' + SCPSolverFlagInventoryPlanType + ',\"VersionKey\" : ' + SCPVersionKey + '};';\r\n\tLog.Info(\"WeeklyBosToQuantityConversionMasterProcedure ... \" + queryForExecution);\r\n\tqueryModule.update(queryForExecution);\r\n\t\r\n\t\r\n\t\r\n\r\n\tvar queryforPostProcess = 'deleteversion(\"W Bos To Quantity Scenario\");';\r\n    Log.Info(\"deleting Version ... \" + queryforPostProcess);\r\n\tqueryModule.update(queryforPostProcess);\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tWBosToQuantity:WBosToQuantity\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencesupplyplanning.WBosToQuantity",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "6f629e77-d547-4509-8b74-88be53b66d9a",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213030,
    "Description": "SupplyPlanning400DCreateRule.PROCShippingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DCreateRule.PROCShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCShippingCalendar :PROCShippingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DCreateRule.PROCShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCShippingCalendar :PROCShippingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DCreateRule.PROCShippingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "09794444-1ce8-d045-3f4d-e74b8addbfa2",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213031,
    "Description": "MultiItemAttributes",
    "Documentation": "define('o9.SupplyPlan170CreateRule.MultiItemAttributes', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiItemAttributes = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var queryModule = require('o9/data/query');\r\n\tvar Daob = parsedParams.DataObject;\r\n\tvar Rusq = parsedParams.o9BodLaneRuleFinal;\r\n\tvar Paty = parsedParams.PackageType;\r\n\tvar Itty = parsedParams.ItemType;\r\n\tvar Coty = parsedParams.ContainerType;\r\n\tvar Itst = parsedParams.ItemStage;\r\n\tvar ItL1 = parsedParams.ItemL1;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n    if (Paty !== null){\r\n\t    var SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Package Types is/are \" + Paty); \r\n        queryModule.update(SetPackageType);\r\n    }\r\n    \r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Coty !== null){\r\n\t    var SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Container Types is/are \" + Coty); \r\n        queryModule.update(SetContainerType);\r\n\t}\r\n\t\r\n\tif (Itst !== null){\r\n\t    var SetItemStage = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item Item Stage] = \\\"'+ Itst +'\\\" ; end scope;';\r\n\t    Log.Info(\"Item Stage is/are \" + Itst); \r\n        queryModule.update(SetItemStage);\r\n\t}\r\n\t\r\n\tif (ItL1 !== null){\r\n\t    var SetItemL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item L1] = \\\"'+ ItL1 +'\\\" ; end scope;';\r\n\t    Log.Info(\"L1 is/are \" + ItL1); \r\n        queryModule.update(SetItemL1);\r\n\t}\r\n\t\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiItemAttributes:MultiItemAttributes\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan170CreateRule.MultiItemAttributes', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiItemAttributes = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var queryModule = require('o9/data/query');\r\n\tvar Daob = parsedParams.DataObject;\r\n\tvar Rusq = parsedParams.o9BodLaneRuleFinal;\r\n\tvar Paty = parsedParams.PackageType;\r\n\tvar Itty = parsedParams.ItemType;\r\n\tvar Coty = parsedParams.ContainerType;\r\n\tvar Itst = parsedParams.ItemStage;\r\n\tvar ItL1 = parsedParams.ItemL1;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n    if (Paty !== null){\r\n\t    var SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Package Types is/are \" + Paty); \r\n        queryModule.update(SetPackageType);\r\n    }\r\n    \r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Coty !== null){\r\n\t    var SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t    Log.Info(\"Container Types is/are \" + Coty); \r\n        queryModule.update(SetContainerType);\r\n\t}\r\n\t\r\n\tif (Itst !== null){\r\n\t    var SetItemStage = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item Item Stage] = \\\"'+ Itst +'\\\" ; end scope;';\r\n\t    Log.Info(\"Item Stage is/are \" + Itst); \r\n        queryModule.update(SetItemStage);\r\n\t}\r\n\t\r\n\tif (ItL1 !== null){\r\n\t    var SetItemL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].['+ Daob +']); Measure.[Item L1] = \\\"'+ ItL1 +'\\\" ; end scope;';\r\n\t    Log.Info(\"L1 is/are \" + ItL1); \r\n        queryModule.update(SetItemL1);\r\n\t}\r\n\t\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiItemAttributes:MultiItemAttributes\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan170CreateRule.MultiItemAttributes",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "157fcc85-ed63-a5bd-bef9-fc9459210879",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213032,
    "Description": "Create Rule for Weekly Production Cycle",
    "Documentation": "define('o9.SupplyPlanningCreateRule.SupplyPlan190WProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190WProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.o9ProductionCycleRuleFinal;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190WProductionCycles:SupplyPlan190WProductionCycles\n};\n});",
    "Code": "define('o9.SupplyPlanningCreateRule.SupplyPlan190WProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190WProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.o9ProductionCycleRuleFinal;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Weekly Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190WProductionCycles:SupplyPlan190WProductionCycles\n};\n});",
    "ModuleName": "o9.SupplyPlanningCreateRule.SupplyPlan190WProductionCycles",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "d203e0dd-a761-caa3-d77c-071072bd4f37",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213033,
    "Description": "Publish Proportion Month To Day",
    "Documentation": "define('o9.referencesupplyplanning.PublishProportionMonthToDay', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishProportionMonthToDay= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromDayTemp = 'select Time.[Month].['+ FromMonth +'].relatedmembers(Day).first().Name;';\r\n\tvar lsResponse4 = queryModule.select(FromDayTemp);\r\n\r\n\tvar FromDay = lsResponse4.Result;\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromDay ...\" + FromDay);\r\n\t\r\n\tvar ToMonthTemp ='select &PlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToDayTemp = 'select Time.[Month].['+ ToMonth +'].relatedmembers(Day).last().Name;';\r\n\tvar lsResponse5 = queryModule.select(ToDayTemp);\r\n\tvar ToDay = lsResponse5.Result;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToDay ...\" + ToDay);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingProportionsFromMonthToDay {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromDay\" :\"'+ FromDay +'\", \"ToDay\" :\"'+ ToDay +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishProportionMonthToDay:PublishProportionMonthToDay\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.PublishProportionMonthToDay', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishProportionMonthToDay= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromDayTemp = 'select Time.[Month].['+ FromMonth +'].relatedmembers(Day).first().Name;';\r\n\tvar lsResponse4 = queryModule.select(FromDayTemp);\r\n\r\n\tvar FromDay = lsResponse4.Result;\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromDay ...\" + FromDay);\r\n\t\r\n\tvar ToMonthTemp ='select &PlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToDayTemp = 'select Time.[Month].['+ ToMonth +'].relatedmembers(Day).last().Name;';\r\n\tvar lsResponse5 = queryModule.select(ToDayTemp);\r\n\tvar ToDay = lsResponse5.Result;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToDay ...\" + ToDay);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingProportionsFromMonthToDay {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromDay\" :\"'+ FromDay +'\", \"ToDay\" :\"'+ ToDay +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishProportionMonthToDay:PublishProportionMonthToDay\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.PublishProportionMonthToDay",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "3e0ade9c-f70c-4ffc-a7f7-6c9940fe8f64",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213034,
    "Description": "SupplyPlanning400DCreateRule.PROCReceivingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DCreateRule.PROCReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCReceivingCalendar :PROCReceivingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DCreateRule.PROCReceivingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCReceivingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.o9CalendarCycleRuleFinal;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Receiving Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCReceivingCalendar :PROCReceivingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DCreateRule.PROCReceivingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "e009fb5c-a9b9-b05c-5489-f6287607c22f",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213035,
    "Description": "MultiDestinations",
    "Documentation": "define('o9.SupplyPlan170UpdateRule.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var queryModule = require('o9/data/query');\r\n\tvar Rule = parsedParams.DMRule;\r\n\tvar FromLoc = parsedParams.Activity1BODLaneFromLoc;\r\n    var ToLoc = parsedParams.Activity1BODLaneToLoc;\r\n\tvar Transmode = parsedParams.Activity2TransMode;\r\n\tvar Prefix = parsedParams.PrefixFB;\r\n\t\r\n\tLog.Info('.......Starting with a Smile');\r\n\r\n\t//Populating Measure.[Activity1 From Location]\r\n    var SetFromLoc = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 From Location] = \\\"'+ FromLoc +'\\\" ; end scope;';\r\n\tLog.Info('Source Location is '+ FromLoc);\r\n\tqueryModule.update(SetFromLoc);\r\n\t\r\n\t//Populating Measure.[Activity1 To Location]\r\n\tvar SetToLoc = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 To Location] = \\\"'+ ToLoc +'\\\" ; end scope;';\r\n\tLog.Info(\"Destination Locations are \"+ ToLoc); \r\n    queryModule.update(SetToLoc);\t\r\n\r\n\t//Populating Measure.[Activity2 Transmode]\r\n\tvar SetTransmode = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity2 Transmode] = \\\"'+ Transmode +'\\\" ; end scope;';\r\n\tLog.Info(\"Transmode used \"+ Transmode); \r\n    queryModule.update(SetTransmode);\r\n\r\n\tvar SplitToLoc = String(ToLoc).split(\",\");\r\n\r\n\tif (Prefix === null){\r\n\t\tvar UsePF = \"False\";\r\n\t\tLog.Info('Prefix availability '+ UsePF);\r\n\t}\r\n\telse {\r\n\t\tUsePF = \"True\";\r\n\t\tLog.Info('Prefix availability '+ UsePF)\r\n\t}\r\n\r\n\t//Populating Concatinated String for Measure.[Activity1 BODLane]\r\n\tvar concatelane = [];\r\n\tif (UsePF === \"True\"){\r\n\t\tfor (var a = 0; a < SplitToLoc.length; a++){\r\n\t\tconcatelane[a] = `${Prefix}_From_${FromLoc}_To_${SplitToLoc[a]}` ;\r\n\t\tvar b = a+1;\r\n\t\tLog.Info('Lane '+ b +\" is \"+ concatelane[a]);\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var c = 0; c < SplitToLoc.length; c++){\r\n\t\t\tconcatelane[c] = `Lane_From_${FromLoc}_To_${SplitToLoc[c]}` ;\r\n\t\t\tvar d = c+1;\r\n\t\t\tLog.Info('Lane '+ d +\" is \"+ concatelane[c]);\r\n\t\t\t}\r\n\t}\r\n\tvar Smile = concatelane[0];\r\n\r\n\tif (SplitToLoc.length > 1){\r\n\t\tvar flag = \"True\";\r\n\t\tLog.Info('Lanes to be created are more than 1 '+ flag);\r\n\t}\r\n\r\n\tif (flag === \"True\"){\r\n\t\tfor (var j = 0; j < SplitToLoc.length-1; j++){\r\n\t\t\tvar IDB = `${Smile},${concatelane[j+1]}`;\r\n\t\t\tSmile = IDB;\r\n\t\t\tvar r = j+1;\r\n\t\t\tLog.Info('Check '+ r +\" = \"+ Smile);\r\n\t\t}\r\n\t}\r\n\tLog.Info('Activity1 BODLane '+ Smile);\r\n\r\n\tvar CreateLane = `Scope: ([Version].[Version Name].[${Version}] * [Data Object].[Data Object].[Item BODLane Association] * [DM Rule].[Rule].[${Rule}]); Measure.[Activity1 BODLane] = \\\"${Smile}\\\"; end scope;`;\r\n\tLog.Info('Measure.[Activity1 BODLane] = \\\"' + Smile + \"\\\"\");\r\n\tqueryModule.update(CreateLane);\r\n\r\n\t//Populating Activity1 Members \r\n\tif (UsePF === \"True\"){\r\n\t\t\tfor (var i = 0; i < SplitToLoc.length; i++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[i]);\r\n\t\t\t\r\n\t\t\tvar CreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[i]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            var SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"}, Activity1.[Prefix]={\\\"${Prefix}\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\r\n            Log.Info('Prefix set as '+ Prefix);\t\t\r\n\t\t\tvar DCCount = i + 1;\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var k = 0; k < SplitToLoc.length; k++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[k]);\r\n\t\t\t\r\n\t\t\tCreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[k]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"}, Activity1.[Prefix]={\\\"Lane\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\t\t\r\n            Log.Info('Prefix set as Lane');\r\n\t\t\tDCCount = k + 1;\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tLog.Info('Total Lanes created are ' + DCCount);\r\n\t\r\n\tLog.Info('..................Ending with a Cheesy Smile..................');\r\n\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan170UpdateRule.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var queryModule = require('o9/data/query');\r\n\tvar Rule = parsedParams.DMRule;\r\n\tvar FromLoc = parsedParams.Activity1BODLaneFromLoc;\r\n    var ToLoc = parsedParams.Activity1BODLaneToLoc;\r\n\tvar Transmode = parsedParams.Activity2TransMode;\r\n\tvar Prefix = parsedParams.PrefixFB;\r\n\t\r\n\tLog.Info('.......Starting with a Smile');\r\n\r\n\t//Populating Measure.[Activity1 From Location]\r\n    var SetFromLoc = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 From Location] = \\\"'+ FromLoc +'\\\" ; end scope;';\r\n\tLog.Info('Source Location is '+ FromLoc);\r\n\tqueryModule.update(SetFromLoc);\r\n\t\r\n\t//Populating Measure.[Activity1 To Location]\r\n\tvar SetToLoc = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity1 To Location] = \\\"'+ ToLoc +'\\\" ; end scope;';\r\n\tLog.Info(\"Destination Locations are \"+ ToLoc); \r\n    queryModule.update(SetToLoc);\t\r\n\r\n\t//Populating Measure.[Activity2 Transmode]\r\n\tvar SetTransmode = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rule +'] * [Data Object].[Data Object].[Item BODLane Association]); Measure.[Activity2 Transmode] = \\\"'+ Transmode +'\\\" ; end scope;';\r\n\tLog.Info(\"Transmode used \"+ Transmode); \r\n    queryModule.update(SetTransmode);\r\n\r\n\tvar SplitToLoc = String(ToLoc).split(\",\");\r\n\r\n\tif (Prefix === null){\r\n\t\tvar UsePF = \"False\";\r\n\t\tLog.Info('Prefix availability '+ UsePF);\r\n\t}\r\n\telse {\r\n\t\tUsePF = \"True\";\r\n\t\tLog.Info('Prefix availability '+ UsePF)\r\n\t}\r\n\r\n\t//Populating Concatinated String for Measure.[Activity1 BODLane]\r\n\tvar concatelane = [];\r\n\tif (UsePF === \"True\"){\r\n\t\tfor (var a = 0; a < SplitToLoc.length; a++){\r\n\t\tconcatelane[a] = `${Prefix}_From_${FromLoc}_To_${SplitToLoc[a]}` ;\r\n\t\tvar b = a+1;\r\n\t\tLog.Info('Lane '+ b +\" is \"+ concatelane[a]);\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var c = 0; c < SplitToLoc.length; c++){\r\n\t\t\tconcatelane[c] = `Lane_From_${FromLoc}_To_${SplitToLoc[c]}` ;\r\n\t\t\tvar d = c+1;\r\n\t\t\tLog.Info('Lane '+ d +\" is \"+ concatelane[c]);\r\n\t\t\t}\r\n\t}\r\n\tvar Smile = concatelane[0];\r\n\r\n\tif (SplitToLoc.length > 1){\r\n\t\tvar flag = \"True\";\r\n\t\tLog.Info('Lanes to be created are more than 1 '+ flag);\r\n\t}\r\n\r\n\tif (flag === \"True\"){\r\n\t\tfor (var j = 0; j < SplitToLoc.length-1; j++){\r\n\t\t\tvar IDB = `${Smile},${concatelane[j+1]}`;\r\n\t\t\tSmile = IDB;\r\n\t\t\tvar r = j+1;\r\n\t\t\tLog.Info('Check '+ r +\" = \"+ Smile);\r\n\t\t}\r\n\t}\r\n\tLog.Info('Activity1 BODLane '+ Smile);\r\n\r\n\tvar CreateLane = `Scope: ([Version].[Version Name].[${Version}] * [Data Object].[Data Object].[Item BODLane Association] * [DM Rule].[Rule].[${Rule}]); Measure.[Activity1 BODLane] = \\\"${Smile}\\\"; end scope;`;\r\n\tLog.Info('Measure.[Activity1 BODLane] = \\\"' + Smile + \"\\\"\");\r\n\tqueryModule.update(CreateLane);\r\n\r\n\t//Populating Activity1 Members \r\n\tif (UsePF === \"True\"){\r\n\t\t\tfor (var i = 0; i < SplitToLoc.length; i++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[i]);\r\n\t\t\t\r\n\t\t\tvar CreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[i]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            var SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"${Prefix}_From_${FromLoc}_To_${SplitToLoc[i]}\\\"}, Activity1.[Prefix]={\\\"${Prefix}\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\r\n            Log.Info('Prefix set as '+ Prefix);\t\t\r\n\t\t\tvar DCCount = i + 1;\r\n\t\t}\r\n\t} else if (UsePF === \"False\"){\r\n\t\tfor (var k = 0; k < SplitToLoc.length; k++){\r\n\t\t\tLog.Info('Creating a BODLane from ' + FromLoc + \" To \" + SplitToLoc[k]);\r\n\t\t\t\r\n\t\t\tCreateActivity1 = `createmember([Activity1].[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"},[Activity1].[From Location]={,\\\"${FromLoc}\\\"},[Activity1].[To Location]={,\\\"${ToLoc[k]}\\\"},[Activity1].[Activity Type1]={,\"Distribution\"});` ;\r\n\t\t\tqueryModule.update(CreateActivity1);\r\n\r\n            SetPrefix = `updatemember (Activity1.[Activity1]={,\\\"Lane_From_${FromLoc}_To_${SplitToLoc[k]}\\\"}, Activity1.[Prefix]={\\\"Lane\\\",});`;\r\n            queryModule.update(SetPrefix);\r\n\t\t\r\n            Log.Info('Prefix set as Lane');\r\n\t\t\tDCCount = k + 1;\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tLog.Info('Total Lanes created are ' + DCCount);\r\n\t\r\n\tLog.Info('..................Ending with a Cheesy Smile..................');\r\n\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan170UpdateRule.MultiDestinations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "51057f07-4ac4-f26c-91b4-d16211f4257a",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213036,
    "Description": "Bulk Scenario Merge",
    "Documentation": "define('o9.SupplyPlan006.BulkScenarioMerge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkScenarioMerge = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar SourceScenario = ParsedParams.Source;\r\n\tvar TargetScenario = ParsedParams.Target;\r\n\tvar Demand = ParsedParams.Demand ;\r\n\tvar Transactional = ParsedParams.Transactional ;\r\n\tvar CapacityMFG = ParsedParams.CapacityMFG ;\r\n\tvar CapacityDIST = ParsedParams.CapacityDIST ;\r\n\tvar CapacityPROC = ParsedParams.CapacityPROC ;\r\n\tvar NetworkMFG = ParsedParams.NetworkMFG ;\r\n\tvar NetworkDIST = ParsedParams.NetworkDIST ;\r\n\tvar NetworkPROC = ParsedParams.NetworkPROC ;\r\n\r\n\tvar Copy = function(M){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+M+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = 'Scope:([Version].[Version Name].['+TargetScenario+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t\t Log.Info(\"String: \" + string1);\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\t\tquery = query.concat('Measure.['+M+'] = Measure.['+M+']@(Version.[Version Name].['+SourceScenario+']);\\nend scope;');\r\n\t\t\tqueryModule.update(query);\r\n\t};\r\n\t\r\n\tvar PassMeasurestoCopy = function(MG){\r\n\t\tvar Measures = cellsetModule.createCellSet(MG);\r\n\t\tif(Measures.rowCount > 0){\r\n\t\t\tfor (var i = 1; i < Measures.colCount ; i++){\r\n\t\t\tvar M = Measures.row(0).cell(i);\r\n\t\t\tif(M !== null){\r\n\t\t\t\tCopy(M);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t}\r\n\t};\r\n\r\nvar IdentifyMeasures = function(measureGroup, filter) {\r\n    var Parametersquery = \"SELECT _SchemaPlan.[_MeasureGroup].[\" + measureGroup + \"].Children(_SchemaPlan.[Plan-MeasureGroup-Measure]).filter(#.Name startswith [\" + filter + \"]);\";\r\n    var Parametermeasures = queryModule.select(Parametersquery);\r\n    var measureNames = Parametermeasures.map(item => item.Name);\r\n    var selectQuery = 'SELECT (&CWV) ON row, ({' + measureNames.map(name => 'Measure.[' + name + ']').join(', ') + '}) on column;';\r\n    var Measures = queryModule.select(selectQuery);\r\n    PassMeasurestoCopy(Measures);\r\n};\r\n\r\n\r\n\t\r\n\tif (Demand === true) {\r\n\t\tIdentifyMeasures(\"009.002 Scenario Merge Demand\", \"Demand Parameter\");\r\n   }\r\n\r\n  if (Transactional === true) {\r\n\t\tIdentifyMeasures(\"009.004 Scenario Mergre Transactional\", \"Transactional Parameter\");\r\n   }\r\n\r\n  if (CapacityMFG === true) {\r\n\t\tIdentifyMeasures(\"009.001 Scenario Merge Capacity\", \"Capacity MFG Parameter\");\r\n  }\r\n\r\n  if (CapacityDIST === true) {\r\n\t\tIdentifyMeasures(\"009.001 Scenario Merge Capacity\", \"Capacity DIST Parameter\");\r\n  }\r\n\r\n   if (CapacityPROC === true) {\r\n\t\tIdentifyMeasures(\"009.001 Scenario Merge Capacity\", \"Capacity PROC Parameter\");\r\n  }\r\n\r\n  if (NetworkMFG === true) {\r\n\t\tIdentifyMeasures(\"009.005 Scenario Merge Network\", \"Network MFG Parameter\");\r\n  }\r\n\r\n  if (NetworkDIST === true) {\r\n\t\tIdentifyMeasures(\"009.005 Scenario Merge Network\", \"Network DIST Parameter\");\r\n  }\r\n\r\n  if (NetworkPROC === true) {\r\n\t\tIdentifyMeasures(\"009.005 Scenario Merge Network\", \"Network PROC Parameter\");\r\n   }\r\n   if (Inventory === true) {\r\n\t\tCopyMeasures(\"009.003 Scenario Merge Inventory\", \"Inventory PROC Parameter\");\r\n   }\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tBulkScenarioMerge:BulkScenarioMerge\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan006.BulkScenarioMerge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkScenarioMerge = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar SourceScenario = ParsedParams.Source;\r\n\tvar TargetScenario = ParsedParams.Target;\r\n\tvar Demand = ParsedParams.Demand ;\r\n\tvar Transactional = ParsedParams.Transactional ;\r\n\tvar CapacityMFG = ParsedParams.CapacityMFG ;\r\n\tvar CapacityDIST = ParsedParams.CapacityDIST ;\r\n\tvar CapacityPROC = ParsedParams.CapacityPROC ;\r\n\tvar NetworkMFG = ParsedParams.NetworkMFG ;\r\n\tvar NetworkDIST = ParsedParams.NetworkDIST ;\r\n\tvar NetworkPROC = ParsedParams.NetworkPROC ;\r\n\r\n\tvar Copy = function(M){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+M+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = 'Scope:([Version].[Version Name].['+TargetScenario+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t\t Log.Info(\"String: \" + string1);\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\t\tquery = query.concat('Measure.['+M+'] = Measure.['+M+']@(Version.[Version Name].['+SourceScenario+']);\\nend scope;');\r\n\t\t\tqueryModule.update(query);\r\n\t};\r\n\t\r\n\tvar PassMeasurestoCopy = function(MG){\r\n\t\tvar Measures = cellsetModule.createCellSet(MG);\r\n\t\tif(Measures.rowCount > 0){\r\n\t\t\tfor (var i = 1; i < Measures.colCount ; i++){\r\n\t\t\tvar M = Measures.row(0).cell(i);\r\n\t\t\tif(M !== null){\r\n\t\t\t\tCopy(M);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t}\r\n\t};\r\n\r\nvar IdentifyMeasures = function(measureGroup, filter) {\r\n    var Parametersquery = \"SELECT _SchemaPlan.[_MeasureGroup].[\" + measureGroup + \"].Children(_SchemaPlan.[Plan-MeasureGroup-Measure]).filter(#.Name startswith [\" + filter + \"]);\";\r\n    var Parametermeasures = queryModule.select(Parametersquery);\r\n    var measureNames = Parametermeasures.map(item => item.Name);\r\n    var selectQuery = 'SELECT (&CWV) ON row, ({' + measureNames.map(name => 'Measure.[' + name + ']').join(', ') + '}) on column;';\r\n    var Measures = queryModule.select(selectQuery);\r\n    PassMeasurestoCopy(Measures);\r\n};\r\n\r\n\r\n\t\r\n\tif (Demand === true) {\r\n\t\tIdentifyMeasures(\"009.002 Scenario Merge Demand\", \"Demand Parameter\");\r\n   }\r\n\r\n  if (Transactional === true) {\r\n\t\tIdentifyMeasures(\"009.004 Scenario Mergre Transactional\", \"Transactional Parameter\");\r\n   }\r\n\r\n  if (CapacityMFG === true) {\r\n\t\tIdentifyMeasures(\"009.001 Scenario Merge Capacity\", \"Capacity MFG Parameter\");\r\n  }\r\n\r\n  if (CapacityDIST === true) {\r\n\t\tIdentifyMeasures(\"009.001 Scenario Merge Capacity\", \"Capacity DIST Parameter\");\r\n  }\r\n\r\n   if (CapacityPROC === true) {\r\n\t\tIdentifyMeasures(\"009.001 Scenario Merge Capacity\", \"Capacity PROC Parameter\");\r\n  }\r\n\r\n  if (NetworkMFG === true) {\r\n\t\tIdentifyMeasures(\"009.005 Scenario Merge Network\", \"Network MFG Parameter\");\r\n  }\r\n\r\n  if (NetworkDIST === true) {\r\n\t\tIdentifyMeasures(\"009.005 Scenario Merge Network\", \"Network DIST Parameter\");\r\n  }\r\n\r\n  if (NetworkPROC === true) {\r\n\t\tIdentifyMeasures(\"009.005 Scenario Merge Network\", \"Network PROC Parameter\");\r\n   }\r\n   if (Inventory === true) {\r\n\t\tCopyMeasures(\"009.003 Scenario Merge Inventory\", \"Inventory PROC Parameter\");\r\n   }\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tBulkScenarioMerge:BulkScenarioMerge\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan006.BulkScenarioMerge",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "895107d2-34d7-4b5a-b5bc-d12bfd17f899",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213037,
    "Description": "SupplyPlanning400DUpdateRule.PROCShippingCalendar",
    "Documentation": "define('o9.SupplyPlanning400DUpdateRule.PROCShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCShippingCalendar :PROCShippingCalendar \r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning400DUpdateRule.PROCShippingCalendar', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PROCShippingCalendar = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar CurrentRuleNumber= parsedParams.DMRule;\r\n\tvar ItemAttribute1= parsedParams.DMItemAttribute1;\r\n    var ItemAttribute2 = parsedParams.DMItemAttribute2;\r\n\tvar LocationAttribute1 = parsedParams.DMLocationAttribute1;\r\n\tvar LocationAttribute2 = parsedParams.DMLocationAttribute2;\r\n\tvar LocationAttribute3 = parsedParams.DMLocationAttribute3;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item ItemType] = \\\"'+ ItemAttribute2 +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" +  ItemAttribute2); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (ItemAttribute1!== null){\r\n\t\tvar SetL1 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Item L1] = \\\"'+ ItemAttribute1+'\\\" ; end scope;';\r\n\t\tLog.Info(\"L1 is/are \" + ItemAttribute1); \r\n    \tqueryModule.update(SetL1);\r\n\t}\r\n\r\n  \tif (LocationAttribute1  !== null){\r\n\t\tvar SetLocationRegion = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location Region] = \\\"'+ LocationAttribute1 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Region is/are \" + LocationAttribute1); \r\n    \tqueryModule.update(SetLocationRegion);\r\n\t}\r\n\r\n\tif (LocationAttribute2 !== null){\r\n\t\tvar SetLocationType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location LocationType] = \\\"'+ LocationAttribute2+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location Type is/are \" + LocationAttribute2); \r\n    \tqueryModule.update(SetLocationType);\r\n\t}\r\n\t\r\n\tif (LocationAttribute3 !== null){\r\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ CurrentRuleNumber+'] * [Data Object].[Data Object].[Daily PROC Shipping Holidays Maintenance]); Measure.[Location Location] = \\\"'+ LocationAttribute3+'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + LocationAttribute3); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tPROCShippingCalendar :PROCShippingCalendar \r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning400DUpdateRule.PROCShippingCalendar",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4a98f47b-5b7c-0a7b-8fa0-bb7a30e3d968",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213038,
    "Description": "Create Rule for Resource Consumed Per",
    "Documentation": "define('o9.SupplyPlanning280WCreateRule.ResourceConsumedPer', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar IDBCPLineSpeed = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRuleFinal;\r\n\tvar Paty = parsedParams.DMItemAttribute1;\r\n\tvar Coty = parsedParams.DMItemAttribute2;\r\n\tvar L5 = parsedParams.DMItemAttribute3;\r\n\tvar Itty = parsedParams.ItemType;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar Resource = parsedParams.DMResource;\r\n\r\n\tLog.Info('....................Starting....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Types is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (Resource !== null){\r\n\t\tvar SetResource = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Resource is/are \" + Resource); \r\n    \tqueryModule.update(SetResource);\r\n\t}\r\n    if (L5 !== null){\r\n\t\tvar SetL5 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item L5] = \\\"'+ L5 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L5 is/are \" + L5); \r\n    \tqueryModule.update(SetL5);                                         \r\n\t}\r\n\r\n\tLog.Info('....................Ending....................');\r\n};\r\nreturn {\r\n\tIDBCPLineSpeed:IDBCPLineSpeed\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanning280WCreateRule.ResourceConsumedPer', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar IDBCPLineSpeed = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.DMRuleFinal;\r\n\tvar Paty = parsedParams.DMItemAttribute1;\r\n\tvar Coty = parsedParams.DMItemAttribute2;\r\n\tvar L5 = parsedParams.DMItemAttribute3;\r\n\tvar Itty = parsedParams.ItemType;\r\n\tvar Location = parsedParams.DMLocation;\r\n\tvar Resource = parsedParams.DMResource;\r\n\r\n\tLog.Info('....................Starting....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Types is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n\tif (Location !== null){\r\n\t\tvar SetLocation = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + Location); \r\n    \tqueryModule.update(SetLocation);\r\n\t}\r\n\r\n\tif (Resource !== null){\r\n\t\tvar SetResource = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Resource is/are \" + Resource); \r\n    \tqueryModule.update(SetResource);\r\n\t}\r\n    if (L5 !== null){\r\n\t\tvar SetL5 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Resource Consumed Per]); Measure.[Item L5] = \\\"'+ L5 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L5 is/are \" + L5); \r\n    \tqueryModule.update(SetL5);                                         \r\n\t}\r\n\r\n\tLog.Info('....................Ending....................');\r\n};\r\nreturn {\r\n\tIDBCPLineSpeed:IDBCPLineSpeed\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanning280WCreateRule.ResourceConsumedPer",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "436929b8-109d-ab79-ef7c-296bc7b04896",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213039,
    "Description": "ExpiryDays",
    "Documentation": "define('o9.SupplyPlanningCreateRule.ExpiryDays', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ExpiryDays = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.o9ExpiryRuleFinal;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Coty = parsedParams.DMItemAttribute2;\r\n\tvar ItL2 = parsedParams.DMItemAttribute3;\r\n    var ItL4 = parsedParams.DMItemAttribute4;\r\n\tvar Magr = parsedParams.DMItemAttribute5;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n    if (ItL2 !== null){\r\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Types is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n    if (Magr !== null){\r\n\t\tvar SetMaterialGroup = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item Material Group] = \\\"'+ Magr +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Material Groups is/are \" + Magr); \r\n    \tqueryModule.update(SetMaterialGroup);\r\n\t}\r\n\r\n\tif (ItL4 !== null){\r\n\t\tvar SetItemL4 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L4] = \\\"'+ ItL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + ItL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tExpiryDays:ExpiryDays\r\n};\r\n});",
    "Code": "define('o9.SupplyPlanningCreateRule.ExpiryDays', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar ExpiryDays = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n\tvar queryModule = require('o9/data/query');\r\n    var Version = parsedParams.Version;\r\n\tvar Rusq = parsedParams.o9ExpiryRuleFinal;\r\n\tvar Itty = parsedParams.ItemType;\t\r\n    var Paty = parsedParams.DMItemAttribute1;\r\n    var Coty = parsedParams.DMItemAttribute2;\r\n\tvar ItL2 = parsedParams.DMItemAttribute3;\r\n    var ItL4 = parsedParams.DMItemAttribute4;\r\n\tvar Magr = parsedParams.DMItemAttribute5;\r\n\r\n\tLog.Info('....................Starting with a Smile....................');\r\n\r\n\r\n\tvar SetItemType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\r\n\tLog.Info(\"Item Types is/are \" + Itty); \r\n    queryModule.update(SetItemType);\r\n\r\n\tif (Paty !== null){\r\n\t\tvar SetPackageType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Package Types is/are \" + Paty); \r\n    \tqueryModule.update(SetPackageType);\r\n\t}\r\n\r\n    if (ItL2 !== null){\r\n\t\tvar SetItemL2 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"L2 is/are \" + ItL2); \r\n    \tqueryModule.update(SetItemL2);\r\n\t}\r\n\r\n\tif (Coty !== null){\r\n\t\tvar SetContainerType = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Container Types is/are \" + Coty); \r\n    \tqueryModule.update(SetContainerType);\r\n\t}\r\n\r\n    if (Magr !== null){\r\n\t\tvar SetMaterialGroup = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item Material Group] = \\\"'+ Magr +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Material Groups is/are \" + Magr); \r\n    \tqueryModule.update(SetMaterialGroup);\r\n\t}\r\n\r\n\tif (ItL4 !== null){\r\n\t\tvar SetItemL4 = 'cartesian scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Expiry days maintenance]); Measure.[Item L4] = \\\"'+ ItL4 +'\\\" ; end scope;';\r\n\t\tLog.Info(\"Location is/are \" + ItL4); \r\n    \tqueryModule.update(SetItemL4);\r\n\t}\r\n\r\n\r\n\tLog.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tExpiryDays:ExpiryDays\r\n};\r\n});",
    "ModuleName": "o9.SupplyPlanningCreateRule.ExpiryDays",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "68f4a764-89ad-a59d-71de-61178dc71bef",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213040,
    "Description": "Update Rule for Daily Production Cycle",
    "Documentation": "define('o9.SupplyPlanningUpdateRule.SupplyPlan190DProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190DProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.DMRule;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] *  [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] *  [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}else{\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] *  [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item PackageType] = null ; end scope;';\n\t\tLog.Info(\"Package Type is NULL\"); \n    \tqueryModule.update(SetPackageType);\n    }\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}else{\n        SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item L2] = null ; end scope;';\n\t\tLog.Info(\"L2 is NULL\"); \n    \tqueryModule.update(SetItemL2);\n    }\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}else{\n        SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerType] = null ; end scope;';\n\t\tLog.Info(\"Container Type is NULL\"); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}else{\n        SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = null ; end scope;';\n\t\tLog.Info(\"Container Type Name is NULL\"); \n    \tqueryModule.update(SetContainerTypeName);\n    }\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}else{\n        SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Location Location] = null ; end scope;';\n\t\tLog.Info(\"Location is NULL\"); \n    \tqueryModule.update(SetLocation);\n    }\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}else{\n        SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Resource Resource] = null ; end scope;';\n\t\tLog.Info(\"Resource is NULL\"); \n    \tqueryModule.update(SetResource);\n    }\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190DProductionCycles:SupplyPlan190DProductionCycles\n};\n});",
    "Code": "define('o9.SupplyPlanningUpdateRule.SupplyPlan190DProductionCycles', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SupplyPlan190DProductionCycles = function(o9Params){\n    var parsedParams = JSON.parse(o9Params);\n\tvar queryModule = require('o9/data/query');\n    var Version = parsedParams.Version;\n\tvar Rusq = parsedParams.DMRule;\n\tvar Paty = parsedParams.DMItemAttribute1;\n    var ItL2 = parsedParams.DMItemAttribute2;\n\tvar Coty = parsedParams.DMItemAttribute3;\n    var Cotyna = parsedParams.DMItemAttribute4;\n\tvar Itty = parsedParams.DMItemAttribute5;\n\tvar Location = parsedParams.DMLocation;\n\tvar Resource = parsedParams.DMResource;\n\n\tLog.Info('....................Starting with a Smile....................');\n\n\n\tvar SetItemType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] *  [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ItemType] = \\\"'+ Itty +'\\\" ; end scope;';\n\tLog.Info(\"Item Types is/are \" + Itty); \n    queryModule.update(SetItemType);\n\n\tif (Paty !== null){\n\t\tvar SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] *  [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item PackageType] = \\\"'+ Paty +'\\\" ; end scope;';\n\t\tLog.Info(\"Package Types is/are \" + Paty); \n    \tqueryModule.update(SetPackageType);\n\t}else{\n        SetPackageType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] *  [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item PackageType] = null ; end scope;';\n\t\tLog.Info(\"Package Type is NULL\"); \n    \tqueryModule.update(SetPackageType);\n    }\n\n    if (ItL2 !== null){\n\t\tvar SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item L2] = \\\"'+ ItL2 +'\\\" ; end scope;';\n\t\tLog.Info(\"L2 is/are \" + ItL2); \n    \tqueryModule.update(SetItemL2);\n\t}else{\n        SetItemL2 = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item L2] = null ; end scope;';\n\t\tLog.Info(\"L2 is NULL\"); \n    \tqueryModule.update(SetItemL2);\n    }\n\n\tif (Coty !== null){\n\t\tvar SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerType] = \\\"'+ Coty +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Types is/are \" + Coty); \n    \tqueryModule.update(SetContainerType);\n\t}else{\n        SetContainerType = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerType] = null ; end scope;';\n\t\tLog.Info(\"Container Type is NULL\"); \n    \tqueryModule.update(SetContainerType);\n\t}\n\n    if (Cotyna !== null){\n\t\tvar SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = \\\"'+ Cotyna +'\\\" ; end scope;';\n\t\tLog.Info(\"Container Type Names is/are \" + Cotyna); \n    \tqueryModule.update(SetContainerTypeName);\n\t}else{\n        SetContainerTypeName = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Item ContainerTypeName] = null ; end scope;';\n\t\tLog.Info(\"Container Type Name is NULL\"); \n    \tqueryModule.update(SetContainerTypeName);\n    }\n\n\tif (Location !== null){\n\t\tvar SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Location Location] = \\\"'+ Location +'\\\" ; end scope;';\n\t\tLog.Info(\"Location is/are \" + Location); \n    \tqueryModule.update(SetLocation);\n\t}else{\n        SetLocation = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Location Location] = null ; end scope;';\n\t\tLog.Info(\"Location is NULL\"); \n    \tqueryModule.update(SetLocation);\n    }\n\n\tif (Resource !== null){\n\t\tvar SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Resource Resource] = \\\"'+ Resource +'\\\" ; end scope;';\n\t\tLog.Info(\"Resource is/are \" + Resource); \n    \tqueryModule.update(SetResource);\n\t}else{\n        SetResource = 'scope:( [Version].[Version Name].['+ Version +']  * [DM Rule].[Rule].['+ Rusq +'] * [Data Object].[Data Object].[Daily Production Cycle Maintenance]); Measure.[Resource Resource] = null ; end scope;';\n\t\tLog.Info(\"Resource is NULL\"); \n    \tqueryModule.update(SetResource);\n    }\n\n\n\tLog.Info('....................Ending with a Cheesy Smile....................');\n};\nreturn {\n\tSupplyPlan190DProductionCycles:SupplyPlan190DProductionCycles\n};\n});",
    "ModuleName": "o9.SupplyPlanningUpdateRule.SupplyPlan190DProductionCycles",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "ede31ae2-75b5-fff6-0931-fd7fda7b11c6",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213041,
    "Description": "Publish Priority Month To Day",
    "Documentation": "define('o9.referencesupplyplanning.PublishPriorityMonthToDay', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishPriorityMonthToDay= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromDayTemp = 'select Time.[Month].['+ FromMonth +'].relatedmembers(Day).first().Name;';\r\n\tvar lsResponse4 = queryModule.select(FromDayTemp);\r\n\r\n\tvar FromDay = lsResponse4.Result;\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromDay ...\" + FromDay);\r\n\t\r\n\tvar ToMonthTemp ='select &DailyPlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToDayTemp = 'select Time.[Month].['+ ToMonth +'].relatedmembers(Day).last().Name;';\r\n\tvar lsResponse5 = queryModule.select(ToDayTemp);\r\n\tvar ToDay = lsResponse5.Result;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToDay ...\" + ToDay);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingPriorityFromMonthToDay {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromDay\" :\"'+ FromDay +'\", \"ToDay\" :\"'+ ToDay +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishPriorityMonthToDay:PublishPriorityMonthToDay\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.PublishPriorityMonthToDay', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar PublishPriorityMonthToDay= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var SourceVersion = parsedParams.SourceVersion;\r\n    var TargetVersion = parsedParams.TargetVersion;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tvar CurrentBucketTemp ='select &MonthlySolverCurrentBucket.element(0).Name;';\t\r\n\tvar lsResponse1 = queryModule.select(CurrentBucketTemp);\r\n\tvar CurrentBucket = lsResponse1.Result;\r\n\tLog.Info(\"CurrentBucket ...\" + CurrentBucket);\r\n\t\r\n\tvar PublishFreezeWindowTemp = 'Select ([Version].[Version Name].['+ SourceVersion +'] * {Measure.[M Publish Freeze Window]});';\r\n\tvar lsResponse = queryModule.select(PublishFreezeWindowTemp);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(lsResponse));\r\n\tvar dataCellSet = cellsetModule.createCellSet(lsResponse);\r\n\tvar PublishFreezeWindow = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Publish Freeze Window'));\r\n\tLog.Info(\"PublishFreezeWindow ...\" + PublishFreezeWindow);\r\n\r\n\t\r\n\tvar FromMonthTemp = 'select Time.[Month].['+ CurrentBucket +'].leadoffset('+ PublishFreezeWindow +').Name;';\r\n\tvar lsResponse2 = queryModule.select(FromMonthTemp);\r\n\tvar FromMonth = lsResponse2.Result;\r\n\tLog.Info(\"FromMonth ...\" + FromMonth);\r\n\r\n\t\r\n\tvar FromDayTemp = 'select Time.[Month].['+ FromMonth +'].relatedmembers(Day).first().Name;';\r\n\tvar lsResponse4 = queryModule.select(FromDayTemp);\r\n\r\n\tvar FromDay = lsResponse4.Result;\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"FromDay ...\" + FromDay);\r\n\t\r\n\tvar ToMonthTemp ='select &DailyPlanningHorizon.last().relatedmembers([Month]).element(0).Name;';\t\r\n\tvar lsResponse3 = queryModule.select(ToMonthTemp);\r\n\tvar ToMonth = lsResponse3.Result;\r\n\tLog.Info(\"ToMonth ...\" + ToMonth);\r\n\t\r\n\tvar ToDayTemp = 'select Time.[Month].['+ ToMonth +'].relatedmembers(Day).last().Name;';\r\n\tvar lsResponse5 = queryModule.select(ToDayTemp);\r\n\tvar ToDay = lsResponse5.Result;\r\n\t\r\n\t//var dataCellSet2 = cellsetModule.createCellSet(lsResponse2);\r\n\tLog.Info(\"ToDay ...\" + ToDay);\r\n\t\r\n\tvar execprocedure = 'exec procedure PublishSourcingPriorityFromMonthToDay {\"SourceVersion\" : \"'+ SourceVersion +'\", \"TargetVersion\" : \"'+ TargetVersion +'\", \"FromMonth\" :\"'+ FromMonth +'\", \"ToMonth\" :\"'+ ToMonth +'\", \"FromDay\" :\"'+ FromDay +'\", \"ToDay\" :\"'+ ToDay +'\"};';\r\n\t\r\n\tLog.Info(\"execprocedure ... \" + execprocedure);\r\n\tqueryModule.update(execprocedure);\r\n\r\n};\r\n\t\r\nreturn {\r\n\tPublishPriorityMonthToDay:PublishPriorityMonthToDay\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.PublishPriorityMonthToDay",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "c37a7bc4-510a-4255-ba72-847d144e4164",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213042,
    "Description": "Bulk Scenario Merge",
    "Documentation": "define('o9.SupplyPlan006W.BulkScenarioMerge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkScenarioMerge = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006W.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar SourceScenario = ParsedParams.Source;\r\n\tvar TargetScenario = ParsedParams.Target;\r\n\tvar Demand = ParsedParams.Demand ;\r\n\tvar Inventory = ParsedParams.Inventory ;\r\n\tvar Transactional = ParsedParams.Transactional ;\r\n\tvar CapacityMFG = ParsedParams.CapacityMFG ;\r\n\tvar CapacityDIST = ParsedParams.CapacityDIST ;\r\n\tvar CapacityPROC = ParsedParams.CapacityPROC ;\r\n\tvar NetworkMFG = ParsedParams.NetworkMFG ;\r\n\tvar NetworkDIST = ParsedParams.NetworkDIST ;\r\n\tvar NetworkPROC = ParsedParams.NetworkPROC ;\r\n\r\n\tvar Copy = function(M){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+M+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = 'Scope:([Version].[Version Name].['+TargetScenario+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\t\tquery = query.concat('Measure.['+M+'] = Measure.['+M+']@(Version.[Version Name].['+SourceScenario+']);\\nend scope;');\r\n\t\t\tqueryModule.update(query);\r\n\t};\r\n\t\r\n\tvar PassMeasurestoCopy = function(MG){\r\n\t\tvar Measures = cellsetModule.createCellSet(MG);\r\n\t\tif(Measures.rowCount > 0){\r\n\t\t\tfor (var i = 1; i < Measures.colCount ; i++){\r\n\t\t\tvar M = Measures.row(0).cell(i);\r\n\t\t\tLog.Info(\"Measure\"+M);\r\n\t\t\tif(M !== null){\r\n\t\t\t\tCopy(M);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar DemandFunction = function(){\r\n\t\tvar getDemandMeasures = 'Select (&CWV) on row, ({Measure.[Demand Parameter 1], Measure.[Demand Parameter 10], Measure.[Demand Parameter 2], Measure.[Demand Parameter 3], Measure.[Demand Parameter 4], Measure.[Demand Parameter 5], Measure.[Demand Parameter 6], Measure.[Demand Parameter 7], Measure.[Demand Parameter 8], Measure.[Demand Parameter 9]}) on column;';\r\n\t\tvar DemandMG = queryModule.select(getDemandMeasures);\r\n\t\tPassMeasurestoCopy(DemandMG);\r\n\t};\r\n\t\r\n\tvar InventoryFunction = function(){\r\n\t\tvar getInventoryMeasures = 'Select (&CWV) on row, ({Measure.[Inventory Parameter 1], Measure.[Inventory Parameter 10], Measure.[Inventory Parameter 2], Measure.[Inventory Parameter 3], Measure.[Inventory Parameter 4], Measure.[Inventory Parameter 5], Measure.[Inventory Parameter 6], Measure.[Inventory Parameter 7], Measure.[Inventory Parameter 8], Measure.[Inventory Parameter 9]}) on column;';\r\n\t\tvar InventoryMG = queryModule.select(getInventoryMeasures);\r\n\t\tPassMeasurestoCopy(InventoryMG);\r\n\t};\r\n\t\r\n\tvar TransactionalFunction = function(){\r\n\t\tvar getTransactionalMeasures = 'Select (&CWV) on row, ({Measure.[Transactional Parameter 1], Measure.[Transactional Parameter 10], Measure.[Transactional Parameter 11], Measure.[Transactional Parameter 12], Measure.[Transactional Parameter 13], Measure.[Transactional Parameter 14], Measure.[Transactional Parameter 2], Measure.[Transactional Parameter 3], Measure.[Transactional Parameter 4], Measure.[Transactional Parameter 5], Measure.[Transactional Parameter 6], Measure.[Transactional Parameter 7], Measure.[Transactional Parameter 8], Measure.[Transactional Parameter 9]}) on column;';\r\n\t\tvar TransactionalMG = queryModule.select(getTransactionalMeasures);\r\n\t\tPassMeasurestoCopy(TransactionalMG);\r\n\t};\r\n\t\r\n\tvar CapacityMFGFunction = function(){\r\n\t\tvar getCapacityMFGMeasures = 'Select (&CWV) on row, ({Measure.[Capacity MFG Parameter 1], Measure.[Capacity MFG Parameter 10], Measure.[Capacity MFG Parameter 2], Measure.[Capacity MFG Parameter 3], Measure.[Capacity MFG Parameter 4], Measure.[Capacity MFG Parameter 5], Measure.[Capacity MFG Parameter 6], Measure.[Capacity MFG Parameter 7], Measure.[Capacity MFG Parameter 8], Measure.[Capacity MFG Parameter 9]}) on column;';\r\n\t\tvar CapacityMFGMG = queryModule.select(getCapacityMFGMeasures);\r\n\t\tPassMeasurestoCopy(CapacityMFGMG);\r\n\t};\r\n\t\r\n\tvar CapacityDISTFunction = function(){\r\n\t\tvar getCapacityDISTMeasures = 'Select (&CWV) on row, ({Measure.[Capacity DIST Parameter 1], Measure.[Capacity DIST Parameter 10], Measure.[Capacity DIST Parameter 11], Measure.[Capacity DIST Parameter 12], Measure.[Capacity DIST Parameter 2], Measure.[Capacity DIST Parameter 3], Measure.[Capacity DIST Parameter 4], Measure.[Capacity DIST Parameter 5], Measure.[Capacity DIST Parameter 6], Measure.[Capacity DIST Parameter 7], Measure.[Capacity DIST Parameter 8], Measure.[Capacity DIST Parameter 9]}) on column;';\r\n\t\tvar CapacityDISTMG = queryModule.select(getCapacityDISTMeasures);\r\n\t\tPassMeasurestoCopy(CapacityDISTMG);\r\n\t};\r\n\t\r\n\tvar CapacityPROCFunction = function(){\r\n\t\tvar getCapacityPROCMeasures = 'Select (&CWV) on row, ({Measure.[Capacity PROC Parameter 1], Measure.[Capacity PROC Parameter 10], Measure.[Capacity PROC Parameter 2], Measure.[Capacity PROC Parameter 3], Measure.[Capacity PROC Parameter 4], Measure.[Capacity PROC Parameter 5], Measure.[Capacity PROC Parameter 6], Measure.[Capacity PROC Parameter 7], Measure.[Capacity PROC Parameter 8], Measure.[Capacity PROC Parameter 9]}) on column;';\r\n\t\tvar CapacityPROCMG = queryModule.select(getCapacityPROCMeasures);\r\n\t\tPassMeasurestoCopy(CapacityPROCMG);\r\n\t};\r\n\t\r\n\tvar NetworkMFGFunction = function(){\r\n\t\tvar getNetworkMFGMeasures = 'Select (&CWV) on row, ({Measure.[Network MFG Parameter 1], Measure.[Network MFG Parameter 10], Measure.[Network MFG Parameter 11], Measure.[Network MFG Parameter 12], Measure.[Network MFG Parameter 13], Measure.[Network MFG Parameter 14], Measure.[Network MFG Parameter 15], Measure.[Network MFG Parameter 16], Measure.[Network MFG Parameter 17], Measure.[Network MFG Parameter 2], Measure.[Network MFG Parameter 3], Measure.[Network MFG Parameter 4], Measure.[Network MFG Parameter 5], Measure.[Network MFG Parameter 6], Measure.[Network MFG Parameter 7], Measure.[Network MFG Parameter 8], Measure.[Network MFG Parameter 9]}) on column;';\r\n\t\tvar NetworkMFGMG = queryModule.select(getNetworkMFGMeasures);\r\n\t\tPassMeasurestoCopy(NetworkMFGMG);\r\n\t};\r\n\t\r\n\tvar NetworkDISTFunction = function(){\r\n\t\tvar getNetworkDISTMeasures = 'Select (&CWV) on row, ({Measure.[Network DIST Parameter 1], Measure.[Network DIST Parameter 10], Measure.[Network DIST Parameter 11], Measure.[Network DIST Parameter 2], Measure.[Network DIST Parameter 3], Measure.[Network DIST Parameter 4], Measure.[Network DIST Parameter 5], Measure.[Network DIST Parameter 6], Measure.[Network DIST Parameter 7], Measure.[Network DIST Parameter 8], Measure.[Network DIST Parameter 9]}) on column;';\r\n\t\tvar NetworkDISTMG = queryModule.select(getNetworkDISTMeasures);\r\n\t\tPassMeasurestoCopy(NetworkDISTMG);\r\n\t};\r\n\t\r\n\tvar NetworkPROCFunction = function(){\r\n\t\tvar getNetworkPROCMeasures = 'Select (&CWV) on row, ({Measure.[Network PROC Parameter 1], Measure.[Network PROC Parameter 10], Measure.[Network PROC Parameter 11], Measure.[Network PROC Parameter 2], Measure.[Network PROC Parameter 3], Measure.[Network PROC Parameter 4], Measure.[Network PROC Parameter 5], Measure.[Network PROC Parameter 6], Measure.[Network PROC Parameter 7], Measure.[Network PROC Parameter 8], Measure.[Network PROC Parameter 9]}) on column;';\r\n\t\tvar NetworkPROCMG = queryModule.select(getNetworkPROCMeasures);\r\n\t\tPassMeasurestoCopy(NetworkPROCMG);\r\n\t};\r\n\t\r\n\tif(Demand === true){DemandFunction();}\r\n\t\r\n\tif(Inventory === true){InventoryFunction();}\r\n\t\r\n\tif(Transactional === true){TransactionalFunction();}\r\n\t\r\n\tif(CapacityMFG === true){CapacityMFGFunction();}\r\n\t\r\n\tif(CapacityDIST === true){CapacityDISTFunction();}\r\n\t\r\n\tif(CapacityPROC === true){CapacityPROCFunction();}\r\n\t\r\n\tif(NetworkMFG === true){NetworkMFGFunction();}\r\n\t\r\n\tif(NetworkDIST === true){NetworkDISTFunction();}\r\n\t\r\n\tif(NetworkPROC === true){NetworkPROCFunction();}\r\n\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tBulkScenarioMerge:BulkScenarioMerge\r\n\t};\r\n});",
    "Code": "define('o9.SupplyPlan006W.BulkScenarioMerge', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkScenarioMerge = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006W.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar SourceScenario = ParsedParams.Source;\r\n\tvar TargetScenario = ParsedParams.Target;\r\n\tvar Demand = ParsedParams.Demand ;\r\n\tvar Inventory = ParsedParams.Inventory ;\r\n\tvar Transactional = ParsedParams.Transactional ;\r\n\tvar CapacityMFG = ParsedParams.CapacityMFG ;\r\n\tvar CapacityDIST = ParsedParams.CapacityDIST ;\r\n\tvar CapacityPROC = ParsedParams.CapacityPROC ;\r\n\tvar NetworkMFG = ParsedParams.NetworkMFG ;\r\n\tvar NetworkDIST = ParsedParams.NetworkDIST ;\r\n\tvar NetworkPROC = ParsedParams.NetworkPROC ;\r\n\r\n\tvar Copy = function(M){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+M+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = 'Scope:([Version].[Version Name].['+TargetScenario+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\t\tquery = query.concat('Measure.['+M+'] = Measure.['+M+']@(Version.[Version Name].['+SourceScenario+']);\\nend scope;');\r\n\t\t\tqueryModule.update(query);\r\n\t};\r\n\t\r\n\tvar PassMeasurestoCopy = function(MG){\r\n\t\tvar Measures = cellsetModule.createCellSet(MG);\r\n\t\tif(Measures.rowCount > 0){\r\n\t\t\tfor (var i = 1; i < Measures.colCount ; i++){\r\n\t\t\tvar M = Measures.row(0).cell(i);\r\n\t\t\tLog.Info(\"Measure\"+M);\r\n\t\t\tif(M !== null){\r\n\t\t\t\tCopy(M);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar DemandFunction = function(){\r\n\t\tvar getDemandMeasures = 'Select (&CWV) on row, ({Measure.[Demand Parameter 1], Measure.[Demand Parameter 10], Measure.[Demand Parameter 2], Measure.[Demand Parameter 3], Measure.[Demand Parameter 4], Measure.[Demand Parameter 5], Measure.[Demand Parameter 6], Measure.[Demand Parameter 7], Measure.[Demand Parameter 8], Measure.[Demand Parameter 9]}) on column;';\r\n\t\tvar DemandMG = queryModule.select(getDemandMeasures);\r\n\t\tPassMeasurestoCopy(DemandMG);\r\n\t};\r\n\t\r\n\tvar InventoryFunction = function(){\r\n\t\tvar getInventoryMeasures = 'Select (&CWV) on row, ({Measure.[Inventory Parameter 1], Measure.[Inventory Parameter 10], Measure.[Inventory Parameter 2], Measure.[Inventory Parameter 3], Measure.[Inventory Parameter 4], Measure.[Inventory Parameter 5], Measure.[Inventory Parameter 6], Measure.[Inventory Parameter 7], Measure.[Inventory Parameter 8], Measure.[Inventory Parameter 9]}) on column;';\r\n\t\tvar InventoryMG = queryModule.select(getInventoryMeasures);\r\n\t\tPassMeasurestoCopy(InventoryMG);\r\n\t};\r\n\t\r\n\tvar TransactionalFunction = function(){\r\n\t\tvar getTransactionalMeasures = 'Select (&CWV) on row, ({Measure.[Transactional Parameter 1], Measure.[Transactional Parameter 10], Measure.[Transactional Parameter 11], Measure.[Transactional Parameter 12], Measure.[Transactional Parameter 13], Measure.[Transactional Parameter 14], Measure.[Transactional Parameter 2], Measure.[Transactional Parameter 3], Measure.[Transactional Parameter 4], Measure.[Transactional Parameter 5], Measure.[Transactional Parameter 6], Measure.[Transactional Parameter 7], Measure.[Transactional Parameter 8], Measure.[Transactional Parameter 9]}) on column;';\r\n\t\tvar TransactionalMG = queryModule.select(getTransactionalMeasures);\r\n\t\tPassMeasurestoCopy(TransactionalMG);\r\n\t};\r\n\t\r\n\tvar CapacityMFGFunction = function(){\r\n\t\tvar getCapacityMFGMeasures = 'Select (&CWV) on row, ({Measure.[Capacity MFG Parameter 1], Measure.[Capacity MFG Parameter 10], Measure.[Capacity MFG Parameter 2], Measure.[Capacity MFG Parameter 3], Measure.[Capacity MFG Parameter 4], Measure.[Capacity MFG Parameter 5], Measure.[Capacity MFG Parameter 6], Measure.[Capacity MFG Parameter 7], Measure.[Capacity MFG Parameter 8], Measure.[Capacity MFG Parameter 9]}) on column;';\r\n\t\tvar CapacityMFGMG = queryModule.select(getCapacityMFGMeasures);\r\n\t\tPassMeasurestoCopy(CapacityMFGMG);\r\n\t};\r\n\t\r\n\tvar CapacityDISTFunction = function(){\r\n\t\tvar getCapacityDISTMeasures = 'Select (&CWV) on row, ({Measure.[Capacity DIST Parameter 1], Measure.[Capacity DIST Parameter 10], Measure.[Capacity DIST Parameter 11], Measure.[Capacity DIST Parameter 12], Measure.[Capacity DIST Parameter 2], Measure.[Capacity DIST Parameter 3], Measure.[Capacity DIST Parameter 4], Measure.[Capacity DIST Parameter 5], Measure.[Capacity DIST Parameter 6], Measure.[Capacity DIST Parameter 7], Measure.[Capacity DIST Parameter 8], Measure.[Capacity DIST Parameter 9]}) on column;';\r\n\t\tvar CapacityDISTMG = queryModule.select(getCapacityDISTMeasures);\r\n\t\tPassMeasurestoCopy(CapacityDISTMG);\r\n\t};\r\n\t\r\n\tvar CapacityPROCFunction = function(){\r\n\t\tvar getCapacityPROCMeasures = 'Select (&CWV) on row, ({Measure.[Capacity PROC Parameter 1], Measure.[Capacity PROC Parameter 10], Measure.[Capacity PROC Parameter 2], Measure.[Capacity PROC Parameter 3], Measure.[Capacity PROC Parameter 4], Measure.[Capacity PROC Parameter 5], Measure.[Capacity PROC Parameter 6], Measure.[Capacity PROC Parameter 7], Measure.[Capacity PROC Parameter 8], Measure.[Capacity PROC Parameter 9]}) on column;';\r\n\t\tvar CapacityPROCMG = queryModule.select(getCapacityPROCMeasures);\r\n\t\tPassMeasurestoCopy(CapacityPROCMG);\r\n\t};\r\n\t\r\n\tvar NetworkMFGFunction = function(){\r\n\t\tvar getNetworkMFGMeasures = 'Select (&CWV) on row, ({Measure.[Network MFG Parameter 1], Measure.[Network MFG Parameter 10], Measure.[Network MFG Parameter 11], Measure.[Network MFG Parameter 12], Measure.[Network MFG Parameter 13], Measure.[Network MFG Parameter 14], Measure.[Network MFG Parameter 15], Measure.[Network MFG Parameter 16], Measure.[Network MFG Parameter 17], Measure.[Network MFG Parameter 2], Measure.[Network MFG Parameter 3], Measure.[Network MFG Parameter 4], Measure.[Network MFG Parameter 5], Measure.[Network MFG Parameter 6], Measure.[Network MFG Parameter 7], Measure.[Network MFG Parameter 8], Measure.[Network MFG Parameter 9]}) on column;';\r\n\t\tvar NetworkMFGMG = queryModule.select(getNetworkMFGMeasures);\r\n\t\tPassMeasurestoCopy(NetworkMFGMG);\r\n\t};\r\n\t\r\n\tvar NetworkDISTFunction = function(){\r\n\t\tvar getNetworkDISTMeasures = 'Select (&CWV) on row, ({Measure.[Network DIST Parameter 1], Measure.[Network DIST Parameter 10], Measure.[Network DIST Parameter 11], Measure.[Network DIST Parameter 2], Measure.[Network DIST Parameter 3], Measure.[Network DIST Parameter 4], Measure.[Network DIST Parameter 5], Measure.[Network DIST Parameter 6], Measure.[Network DIST Parameter 7], Measure.[Network DIST Parameter 8], Measure.[Network DIST Parameter 9]}) on column;';\r\n\t\tvar NetworkDISTMG = queryModule.select(getNetworkDISTMeasures);\r\n\t\tPassMeasurestoCopy(NetworkDISTMG);\r\n\t};\r\n\t\r\n\tvar NetworkPROCFunction = function(){\r\n\t\tvar getNetworkPROCMeasures = 'Select (&CWV) on row, ({Measure.[Network PROC Parameter 1], Measure.[Network PROC Parameter 10], Measure.[Network PROC Parameter 11], Measure.[Network PROC Parameter 2], Measure.[Network PROC Parameter 3], Measure.[Network PROC Parameter 4], Measure.[Network PROC Parameter 5], Measure.[Network PROC Parameter 6], Measure.[Network PROC Parameter 7], Measure.[Network PROC Parameter 8], Measure.[Network PROC Parameter 9]}) on column;';\r\n\t\tvar NetworkPROCMG = queryModule.select(getNetworkPROCMeasures);\r\n\t\tPassMeasurestoCopy(NetworkPROCMG);\r\n\t};\r\n\t\r\n\tif(Demand === true){DemandFunction();}\r\n\t\r\n\tif(Inventory === true){InventoryFunction();}\r\n\t\r\n\tif(Transactional === true){TransactionalFunction();}\r\n\t\r\n\tif(CapacityMFG === true){CapacityMFGFunction();}\r\n\t\r\n\tif(CapacityDIST === true){CapacityDISTFunction();}\r\n\t\r\n\tif(CapacityPROC === true){CapacityPROCFunction();}\r\n\t\r\n\tif(NetworkMFG === true){NetworkMFGFunction();}\r\n\t\r\n\tif(NetworkDIST === true){NetworkDISTFunction();}\r\n\t\r\n\tif(NetworkPROC === true){NetworkPROCFunction();}\r\n\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tBulkScenarioMerge:BulkScenarioMerge\r\n\t};\r\n});",
    "ModuleName": "o9.SupplyPlan006W.BulkScenarioMerge",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "f1610b19-0d6f-45d3-a617-b735fb439359",
    "ModuleId": "89ea750b-98c6-4aa1-aee2-7136e4f17745"
  },
  {
    "Id": 213043,
    "Description": "Seeding Location Plan",
    "Documentation": "/*\r\nPlugin : o9.referencemodelretailmfp.SeedLP\r\nVersion : 2025.04\r\nMaintained by : retailpmm@o9solutions.com\r\n*/\r\ndefine('o9.referencemodelretailmfp.SeedLP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedLP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var DepartmentFB = parsedParams.Department.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar StoreFB = parsedParams.Store.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\r\n        var itemQuery='spread cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2ELocations.Filter(#.Name in {\"'+StoreFB+'\"}).ancestorsAtLevel([Location Country]) * Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).RelatedMembers([Planning Month]) * &RE2EChannels.Filter(#.Name in {\"'+ChannelFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"})); Measure.[LP SelectSeedOption] = if (Measure.[Class Selling Season Week Association]  == 1) then 1; end scope;';\r\n        \r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n        \r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingLPPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Store\" : [\"'+StoreFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Location Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingLPPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Store\" : [\"'+StoreFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Location Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingLPPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Store\" : [\"'+StoreFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Location Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2ELocations.Filter(#.Name in {\"'+StoreFB+'\"}) * Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).RelatedMembers([Planning Month]) * &RE2EChannels.Filter(#.Name in {\"'+ChannelFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[LP SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedLP : SeedLP\r\n\t};\r\n\r\n});",
    "Code": "/*\r\nPlugin : o9.referencemodelretailmfp.SeedLP\r\nVersion : 2025.04\r\nMaintained by : retailpmm@o9solutions.com\r\n*/\r\ndefine('o9.referencemodelretailmfp.SeedLP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedLP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var DepartmentFB = parsedParams.Department.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar StoreFB = parsedParams.Store.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\r\n        var itemQuery='spread cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2ELocations.Filter(#.Name in {\"'+StoreFB+'\"}).ancestorsAtLevel([Location Country]) * Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).RelatedMembers([Planning Month]) * &RE2EChannels.Filter(#.Name in {\"'+ChannelFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"})); Measure.[LP SelectSeedOption] = if (Measure.[Class Selling Season Week Association]  == 1) then 1; end scope;';\r\n        \r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n        \r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingLPPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Store\" : [\"'+StoreFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Location Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingLPPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Store\" : [\"'+StoreFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Location Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingLPPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Store\" : [\"'+StoreFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Location Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2ELocations.Filter(#.Name in {\"'+StoreFB+'\"}) * Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).RelatedMembers([Planning Month]) * &RE2EChannels.Filter(#.Name in {\"'+ChannelFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[LP SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedLP : SeedLP\r\n\t};\r\n\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedLP",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "d825e7ed-fbfb-d7ff-e9cb-b1ac3d0d0353",
    "ModuleId": "872cd171-8caa-4e3a-bd94-265838c2d91a"
  },
  {
    "Id": 213044,
    "Description": "Seeding Attribute Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedAttr', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SeedAttr = function (o9Params) \t{\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\n\n        var parsedParams = JSON.parse(o9Params);\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\n\t\tLog.Info(JSON.stringify(parsedParams));\n\t\tconst queryMod = require('o9/data/query');\n\t\t\n\t\tvar VersionFB = parsedParams.Version;\n        var SelectFB = parsedParams.Select;\n        var ClassFB = parsedParams.Class.join('\", \"');\n        var ChannelFB = parsedParams.Channel.join('\", \"');\n        var PAGFB = parsedParams.ProductAttributeGroup.join('\", \"');\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\n\n        var itemQuery='spread cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &PAG.Filter(#.Name in {\"'+PAGFB+'\"}) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[Atr SelectSeedOption] = if (Measure.[Style Color PAG Association] == 1) then 1;end scope;';\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\n        Log.Info(itemQuery);\n        queryMod.update(itemQuery);\n        \n        if(SelectFB == 1){\n            itemQuery='exec procedure LYSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from LY Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SelectFB == 2){\n            itemQuery='exec procedure LLYSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from LLY Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery); \n        }\n        else if(SelectFB == 3){\n            itemQuery='exec procedure LLLYSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from LLLY Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SelectFB == 6){\n            itemQuery='exec procedure WeightageSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from Weightage Seeding Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &PAG.Filter(#.Name in {\"'+PAGFB+'\"}) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[Atr SelectSeedOption] = null;end scope;';\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\n        Log.Info(itemQuery);\n        queryMod.update(itemQuery);\n\t};\n\t\n\treturn \t{\n\t\tSeedAttr : SeedAttr\n\t};\n\t\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedAttr', ['o9/data/query', 'o9/data/cellset'], function () {\n\tvar SeedAttr = function (o9Params) \t{\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\n\n        var parsedParams = JSON.parse(o9Params);\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\n\t\tLog.Info(JSON.stringify(parsedParams));\n\t\tconst queryMod = require('o9/data/query');\n\t\t\n\t\tvar VersionFB = parsedParams.Version;\n        var SelectFB = parsedParams.Select;\n        var ClassFB = parsedParams.Class.join('\", \"');\n        var ChannelFB = parsedParams.Channel.join('\", \"');\n        var PAGFB = parsedParams.ProductAttributeGroup.join('\", \"');\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\n\n        var itemQuery='spread cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &PAG.Filter(#.Name in {\"'+PAGFB+'\"}) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[Atr SelectSeedOption] = if (Measure.[Style Color PAG Association] == 1) then 1;end scope;';\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\n        Log.Info(itemQuery);\n        queryMod.update(itemQuery);\n        \n        if(SelectFB == 1){\n            itemQuery='exec procedure LYSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from LY Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SelectFB == 2){\n            itemQuery='exec procedure LLYSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from LLY Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery); \n        }\n        else if(SelectFB == 3){\n            itemQuery='exec procedure LLLYSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from LLLY Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SelectFB == 6){\n            itemQuery='exec procedure WeightageSeedingAttrPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"ProductAttributeGroup\" : [\"'+PAGFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"--------------------Seeding Attribute Plan from Weightage Seeding Values--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &PAG.Filter(#.Name in {\"'+PAGFB+'\"}) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[Atr SelectSeedOption] = null;end scope;';\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\n        Log.Info(itemQuery);\n        queryMod.update(itemQuery);\n\t};\n\t\n\treturn \t{\n\t\tSeedAttr : SeedAttr\n\t};\n\t\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedAttr",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "ae3a4f68-93db-b80f-e684-0fec9d7586a1",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213045,
    "Description": "Seeding Top Down Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedTD', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedTD = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var DepartmentFB = parsedParams.Department.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n        \r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = if(Measure.[Class Selling Season Week Association] == 1) then 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedTD : SeedTD\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedTD', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedTD = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var DepartmentFB = parsedParams.Department.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n        \r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = if(Measure.[Class Selling Season Week Association] == 1) then 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingTDPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Top Down Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedTD : SeedTD\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedTD",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "5b9b4ae1-a77e-4bf8-53a1-0813941b082b",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213046,
    "Description": "Seeding Class Sales Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedCP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedCP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var ClassFB = parsedParams.Class.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EWholesaleAccounts.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EWholesaleAccounts.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedCP : SeedCP\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedCP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedCP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var ClassFB = parsedParams.Class.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EWholesaleAccounts.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingCSPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Class Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EWholesaleAccounts.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedCP : SeedCP\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedCP",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "28e7eee4-712b-ce05-4b82-1e4fedd01c12",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213047,
    "Description": "Seeding Strategic Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedSP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedSP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var BusinessUnitFB = parsedParams.BusinessUnit.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[SP SelectSeedOption] = if(Measure.[Class Selling Season Week Association] == 1) then 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[SP SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedSP : SeedSP\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedSP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedSP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var BusinessUnitFB = parsedParams.BusinessUnit.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[SP SelectSeedOption] = if(Measure.[Class Selling Season Week Association] == 1) then 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingSPPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Strategic Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[SP SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedSP : SeedSP\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedSP",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "492e50a9-b07e-4503-b344-b36523f31db4",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213048,
    "Description": "Seeding Regional Sales Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedRP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedRP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var DepartmentFB = parsedParams.Department.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar RegionFB = parsedParams.Region.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n        \r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ERegions.Filter(#.Name in {\"'+RegionFB+'\"}).relatedmembers([Location Country]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ERegions.Filter(#.Name in {\"'+RegionFB+'\"}).relatedmembers([Location Country]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedRP : SeedRP\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedRP', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedRP = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var DepartmentFB = parsedParams.Department.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar RegionFB = parsedParams.Region.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n        \r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ERegions.Filter(#.Name in {\"'+RegionFB+'\"}).relatedmembers([Location Country]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingRSPlan { \"Version\" : \"'+VersionFB+'\" , \"Department\" : [\"'+DepartmentFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Region\" : [\"'+RegionFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Regional Sales Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EDepartments.Filter(#.Name in {\"'+DepartmentFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &RE2ERegions.Filter(#.Name in {\"'+RegionFB+'\"}).relatedmembers([Location Country]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[TD SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedRP : SeedRP\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedRP",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4ab67c05-c3f1-2e7a-1c04-c5efc2645192",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213049,
    "Description": "Selling Season validation for VTD",
    "Documentation": "define('o9.referencemodelretailmfp.VTDSSValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var VTDSSValidation = function (o9Params) {\r\n        Log.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n        Log.Info(JSON.stringify(parsedParams));\r\n        const queryMod = require('o9/data/query');\r\n\r\n        var C1SellingSeason = parsedParams.C1SellingSeason;\r\n        var C2SellingSeason = parsedParams.C2SellingSeason;\r\n        /*****/\r\n      // Parsing dates for comparison\r\n        var C1StartDate = new Date(parsedParams.C1StartDate);\r\n        var C1EndDate = new Date(parsedParams.C1EndDate);\r\n        var C2StartDate = new Date(parsedParams.C2StartDate);\r\n        var C2EndDate = new Date(parsedParams.C2EndDate);\r\n        var LastWeek = new Date(parsedParams.LastWeek);\r\n        /*****/\r\n\r\n        if ((C1SellingSeason === null || C1SellingSeason.length === 0) !== \r\n            (C2SellingSeason === null || C2SellingSeason.length === 0)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'C1SellingSeason and C2SellingSeason must either both be empty or both have values.'\r\n            };\r\n            Log.Info(\"Error Condition Met: \" + JSON.stringify(RuleOutputToUI));\r\n            Log.Error('Validation Error: Last Period Selling Season and Current Period Selling Season must either both be empty or both have values.');\r\n            return; // Exit the function and return the error object\r\n        } else {\r\n            Log.Info(\"Validation Passed: Both Selling Seasons are correctly set.\");\r\n        }\r\n\r\n        // Validate C1EndDate and C2EndDate against LastWeek\r\n        if (C1EndDate > LastWeek || C2EndDate > LastWeek) {\r\n            // Throwing an error message to the user\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'C1EndDate and C2EndDate must not be later than LastWeek'\r\n            };\r\n            // Logging the error\r\n            Log.Info(\"Error Condition Met: \" + JSON.stringify(RuleOutputToUI));\r\n            Log.Error('Validation Error: Last Period and Current Period must not be later than the Last Week.');\r\n            return;\r\n        } else {\r\n            Log.Info(\"Validation Passed: Dates are set correctly\");\r\n        }\r\n        \r\n        return {\r\n            Status: 'Success',\r\n            Message: 'Validation passed without errors.'\r\n        }; \r\n    };\r\n    \r\n    return {\r\n        VTDSSValidation: VTDSSValidation\r\n    };\r\n});",
    "Code": "define('o9.referencemodelretailmfp.VTDSSValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var VTDSSValidation = function (o9Params) {\r\n        Log.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n        Log.Info(JSON.stringify(parsedParams));\r\n        const queryMod = require('o9/data/query');\r\n\r\n        var C1SellingSeason = parsedParams.C1SellingSeason;\r\n        var C2SellingSeason = parsedParams.C2SellingSeason;\r\n        /*****/\r\n      // Parsing dates for comparison\r\n        var C1StartDate = new Date(parsedParams.C1StartDate);\r\n        var C1EndDate = new Date(parsedParams.C1EndDate);\r\n        var C2StartDate = new Date(parsedParams.C2StartDate);\r\n        var C2EndDate = new Date(parsedParams.C2EndDate);\r\n        var LastWeek = new Date(parsedParams.LastWeek);\r\n        /*****/\r\n\r\n        if ((C1SellingSeason === null || C1SellingSeason.length === 0) !== \r\n            (C2SellingSeason === null || C2SellingSeason.length === 0)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'C1SellingSeason and C2SellingSeason must either both be empty or both have values.'\r\n            };\r\n            Log.Info(\"Error Condition Met: \" + JSON.stringify(RuleOutputToUI));\r\n            Log.Error('Validation Error: Last Period Selling Season and Current Period Selling Season must either both be empty or both have values.');\r\n            return; // Exit the function and return the error object\r\n        } else {\r\n            Log.Info(\"Validation Passed: Both Selling Seasons are correctly set.\");\r\n        }\r\n\r\n        // Validate C1EndDate and C2EndDate against LastWeek\r\n        if (C1EndDate > LastWeek || C2EndDate > LastWeek) {\r\n            // Throwing an error message to the user\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'C1EndDate and C2EndDate must not be later than LastWeek'\r\n            };\r\n            // Logging the error\r\n            Log.Info(\"Error Condition Met: \" + JSON.stringify(RuleOutputToUI));\r\n            Log.Error('Validation Error: Last Period and Current Period must not be later than the Last Week.');\r\n            return;\r\n        } else {\r\n            Log.Info(\"Validation Passed: Dates are set correctly\");\r\n        }\r\n        \r\n        return {\r\n            Status: 'Success',\r\n            Message: 'Validation passed without errors.'\r\n        }; \r\n    };\r\n    \r\n    return {\r\n        VTDSSValidation: VTDSSValidation\r\n    };\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.VTDSSValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "69c8a2de-4f85-4ed6-81c0-5e9098c223dc",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213050,
    "Description": "Seeding Bottom Up Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedBU', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedBU = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var ClassFB = parsedParams.Class.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = if(Measure.[Class Selling Season Week Association] == 1) then 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 7){\r\n            itemQuery='exec procedure ForecastingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from Forecasting Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedBU : SeedBU\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedBU', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedBU = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var ClassFB = parsedParams.Class.join('\", \"');\r\n        var ChannelFB = parsedParams.Channel.join('\", \"');\r\n\t\tvar MarketFB = parsedParams.Market.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = if(Measure.[Class Selling Season Week Association] == 1) then 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 7){\r\n            itemQuery='exec procedure ForecastingClassPlan { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Bottom Up Plan from Forecasting Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}) * &RE2EAllChannels.filter(#.Name in {\"'+ChannelFB+'\"})* Time.[Planning Quarter].Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Week]) * &RE2ECountries.Filter(#.Name in {\"'+MarketFB+'\"}) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}));Measure.[BU SelectTimeCycle] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedBU : SeedBU\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedBU",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "9cf5869a-6110-bc67-7320-aeb1f8f99617",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213051,
    "Description": "Bottom Up Submit Plan",
    "Documentation": "define('o9.referencemodelretailmfp.BUSubmitPlan', ['o9/data/query', 'o9/data/cellset'], function () {\n        var BUSubmitPlan = function (o9Params)         {\n                Log.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\n\n        var parsedParams = JSON.parse(o9Params);\n                Log.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\n                Log.Info(JSON.stringify(parsedParams));\n                const queryMod = require('o9/data/query');\n                \n                var VersionFB = parsedParams.Version;\n                var ChannelFB = parsedParams.Channel.join('\", \"');\n                var MarketFB = parsedParams.Market.join('\", \"');\n                var ClassFB = parsedParams.Class.join('\", \"');\n                var SubmitPlanFB = parsedParams.SubmitPlan;\n                var SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\n                var QuarterFB = parsedParams.Quarter.join('\", \"');\n                \n\n\n        if(SubmitPlanFB == 1){\n            var itemQuery='exec procedure BU_WP_to_AP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_WP_to_AP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n\n            itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}));Measure.[BU IsApproved]= True;Measure.[BU Approval Date]= todatetime(now());Measure.[BU Approver]= CurrentUser().[User Name];end scope;';\n            Log.Info(\"--------------------Updating Approval Status--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n            \n            var itemQuery='exec procedure BUPPApprovalStatusAssoc { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BUPPApprovalStatusAssoc Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);            \n            \n        }\n        else if(SubmitPlanFB == 2){\n            var itemQuery='exec procedure BU_WP_to_OP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_WP_to_OP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n\n            var itemQuery='exec procedure BU_OPtoPartialWeek { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OPtoPartialWeek Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery); \n        }\n        else if(SubmitPlanFB == 3){\n            var itemQuery='exec procedure BU_AP_to_WP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_AP_to_WP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SubmitPlanFB == 4){\n            var itemQuery='exec procedure BU_AP_to_OP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_AP_to_OP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n   \n            var itemQuery='exec procedure BU_OPtoPartialWeek { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OPtoPartialWeek Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery); \n        }\n        else if(SubmitPlanFB == 5){\n            var itemQuery='exec procedure BU_OP_to_WP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OP_to_WP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SubmitPlanFB == 6){\n            var itemQuery='exec procedure BU_OP_to_AP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OP_to_AP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SubmitPlanFB == 7){\n            var itemQuery='exec procedure BU_WP_to_RP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_WP_to_RP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        };\n\n        return         {\n                BUSubmitPlan : BUSubmitPlan\n        };\n        \n});",
    "Code": "define('o9.referencemodelretailmfp.BUSubmitPlan', ['o9/data/query', 'o9/data/cellset'], function () {\n        var BUSubmitPlan = function (o9Params)         {\n                Log.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\n\n        var parsedParams = JSON.parse(o9Params);\n                Log.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\n                Log.Info(JSON.stringify(parsedParams));\n                const queryMod = require('o9/data/query');\n                \n                var VersionFB = parsedParams.Version;\n                var ChannelFB = parsedParams.Channel.join('\", \"');\n                var MarketFB = parsedParams.Market.join('\", \"');\n                var ClassFB = parsedParams.Class.join('\", \"');\n                var SubmitPlanFB = parsedParams.SubmitPlan;\n                var SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\n                var QuarterFB = parsedParams.Quarter.join('\", \"');\n                \n\n\n        if(SubmitPlanFB == 1){\n            var itemQuery='exec procedure BU_WP_to_AP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_WP_to_AP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n\n            itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EClasses.Filter(#.Name in {\"'+ClassFB+'\"}));Measure.[BU IsApproved]= True;Measure.[BU Approval Date]= todatetime(now());Measure.[BU Approver]= CurrentUser().[User Name];end scope;';\n            Log.Info(\"--------------------Updating Approval Status--------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n            \n            var itemQuery='exec procedure BUPPApprovalStatusAssoc { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BUPPApprovalStatusAssoc Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);            \n            \n        }\n        else if(SubmitPlanFB == 2){\n            var itemQuery='exec procedure BU_WP_to_OP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_WP_to_OP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n\n            var itemQuery='exec procedure BU_OPtoPartialWeek { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OPtoPartialWeek Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery); \n        }\n        else if(SubmitPlanFB == 3){\n            var itemQuery='exec procedure BU_AP_to_WP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_AP_to_WP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SubmitPlanFB == 4){\n            var itemQuery='exec procedure BU_AP_to_OP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_AP_to_OP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n   \n            var itemQuery='exec procedure BU_OPtoPartialWeek { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OPtoPartialWeek Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery); \n        }\n        else if(SubmitPlanFB == 5){\n            var itemQuery='exec procedure BU_OP_to_WP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OP_to_WP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SubmitPlanFB == 6){\n            var itemQuery='exec procedure BU_OP_to_AP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_OP_to_AP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        else if(SubmitPlanFB == 7){\n            var itemQuery='exec procedure BU_WP_to_RP { \"Version\" : \"'+VersionFB+'\" , \"Class\" : [\"'+ClassFB+'\"] , \"Channel\" : [\"'+ChannelFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"Market\" : [\"'+MarketFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"]};';\n            Log.Info(\"-----------------------------------------------------------Executing BU_WP_to_RP Procedure------------------------------------------------------------\");\n            Log.Info(itemQuery);\n            queryMod.update(itemQuery);\n        }\n        };\n\n        return         {\n                BUSubmitPlan : BUSubmitPlan\n        };\n        \n});",
    "ModuleName": "o9.referencemodelretailmfp.BUSubmitPlan",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "9d5e036a-7265-f495-ea2e-d5dd18bc18d6",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213052,
    "Description": "Seeding Global Sales Plan",
    "Documentation": "define('o9.referencemodelretailmfp.SeedGS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedGS = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var BusinessUnitFB = parsedParams.BusinessUnit.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\tvar ChannelFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}) * &RE2EWholesaleChannel.Filter(#.Name in {\"'+ChannelFB+'\"}).relatedmembers([Sales Planning Channel]));Measure.[SP SelectSeedOption] = 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}) * &RE2EWholesaleChannel.Filter(#.Name in {\"'+ChannelFB+'\"}).relatedmembers([Sales Planning Channel]));Measure.[SP SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedGS : SeedGS\r\n\t};\r\n\t\r\n});",
    "Code": "define('o9.referencemodelretailmfp.SeedGS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SeedGS = function (o9Params) \t{\r\n\t\tLog.Info(\"------------------------------------------------------------Started executing plugin------------------------------------------------------------\");\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n\t\tLog.Info(\"------------------------------------------------------------This is the value of the parsedParams------------------------------------------------------------\");\r\n\t\tLog.Info(JSON.stringify(parsedParams));\r\n\t\tconst queryMod = require('o9/data/query');\r\n\t\t\r\n\t\tvar VersionFB = parsedParams.Version;\r\n        var SelectFB = parsedParams.Select;\r\n        var BusinessUnitFB = parsedParams.BusinessUnit.join('\", \"');\r\n\t\tvar SellingSeasonFB = parsedParams.SellingSeason.join('\", \"');\r\n\t\tvar QuarterFB = parsedParams.Quarter.join('\", \"');\r\n\t\tvar ChannelFB = parsedParams.Quarter.join('\", \"');\r\n\t\t\r\n        var itemQuery='cartesian scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}) * &RE2EWholesaleChannel.Filter(#.Name in {\"'+ChannelFB+'\"}).relatedmembers([Sales Planning Channel]));Measure.[SP SelectSeedOption] = 1;end scope;';\r\n        Log.Info(\"--------------------Intersection creation for seeding--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\r\n        if(SelectFB == 1){\r\n            itemQuery='exec procedure LYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 2){\r\n            itemQuery='exec procedure LLYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery); \r\n        }\r\n        else if(SelectFB == 3){\r\n            itemQuery='exec procedure LLLYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LLLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 4){\r\n            itemQuery='exec procedure LRPSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from LRP Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 5){\r\n            itemQuery='exec procedure AdjLYSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from AdjLY Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n        else if(SelectFB == 6){\r\n            itemQuery='exec procedure WeightageSeedingGSPlan { \"Version\" : \"'+VersionFB+'\" , \"BusinessUnit\" : [\"'+BusinessUnitFB+'\"] , \"Quarter\" : [\"'+QuarterFB+'\"] , \"SellingSeason\" : [\"'+SellingSeasonFB+'\"], \"Channel\" : [\"'+ChannelFB+'\"]};';\r\n            Log.Info(\"--------------------Seeding Global Sales Plan from Weightage Seeding Values--------------------\");\r\n            Log.Info(itemQuery);\r\n            queryMod.update(itemQuery);\r\n        }\r\n\r\n        itemQuery='scope:(&DynamicScenarios.Filter( #.Name == \"'+VersionFB+'\") * &RE2EBusinessUnits.Filter(#.Name in {\"'+BusinessUnitFB+'\"}) * &CurrentAndFuturePlanningQuarters.Filter(#.Name in {\"'+QuarterFB+'\"}).relatedmembers([Planning Month]) * &MFPSellingSeason.Filter(#.Name in {\"'+SellingSeasonFB+'\"}) * &RE2EWholesaleChannel.Filter(#.Name in {\"'+ChannelFB+'\"}).relatedmembers([Sales Planning Channel]));Measure.[SP SelectSeedOption] = null;end scope;';\r\n        Log.Info(\"--------------------Nulling excess Intersection--------------------\");\r\n        Log.Info(itemQuery);\r\n        queryMod.update(itemQuery);\r\n\t};\r\n\t\r\n\treturn \t{\r\n\t\tSeedGS : SeedGS\r\n\t};\r\n\t\r\n});",
    "ModuleName": "o9.referencemodelretailmfp.SeedGS",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "384043ec-d8e2-a809-2b7e-58db7212495b",
    "ModuleId": "e8a1d971-67ac-40b9-89f5-f60d79b5c317"
  },
  {
    "Id": 213053,
    "Description": "New Scenario without data",
    "Documentation": "define('o9.referencemodel.BlankScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BlankScenario = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar NewScenario = ParsedParams.Target;\r\n\tvar SourceScenario = \"CurrentWorkingView\";\r\n\r\n    var CreateQuery ='CreateScenario(0, 0, \"'+NewScenario+'\");';\r\n    queryModule.select(CreateQuery);\r\n    var Parametersquery = \"SELECT _SchemaPlan.[_MeasureGroup];\";\r\n    var Parametermeasures = queryModule.select(Parametersquery);\r\n    for (let obj of Parametermeasures) {\r\n        let MeasuregroupName = obj.Name;\r\n        let deletequery = 'TRUNCATE DATA FOR MODEL [' + MeasuregroupName + '] with VERSIONNAME[' + NewScenario + '];';\r\n        queryModule.select(deletequery);\r\n        Log.Info('Executed Delete Query for ' + MeasuregroupName);\r\n    }\r\n};   \r\n\t\r\nreturn {\r\n\tBlankScenario:BlankScenario\r\n\t};\r\n});",
    "Code": "define('o9.referencemodel.BlankScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BlankScenario = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.SupplyPlan006.BulkScenarioMerge\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar NewScenario = ParsedParams.Target;\r\n\tvar SourceScenario = \"CurrentWorkingView\";\r\n\r\n    var CreateQuery ='CreateScenario(0, 0, \"'+NewScenario+'\");';\r\n    queryModule.select(CreateQuery);\r\n    var Parametersquery = \"SELECT _SchemaPlan.[_MeasureGroup];\";\r\n    var Parametermeasures = queryModule.select(Parametersquery);\r\n    for (let obj of Parametermeasures) {\r\n        let MeasuregroupName = obj.Name;\r\n        let deletequery = 'TRUNCATE DATA FOR MODEL [' + MeasuregroupName + '] with VERSIONNAME[' + NewScenario + '];';\r\n        queryModule.select(deletequery);\r\n        Log.Info('Executed Delete Query for ' + MeasuregroupName);\r\n    }\r\n};   \r\n\t\r\nreturn {\r\n\tBlankScenario:BlankScenario\r\n\t};\r\n});",
    "ModuleName": "o9.referencemodel.BlankScenario",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "46435c1f-be49-2b6e-56dc-e93d81a793d4",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213054,
    "Description": "Java script to delete the members marked for deletion",
    "Documentation": "define('o9.referencemodel.DeleteObsoleteMembersDeletion', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeleteObsoleteMembersDeletion = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Reading Framework data for Delete Obsolete Memeber\");\r\n\tvar FrameworkDataRead = 'Select ([DM Rule].[Rule] * &CWV ) on row,({Measure.[Dimension Attribute Object], Measure.[Output Measure Name],Measure.[Order of Deletion], Measure.[Behavior Identifier], Measure.[Cascade Parent Deletion Dimension Attribute Object], Measure.[Delete Obsolete Members Deletion Limit], Measure.[Attribute Name Object], Measure.[Dimension Name Object]}) on column where {Measure.[Member Deletion Flag] == true} orderby Measure.[Order of Deletion];';\r\n\tvar FrameworkData = queryModule.select(FrameworkDataRead);\r\n\t\r\n\tvar FrameworkMeasure = cellsetModule.createCellSet(FrameworkData);\r\n\t\r\n\tfor (var rule = 0; rule < FrameworkMeasure.rowCount ;rule++)\r\n\t{\r\n\t\tvar DimensionAttributeObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Dimension Attribute Object'));\r\n\t\tvar RuleIdentifier = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Behavior Identifier'));\r\n\t\tvar DeleteMeasureName = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Output Measure Name'));\r\n\t\tvar OrderOfDeletion = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Order of Deletion'));\r\n\t\tvar ParentAttributeMember = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Cascade Parent Deletion Dimension Attribute Object'));\r\n\t\tvar DeleteMemberLimit = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Delete Obsolete Members Deletion Limit'));\r\n\t\tvar DimensionObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Dimension Name Object'));\r\n\t\tvar AttributeObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Attribute Name Object'));\r\n\r\n\t\t\r\n\t\tif (RuleIdentifier\t== 'Parent Member Cascade')\r\n\t\t{\r\n\t\t\t\tvar DeleteMemberListSelectQuery = 'Select (&CWV * ['+ DimensionObject +'].['+ AttributeObject +'] ) on row, ({Measure.[' + DeleteMeasureName + ' Final]}) on column.filter(Measure.[' + DeleteMeasureName + ' Final] >0);';\t\t\t\t\r\n\t\t\t\tvar DeleteMemberListQuery = queryModule.select(DeleteMemberListSelectQuery);\r\n\t\t\t\tvar DeleteMemberList = cellsetModule.createCellSet(DeleteMemberListQuery);\r\n\t\t\t\t\r\n\t\t\t\tFirstMemberToBeDeleted = DeleteMemberList.row(0).cell(DeleteMemberList.memberColumnIndex(DimensionObject,AttributeObject)).Name;\r\n\t\t\t\t\r\n\t\t\t\t// Command to create the member\r\n\t\t\t\t\r\n\t\t\t\tvar CreatememberCommand = 'Createmember (['+ DimensionObject +'].[' + ParentAttributeMember + '] = {,[Ref Model Delete Obsolete Member]}, ['+ DimensionObject +'].['+ AttributeObject +'] = {,[' + FirstMemberToBeDeleted + ']});';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"CreatememberCommand ...\" + CreatememberCommand);\r\n\t\t\t\tqueryModule.update(CreatememberCommand)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i < DeleteMemberList.rowCount ;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t\tvar MembertoBeUpdated = DeleteMemberList.row(i).cell(DeleteMemberList.memberColumnIndex(DimensionObject,AttributeObject)).Name;\r\n\t\t\t\t\t\tLog.Info(\"MembertoBeUpdated ...\" + MembertoBeUpdated);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar updatemember = 'Updatemember (['+ DimensionObject +'].['+ AttributeObject +'] = {,[' + MembertoBeUpdated + ']}, ' + ParentAttributeMember + ' = {,[Ref Model Delete Obsolete Member]});';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tLog.Info(\"updatemember ...\" + updatemember);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tqueryModule.update(updatemember)\r\n\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar DeleteMember = 'Deletemember (['+ DimensionObject +'].['+ AttributeObject +'] = {,[Ref Model Delete Obsolete Member]}) Cascade;';\r\n\t\t\t\tLog.Info(\"DeleteMember ...\" + DeleteMember);\r\n\t\t\t\t\r\n\t\t\t\tqueryModule.update(DeleteMember)\r\n\t\t}\r\n\t\t\r\n\t\tif (RuleIdentifier == 'Individual Delete Member')\r\n\t\t{\r\n\t\t\t\tvar QueryForBooleanMeasure = 'scope:(&CWV * ['+ DimensionObject +'].['+ AttributeObject +']); Measure.[' + DeleteMeasureName + ' Boolean] = if (Measure.[' + DeleteMeasureName + ' Final]>0) then TRUE; end scope;';\r\n\t\t\t\tqueryModule.update(QueryForBooleanMeasure)\r\n\t\t\t\t\r\n\t\t\t\tvar BulkDeleteMemberQuery = 'CreateMember (['+ DimensionObject +'].['+ AttributeObject +'] = {, ['+ DimensionObject +'].#.Name}, ['+ DimensionObject +'].['+ AttributeObject +'$InActive] = {Measure.[' + DeleteMeasureName + ' Boolean],}) using scope (Version.[Version Name].[CurrentWorkingView] * ['+ DimensionObject +'].['+ AttributeObject +']) where {Measure.[' + DeleteMeasureName + ' Boolean] == TRUE};';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"BulkDeleteMemberQuery ...\" + BulkDeleteMemberQuery);\r\n\t\t\t\t\r\n\t\t\t\tqueryModule.update(BulkDeleteMemberQuery)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\tfor (var rule = 0; rule < FrameworkMeasure.rowCount ;rule++)\r\n\t{\r\n\t\tvar DimensionObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Dimension Name Object'));\r\n\t\tvar AttributeObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Attribute Name Object'));\r\n\t\tvar PurgeQuery = 'purge members([' + DimensionObject + '].[' + AttributeObject + ']);'\r\n\t\tLog.Info(\"Purge Query ...\" + PurgeQuery)\r\n\t\t\r\n\t\tqueryModule.update(PurgeQuery)\r\n\t}\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDeleteObsoleteMembersDeletion:DeleteObsoleteMembersDeletion\r\n\t};\r\n\t});",
    "Code": "define('o9.referencemodel.DeleteObsoleteMembersDeletion', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeleteObsoleteMembersDeletion = function(o9Params){\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\tvar Version = parsedParams.Version;\r\n\tvar RunID = parsedParams.RunID;\r\n\tvar ActionType = parsedParams.ActionType;\r\n\tvar Product = parsedParams.Product;\r\n\tvar User = parsedParams.User;\r\n\tvar RunIDParent = parsedParams.RunIDParent;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\r\n\tLog.Info(\"Reading Framework data for Delete Obsolete Memeber\");\r\n\tvar FrameworkDataRead = 'Select ([DM Rule].[Rule] * &CWV ) on row,({Measure.[Dimension Attribute Object], Measure.[Output Measure Name],Measure.[Order of Deletion], Measure.[Behavior Identifier], Measure.[Cascade Parent Deletion Dimension Attribute Object], Measure.[Delete Obsolete Members Deletion Limit], Measure.[Attribute Name Object], Measure.[Dimension Name Object]}) on column where {Measure.[Member Deletion Flag] == true} orderby Measure.[Order of Deletion];';\r\n\tvar FrameworkData = queryModule.select(FrameworkDataRead);\r\n\t\r\n\tvar FrameworkMeasure = cellsetModule.createCellSet(FrameworkData);\r\n\t\r\n\tfor (var rule = 0; rule < FrameworkMeasure.rowCount ;rule++)\r\n\t{\r\n\t\tvar DimensionAttributeObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Dimension Attribute Object'));\r\n\t\tvar RuleIdentifier = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Behavior Identifier'));\r\n\t\tvar DeleteMeasureName = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Output Measure Name'));\r\n\t\tvar OrderOfDeletion = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Order of Deletion'));\r\n\t\tvar ParentAttributeMember = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Cascade Parent Deletion Dimension Attribute Object'));\r\n\t\tvar DeleteMemberLimit = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Delete Obsolete Members Deletion Limit'));\r\n\t\tvar DimensionObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Dimension Name Object'));\r\n\t\tvar AttributeObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Attribute Name Object'));\r\n\r\n\t\t\r\n\t\tif (RuleIdentifier\t== 'Parent Member Cascade')\r\n\t\t{\r\n\t\t\t\tvar DeleteMemberListSelectQuery = 'Select (&CWV * ['+ DimensionObject +'].['+ AttributeObject +'] ) on row, ({Measure.[' + DeleteMeasureName + ' Final]}) on column.filter(Measure.[' + DeleteMeasureName + ' Final] >0);';\t\t\t\t\r\n\t\t\t\tvar DeleteMemberListQuery = queryModule.select(DeleteMemberListSelectQuery);\r\n\t\t\t\tvar DeleteMemberList = cellsetModule.createCellSet(DeleteMemberListQuery);\r\n\t\t\t\t\r\n\t\t\t\tFirstMemberToBeDeleted = DeleteMemberList.row(0).cell(DeleteMemberList.memberColumnIndex(DimensionObject,AttributeObject)).Name;\r\n\t\t\t\t\r\n\t\t\t\t// Command to create the member\r\n\t\t\t\t\r\n\t\t\t\tvar CreatememberCommand = 'Createmember (['+ DimensionObject +'].[' + ParentAttributeMember + '] = {,[Ref Model Delete Obsolete Member]}, ['+ DimensionObject +'].['+ AttributeObject +'] = {,[' + FirstMemberToBeDeleted + ']});';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"CreatememberCommand ...\" + CreatememberCommand);\r\n\t\t\t\tqueryModule.update(CreatememberCommand)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i < DeleteMemberList.rowCount ;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t\tvar MembertoBeUpdated = DeleteMemberList.row(i).cell(DeleteMemberList.memberColumnIndex(DimensionObject,AttributeObject)).Name;\r\n\t\t\t\t\t\tLog.Info(\"MembertoBeUpdated ...\" + MembertoBeUpdated);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar updatemember = 'Updatemember (['+ DimensionObject +'].['+ AttributeObject +'] = {,[' + MembertoBeUpdated + ']}, ' + ParentAttributeMember + ' = {,[Ref Model Delete Obsolete Member]});';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tLog.Info(\"updatemember ...\" + updatemember);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tqueryModule.update(updatemember)\r\n\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar DeleteMember = 'Deletemember (['+ DimensionObject +'].['+ AttributeObject +'] = {,[Ref Model Delete Obsolete Member]}) Cascade;';\r\n\t\t\t\tLog.Info(\"DeleteMember ...\" + DeleteMember);\r\n\t\t\t\t\r\n\t\t\t\tqueryModule.update(DeleteMember)\r\n\t\t}\r\n\t\t\r\n\t\tif (RuleIdentifier == 'Individual Delete Member')\r\n\t\t{\r\n\t\t\t\tvar QueryForBooleanMeasure = 'scope:(&CWV * ['+ DimensionObject +'].['+ AttributeObject +']); Measure.[' + DeleteMeasureName + ' Boolean] = if (Measure.[' + DeleteMeasureName + ' Final]>0) then TRUE; end scope;';\r\n\t\t\t\tqueryModule.update(QueryForBooleanMeasure)\r\n\t\t\t\t\r\n\t\t\t\tvar BulkDeleteMemberQuery = 'CreateMember (['+ DimensionObject +'].['+ AttributeObject +'] = {, ['+ DimensionObject +'].#.Name}, ['+ DimensionObject +'].['+ AttributeObject +'$InActive] = {Measure.[' + DeleteMeasureName + ' Boolean],}) using scope (Version.[Version Name].[CurrentWorkingView] * ['+ DimensionObject +'].['+ AttributeObject +']) where {Measure.[' + DeleteMeasureName + ' Boolean] == TRUE};';\r\n\t\t\t\t\r\n\t\t\t\tLog.Info(\"BulkDeleteMemberQuery ...\" + BulkDeleteMemberQuery);\r\n\t\t\t\t\r\n\t\t\t\tqueryModule.update(BulkDeleteMemberQuery)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\tfor (var rule = 0; rule < FrameworkMeasure.rowCount ;rule++)\r\n\t{\r\n\t\tvar DimensionObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Dimension Name Object'));\r\n\t\tvar AttributeObject = FrameworkMeasure.row(rule).cell(FrameworkMeasure.measureColumnIndex('Attribute Name Object'));\r\n\t\tvar PurgeQuery = 'purge members([' + DimensionObject + '].[' + AttributeObject + ']);'\r\n\t\tLog.Info(\"Purge Query ...\" + PurgeQuery)\r\n\t\t\r\n\t\tqueryModule.update(PurgeQuery)\r\n\t}\r\n\t\r\n\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tDeleteObsoleteMembersDeletion:DeleteObsoleteMembersDeletion\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencemodel.DeleteObsoleteMembersDeletion",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "c1f83fe9-0f8b-4917-ab2b-cdc29371f0c8",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213055,
    "Description": "Create scenario with validation",
    "Documentation": "define('o9.referencesupplyplanning.CreateScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\nvar CreateScenario= function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n\t\r\nvar testStr = parsedParams.Target;\r\nvar basescenario = parsedParams.Source;\r\nvar checkStr = Validate(testStr)\r\nif (checkStr === true) {\r\n            RuleOutputToUI = {\r\n\r\n                Status: 'Error',\r\n\r\n                Message: 'Please enter a sceanrio name without restricted characters (\\ / : * ? \" < > | [ ])'\r\n\r\n            };\r\n\r\n            return;\r\n}\r\nelse\r\n{\r\n\tvar basescenariokey ='SELECT Version.[Version Name].['+ basescenario +'].Key;';\r\n\tvar lsResponse = queryModule.select(basescenariokey);\r\n\tvar Key = lsResponse.Result;\r\n\tLog.Info(\"Creating Scenario ... \" + testStr); \r\n\tvar QueryforCreateSceanrio = 'CreateScenario('+ Key +', 1, \"'+ testStr +'\");';\r\n\tLog.Info(\"Create Scenario ... \" + QueryforCreateSceanrio); \r\n\tqueryModule.update(QueryforCreateSceanrio);\r\n}\r\n};  \r\n\r\nvar Validate = function (testStr) {\r\n  var format = /[\\/:*?\"<>|\\[\\]]/;\r\n        var isValid = format.test(testStr);\r\n        Log.Info(\"Scenario Name contains resticted characters?... \"+isValid);\r\n\r\n        return isValid;\r\n    };\r\n\r\nreturn {\r\nCreateScenario:CreateScenario\r\n};\r\n});",
    "Code": "define('o9.referencesupplyplanning.CreateScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\nvar CreateScenario= function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\n\t\r\nvar testStr = parsedParams.Target;\r\nvar basescenario = parsedParams.Source;\r\nvar checkStr = Validate(testStr)\r\nif (checkStr === true) {\r\n            RuleOutputToUI = {\r\n\r\n                Status: 'Error',\r\n\r\n                Message: 'Please enter a sceanrio name without restricted characters (\\ / : * ? \" < > | [ ])'\r\n\r\n            };\r\n\r\n            return;\r\n}\r\nelse\r\n{\r\n\tvar basescenariokey ='SELECT Version.[Version Name].['+ basescenario +'].Key;';\r\n\tvar lsResponse = queryModule.select(basescenariokey);\r\n\tvar Key = lsResponse.Result;\r\n\tLog.Info(\"Creating Scenario ... \" + testStr); \r\n\tvar QueryforCreateSceanrio = 'CreateScenario('+ Key +', 1, \"'+ testStr +'\");';\r\n\tLog.Info(\"Create Scenario ... \" + QueryforCreateSceanrio); \r\n\tqueryModule.update(QueryforCreateSceanrio);\r\n}\r\n};  \r\n\r\nvar Validate = function (testStr) {\r\n  var format = /[\\/:*?\"<>|\\[\\]]/;\r\n        var isValid = format.test(testStr);\r\n        Log.Info(\"Scenario Name contains resticted characters?... \"+isValid);\r\n\r\n        return isValid;\r\n    };\r\n\r\nreturn {\r\nCreateScenario:CreateScenario\r\n};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.CreateScenario",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "a96cf16c-70af-499e-b97f-11b901735f0d",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213056,
    "Description": "Publish Scenario",
    "Documentation": "define('o9.referencemodel.PublishScenario', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t    //initiatlize the query modules\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\t var publishscenario = function (o9Params){\r\n\t\t var parsedParams = JSON.parse(o9Params);\r\n\t\t var Target = parsedParams.Target;\r\n\t\t var Source = parsedParams.Source;\r\n\t\t var PlanningItem = parsedParams.PlanningItem;\r\n\t\t var CustomerGroup = parsedParams.CustomerGroup;\r\n\t\t var Time = parsedParams.Time;\r\n\t\t var Measure = parsedParams.Measure;\r\n\t\t \r\n\t\t Log.Info(\"Target Scenario \" + Target);\r\n\t\t Log.Info(\"Source Scenario \" + Source);\r\n\t\t Log.Info(\"Planning Item \" + PlanningItem);\r\n\t\t Log.Info(\"Customer Group \" + CustomerGroup);\r\n\t\t Log.Info(\"Time Period Selected \" + Time);\r\n\t\t Log.Info(\"Selected Measure \" + Measure);\r\n\t\t \r\n\t\t var PlanningItemInput = \"\\\"\" + PlanningItem.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t var CustomerGroupInput = \"\\\"\" + CustomerGroup.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t var TimeInput = \"\\\"\" + Time.join(\"\\\",\\\"\") + \"\\\"\";\r\n\r\n\t\t Log.Info(\"Planning Item \" + PlanningItemInput);\r\n\t\t Log.Info(\"Customer Group \" + CustomerGroupInput);\r\n\t\t Log.Info(\"Time Period Selected \" + TimeInput);\t\t \r\n\t\t \r\n\t\t \r\n\t\t if (Measure == \"Measure.[Consensus Fcst]\") {\r\n\t\t\t var populateconsensus = 'scope: (Item.[Planning Item].filter(#.Name in{'+PlanningItemInput+'})  * [Sales Domain].[Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Version].[Version Name].filter(#.Name in{\"'+Target+'\"}) * [Time].[Partial Week].filter(#.Name in{'+TimeInput+'}));' + Measure + '=' + Measure + '@([Version].[Version Name].filter(#.Name in{\"'+Source+'\"}));' + 'end scope;'; \r\n\t\t\t Log.Info(\"Query to be executed ... \" + populateconsensus);\t\r\n\t\t\t queryModule.update(populateconsensus);\r\n\t\t } \r\n\t\t else if (Measure == \"Measure.[Stat Fcst]\") {\r\n\t\t\t var populatestat = 'scope: (Item.[Planning Item].filter(#.Name in{'+PlanningItemInput+'})  * [Sales Domain].[Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Version].[Version Name].filter(#.Name in{\"'+Target+'\"})* &AllLocation * [Time].[Partial Week].filter(#.Name in{'+TimeInput+'}));' + Measure + '=' + Measure + '@([Version].[Version Name].filter(#.Name in{\"'+Source+'\"}));' + 'end scope;'; \r\n\t\t\t Log.Info(\"Query to be executed ... \" + populatestat);\t\r\n\t\t\t queryModule.update(populatestat);\r\n\t\t }\r\n\t\t else if (Measure == \"Measure.[IBP Fcst]\"){\r\n\t\t\t  var populateibp = 'scope: (Item.[Planning Item].filter(#.Name in{'+PlanningItemInput+'})  * [Sales Domain].[Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Version].[Version Name].filter(#.Name in{\"'+Target+'\"}) *  [Time].[Partial Week].filter(#.Name in{'+TimeInput+'}));' + Measure + '=' + Measure + '@([Version].[Version Name].filter(#.Name in{\"'+Source+'\"}));' + 'end scope;'; \r\n\t\t\t Log.Info(\"Query to be executed ... \" + populateibp);\t\r\n\t\t\t queryModule.update(populateibp);\r\n\t\t }\r\n\t\t \r\n\t };\r\n\t \r\n\t     return {\r\n        publishscenario : publishscenario\r\n    };\r\n});",
    "Code": "define('o9.referencemodel.PublishScenario', ['o9/data/query', 'o9/data/cellset'],  function() {\r\n\t    //initiatlize the query modules\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\t var publishscenario = function (o9Params){\r\n\t\t var parsedParams = JSON.parse(o9Params);\r\n\t\t var Target = parsedParams.Target;\r\n\t\t var Source = parsedParams.Source;\r\n\t\t var PlanningItem = parsedParams.PlanningItem;\r\n\t\t var CustomerGroup = parsedParams.CustomerGroup;\r\n\t\t var Time = parsedParams.Time;\r\n\t\t var Measure = parsedParams.Measure;\r\n\t\t \r\n\t\t Log.Info(\"Target Scenario \" + Target);\r\n\t\t Log.Info(\"Source Scenario \" + Source);\r\n\t\t Log.Info(\"Planning Item \" + PlanningItem);\r\n\t\t Log.Info(\"Customer Group \" + CustomerGroup);\r\n\t\t Log.Info(\"Time Period Selected \" + Time);\r\n\t\t Log.Info(\"Selected Measure \" + Measure);\r\n\t\t \r\n\t\t var PlanningItemInput = \"\\\"\" + PlanningItem.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t var CustomerGroupInput = \"\\\"\" + CustomerGroup.join(\"\\\",\\\"\") + \"\\\"\";\r\n\t\t var TimeInput = \"\\\"\" + Time.join(\"\\\",\\\"\") + \"\\\"\";\r\n\r\n\t\t Log.Info(\"Planning Item \" + PlanningItemInput);\r\n\t\t Log.Info(\"Customer Group \" + CustomerGroupInput);\r\n\t\t Log.Info(\"Time Period Selected \" + TimeInput);\t\t \r\n\t\t \r\n\t\t \r\n\t\t if (Measure == \"Measure.[Consensus Fcst]\") {\r\n\t\t\t var populateconsensus = 'scope: (Item.[Planning Item].filter(#.Name in{'+PlanningItemInput+'})  * [Sales Domain].[Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Version].[Version Name].filter(#.Name in{\"'+Target+'\"}) * [Time].[Partial Week].filter(#.Name in{'+TimeInput+'}));' + Measure + '=' + Measure + '@([Version].[Version Name].filter(#.Name in{\"'+Source+'\"}));' + 'end scope;'; \r\n\t\t\t Log.Info(\"Query to be executed ... \" + populateconsensus);\t\r\n\t\t\t queryModule.update(populateconsensus);\r\n\t\t } \r\n\t\t else if (Measure == \"Measure.[Stat Fcst]\") {\r\n\t\t\t var populatestat = 'scope: (Item.[Planning Item].filter(#.Name in{'+PlanningItemInput+'})  * [Sales Domain].[Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Version].[Version Name].filter(#.Name in{\"'+Target+'\"})* &AllLocation * [Time].[Partial Week].filter(#.Name in{'+TimeInput+'}));' + Measure + '=' + Measure + '@([Version].[Version Name].filter(#.Name in{\"'+Source+'\"}));' + 'end scope;'; \r\n\t\t\t Log.Info(\"Query to be executed ... \" + populatestat);\t\r\n\t\t\t queryModule.update(populatestat);\r\n\t\t }\r\n\t\t else if (Measure == \"Measure.[IBP Fcst]\"){\r\n\t\t\t  var populateibp = 'scope: (Item.[Planning Item].filter(#.Name in{'+PlanningItemInput+'})  * [Sales Domain].[Customer Group].filter(#.Name in{'+CustomerGroupInput+'}) * [Version].[Version Name].filter(#.Name in{\"'+Target+'\"}) *  [Time].[Partial Week].filter(#.Name in{'+TimeInput+'}));' + Measure + '=' + Measure + '@([Version].[Version Name].filter(#.Name in{\"'+Source+'\"}));' + 'end scope;'; \r\n\t\t\t Log.Info(\"Query to be executed ... \" + populateibp);\t\r\n\t\t\t queryModule.update(populateibp);\r\n\t\t }\r\n\t\t \r\n\t };\r\n\t \r\n\t     return {\r\n        publishscenario : publishscenario\r\n    };\r\n});",
    "ModuleName": "o9.referencemodel.PublishScenario",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "e7b13908-171b-4323-bebd-e69792510ec3",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213057,
    "Description": "Update the scenario counts",
    "Documentation": "define('o9.referencemodel.UpdateScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var UpdateScenario = function(o9Params){\r\n      var queryModule = require('o9/data/query');\r\n      var cellsetModule = require('o9/data/cellset');\r\n      \r\n        //updating global scenario count\r\n        var FetchUpdatedVersionData = 'Select (Version.[Version Name].filter(#.Key < 0).filter(#.[Is Visible] == true).count);';\r\n        var ScCount = queryModule.select(FetchUpdatedVersionData);\r\n        var ScCountData = ScCount.Result;\r\n        var GScCount = 'Scope:(Version.[Version Name].[CurrentWorkingView]);Measure.[Global Scenario Count] = '+ScCountData+';end Scope;';\r\n        queryModule.update(GScCount);\r\n        Log.Info(\"Updating Global Count\" +GScCount);\r\n  \r\n        const userFreq = {};\r\n        //pre processing\r\n        var queryPreProcess = 'Scope: (&CWV * [Personnel].[Email]);Measure.[Scenario Count Per User] = 0;end scope;';\r\n        queryModule.update(queryPreProcess);\r\n        Log.Info(\"Pre processing.\");\r\n            \r\n        //fetching all versions\r\n        var versionQuery = 'Select ([Version].[Version Name].filter(#.Key < 0).filter(#.[Is Visible] == true));';\r\n        var versionArr = cellsetModule.createCellSet(queryModule.select(versionQuery));\r\n        //iterating through each version \r\n        for(var it = 0; it < versionArr.length; it++) {\r\n            var x = versionArr.row(it).cell(versionArr.memberColumnIndex('Version Name'));\r\n            var data1 = 'Select ([Version].[Version Name]['+x+'].filter(#.Key < 0).filter(#.[Is Visible] == true) * {Measure.[Scenario Created By]});';\r\n            const data2 = cellsetModule.createCellSet(queryModule.select(data1));\r\n            for (var t = 0; t < data2.rowCount; t++) {\r\n            var emailInitial = data2.row(t).cell(data2.measureColumnIndex('Scenario Created By'));\r\n            userFreq[emailInitial] = 0;\r\n            //for eg: scenario count per user of tejaswini.akella@o9solutions.com is set as 0\r\n        }\r\n        //assigning email to its respective frequency\r\n            var email = data2.row(0).cell(data2.measureColumnIndex('Scenario Created By'));\r\n            if(userFreq[email] !== undefined) userFreq[email]++;\r\n            Log.Info(`Assigned email: ${email} to frequency: ${frequency}`);\r\n        }\r\n        //updating the scenario count per user in each version\r\n            for (let email in userFreq) {\r\n                var query = 'Scope: (&CWV * [Personnel].[Email].['+email+']);Measure.[Scenario Count Per User] = '+userFreq[email]+';end scope;';\r\n                queryModule.update(query);\r\n                Log.Info(\"Updating Scenario Count Per User in version: \");\r\n        }\r\n  };   \r\n  return {\r\n      UpdateScenario:UpdateScenario\r\n      };\r\n  });",
    "Code": "define('o9.referencemodel.UpdateScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var UpdateScenario = function(o9Params){\r\n      var queryModule = require('o9/data/query');\r\n      var cellsetModule = require('o9/data/cellset');\r\n      \r\n        //updating global scenario count\r\n        var FetchUpdatedVersionData = 'Select (Version.[Version Name].filter(#.Key < 0).filter(#.[Is Visible] == true).count);';\r\n        var ScCount = queryModule.select(FetchUpdatedVersionData);\r\n        var ScCountData = ScCount.Result;\r\n        var GScCount = 'Scope:(Version.[Version Name].[CurrentWorkingView]);Measure.[Global Scenario Count] = '+ScCountData+';end Scope;';\r\n        queryModule.update(GScCount);\r\n        Log.Info(\"Updating Global Count\" +GScCount);\r\n  \r\n        const userFreq = {};\r\n        //pre processing\r\n        var queryPreProcess = 'Scope: (&CWV * [Personnel].[Email]);Measure.[Scenario Count Per User] = 0;end scope;';\r\n        queryModule.update(queryPreProcess);\r\n        Log.Info(\"Pre processing.\");\r\n            \r\n        //fetching all versions\r\n        var versionQuery = 'Select ([Version].[Version Name].filter(#.Key < 0).filter(#.[Is Visible] == true));';\r\n        var versionArr = cellsetModule.createCellSet(queryModule.select(versionQuery));\r\n        //iterating through each version \r\n        for(var it = 0; it < versionArr.length; it++) {\r\n            var x = versionArr.row(it).cell(versionArr.memberColumnIndex('Version Name'));\r\n            var data1 = 'Select ([Version].[Version Name]['+x+'].filter(#.Key < 0).filter(#.[Is Visible] == true) * {Measure.[Scenario Created By]});';\r\n            const data2 = cellsetModule.createCellSet(queryModule.select(data1));\r\n            for (var t = 0; t < data2.rowCount; t++) {\r\n            var emailInitial = data2.row(t).cell(data2.measureColumnIndex('Scenario Created By'));\r\n            userFreq[emailInitial] = 0;\r\n            //for eg: scenario count per user of tejaswini.akella@o9solutions.com is set as 0\r\n        }\r\n        //assigning email to its respective frequency\r\n            var email = data2.row(0).cell(data2.measureColumnIndex('Scenario Created By'));\r\n            if(userFreq[email] !== undefined) userFreq[email]++;\r\n            Log.Info(`Assigned email: ${email} to frequency: ${frequency}`);\r\n        }\r\n        //updating the scenario count per user in each version\r\n            for (let email in userFreq) {\r\n                var query = 'Scope: (&CWV * [Personnel].[Email].['+email+']);Measure.[Scenario Count Per User] = '+userFreq[email]+';end scope;';\r\n                queryModule.update(query);\r\n                Log.Info(\"Updating Scenario Count Per User in version: \");\r\n        }\r\n  };   \r\n  return {\r\n      UpdateScenario:UpdateScenario\r\n      };\r\n  });",
    "ModuleName": "o9.referencemodel.UpdateScenario",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "2819a42a-da5e-1c1e-4204-445315891551",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213058,
    "Description": "JS for Process Execution",
    "Documentation": "define('o9.referencemodel.ProcessExecution', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var ProcessExecution = function(o9Params)\r\n\t{\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\t//var Version = parsedParams.Version;\r\n\t//var RunID = parsedParams.RunID;\r\n\t//var ActionType = parsedParams.ActionType;\r\n    //var Product = parsedParams.Product;\r\n    //var User = parsedParams.User;\r\n\t//var RunIDParent = parsedParams.RunIDParent;\r\n\tvar DataObject = parsedParams.DataObject;\r\n\tvar Version = parsedParams.Version;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\t\r\n\t// function for creating scenarios\r\n\tvar ScenarioCreation = function(InputDataCellSet, i)\r\n\t{\r\n\t\tLog.Info(\"Started Scenario Creation computation\");\r\n\t\tvar SourceScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Source Scenario Name'));\r\n\t\tvar TargetScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Target Scenario Name'));\r\n\t\tvar ScenarioScope = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Scenario Scope'));\r\n\t\t\r\n\t\t//Steps to find the key of the source scenario\r\n\t\tvar SourceScenarioKeyQuery = 'select Version.[Version Name].['+SourceScenario+'].Key;';\r\n\t\tvar SourceKeyResponse = queryModule.select(SourceScenarioKeyQuery);\r\n\t\tvar SourceScenarioKey = SourceKeyResponse.Result;\r\n\t\tvar QueryForScenarioCreation;\r\n\t\tLog.Info(\"Scenario Scope...\" + ScenarioScope);\r\n\t\tif (ScenarioScope == 'Weekly')\r\n\t\t{\r\n\t\t\tLog.Info(\"Weekly Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'exec procedure WeeklyScopedScenario {\"SeedVersionKey\" : '+ SourceScenarioKey +', \"ScenarioName\" : \"'+ TargetScenario +'\"};';\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tif (ScenarioScope == 'Global')\r\n\t\t{\r\n\t\t\tLog.Info(\"Global Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'CreateScenario('+ SourceScenarioKey +', 0, \"'+ TargetScenario +'\");';\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tif (ScenarioScope == 'Daily')\r\n\t\t{\r\n\t\t\tLog.Info(\"Daily Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'exec procedure DailyScopedScenario {\"SeedVersionKey\" : '+ SourceScenarioKey +', \"ScenarioName\" : \"'+ TargetScenario +'\"};';\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tif (ScenarioScope == 'Monthly')\r\n\t\t{\r\n\t\t\tLog.Info(\"Monthly Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'exec procedure MonthlyScopedScenario {\"SeedVersionKey\" : '+ SourceScenarioKey +', \"ScenarioName\" : \"'+ TargetScenario +'\"};';\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tLog.Info(\"Finished Scenario Creation computation\");\r\n\t\r\n\t};\r\n\t\r\n\t// Function for calling data transformation (process interaction framework)\r\n\tvar DataTransformation = function(InputDataCellSet, i)\r\n\t{\r\n\t\tvar PluginQuery = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Query Input'));\r\n\t\tqueryModule.update(PluginQuery);\r\n\t};\r\n\t\r\n\t//Function to run solver instance\r\n\tvar SolverRun = function(InputDataCellSet, i)\r\n\t{\r\n\t\tLog.Info(\"Started Solver Run computation\");\r\n\t\tvar SolverName = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Solver Name'));\r\n\t\tvar SourceScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Source Scenario Name'));\r\n\t\tvar TargetScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Target Scenario Name'));\r\n\t\t\r\n\t\tif(SolverName == 'DailySCS'){\r\n\t\t\tRunDailySCS(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'DailyLP'){\r\n\t\t\tRunDailyLP(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'WeeklySCS'){\r\n\t\t\tRunWeeklySCS(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'WeeklyLP'){\r\n\t\t\tRunWeeklyLP(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'MonthlySCS'){\r\n\t\t\tRunMonthlySCS(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'MonthlyLP'){\r\n\t\t\tRunMonthlyLP(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'DailySCSDeployment'){\r\n\t\t\tRunDailyDeploymentSCS(SourceScenario);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\tvar RunDailySCS = function(Version)\r\n\t{\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold], Measure.[D Plan Start Bucket],Measure.[D Plan End Bucket],Measure.[D Plan Current Bucket],Measure.[Deployment Plan End Bucket],Measure.[D Global Demand Build Late Limit]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\t\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\t\tvar DailySolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Start Bucket'));\r\n\t\tvar DailySolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Current Bucket'));\r\n\t\tvar DailySolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\t\r\n\t\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\" ,\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t\t\r\n\t};\r\n\t\r\n\tvar RunDailyDeploymentSCS = function(Version)\r\n\t{\r\n\t\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold], Measure.[D Plan Start Bucket],Measure.[D Plan End Bucket],Measure.[D Plan Current Bucket],Measure.[Deployment Plan End Bucket],Measure.[D Global Demand Build Late Limit]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\t\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\t\tvar DailySolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Start Bucket'));\r\n\t\tvar DailySolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Current Bucket'));\r\n\t\tvar DailySolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Deployment Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\t\r\n\t\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t\t\r\n\t};\r\n\t\r\n\tvar RunDailyLP =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold], Measure.[D Plan Start Bucket],Measure.[D Plan End Bucket],Measure.[D Plan Current Bucket],Measure.[D Global Demand Build Late Limit],Measure.[D LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\tvar LPSolverName = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D LP Solver Name'));\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\t\tvar DailySolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Start Bucket'));\r\n\t\tvar DailySolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Current Bucket'));\r\n\t\tvar DailySolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\t\t\r\n\t\tvar queryForExecution = 'exec procedure RunDailyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DSolverGlobalBuildLateLimit\" : '+GlobalBuildLateLimit +', \"DLPSolverName\" : \"'+LPSolverName+'\" , \"GeneratePeggings\" :false };';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t};\r\n\t\r\n\tvar RunWeeklySCS =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets],Measure.[W Plan Current Bucket],Measure.[W Plan Start Bucket], Measure.[W Plan End Bucket]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\t\tvar queryForExecution = 'exec procedure RunConstrainedPlanWeekly {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t\t\r\n\t};\r\n\t\r\n\tvar RunWeeklyLP =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets],Measure.[W Plan Current Bucket],Measure.[W Plan Start Bucket], Measure.[W Plan End Bucket],Measure.[W LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\r\n\t\tvar LPSolverName = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W LP Solver Name'));\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RunWeeklyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"WSolverGlobalBuildLateLimit\" : '+GlobalBuildLateLimit+', \"WLPSolverName\" : \"'+LPSolverName+'\" , \"GeneratePeggings\" : false};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t};\r\n\t\r\n\tvar RunMonthlyLP =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets],Measure.[M Plan Current Bucket],Measure.[M Plan Start Bucket], Measure.[M Plan End Bucket],Measure.[M LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\tvar peggingQuery = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Monthly PDO Generation and Transfer] * [Version].[Version Name].[' + Version + ']*  {Measure.[Supply Interaction IsActive]});';\r\n\t\tvar PeggingLSResponse = queryModule.select(peggingQuery);\r\n\t\tvar PeggingdataCellSet = cellsetModule.createCellSet(PeggingLSResponse);\r\n\t\r\n\t\tvar LPSolverName = PeggingdataCellSet.row(0).cell(PeggingdataCellSet.measureColumnIndex('M LP Solver Name'));\r\n\t\tvar GeneratePegging = PeggingdataCellSet.row(0).cell(PeggingdataCellSet.measureColumnIndex('Supply Interaction IsActive'));\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\r\n\t\tvar queryForExecution = 'exec procedure RunMonthlyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ', \"MLPSolverName\" : \"' + LPSolverName + '\",\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ', \"GeneratePeggings\" : '+ GeneratePegging +'};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t};\r\n\t\r\n\tvar RunMonthlySCS =  function(Version)\r\n\t{\r\n\t\r\n\t\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets],Measure.[M Plan Current Bucket],Measure.[M Plan Start Bucket], Measure.[M Plan End Bucket]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\r\n\t\tvar queryForExecution = 'exec procedure RunMonthlyBasicPlan {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"MSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"MSolverCapacityBandsToMinimizeLatenes\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"MSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"MSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"MSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"MSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"MSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"MSolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"MSolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"MSolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"MSolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"MSolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"MNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"MSolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\r\n\t};\r\n\t\r\n\t\r\n\tvar ProcessOrchestrationInputQuery = 'Select (  [Data Object].[Data Object].['+ DataObject +'] * [GraphCubeDim_Sequence].[GraphCubeAttr_Sequence] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Process Execution Description], Measure.[Process Execution IsActive], Measure.[Process Execution Query Input], Measure.[Process Execution Rule Name], Measure.[Process Execution Scenario Scope], Measure.[Process Execution Sequence Association], Measure.[Process Execution Solver Name], Measure.[Process Execution Source Scenario Name], Measure.[Process Execution Target Scenario Name]}) on column where {Measure.[Process Execution Sequence Association]>0} orderby [GraphCubeDim_Sequence].[GraphCubeAttr_Sequence].Key asc;';\r\n\t\r\n\tvar ProcessOrchestrationInput = queryModule.select(ProcessOrchestrationInputQuery);\r\n\tvar ProcessOrchestrationInputCellSet = cellsetModule.createCellSet(ProcessOrchestrationInput);\r\n\t\r\n\tif(ProcessOrchestrationInputCellSet.rowCount > 0){\r\n\t\tLog.Info(\"Computation over the Data object started\");\r\n\t\tfor (var i = 0; i < ProcessOrchestrationInputCellSet.rowCount ; i++){\t\r\n\t\t\t//var Rule_for_Seq = ProcessOrchestrationInputCellSet.row(i).cell(1).Name;\r\n\t\t\tvar Rule_for_Seq = ProcessOrchestrationInputCellSet.row(i).cell(ProcessOrchestrationInputCellSet.measureColumnIndex('Process Execution Rule Name'));\r\n\t\t\tvar IsActive_for_Seq = ProcessOrchestrationInputCellSet.row(i).cell(ProcessOrchestrationInputCellSet.measureColumnIndex('Process Execution IsActive'));\r\n\t\t\tLog.Info(\"Running Sequence Number ... \" + i);\r\n\t\t\tLog.Info(\"Rule Number ... \" + Rule_for_Seq);\r\n\t\t\tif ( IsActive_for_Seq == true) {\r\n\t\t\t\r\n\t\t\tif (Rule_for_Seq == \"Rule_01\") {\r\n\t\t\tScenarioCreation(ProcessOrchestrationInputCellSet,i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (Rule_for_Seq == \"Rule_02\") {\r\n\t\t\tDataTransformation(ProcessOrchestrationInputCellSet,i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (Rule_for_Seq == \"Rule_03\") {\r\n\t\t\tSolverRun(ProcessOrchestrationInputCellSet,i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.Info(\"Finished Sequence Number ... \" + i);\r\n\t\t}\r\n\t}\r\n\t\t\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tProcessExecution:ProcessExecution\r\n\t};\r\n\t});",
    "Code": "define('o9.referencemodel.ProcessExecution', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\t\r\n    var ProcessExecution = function(o9Params)\r\n\t{\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar parsedParams = JSON.parse(o9Params);\r\n\t//var Version = parsedParams.Version;\r\n\t//var RunID = parsedParams.RunID;\r\n\t//var ActionType = parsedParams.ActionType;\r\n    //var Product = parsedParams.Product;\r\n    //var User = parsedParams.User;\r\n\t//var RunIDParent = parsedParams.RunIDParent;\r\n\tvar DataObject = parsedParams.DataObject;\r\n\tvar Version = parsedParams.Version;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tLog.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n\t\r\n\t// function for creating scenarios\r\n\tvar ScenarioCreation = function(InputDataCellSet, i)\r\n\t{\r\n\t\tLog.Info(\"Started Scenario Creation computation\");\r\n\t\tvar SourceScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Source Scenario Name'));\r\n\t\tvar TargetScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Target Scenario Name'));\r\n\t\tvar ScenarioScope = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Scenario Scope'));\r\n\t\t\r\n\t\t//Steps to find the key of the source scenario\r\n\t\tvar SourceScenarioKeyQuery = 'select Version.[Version Name].['+SourceScenario+'].Key;';\r\n\t\tvar SourceKeyResponse = queryModule.select(SourceScenarioKeyQuery);\r\n\t\tvar SourceScenarioKey = SourceKeyResponse.Result;\r\n\t\tvar QueryForScenarioCreation;\r\n\t\tLog.Info(\"Scenario Scope...\" + ScenarioScope);\r\n\t\tif (ScenarioScope == 'Weekly')\r\n\t\t{\r\n\t\t\tLog.Info(\"Weekly Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'exec procedure WeeklyScopedScenario {\"SeedVersionKey\" : '+ SourceScenarioKey +', \"ScenarioName\" : \"'+ TargetScenario +'\"};';\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tif (ScenarioScope == 'Global')\r\n\t\t{\r\n\t\t\tLog.Info(\"Global Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'CreateScenario('+ SourceScenarioKey +', 0, \"'+ TargetScenario +'\");';\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tif (ScenarioScope == 'Daily')\r\n\t\t{\r\n\t\t\tLog.Info(\"Daily Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'exec procedure DailyScopedScenario {\"SeedVersionKey\" : '+ SourceScenarioKey +', \"ScenarioName\" : \"'+ TargetScenario +'\"};';\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tif (ScenarioScope == 'Monthly')\r\n\t\t{\r\n\t\t\tLog.Info(\"Monthly Scenario Creation Started\");\r\n\t\t\tQueryForScenarioCreation = 'exec procedure MonthlyScopedScenario {\"SeedVersionKey\" : '+ SourceScenarioKey +', \"ScenarioName\" : \"'+ TargetScenario +'\"};';\r\n\t\t\tLog.Info(\"Scenario Creation Query ... \" + QueryForScenarioCreation);\r\n\t\t\tqueryModule.update(QueryForScenarioCreation);\r\n\t\t}\r\n\t\t\r\n\t\tLog.Info(\"Finished Scenario Creation computation\");\r\n\t\r\n\t};\r\n\t\r\n\t// Function for calling data transformation (process interaction framework)\r\n\tvar DataTransformation = function(InputDataCellSet, i)\r\n\t{\r\n\t\tvar PluginQuery = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Query Input'));\r\n\t\tqueryModule.update(PluginQuery);\r\n\t};\r\n\t\r\n\t//Function to run solver instance\r\n\tvar SolverRun = function(InputDataCellSet, i)\r\n\t{\r\n\t\tLog.Info(\"Started Solver Run computation\");\r\n\t\tvar SolverName = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Solver Name'));\r\n\t\tvar SourceScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Source Scenario Name'));\r\n\t\tvar TargetScenario = InputDataCellSet.row(i).cell(InputDataCellSet.measureColumnIndex('Process Execution Target Scenario Name'));\r\n\t\t\r\n\t\tif(SolverName == 'DailySCS'){\r\n\t\t\tRunDailySCS(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'DailyLP'){\r\n\t\t\tRunDailyLP(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'WeeklySCS'){\r\n\t\t\tRunWeeklySCS(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'WeeklyLP'){\r\n\t\t\tRunWeeklyLP(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'MonthlySCS'){\r\n\t\t\tRunMonthlySCS(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'MonthlyLP'){\r\n\t\t\tRunMonthlyLP(SourceScenario);\r\n\t\t}\r\n\t\tif(SolverName == 'DailySCSDeployment'){\r\n\t\t\tRunDailyDeploymentSCS(SourceScenario);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\tvar RunDailySCS = function(Version)\r\n\t{\r\n\t\r\n\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold], Measure.[D Plan Start Bucket],Measure.[D Plan End Bucket],Measure.[D Plan Current Bucket],Measure.[Deployment Plan End Bucket],Measure.[D Global Demand Build Late Limit]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\t\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\t\tvar DailySolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Start Bucket'));\r\n\t\tvar DailySolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Current Bucket'));\r\n\t\tvar DailySolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\t\r\n\t\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\" ,\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t\t\r\n\t};\r\n\t\r\n\tvar RunDailyDeploymentSCS = function(Version)\r\n\t{\r\n\t\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold], Measure.[D Plan Start Bucket],Measure.[D Plan End Bucket],Measure.[D Plan Current Bucket],Measure.[Deployment Plan End Bucket],Measure.[D Global Demand Build Late Limit]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\t\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\t\tvar DailySolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Start Bucket'));\r\n\t\tvar DailySolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Current Bucket'));\r\n\t\tvar DailySolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('Deployment Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\t\r\n\t\tvar queryForExecution = 'exec procedure DailyRunBasicPlan {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t\t\r\n\t};\r\n\t\r\n\tvar RunDailyLP =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold], Measure.[D Plan Start Bucket],Measure.[D Plan End Bucket],Measure.[D Plan Current Bucket],Measure.[D Global Demand Build Late Limit],Measure.[D LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\tvar LPSolverName = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D LP Solver Name'));\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n\t\tvar DailySolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Start Bucket'));\r\n\t\tvar DailySolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Current Bucket'));\r\n\t\tvar DailySolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n\t\t\r\n\t\tvar queryForExecution = 'exec procedure RunDailyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DSolverGlobalBuildLateLimit\" : '+GlobalBuildLateLimit +', \"DLPSolverName\" : \"'+LPSolverName+'\" , \"GeneratePeggings\" :false };';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t};\r\n\t\r\n\tvar RunWeeklySCS =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets],Measure.[W Plan Current Bucket],Measure.[W Plan Start Bucket], Measure.[W Plan End Bucket]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\t\tvar queryForExecution = 'exec procedure RunConstrainedPlanWeekly {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"WSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"WSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"WSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"WSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"WSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"WSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"WSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"WSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"WSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"SolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"SolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"SolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"SolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"SolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"SolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"SolverNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"SolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t\t\r\n\t};\r\n\t\r\n\tvar RunWeeklyLP =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[W Solver Demand Slice Factor],Measure.[W Solver Flag Allow NOH],Measure.[W Solver Flag Respect Freeze Window For WIPs],Measure.[W Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[W Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[W Solver Flag Inventory Plan Type]) as Transient.[W Solver Flag Inventory Plan Type Modified],Measure.[W Solver Flag Inventory Plan Policy],Measure.[W Solver Inventory Plan Bands],Measure.[W Material Constrained],Measure.[W Capacity Constrained],Measure.[W Storage Constrained],Measure.[W Solver Capacity Bands To Minimize Lateness],Measure.[W Solver Delete Data],Measure.[W Solver Run Type Flag],Measure.[W Solver SS Build Ahead Limit],Measure.[W Solver Flag Minimize No Carry Violations],Measure.[W Solver Flag Try Material Reallocation In RCA],Measure.[W Solver Flag Inventory Plan Strategy],Measure.[W Solver Flag No Peggings],Measure.[W Solver Flag SupplyCode Plan],Measure.[W Solver Flag Shelf Life Plan],Measure.[W Plan Date Hard Peg],Measure.[W Min Time Hard Peg],Measure.[W Late Plan Strategy],Measure.[W Solver Demand Slice Threshold],Measure.[W Global Demand Build Ahead Limit],Measure.[W Global Demand Build Late Limit],Measure.[W Skip SS For Unviable Buckets],Measure.[W Plan Current Bucket],Measure.[W Plan Start Bucket], Measure.[W Plan End Bucket],Measure.[W LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"SCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\r\n\t\tvar LPSolverName = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W LP Solver Name'));\r\n\t\tvar GlobalBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Capacity Constrained'));\r\n\t\tvar SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Storage Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Inventory Plan Strategy'));\r\n\t\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('W Skip SS For Unviable Buckets'));\r\n\r\n\tvar queryForExecution = 'exec procedure RunWeeklyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"WSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"WSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"WSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"WSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"WSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"WSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"WMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"WCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"WSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"WSolverGlobalBuildLateLimit\" : '+GlobalBuildLateLimit+', \"WLPSolverName\" : \"'+LPSolverName+'\" , \"GeneratePeggings\" : false};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t};\r\n\t\r\n\tvar RunMonthlyLP =  function(Version)\r\n\t{\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets],Measure.[M Plan Current Bucket],Measure.[M Plan Start Bucket], Measure.[M Plan End Bucket],Measure.[M LP Solver Name]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\r\n\t\tvar peggingQuery = 'Select ([DM Rule].[Rule].[Rule_01] * [Data Object].[Data Object].[Monthly PDO Generation and Transfer] * [Version].[Version Name].[' + Version + ']*  {Measure.[Supply Interaction IsActive]});';\r\n\t\tvar PeggingLSResponse = queryModule.select(peggingQuery);\r\n\t\tvar PeggingdataCellSet = cellsetModule.createCellSet(PeggingLSResponse);\r\n\t\r\n\t\tvar LPSolverName = PeggingdataCellSet.row(0).cell(PeggingdataCellSet.measureColumnIndex('M LP Solver Name'));\r\n\t\tvar GeneratePegging = PeggingdataCellSet.row(0).cell(PeggingdataCellSet.measureColumnIndex('Supply Interaction IsActive'));\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\r\n\t\tvar queryForExecution = 'exec procedure RunMonthlyLPPlanBasic {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ', \"MLPSolverName\" : \"' + LPSolverName + '\",\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ', \"GeneratePeggings\" : '+ GeneratePegging +'};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\t};\r\n\t\r\n\tvar RunMonthlySCS =  function(Version)\r\n\t{\r\n\t\r\n\t\r\n\t\tvar queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[M Solver Demand Slice Factor],Measure.[M Solver Flag Allow NOH],Measure.[M Solver Flag Respect Freeze Window For WIPs],Measure.[M Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[M Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[M Solver Flag Inventory Plan Type]) as Transient.[M Solver Flag Inventory Plan Type Modified],Measure.[M Solver Flag Inventory Plan Policy],Measure.[M Solver Inventory Plan Bands],Measure.[M Material Constrained],Measure.[M Capacity Constrained],Measure.[M Solver Capacity Bands To Minimize Lateness],Measure.[M Solver Delete Data],Measure.[M Solver Run Type Flag],Measure.[M Solver SS Build Ahead Limit],Measure.[M Solver Flag Minimize No Carry Violations],Measure.[M Solver Flag Try Material Reallocation In RCA],Measure.[M Solver Flag Inventory Plan Strategy],Measure.[M Solver Flag No Peggings],Measure.[M Solver Flag SupplyCode Plan],Measure.[M Solver Flag Shelf Life Plan],Measure.[M Plan Date Hard Peg],Measure.[M Min Time Hard Peg],Measure.[M Late Plan Strategy],Measure.[M Solver Demand Slice Threshold],Measure.[M Global Demand Build Ahead Limit],Measure.[M Global Demand Build Late Limit],Measure.[M Skip SS For Unviable Buckets],Measure.[M Plan Current Bucket],Measure.[M Plan Start Bucket], Measure.[M Plan End Bucket]});';\r\n\t\tvar lsResponse4 = queryModule.select(queryForPotential4);\r\n\t\tLog.Info(\"MonthlySCSParameters ... \" + lsResponse4);\r\n\t\tvar dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n\t\t\r\n\t\tvar SolverCurrentBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Current Bucket'));\r\n\t\tvar SolverStartBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Start Bucket'));\r\n\t\tvar SolverEndBucket = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan End Bucket'));\r\n\t\tvar SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Factor'));\r\n\t\tvar SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Allow NOH'));\r\n\t\tvar SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Respect Freeze Window For WIPs'));\r\n\t\tvar SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize Inventory Build Ahead'));\r\n\t\tvar SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Type Modified'));\r\n\t\tvar SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Policy'));\r\n\t\tvar SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Inventory Plan Bands'));\r\n\t\tvar SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Material Constrained'));\r\n\t\tvar SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Capacity Constrained'));\r\n\t\tvar SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Capacity Bands To Minimize Lateness'));\r\n\t\tvar SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Delete Data'));\r\n\t\tvar SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Run Type Flag'));\r\n\t\tvar SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver SS Build Ahead Limit'));\r\n\t\tvar SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Minimize No Carry Violations'));\r\n\t\tvar SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Try Material Reallocation In RCA'));\r\n\t\tvar SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Inventory Plan Strategy'));\r\n\t\r\n\t\tvar SCPGlobalDemandBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Late Limit'));\r\n\t\tvar SCPGlobalDemandBuildLate = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Global Demand Build Ahead Limit'));\r\n\t\tvar SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Demand Slice Threshold'));\r\n\t\tvar SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Late Plan Strategy'));\r\n\t\tvar SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Min Time Hard Peg'));\r\n\t\tvar SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Plan Date Hard Peg'));\r\n\t\tvar SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag Shelf Life Plan'));\r\n\t\tvar SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag SupplyCode Plan'));\r\n\t\tvar SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Solver Flag No Peggings'));\r\n\t\tvar SCPSkipSSUnviableBuckets = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('M Skip SS For Unviable Buckets'));\r\n\r\n\t\tvar queryForExecution = 'exec procedure RunMonthlyBasicPlan {\"Version\" : [\"' + Version + '\"], \"MSolverCurrentBucket\" : \"' + SolverCurrentBucket + '\" , \"MSolverStartingBucket\" : \"' + SolverStartBucket + '\", \"MSolverEndingBucket\" : \"' + SolverEndBucket + '\",\"MSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"MSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"MSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"MSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"MSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"MSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"MSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"MMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"MCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"MSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"MSolverCapacityBandsToMinimizeLatenes\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"MSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"MSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"MSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"MSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"MSolverGlobalBuildAheadLimit\" : ' + SCPGlobalDemandBuildAhead + ',\"MSolverGlobalBuildLateLimit\" : ' + SCPGlobalDemandBuildLate + ',\"MSolverDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"MSolverLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"MSolverMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"MSolverPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"MSolverShelfLifePlan\" : \"' + SCPShelfLife + '\",\"MSolverSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"MNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"MSolverSkipSSForUnviableBuckets\" : \"' + SCPSkipSSUnviableBuckets + '\"};';\r\n\t\tLog.Info(\"SCS Command ... \" + queryForExecution);\r\n\t\tqueryModule.update(queryForExecution);\r\n\r\n\t};\r\n\t\r\n\t\r\n\tvar ProcessOrchestrationInputQuery = 'Select (  [Data Object].[Data Object].['+ DataObject +'] * [GraphCubeDim_Sequence].[GraphCubeAttr_Sequence] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Process Execution Description], Measure.[Process Execution IsActive], Measure.[Process Execution Query Input], Measure.[Process Execution Rule Name], Measure.[Process Execution Scenario Scope], Measure.[Process Execution Sequence Association], Measure.[Process Execution Solver Name], Measure.[Process Execution Source Scenario Name], Measure.[Process Execution Target Scenario Name]}) on column where {Measure.[Process Execution Sequence Association]>0} orderby [GraphCubeDim_Sequence].[GraphCubeAttr_Sequence].Key asc;';\r\n\t\r\n\tvar ProcessOrchestrationInput = queryModule.select(ProcessOrchestrationInputQuery);\r\n\tvar ProcessOrchestrationInputCellSet = cellsetModule.createCellSet(ProcessOrchestrationInput);\r\n\t\r\n\tif(ProcessOrchestrationInputCellSet.rowCount > 0){\r\n\t\tLog.Info(\"Computation over the Data object started\");\r\n\t\tfor (var i = 0; i < ProcessOrchestrationInputCellSet.rowCount ; i++){\t\r\n\t\t\t//var Rule_for_Seq = ProcessOrchestrationInputCellSet.row(i).cell(1).Name;\r\n\t\t\tvar Rule_for_Seq = ProcessOrchestrationInputCellSet.row(i).cell(ProcessOrchestrationInputCellSet.measureColumnIndex('Process Execution Rule Name'));\r\n\t\t\tvar IsActive_for_Seq = ProcessOrchestrationInputCellSet.row(i).cell(ProcessOrchestrationInputCellSet.measureColumnIndex('Process Execution IsActive'));\r\n\t\t\tLog.Info(\"Running Sequence Number ... \" + i);\r\n\t\t\tLog.Info(\"Rule Number ... \" + Rule_for_Seq);\r\n\t\t\tif ( IsActive_for_Seq == true) {\r\n\t\t\t\r\n\t\t\tif (Rule_for_Seq == \"Rule_01\") {\r\n\t\t\tScenarioCreation(ProcessOrchestrationInputCellSet,i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (Rule_for_Seq == \"Rule_02\") {\r\n\t\t\tDataTransformation(ProcessOrchestrationInputCellSet,i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (Rule_for_Seq == \"Rule_03\") {\r\n\t\t\tSolverRun(ProcessOrchestrationInputCellSet,i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.Info(\"Finished Sequence Number ... \" + i);\r\n\t\t}\r\n\t}\r\n\t\t\t\r\n};\r\n\r\n\r\n\treturn {\r\n\t\tProcessExecution:ProcessExecution\r\n\t};\r\n\t});",
    "ModuleName": "o9.referencemodel.ProcessExecution",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0ab42ff2-e721-c8d9-2c43-9cf8ce0bbff3",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213059,
    "Description": "Archive",
    "Documentation": "define('o9.referencesupplyplanning.Archive', ['o9/data/query', 'o9/data/cellset'], function () {\r\nvar Archive= function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\nvar creationdate = parsedParams.CreationDate;\t\r\nvar Version = parsedParams.Version;\r\n\r\nfor(var i = 0; i < Version.length; i++){\r\n\tvar x = Version[i];\r\n\tvar basescenariokey ='SELECT Version.[Version Name].['+ x +'].Key;';\r\n\tvar lsResponse = queryModule.select(basescenariokey);\r\n\tLog.Info(\"lsResponse is \"+ lsResponse);\r\n\tvar Key = lsResponse.Result;\r\n\tLog.Info(\"Key is \"+ Key);\r\n\tvar scenariotoversion = 'createversion('+Key+', \"Archive - '+x+'\", false, false);';\r\n    Log.Info(\"version created- \"+ scenariotoversion);\r\n    queryModule.update(scenariotoversion);\r\n    var sol = 'Select ([Version].[Version Name].['+x+'] ) on row, ({Measure.[Product]}) on column;';\r\n\tvar VersionData = queryModule.select(sol);\r\n\tvar Scenariodata = cellsetModule.createCellSet(VersionData);\r\n\tvar str2 = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Product'));\r\n\tif(str2 == \"Master Planning\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[MP Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"MP Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t}\r\n\telse if(str2 == \"Demand Planning\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[DP Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"DP Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\telse if(str2 == \"Daily Planning\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[CT Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"CT Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\telse if(str2 == \"MEIO\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[MEIO Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"MEIO Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\telse {\r\n\t\tvar thres = 'Select ([Version].[Version Name].[CurrentWorkingView] ) on row, ({Measure.[Scenario Age Threshold]}) on column;';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Scenario Age Threshold'));\r\n\t\tLog.Info(\"Global Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\tvar deletearchivedscenario = queryModule.update('updatemember ([Version].[Version Name] = {,\"'+x+'\"},[Version].[Version Expiry Date] = {dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+(-1)+'  ,[day]),});');\r\n\tLog.Info(\"deletearchivedscenario \"+deletearchivedscenario);\r\n}\r\n};  \r\n\r\n\r\nreturn {\r\nArchive:Archive\r\n};\r\n});",
    "Code": "define('o9.referencesupplyplanning.Archive', ['o9/data/query', 'o9/data/cellset'], function () {\r\nvar Archive= function(o9Params){\r\nvar parsedParams = JSON.parse(o9Params);\r\nvar queryModule = require('o9/data/query');\r\nvar cellsetModule = require('o9/data/cellset');\r\nvar creationdate = parsedParams.CreationDate;\t\r\nvar Version = parsedParams.Version;\r\n\r\nfor(var i = 0; i < Version.length; i++){\r\n\tvar x = Version[i];\r\n\tvar basescenariokey ='SELECT Version.[Version Name].['+ x +'].Key;';\r\n\tvar lsResponse = queryModule.select(basescenariokey);\r\n\tLog.Info(\"lsResponse is \"+ lsResponse);\r\n\tvar Key = lsResponse.Result;\r\n\tLog.Info(\"Key is \"+ Key);\r\n\tvar scenariotoversion = 'createversion('+Key+', \"Archive - '+x+'\", false, false);';\r\n    Log.Info(\"version created- \"+ scenariotoversion);\r\n    queryModule.update(scenariotoversion);\r\n    var sol = 'Select ([Version].[Version Name].['+x+'] ) on row, ({Measure.[Product]}) on column;';\r\n\tvar VersionData = queryModule.select(sol);\r\n\tvar Scenariodata = cellsetModule.createCellSet(VersionData);\r\n\tvar str2 = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Product'));\r\n\tif(str2 == \"Master Planning\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[MP Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"MP Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t}\r\n\telse if(str2 == \"Demand Planning\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[DP Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"DP Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\telse if(str2 == \"Daily Planning\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[CT Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"CT Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\telse if(str2 == \"MEIO\"){\r\n\t\tvar thres = 'select (&CWV * {coalesce(Measure.[MEIO Version Age Threshold],Measure.[Scenario Age Threshold]) as Transient.Threshold});';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Threshold'));\r\n\t\tLog.Info(\"MEIO Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\telse {\r\n\t\tvar thres = 'Select ([Version].[Version Name].[CurrentWorkingView] ) on row, ({Measure.[Scenario Age Threshold]}) on column;';\r\n\t\tvar hold = queryModule.select(thres);\r\n\t\tvar th = cellsetModule.createCellSet(hold);\r\n\t\tvar threshold = th.row(0).cell(th.measureColumnIndex('Scenario Age Threshold'));\r\n\t\tLog.Info(\"Global Threshold updated by user is \" + threshold);\r\n\t\tvar date =  queryModule.select('select dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+threshold+'  ,[day]);').Result;\r\n\t\tvar expirydate = 'updatemember ([Version].[Version Name] = {,\"Archive - '+x+'\"},[Version].[Version Expiry Date] = {todatetime(\\\"'+ date +'\\\"),});';\r\n\t\tqueryModule.update(expirydate);\r\n\t\t}\r\n\tvar deletearchivedscenario = queryModule.update('updatemember ([Version].[Version Name] = {,\"'+x+'\"},[Version].[Version Expiry Date] = {dateadd (todatetime(\\\"'+ creationdate +'\\\"), '+(-1)+'  ,[day]),});');\r\n\tLog.Info(\"deletearchivedscenario \"+deletearchivedscenario);\r\n}\r\n};  \r\n\r\n\r\nreturn {\r\nArchive:Archive\r\n};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.Archive",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "63b8e949-194f-400e-a70b-ceeb288fe96f",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213060,
    "Description": "o9.referencesupplyplanning.BulkMemberCreate",
    "Documentation": "define('o9.referencesupplyplanning.BulkMemberCreate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkMemberCreate = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencesupplyplanning.BulkMemberCreate\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tvar DataObjectPassed = ParsedParams.DataObject;\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\r\n\r\n    var Create_member = function(DataObject, DimensionName) {\r\n\t\r\n\t\tLog.Info(\"CreatememberQuery Function Started\");\r\n\t\tvar CreateMemberQuery = 'CreateMember(';\r\n\t\t\r\n\t\tvar MemberSelectQuery = 'Select ([GraphCubeDim_Sequence].[GraphCubeAttr_Sequence] * [Data Object].[Data Object].['+DataObject+'] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Member Creation Input Attribute], Measure.[Member Creation Input Attribute Member Rule], Measure.[Member Creation Input Is Property], Measure.[Member Creation Input Member Key]}) on column;';\r\n\t\tLog.Info(MemberSelectQuery);\r\n\t\tvar MemberQuery = queryModule.select(MemberSelectQuery);\r\n\t\tvar MemberQueryDataCellSet = cellsetModule.createCellSet(MemberQuery);\r\n\t\tvar string;\r\n\t\tvar string2;\r\n\t\t\r\n\t\tfor (var i=0; i< MemberQueryDataCellSet.rowCount ; i++)\r\n\t\t{\r\n\t\t\tvar AttributeName = MemberQueryDataCellSet.row(i).cell(3);\r\n\t\t\tvar ValueName = MemberQueryDataCellSet.row(i).cell(4);\r\n\t\t\tvar IsProperty = MemberQueryDataCellSet.row(i).cell(5);\r\n\t\t\tvar KeyMeasure = MemberQueryDataCellSet.row(i).cell(6);\r\n\r\n\t\t\t//Log.Info(\"Attribute Name\" +AttributeName + \"Value Name\" +ValueName +\"IsProperty\" +IsProperty +\"KeyMeasure\"+KeyMeasure );\r\n\t\t\r\n\t\t\tif (IsProperty == true){\r\n\t\t\t\tstring = '['+ DimensionName +'].['+AttributeName+'] = {'+ ValueName +',}';\r\n\t\t\t} else if (KeyMeasure !== null){\r\n\t\t\t\tstring = '['+ DimensionName +'].['+AttributeName+'] = {'+ KeyMeasure +', '+ ValueName +'}';\r\n\t\t\t} else {\r\n\t\t\t\tstring = '['+ DimensionName +'].['+AttributeName+'] = {,'+ ValueName +'}';\r\n\t\t\t}\r\n\t\t\r\n\t\t\tCreateMemberQuery = CreateMemberQuery.concat(string);\r\n\t\t\r\n\t\t\tif (i != (MemberQueryDataCellSet.rowCount - 1)) {\r\n\t\t\t\tstring2 = ','\t;\r\n\t\t\t} else {\r\n\t\t\t\tstring2 = ') using scope ('\r\n\t\t\t}\r\n\t\t\tCreateMemberQuery = CreateMemberQuery.concat(string2);\r\n\t\t\t\r\n\t\t\t//Log.info(CreateMemberQuery);\r\n\t\t}\r\n\t\t// function call to identify the granularity of the measure specified in the sequence ID 0\r\n\t\tMeasureForGranularity = MemberQueryDataCellSet.row(0).cell(4);\r\n\t\t\r\n\t\tvar MeasureName = MeasureForGranularity.substring(\r\n\t\t\tMeasureForGranularity.indexOf(\"[\") + 1, \r\n\t\t\tMeasureForGranularity.indexOf(\"]\")\r\n\t\t);\r\n\t\t//Version = MemberQueryDataCellSet.row(1).cell(2);\r\n\t\tvar ScopeString = MeasureGranularity(MeasureName);\r\n\t\t\r\n\t\tCreateMemberQuery = CreateMemberQuery.concat(ScopeString);\r\n\t\t\r\n\t\tLog.Info(\"CreatememberQuery generated\");\r\n\t\tLog.Info(CreateMemberQuery);\r\n\t\t\r\n\t\tqueryModule.update(CreateMemberQuery);\r\n\t};\r\n\t\r\n\tvar MeasureGranularity = function(Measure) {\r\n\t\r\n\t\tLog.Info('Granularity Identification Started');\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+Measure+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = '[Version].[Version Name].['+Version+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\tLog.Info('Granularity Identification Completed');\r\n\t\t\t\r\n\t\t\treturn query;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\tvar DataObject = 'Select ([Data Object].[Data Object].['+DataObjectPassed+'] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Member Creation Input Dimension]}) on column;';\r\n\tvar DataObjectOutput = queryModule.select(DataObject);\r\n\tLog.Info(DataObjectOutput);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(DataObjectOutput));\r\n\tstr = JSON.stringify(DataObjectOutput);\r\n\tLog.Info(str);\r\n\t\r\n\tvar DataObjectCellSet = cellsetModule.createCellSet(DataObjectOutput);\r\n\t\r\n\tif(DataObjectCellSet.rowCount > 0){\r\n\t\t\tLog.Info(\"First Data Object Run Started\");\r\n\t\t\tfor (var i = 0; i < DataObjectCellSet.rowCount ; i++){\r\n\t\t\t\tvar DataObjectName = DataObjectCellSet.row(i).cell(0).Name;\r\n\t\t\t\tvar DimensionName = DataObjectCellSet.row(i).cell(2);\r\n\t\t\t\tLog.Info(DataObjectName);\r\n\t\t\t\tLog.Info(DimensionName);\r\n\t\t\t\tCreate_member(DataObjectName, DimensionName);\r\n\t\t}\r\n\t\t\tLog.Info(\"First Data Object Run Completed\");\r\n\t}\r\n\t\r\n}; \r\n\t\r\nreturn {\r\n\tBulkMemberCreate:BulkMemberCreate\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.BulkMemberCreate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var BulkMemberCreate = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencesupplyplanning.BulkMemberCreate\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tvar DataObjectPassed = ParsedParams.DataObject;\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\r\n\r\n    var Create_member = function(DataObject, DimensionName) {\r\n\t\r\n\t\tLog.Info(\"CreatememberQuery Function Started\");\r\n\t\tvar CreateMemberQuery = 'CreateMember(';\r\n\t\t\r\n\t\tvar MemberSelectQuery = 'Select ([GraphCubeDim_Sequence].[GraphCubeAttr_Sequence] * [Data Object].[Data Object].['+DataObject+'] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Member Creation Input Attribute], Measure.[Member Creation Input Attribute Member Rule], Measure.[Member Creation Input Is Property], Measure.[Member Creation Input Member Key]}) on column;';\r\n\t\tLog.Info(MemberSelectQuery);\r\n\t\tvar MemberQuery = queryModule.select(MemberSelectQuery);\r\n\t\tvar MemberQueryDataCellSet = cellsetModule.createCellSet(MemberQuery);\r\n\t\tvar string;\r\n\t\tvar string2;\r\n\t\t\r\n\t\tfor (var i=0; i< MemberQueryDataCellSet.rowCount ; i++)\r\n\t\t{\r\n\t\t\tvar AttributeName = MemberQueryDataCellSet.row(i).cell(3);\r\n\t\t\tvar ValueName = MemberQueryDataCellSet.row(i).cell(4);\r\n\t\t\tvar IsProperty = MemberQueryDataCellSet.row(i).cell(5);\r\n\t\t\tvar KeyMeasure = MemberQueryDataCellSet.row(i).cell(6);\r\n\r\n\t\t\t//Log.Info(\"Attribute Name\" +AttributeName + \"Value Name\" +ValueName +\"IsProperty\" +IsProperty +\"KeyMeasure\"+KeyMeasure );\r\n\t\t\r\n\t\t\tif (IsProperty == true){\r\n\t\t\t\tstring = '['+ DimensionName +'].['+AttributeName+'] = {'+ ValueName +',}';\r\n\t\t\t} else if (KeyMeasure !== null){\r\n\t\t\t\tstring = '['+ DimensionName +'].['+AttributeName+'] = {'+ KeyMeasure +', '+ ValueName +'}';\r\n\t\t\t} else {\r\n\t\t\t\tstring = '['+ DimensionName +'].['+AttributeName+'] = {,'+ ValueName +'}';\r\n\t\t\t}\r\n\t\t\r\n\t\t\tCreateMemberQuery = CreateMemberQuery.concat(string);\r\n\t\t\r\n\t\t\tif (i != (MemberQueryDataCellSet.rowCount - 1)) {\r\n\t\t\t\tstring2 = ','\t;\r\n\t\t\t} else {\r\n\t\t\t\tstring2 = ') using scope ('\r\n\t\t\t}\r\n\t\t\tCreateMemberQuery = CreateMemberQuery.concat(string2);\r\n\t\t\t\r\n\t\t\t//Log.info(CreateMemberQuery);\r\n\t\t}\r\n\t\t// function call to identify the granularity of the measure specified in the sequence ID 0\r\n\t\tMeasureForGranularity = MemberQueryDataCellSet.row(0).cell(4);\r\n\t\t\r\n\t\tvar MeasureName = MeasureForGranularity.substring(\r\n\t\t\tMeasureForGranularity.indexOf(\"[\") + 1, \r\n\t\t\tMeasureForGranularity.indexOf(\"]\")\r\n\t\t);\r\n\t\t//Version = MemberQueryDataCellSet.row(1).cell(2);\r\n\t\tvar ScopeString = MeasureGranularity(MeasureName);\r\n\t\t\r\n\t\tCreateMemberQuery = CreateMemberQuery.concat(ScopeString);\r\n\t\t\r\n\t\tLog.Info(\"CreatememberQuery generated\");\r\n\t\tLog.Info(CreateMemberQuery);\r\n\t\t\r\n\t\tqueryModule.update(CreateMemberQuery);\r\n\t};\r\n\t\r\n\tvar MeasureGranularity = function(Measure) {\r\n\t\r\n\t\tLog.Info('Granularity Identification Started');\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+Measure+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar query = '[Version].[Version Name].['+Version+']';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"Version\"){\r\n\t\t\t\t\tvar string1 = ' * ['+dim+'].['+attribute+']';\r\n\t\t\t\t\tquery = query.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tquery = query.concat(\");\\n\");\r\n\t\tLog.Info('Granularity Identification Completed');\r\n\t\t\t\r\n\t\t\treturn query;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\tvar DataObject = 'Select ([Data Object].[Data Object].['+DataObjectPassed+'] * [Version].[Version Name].['+Version+'] ) on row, ({Measure.[Member Creation Input Dimension]}) on column;';\r\n\tvar DataObjectOutput = queryModule.select(DataObject);\r\n\tLog.Info(DataObjectOutput);\r\n\tLog.Info(\"lsResponse ...\" + Object.getOwnPropertyNames(DataObjectOutput));\r\n\tstr = JSON.stringify(DataObjectOutput);\r\n\tLog.Info(str);\r\n\t\r\n\tvar DataObjectCellSet = cellsetModule.createCellSet(DataObjectOutput);\r\n\t\r\n\tif(DataObjectCellSet.rowCount > 0){\r\n\t\t\tLog.Info(\"First Data Object Run Started\");\r\n\t\t\tfor (var i = 0; i < DataObjectCellSet.rowCount ; i++){\r\n\t\t\t\tvar DataObjectName = DataObjectCellSet.row(i).cell(0).Name;\r\n\t\t\t\tvar DimensionName = DataObjectCellSet.row(i).cell(2);\r\n\t\t\t\tLog.Info(DataObjectName);\r\n\t\t\t\tLog.Info(DimensionName);\r\n\t\t\t\tCreate_member(DataObjectName, DimensionName);\r\n\t\t}\r\n\t\t\tLog.Info(\"First Data Object Run Completed\");\r\n\t}\r\n\t\r\n}; \r\n\t\r\nreturn {\r\n\tBulkMemberCreate:BulkMemberCreate\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.BulkMemberCreate",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "679eef9b-ba7a-44b1-9f72-984a41b59ec0",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213061,
    "Description": "Common Javascript for updating Time attributes across all solutions",
    "Documentation": "define('o9.referencesupplyplanning.CommonSolverStartAndEndDate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SolverStartAndEndDate= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var Solution = parsedParams.Solution;\r\n    var disableplan = parsedParams.Plan;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tLog.Info(\"Recieved Solution Type : \\\"\" + Solution + \"\\\"\");\r\n\r\n\r\n    updateMasterPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , Version){\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &SolverStartBucket.element(0).Name;';\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &SolverEndBucket.element(0).Name;';\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &SolverCurrentBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Week]={,\"'+ ExistingStartBucket +'\"},[Time].[W Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Week]={,\"'+ ExistingEndBucket +'\"},[Time].[W Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Week]={,\"'+ ExistingCurrentBucket +'\"},[Time].[W Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n\tvar SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Week]={,\"'+ CurrentBucket +'\"},[Time].[W Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n\tvar SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Week]={,\"'+ StartBucket +'\"},[Time].[W Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n\tvar SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Week]={,\"'+ EndBucket +'\"},[Time].[W Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'Master planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    updateDailyPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , DeploymentEndBucket , Version){\r\n    Log.Info(\"StartedBucket ... \");\r\n    var ExistingStartBucketTemp ='SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n    Log.Info(\"EndBucket ... \");\r\n    var ExistingEndBucketTemp ='SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n\tLog.Info(\"DeploymentEndBucket ... \");\r\n    var ExistingDeploymentEndBucketTemp ='SELECT &DeploymentSolverEndBucket.element(0).Name;';\r\n    var lsResponse4 = queryModule.select(ExistingDeploymentEndBucketTemp);\r\n    if(lsResponse4 !== null){\r\n    var ExistingDeploymentEndBucket = lsResponse4.Result;\r\n    Log.Info(\"ExistingDeploymentEndBucket ... \" + ExistingDeploymentEndBucket);}\r\n    else{\r\n    var ExistingDeploymentEndBucket = null;\r\n    Log.Info(\"ExistingDeploymentEndBucket ... \" + ExistingDeploymentEndBucket);}\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n    var ExistingCurrentBucketTemp ='SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n    if(lsResponse3 !== null){\r\n    var ExistingCurrentBucket = lsResponse3.Result;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n    else {\r\n    var ExistingCurrentBucket = null;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n    if(ExistingStartBucket !== null){\r\n    var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[D Solver Start Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n    var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[D Solver End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\tif(ExistingDeploymentEndBucket !== null){\r\n    var NullExisitingDeploymentEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingDeploymentEndBucket +'\"},[Time].[Deployment Solver End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingDeploymentEndBucket ... \" + NullExisitingDeploymentEndBucket);\r\n    queryModule.update(NullExisitingDeploymentEndBucket);}\r\n\r\n    if(ExistingCurrentBucket !== null){\r\n    var NullExisitingCurrentBucket = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[D Solver Current Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n    var SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n    Log.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n    var SetPropertyCurrentBucket = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[D Solver Current Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    Log.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n    var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[D Solver Start Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[D Solver End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n\tvar SetDeploymentEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[Deployment Plan End Bucket] = \"'+ DeploymentEndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetDeploymentEndBucket ... \" + SetDeploymentEndBucket);\r\n    queryModule.update(SetDeploymentEndBucket);\r\n\r\n\tvar SetPropertyDeploymentEndBucket = 'updatemember(Time.[Day]={,\"'+ DeploymentEndBucket +'\"},[Time].[Deployment Solver End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyDeploymentEndBucket ... \" + SetPropertyDeploymentEndBucket);\r\n    queryModule.update(SetPropertyDeploymentEndBucket);\r\n\r\n    var message = 'Daily planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    updateTLBPlanningParameters = function(StartBucket , EndBucket , Version){\r\n    Log.Info(\"StartedBucket ... \");\r\n    var ExistingStartBucketTemp ='SELECT &TLBSolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n    Log.Info(\"EndBucket ... \");\r\n    var ExistingEndBucketTemp ='SELECT &TLBSolverEndBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n    if(ExistingStartBucket !== null){\r\n    var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[TLB Start Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n    var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[TLB End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n    var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[TLB Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    Log.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n    var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[TLB Start Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[TLB Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[TLB End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'TLB planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n\r\n\tupdateIOPPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , Version){\r\n\r\n\tLog.Info(\"StartedBucket ... \");\r\n    var ExistingStartBucketTemp ='SELECT &IOPSolverStartDate.element(0).Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n    Log.Info(\"EndBucket ... \");\r\n    var ExistingEndBucketTemp ='SELECT &IOPSolverEndDate.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n    var ExistingCurrentBucketTemp ='SELECT &IOPSolverCurrentDate.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n    if(lsResponse3 !== null){\r\n    var ExistingCurrentBucket = lsResponse3.Result;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n    else {\r\n    var ExistingCurrentBucket = null;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n    if(ExistingStartBucket !== null){\r\n    var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[IOP Solver Start Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n    var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[IOP Solver End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\r\n    if(ExistingCurrentBucket !== null){\r\n    var NullExisitingCurrentBucket = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[IOP Solver Current Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n    var SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[IOP Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n    Log.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n    var SetPropertyCurrentBucket = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[IOP Solver Current Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[IOP Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    Log.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n    var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[IOP Solver Start Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[IOP Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[IOP Solver End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'IOP planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n\r\n    updateMEIOPlanningParameters = function(StartBucketSP,EndBucketSP,StartBucket , EndBucket ,StartBucketHistorical , EndBucketHistorical , Version){\r\n\r\n\tvar queryForFunctionalTaskStart = 'exec procedure MEIOFunctionalTaskStart {\"Version\" : \"' + Version + '\", \"PlanningHorizon\": true, \"CreateNetwork\":false, \"ValidateNetwork\":false, \"CalculateWMAPE\":false, \"CoreRun\":false, \"ApprovePublishTargets\":false, \"GenerateStats\":false, \"PlanningPolicy\":false, \"RunSegmentation\":false, \"ISLORun\":false, \"GSLOBORun\":false,\"GenFutureDepDemand\":false};';\r\n    Log.Info(\"[MEIO Solver JS] => query formed: \" + queryForFunctionalTaskStart);\r\n    queryModule.update(queryForFunctionalTaskStart);\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    var disable = 'Disable plan;';\r\n    queryModule.update(disable);\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while syncing SP Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\nif(Solution == \"MP_MEIO\"){\r\n\t    var ExistingStartBucketTemp ='SELECT &SolverStartBucket.element(0).Name;';\t\r\n\t    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\t    if(lsResponse !== null){\r\n\t    var ExistingStartBucket = lsResponse.Result;\r\n\t    // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n\t    else{\r\n\t    var ExistingStartBucket = null;\r\n\t    // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n\t\r\n\t    var ExistingEndBucketTemp ='SELECT &SolverEndBucket.element(0).Name;';\t\r\n\t    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\t    if(lsResponse2 !== null){\r\n\t    var ExistingEndBucket = lsResponse2.Result;\r\n\t    // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n\t    else{\r\n\t    var ExistingEndBucket = null;\r\n\t    // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n\r\n        if(ExistingStartBucket !== null){\r\n            var NullExisitingStartBucket = 'updatemember(Time.[Week]={,\"'+ ExistingStartBucket +'\"},[Time].[W Solver Start Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n            queryModule.update(NullExisitingStartBucket);\r\n        }\r\n            \r\n        if(ExistingEndBucket !== null){\r\n            var NullExisitingEndBucket = 'updatemember(Time.[Week]={,\"'+ ExistingEndBucket +'\"},[Time].[W Solver End Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n            queryModule.update(NullExisitingEndBucket);\r\n        }\r\n\r\n        var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Start Bucket] = \"'+ StartBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n        queryModule.update(SetStartBucket);\r\n            \r\n        var SetPropertyStartBucket = 'updatemember(Time.[Week]={,\"'+ StartBucketSP +'\"},[Time].[W Solver Start Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n        queryModule.update(SetPropertyStartBucket);\r\n            \r\n        var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan End Bucket] = \"'+ EndBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n        queryModule.update(SetEndBucket);\r\n            \r\n        var SetPropertyEndBucket = 'updatemember(Time.[Week]={,\"'+ EndBucketSP +'\"},[Time].[W Solver End Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n        queryModule.update(SetPropertyEndBucket);      \r\n    }\r\n    else if (Solution == \"OP_MEIO\") {\r\n        var ExistingStartBucketTemp ='SELECT &DailySolverStartBucket.element(0).Name;';\t\r\n        var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n        if(lsResponse !== null){\r\n        var ExistingStartBucket = lsResponse.Result;\r\n        // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n        else{\r\n        var ExistingStartBucket = null;\r\n        // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n    \r\n        var ExistingEndBucketTemp ='SELECT &DailySolverEndBucket.element(0).Name;';\t\r\n        var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n        if(lsResponse2 !== null){\r\n        var ExistingEndBucket = lsResponse2.Result;\r\n        // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n        else{\r\n        var ExistingEndBucket = null;\r\n        // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n\r\n        if(ExistingStartBucket !== null){\r\n            var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[D Solver Start Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n            queryModule.update(NullExisitingStartBucket);\r\n        }\r\n        \r\n        if(ExistingEndBucket !== null){\r\n            var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[D Solver End Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n            queryModule.update(NullExisitingEndBucket);\r\n        }\r\n\r\n        var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Start Bucket] = \"'+ StartBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n        queryModule.update(SetStartBucket);\r\n    \r\n        var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucketSP +'\"},[Time].[D Solver Start Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n        queryModule.update(SetPropertyStartBucket);\r\n    \r\n        var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan End Bucket] = \"'+ EndBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n        queryModule.update(SetEndBucket);\r\n\t\r\n\t    var SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucketSP +'\"},[Time].[D Solver End Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n        queryModule.update(SetPropertyEndBucket);\r\n    }\r\n    else {\r\n        Log.Info(\"StartedBucket ... \");\r\n\t    var ExistingStartBucketTemp ='SELECT &MonthlySolverStartBucket.element(0).Name;';\t\r\n\t    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\t    if(lsResponse !== null){\r\n\t        var ExistingStartBucket = lsResponse.Result;\r\n\t        Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\t    else{\r\n\t        var ExistingStartBucket = null;\r\n\t        Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\t\r\n\t    Log.Info(\"EndBucket ... \");\r\n\t    var ExistingEndBucketTemp ='SELECT &MonthlySolverEndBucket.element(0).Name;';\t\r\n\t    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\t    if(lsResponse2 !== null){\r\n\t        var ExistingEndBucket = lsResponse2.Result;\r\n\t        Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t    else{\r\n\t        var ExistingEndBucket = null;\r\n\t        Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t\r\n\t    if(ExistingStartBucket !== null){\r\n\t    var NullExisitingStartBucket = 'updatemember(Time.[Month]={,\"'+ ExistingStartBucket +'\"},[Time].[M Solver Start Bucket]={NULL,});';\r\n\t    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n        queryModule.update(NullExisitingStartBucket);}\r\n\t\r\n\t    if(ExistingEndBucket !== null){\r\n\t    var NullExisitingEndBucket = 'updatemember(Time.[Month]={,\"'+ ExistingEndBucket +'\"},[Time].[M Solver End Bucket]={NULL,});';\r\n\t    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n        queryModule.update(NullExisitingEndBucket);}\r\n\t\r\n        var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan Start Bucket] = \"'+ StartBucketSP +'\" ; end scope;';\r\n        Log.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n        queryModule.update(SetStartBucket);\r\n        \r\n        var SetPropertyStartBucket = 'updatemember(Time.[Month]={,\"'+ StartBucketSP +'\"},[Time].[M Solver Start Bucket]={\"1\",});';\r\n        Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n        queryModule.update(SetPropertyStartBucket);\r\n        \r\n        var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan End Bucket] = \"'+ EndBucketSP +'\" ; end scope;';\r\n        Log.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n        queryModule.update(SetEndBucket);\r\n        \r\n        var SetPropertyEndBucket = 'updatemember(Time.[Month]={,\"'+ EndBucketSP +'\"},[Time].[M Solver End Bucket]={\"1\",});';\r\n        Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n        queryModule.update(SetPropertyEndBucket);\r\n    \r\n    }\r\n\r\n\r\n    // Populating Last Cycle Actuals and Historical Forecast\r\n    Log.Info(\"Populating Last Cycle Actuals and Historical Forecast\");\r\n    var queryForLastCycleHistorical = 'scope:(&IOHistoricalHorizon *[Version].[Version Name].['+ Version +'] * [Item].[Item] * [Location].[Location] * [Sales Domain].[Customer Group].filter(#.Name in {\"DependentDemand\"})); Measure.[IO Historical Forecast LC] = Measure.[IO Historical Forecast]; Measure.[IO Actual Shipments Historical LC] = Measure.[IO Actual Shipments Historical];end scope;';\r\n    queryModule.update(queryForLastCycleHistorical);\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Fetching Existing Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    var ExistingStartBucketTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Start Bucket - \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Start Bucket\");}\r\n\r\n    var ExistingEndBucketTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing End Bucket - \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing End Bucket\");}\r\n\r\n    var ExistingStartBucketHistoricalTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOStartBucketHistorical]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketHistoricalTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucketHistorical = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Start Bucket Historical -  \" + ExistingStartBucketHistorical);}\r\n    else{\r\n    var ExistingStartBucketHistorical = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Start Bucket Historical\");}\r\n\r\n    var ExistingEndBucketHistoricalTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOEndBucketHistorical]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketHistoricalTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucketHistorical = lsResponse2.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing End Bucket Historical - \" + ExistingEndBucketHistorical);}\r\n    else{\r\n    var ExistingEndBucketHistorical = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing End Bucket Historical\");}\r\n\r\n    var ExistingPlanningCycleStartBucketTemp ='SELECT [Planning Cycle].[Planning Cycle].filter(#.[PlanningCycleStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingPlanningCycleStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingPlanningCycleStartBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Planning Cycle Start Bucket - \" + ExistingPlanningCycleStartBucket);}\r\n    else{\r\n    var ExistingPlanningCycleStartBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Planning Cycle Start Bucket\");}\r\n\r\n    var ExistingPlanningCycleEndBucketTemp ='SELECT [Planning Cycle].[Planning Cycle].filter(#.[PlanningCycleEndBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingPlanningCycleEndBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingPlanningCycleEndBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Planning Cycle End Bucket - \" + ExistingPlanningCycleEndBucketTemp);}\r\n    else{\r\n    var ExistingPlanningCycleEndBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Planning Cycle End Bucket\");}\r\n\r\n    var ExistingPlanningCycleCurrentBucketTemp ='SELECT [Planning Cycle].[Planning Cycle].filter(#.[PlanningCycleCurrentBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingPlanningCycleCurrentBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingPlanningCycleCurrentBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Planning Cycle Current Bucket - \" + ExistingPlanningCycleCurrentBucket);}\r\n    else{\r\n    var ExistingPlanningCycleCurrentBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Planning Cycle Current Bucket\");}\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Nulling Out Existing Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    //Nulling Out Existing Dates\r\n    if(ExistingStartBucket !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Start Bucket\");\r\n    var NullExisitingStartBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingStartBucket +'\"},[Time].[IOStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing End Bucket\");\r\n    var NullExisitingEndBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingEndBucket +'\"},[Time].[IOEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n    if(ExistingStartBucketHistorical !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Start Bucket Historical\");\r\n    var NullExisitingStartBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingStartBucketHistorical +'\"},[Time].[IOStartBucketHistorical]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucketHistorical);}\r\n\r\n    if(ExistingEndBucketHistorical !== null){\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing End Bucket Historical\");\r\n    var NullExisitingEndBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingEndBucketHistorical +'\"},[Time].[IOEndBucketHistorical]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucketHistorical);}\r\n\r\n    if(ExistingPlanningCycleEndBucket !== null){\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Planning Cycle End Bucket\");\r\n    var NullExistingPlanningCycleEndBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ ExistingPlanningCycleEndBucket +'\"},[Planning Cycle].[PlanningCycleEndBucket]={NULL,});';\r\n    queryModule.update(NullExistingPlanningCycleEndBucket);}\r\n\r\n    if(ExistingPlanningCycleCurrentBucket !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Planning Cycle Current Bucket\");\r\n    var NullExistingPlanningCycleCurrentBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ ExistingStartBucket +'\"},[Planning Cycle].[PlanningCycleCurrentBucket]={NULL,});';\r\n    queryModule.update(NullExistingPlanningCycleCurrentBucket);}\r\n\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Updating New Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Historical Start Bucket - \" + StartBucketHistorical);\r\n    var SetPropertyStartBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ StartBucketHistorical +'\"},[Time].[IOStartBucketHistorical]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucketHistorical);\r\n\r\n    var SetStartBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning Start Bucket Historical] = \"'+ StartBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetStartBucketHistorical);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Historical End Bucket - \" + EndBucketHistorical);\r\n    var SetPropertyEndBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ EndBucketHistorical +'\"},[Time].[IOEndBucketHistorical]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucketHistorical);\r\n\r\n    var SetEndBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning End Bucket Historical] = \"'+ EndBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetEndBucketHistorical);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Start Bucket - \" + StartBucket);\r\n    var SetPropertyStartBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ StartBucket +'\"},[Time].[IOStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    queryModule.update(SetStartBucket);\r\n\r\n    if (!disableplan){\r\n    \tLog.Info(\"Enabling Plan....\");\r\n    \tvar enable = 'Enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning End Bucket - \" + EndBucket);\r\n    var SetPropertyEndBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ EndBucket +'\"},[Time].[IOEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    queryModule.update(SetEndBucket);\r\n\r\n    if(ExistingPlanningCycleStartBucket === null){\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Cycle Start Bucket - \" + StartBucketHistorical);\r\n        var SetPlanningCycleStartBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ StartBucketHistorical +'\"},[Planning Cycle].[PlanningCycleStartBucket]={\"1\",});';\r\n        queryModule.update(SetPlanningCycleStartBucket);\r\n    }\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Cycle End Bucket - \" + EndBucketHistorical);\r\n    var SetPlanningCycleEndBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ EndBucketHistorical +'\"},[Planning Cycle].[PlanningCycleEndBucket]={\"1\",});';\r\n    queryModule.update(SetPlanningCycleEndBucket);\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Cycle Current Bucket - \" + StartBucket);\r\n    var SetPlanningCycleCurrentBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ StartBucket +'\"},[Planning Cycle].[PlanningCycleCurrentBucket]={\"1\",});';\r\n    queryModule.update(SetPlanningCycleCurrentBucket);\r\n\r\n    if(disableplan){\r\n        Log.Info(\"[MEIO-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n        var enable = 'Enable plan;';\r\n        queryModule.update(enable);\r\n    }\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing IO Planning Horizon Association\");\r\n    var NullExistingIOPlanningHorizonAssoc = 'scope:(Time.[IO Planning Bucket].except(&IOPlanningHorizon) *  &CWVAndScenarios); Measure.[IO Planning Horizon Association] = Null; end scope;'\r\n    queryModule.update(NullExistingIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Horizon Association\");\r\n    var SetIOPlanningHorizonAssoc = 'cartesian scope:(&IOPlanningHorizon * &CWVAndScenarios); Measure.[IO Planning Horizon Association] = 1; end scope;'\r\n    queryModule.update(SetIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Horizon Length\");\r\n    var GetPlanningHorizonLength = 'cartesian scope:(&CWVAndScenarios); Measure.[IO Planning Horizon Length] = Measure.[IO Planning Horizon Association]; end scope;'\r\n    queryModule.update(GetPlanningHorizonLength);\r\n\r\n\r\n    Log.Info(\"[MEIO-CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    var disable = 'disable plan;';\r\n    queryModule.update(disable);\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Time Group Procedure Start\");\r\n    var TimeGroupSlicing = 'exec procedure MEIOTimeGroupSlicing {\"Version\" : \"'+ Version +'\"};'\r\n    queryModule.update(TimeGroupSlicing);\r\n\r\n    Log.Info(\"[MEIO-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n    var enable = 'Enable plan;';\r\n    queryModule.update(enable);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Current Bucket Association\");\r\n    var NullExistingCurrentBucketAssociation = 'DELETE DATA FOR MODEL [004.007 MEIO Current Bucket Association] WHERE {&CWVAndScenarios};'\r\n    queryModule.update(NullExistingCurrentBucketAssociation);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Current Bucket Association\");\r\n    var SetIOCurrentBucketAssociation = 'cartesian scope:(&CWVAndScenarios * [Planning Cycle].[Planning Cycle].['+ StartBucket +']); Measure.[IO Current Bucket Association] = 1; end scope;'\r\n    queryModule.update(SetIOCurrentBucketAssociation);\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Bucket Length in Days\");\r\n    var NullExistingBucketLengthinDays = 'scope:([Version].[Version Name].[CurrentWorkingView] * [Time].[Planning Year].except(&IOPlanningHorizon.relatedmembers([Planning Year])).relatedmembers([Day]));Measure.[IO Bucket Length Days] = Null;end scope;'\r\n    queryModule.update(NullExistingBucketLengthinDays);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Bucket Length in Days\");\r\n    var SetIOBucketLengthDays = 'cartesian scope:(&CWVAndScenarios * &IOPlanningHorizon.relatedmembers([Planning Year]).relatedmembers([Day]));Measure.[IO Bucket Length Days] = 1;end scope;'\r\n    queryModule.update(SetIOBucketLengthDays);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Global Bucket Length\");\r\n    var SetIOBucketLength = 'scope: (&CWVAndScenarios * &IOPlanningHorizon);Measure.[IO Bucket Length] = Measure.[IO Bucket Length Days];end scope;'\r\n    queryModule.update(SetIOBucketLength);\r\n\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Calculating Incremental Historical Bucket\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    // Querying Planning End Bucket Historical for Last Run\r\n    var queryEndBucketHistoricalLastRun = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[IO Planning End Bucket Historical for Last Run]});';\r\n    var lsResponse = queryModule.select(queryEndBucketHistoricalLastRun);\r\n\tdatacellsetEndBucketHistoricalLastRun = cellsetModule.createCellSet(lsResponse);\r\n    var EndBucketHistoricalLastRun = datacellsetEndBucketHistoricalLastRun.row(0).cell(datacellsetEndBucketHistoricalLastRun.measureColumnIndex('IO Planning End Bucket Historical for Last Run'));\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => EndBucketHistoricalLastRun : \" + EndBucketHistoricalLastRun);\r\n    if (EndBucketHistoricalLastRun === undefined || EndBucketHistoricalLastRun ===null) {\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Incremental Bucket Found\");\r\n\t}\r\n    else {\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical for Last Run : \" + EndBucketHistoricalLastRun.toString().toLowerCase());\r\n\r\n        // // Querying Planning End Bucket Historical Run Key\r\n        // EndBucketHistoricalKey ='SELECT [Time].[IO Planning Bucket].['+EndBucketHistorical+'].Key;';\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical Key: \" + EndBucketHistoricalKey.toString().toLowerCase());\r\n        // lsResponse = queryModule.select(EndBucketHistoricalKey);\r\n        // EndBucketHistoricalTimeStamp = lsResponse.Result;\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical Time-Stamp: \" + EndBucketHistoricalTimeStamp.toString().toLowerCase());\r\n\r\n        // // Querying Planning End Bucket Historical for Last Run Key\r\n        // EndBucketHistoricalLastRunKey ='SELECT [Time].[IO Planning Bucket].['+EndBucketHistoricalLastRun+'].Key;';\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical Last Run Key: \" + EndBucketHistoricalLastRunKey.toString().toLowerCase());\r\n        // lsResponse = queryModule.select(EndBucketHistoricalLastRunKey);\r\n        // EndBucketHistoricalLastRunTimeStamp = lsResponse.Result;\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical LastRun Time-Stamp: \" + EndBucketHistoricalLastRunTimeStamp.toString().toLowerCase());\r\n\r\n        // // Querying Bucket Length\r\n        // var queryBucketLength = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[IO Bucket Length]});';\r\n        // var lsResponse = queryModule.select(queryBucketLength);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Query for Bucket Length : \" + queryBucketLength);\r\n        // datacellsetBucketLength = cellsetModule.createCellSet(lsResponse);\r\n        // var bucketLength = datacellsetBucketLength.row(0).cell(datacellsetBucketLength.measureColumnIndex('IO Bucket Length'));\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Bucket Length : \" + bucketLength.toString().toLowerCase());\r\n\r\n        // // Finding out the difference in the Last Run End Bucket and Current Run End Bucket\r\n        // const EndBucketHistoricalDate = new Date (EndBucketHistoricalTimeStamp);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical: \" + EndBucketHistoricalDate.toString().toLowerCase());\r\n        // const EndBucketHistoricalLastRunDate = new Date (EndBucketHistoricalLastRunTimeStamp);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical for Last Run : \" + EndBucketHistoricalLastRunDate.toString().toLowerCase());\r\n        // const diffTime = Math.abs(EndBucketHistoricalDate - EndBucketHistoricalLastRunDate);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Diff Time from Last Run : \" + diffTime.toString().toLowerCase());\r\n        // const diffBuckets = Math.abs(diffTime / (1000*60*60*24*bucketLength));\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Diff Buckets from Last Run : \" + diffBuckets.toString().toLowerCase());\r\n\r\n        const queryBucketCount = '(SELECT (&IOHistoricalHorizon.filter((#.Key > [Time].[IO Planning Bucket].[' + EndBucketHistoricalLastRun + '].Key) && (#.Key <= [Time].[IO Planning Bucket].[' + EndBucketHistorical + '].Key)))).count;';\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Query for Bucket Count: \" + queryBucketCount.toLowerCase());\r\n\r\n        var lsResponse = queryModule.select(queryBucketCount);\r\n        var diffBuckets = lsResponse.Result;\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Diff Buckets: \" + diffBuckets.toString().toLowerCase());\r\n\r\n\r\n        // Refreshing Incremental Bucket Association\r\n        var deleteForIncrementalHorizonBucketsAssociation = 'Delete Data for Model [003.028MEIO Incremental Historical Horizon Buckets] where {[Version].[Version Name].[' + Version + '], Step.[Step Number].[Incremental Historical Horizon]};';\r\n        queryModule.update(deleteForIncrementalHorizonBucketsAssociation);\r\n\r\n        if (diffBuckets>0) {\r\n            Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Populating Number of Buckets for Incremental Historical Horizon\");\r\n            var queryForPopulatingForecastAndActuals = 'cartesian scope: ([Version].[Version Name].filter(#.Name in {\"' + Version + '\"}) * [Step].[Step Number].filter(#.Name in {\"Incremental Historical Horizon\"})); Measure.[IO Incremental Historical Horizon Buckets Association] = \"'+diffBuckets+'\"; end scope;';\r\n            queryModule.update(queryForPopulatingForecastAndActuals);\r\n        }\r\n    }\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = Null; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    var queryForFunctionalTaskEnd = 'exec procedure MEIOFunctionalTaskEnd {\"Version\" : \"' + Version + '\", \"PlanningHorizon\": true, \"CreateNetwork\":false, \"ValidateNetwork\":false, \"CalculateWMAPE\":false, \"CoreRun\":false, \"ApprovePublishTargets\":false, \"GenerateStats\":false, \"PlanningPolicy\":false, \"RunSegmentation\":false, \"ISLORun\":false, \"GSLOBORun\":false,\"GenFutureDepDemand\":false};';\r\n    Log.Info(\"[MEIO Solver JS] => query formed: \" + queryForFunctionalTaskEnd);\r\n    queryModule.update(queryForFunctionalTaskEnd);\r\n\r\n    var message = 'MEIO planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    updateDDMRPPlanningParameters = function(StartBucket , EndBucket ,StartBucketHistorical , EndBucketHistorical ,FutureStartBucket, FutureEndBucket, Version){\r\n\r\n    // Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    // var disable = 'Disable plan;';\r\n    // queryModule.update(disable);\r\n\r\n    var ExistingStartBucketTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing Start Bucket - \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing Start Bucket\");}\r\n\r\n    var ExistingEndBucketTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing End Bucket - \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing End Bucket\");}\r\n\r\n    var ExistingStartBucketHistoricalTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPHistoricalPeriodStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketHistoricalTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucketHistorical = lsResponse.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing Start Bucket Historical -  \" + ExistingStartBucketHistorical);}\r\n    else{\r\n    var ExistingStartBucketHistorical = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing Start Bucket Historical\");}\r\n\r\n    var ExistingEndBucketHistoricalTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPHistoricalPeriodEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketHistoricalTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucketHistorical = lsResponse2.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing End Bucket Historical - \" + ExistingEndBucketHistorical);}\r\n    else{\r\n    var ExistingEndBucketHistorical = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing End Bucket Historical\");}\r\n\r\n    var ExistingStartBucketFutureTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPFuturePeriodStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketFutureTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucketFuture = lsResponse.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing Start Bucket Future -  \" + ExistingStartBucketFuture);}\r\n    else{\r\n    var ExistingStartBucketFuture = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing Start Bucket Future\");}\r\n\r\n    var ExistingEndBucketFutureTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPFuturePeriodEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketFutureTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucketFuture = lsResponse2.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing End Bucket Future - \" + ExistingEndBucketFuture);}\r\n    else{\r\n    var ExistingEndBucketFuture = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing End Bucket Future\");}\r\n\r\n    //Nulling Out Existing Dates\r\n    if(ExistingStartBucket !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Start Bucket\");\r\n    var NullExisitingStartBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingStartBucket +'\"},[Time].[DDMRPStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing End Bucket\");\r\n    var NullExisitingEndBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingEndBucket +'\"},[Time].[DDMRPEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n    if(ExistingStartBucketHistorical !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Start Bucket Historical\");\r\n    var NullExisitingStartBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingStartBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucketHistorical);}\r\n\r\n    if(ExistingEndBucketHistorical !== null){\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing End Bucket Historical\");\r\n    var NullExisitingEndBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingEndBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucketHistorical);}\r\n\r\n    if(ExistingStartBucketFuture !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Start Bucket Future\");\r\n    var NullExisitingStartBucketFuture = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingStartBucketFuture +'\"},[Time].[DDMRPFuturePeriodStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucketFuture);}\r\n\r\n    if(ExistingEndBucketFuture !== null){\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing End Bucket Future\");\r\n    var NullExisitingEndBucketFuture = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingEndBucketFuture +'\"},[Time].[DDMRPFuturePeriodEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucketFuture);}\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Historical Start Bucket - \" + StartBucketHistorical);\r\n    var SetPropertyStartBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ StartBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucketHistorical);\r\n\r\n    var SetStartBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning Start Bucket Historical] = \"'+ StartBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetStartBucketHistorical);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Historical End Bucket - \" + EndBucketHistorical);\r\n    var SetPropertyEndBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ EndBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucketHistorical);\r\n\r\n    var SetEndBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning End Bucket Historical] = \"'+ EndBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetEndBucketHistorical);\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Future Start Bucket - \" + FutureStartBucket);\r\n    var SetPropertyStartBucketFuture = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ FutureStartBucket +'\"},[Time].[DDMRPFuturePeriodStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucketFuture);\r\n\r\n    var SetStartBucketFuture = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning Start Bucket Future] = \"'+ FutureStartBucket +'\" ; end scope;';\r\n    queryModule.update(SetStartBucketFuture);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Future End Bucket - \" + FutureEndBucket);\r\n    var SetPropertyEndBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ FutureEndBucket +'\"},[Time].[DDMRPFuturePeriodEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucketHistorical);\r\n\r\n    var SetEndBucketFuture = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning End Bucket Future] = \"'+ FutureEndBucket +'\" ; end scope;';\r\n    queryModule.update(SetEndBucketFuture);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning Start Bucket - \" + StartBucket);\r\n    var SetPropertyStartBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ StartBucket +'\"},[Time].[DDMRPStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    queryModule.update(SetStartBucket);\r\n\r\n    if (!disableplan){\r\n    \tLog.Info(\"Enabling Plan....\");\r\n    \tvar enable = 'Enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning End Bucket - \" + EndBucket);\r\n    var SetPropertyEndBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ EndBucket +'\"},[Time].[DDMRPEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    queryModule.update(SetEndBucket);\r\n\r\n\r\n    if(disableplan){\r\n        Log.Info(\"[DDMRP-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n        var enable = 'Enable plan;';\r\n        queryModule.update(enable);\r\n    }\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing IO Planning Horizon Association\");\r\n    var NullExistingIOPlanningHorizonAssoc = 'scope:(Time.[DDMRP Planning Bucket].except(&DDMRPPlanningHorizon) *  &CWVAndScenarios); Measure.[DDMRP Planning Horizon Association] = Null; end scope;'\r\n    queryModule.update(NullExistingIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning Horizon Association\");\r\n    var SetIOPlanningHorizonAssoc = 'cartesian scope:(&DDMRPPlanningHorizon * &CWVAndScenarios); Measure.[DDMRP Planning Horizon Association] = 1; end scope;'\r\n    queryModule.update(SetIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning Horizon Length\");\r\n    var GetPlanningHorizonLength = 'cartesian scope:(&CWVAndScenarios); Measure.[DDMRP Planning Horizon Length] = Measure.[DDMRP Planning Horizon Association]; end scope;'\r\n    queryModule.update(GetPlanningHorizonLength);\r\n\r\n\r\n    Log.Info(\"[DDMRP-CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    var disable = 'disable plan;';\r\n    queryModule.update(disable);\r\n\r\n    // if(NumberOfBuckets != 1){\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Time Group Procedure Start\");\r\n    var TimeGroupSlicing = 'exec procedure DDMRPTimeGroupSlicing {\"Version\" : \"'+ Version +'\"};'\r\n    queryModule.update(TimeGroupSlicing);\r\n    // }\r\n\r\n    Log.Info(\"[DDMRP-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n    var enable = 'Enable plan;';\r\n    queryModule.update(enable);\r\n\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Bucket Length in Days\");\r\n    var NullExistingBucketLengthinDays = 'DELETE DATA FOR MODEL [001.019DDMRP Plugin Inputs Bucket Length in Days] WHERE {&CWVAndScenarios};'\r\n    queryModule.update(NullExistingBucketLengthinDays);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Bucket Length in Days\");\r\n    var SetDDMRPBucketLengthDays = 'cartesian scope:(&CWVAndScenarios * &DDMRPPlanningHorizon.relatedmembers([Planning Year]).relatedmembers([Day]));Measure.[DDMRP Bucket Length Days] = 1;end scope;'\r\n    queryModule.update(SetDDMRPBucketLengthDays);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Global Bucket Length\");\r\n    var SetDDMRPBucketLength = 'scope: (&CWVAndScenarios * &DDMRPPlanningHorizon);Measure.[DDMRP Bucket Length] = Measure.[DDMRP Bucket Length Days];end scope;'\r\n    queryModule.update(SetDDMRPBucketLength);\r\n\r\n\r\n    var message = 'DDMRP planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n\tupdateMonthlyPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , Version){\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &MonthlySolverStartBucket.element(0).Name;';\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &MonthlySolverEndBucket.element(0).Name;';\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &MonthlySolverCurrentBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Month]={,\"'+ ExistingStartBucket +'\"},[Time].[M Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Month]={,\"'+ ExistingEndBucket +'\"},[Time].[M Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Month]={,\"'+ ExistingCurrentBucket +'\"},[Time].[M Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n\tvar SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Month]={,\"'+ CurrentBucket +'\"},[Time].[M Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n\tvar SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Month]={,\"'+ StartBucket +'\"},[Time].[M Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n\tvar SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Month]={,\"'+ EndBucket +'\"},[Time].[M Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'Monthly planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    if (disableplan){\r\n\r\n\t\tLog.Info(\"Disable Plan....\");\r\n\t\tvar disable = 'disable plan;';\r\n\t\tqueryModule.update(disable);\r\n\t}\r\n\r\n    if(Solution == \"MP\"){\r\n        Log.Info(\"Master Planning parameters Update started\");\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        CurrentBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n        Log.Info('Current Bucket is ' +CurrentBucket);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        status = updateMasterPlanningParameters(CurrentBucket , StartBucket , EndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n    else if (Solution == \"OP\"){\r\n        Log.Info(\"Daily Planning parameters Update started\");\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\t\tvar DeploymentEndDate = parsedParams.DeploymentEndDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n\t\tDeploymentEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+DeploymentEndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Deployment End Bucket is ' +DeploymentEndBucket);\r\n\r\n\r\n        status = updateDailyPlanningParameters(CurrentDay , StartBucket , EndBucket , DeploymentEndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n    else if (Solution == \"TLB\"){\r\n        Log.Info(\"TLB Planning parameters Update started\");\r\n\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n\r\n        status = updateTLBPlanningParameters(StartBucket , EndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n\r\n\telse if (Solution == \"IOP\"){\r\n        Log.Info(\"Daily Planning parameters Update started\");\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        status = updateIOPPlanningParameters(CurrentDay , StartBucket , EndBucket, Version);\r\n        Log.Info(status);\r\n    }\r\n\r\n\r\n    else if (Solution == \"MP_MEIO\" || Solution == \"OP_MEIO\"){\r\n        Log.Info(\"MEIO Planning parameters Update started\");\r\n\t\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Disable Plan is \" + disableplan);\r\n\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n        var HistoricalStartDate = parsedParams.HistoricalStartDate;\r\n        var HistoricalEndDate = parsedParams.HistoricalEndDate;\r\n\r\n        if(Solution == \"MP_MEIO\"){\r\n            StartBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n            // Log.Info('Start Bucket is ' +StartBucketSP);\r\n\r\n            EndBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n            // Log.Info('End Bucket is ' +EndBucketSP);\r\n        }\r\n        else {\r\n            StartBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n            // Log.Info('Start Bucket is ' +StartBucketSP);\r\n\r\n            EndBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n            // Log.Info('End Bucket is ' +EndBucketSP);\r\n        }\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        HistoricalStartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalStartDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalStartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        HistoricalEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalEndDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalEndBucket);\r\n\r\n        status = updateMEIOPlanningParameters(StartBucketSP,EndBucketSP,StartBucket , EndBucket ,HistoricalStartBucket , HistoricalEndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n\r\n    else if (Solution == \"DDMRP\"){\r\n        Log.Info(\"DDMRP Planning parameters Update started\");\r\n\t\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Disable Plan is \" + disableplan);\r\n\r\n        // var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        // var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n        var HistoricalStartDate = parsedParams.HistoricalStartDate;\r\n        var HistoricalEndDate = parsedParams.HistoricalEndDate;\r\n        var FutureStartDate = parsedParams.FutureStartDate;\r\n        var FutureEndDate = parsedParams.FutureEndDate;\r\n\r\n        var queryforNumberOfBuckets = 'Select ([Version].[Version Name].[' + Version + '] ) on row, ({Measure.[DDMRP Number of Planning Buckets for Buffer Profiling]}) on column;'\r\n        var lsResponse = queryModule.select(queryforNumberOfBuckets);\r\n        var datacellsetforNumberOfBuckets = cellsetModule.createCellSet(lsResponse);\r\n        var NumberOfBuckets = datacellsetforNumberOfBuckets.row(0).cell(datacellsetforNumberOfBuckets.measureColumnIndex('DDMRP Number of Planning Buckets for Buffer Profiling'));\r\n        Log.Info('Number Of Buckets ' +NumberOfBuckets);\r\n\r\n        var lsresponseforstartdate =  queryModule.select('select (&CurrentDay);');\r\n        var datacellsetforstartdate = cellsetModule.createCellSet(lsresponseforstartdate);\r\n        var stdate =  datacellsetforstartdate.row(0).cell(datacellsetforstartdate.memberColumnIndex('Time','Day'));\r\n        var StartdateName = stdate.Name\r\n        Log.Info(\"Start date ... \" + StartdateName);\r\n\r\n        if(NumberOfBuckets === null){\r\n            RuleOutputToUI = {Status: 'Error',Message: 'Number of Planning Buckets for Buffer Profiling is Null'};\r\n            return;\r\n        }\r\n        else{\r\n            var NumberOfBucketsminusone = NumberOfBuckets -1;\r\n            var lsresponseforenddate = queryModule.select('select (&CurrentDay.['+ StartdateName +'].relatedmembers([DDMRP Planning Bucket]).element(0).leadoffset('+ NumberOfBucketsminusone +'));');\r\n            var datacellsetforenddate = cellsetModule.createCellSet(lsresponseforenddate);\r\n            var enddate =  datacellsetforenddate.row(0).cell(datacellsetforenddate.memberColumnIndex('Time','DDMRP Planning Bucket'));\r\n            var enddateName = enddate.Name\r\n            Log.Info(\"End date is ... \" + enddateName);\r\n        }\r\n\r\n        var StartBucket = StartdateName;\r\n        // StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        HistoricalStartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalStartDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalStartBucket);\r\n\r\n        FutureStartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+FutureStartDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +FutureStartBucket);\r\n\r\n        var EndBucket = enddateName;\r\n        // EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        HistoricalEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalEndDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalEndBucket);\r\n\r\n        FutureEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+FutureEndDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +FutureEndBucket);\r\n\r\n        status = updateDDMRPPlanningParameters(StartBucket , EndBucket ,HistoricalStartBucket , HistoricalEndBucket ,FutureStartBucket, FutureEndBucket,Version,NumberOfBuckets);\r\n        Log.Info(status);\r\n    }\r\n\r\n\r\n    else if (Solution == \"DP\"){\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        Log.Info(\"Current Bucket has been Updated for Demand Planning\");\r\n    }\r\n\telse if (Solution == \"CP\"){\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        Log.Info(\"Current Bucket has been Updated for Commercial Planning\");\r\n\t}\r\n\r\n\telse if (Solution == \"Month\"){\r\n\r\n\t\tvar CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n\t\tCurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n\t\tvar SetMonthIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetMonthIsCurrent ... \" + SetMonthIsCurrent);\r\n        queryModule.update(SetMonthIsCurrent);\r\n\r\n\t\tCurrentBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).relatedmembers([Month]).element(0).Name;').Result;\r\n        Log.Info('Current Bucket is ' +CurrentBucket);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([Month]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([Month]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        status = updateMonthlyPlanningParameters(CurrentBucket , StartBucket , EndBucket , Version);\r\n        Log.Info(status);\r\n\r\n\t}\r\n\r\n    else {\r\n        Log.Info(\"Recieved Solution Type : \" + \"\\\"'+Solution+'\\\"\");\r\n        Log.Info(\"Verify valid solution type is passed to scripts. Valid inputs are \\\"MP \\\", \\\"OP\\\", \\\"MEIO\\\", \\\"DP\\\", \\\"CP\\\"\");\r\n    }\r\n\r\n    if (disableplan){\r\n    \tLog.Info(\"Enable Plan....\");\r\n    \tvar enable = 'enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\r\n\r\n};\r\n\r\nreturn {\r\n\tSolverStartAndEndDate:SolverStartAndEndDate\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.CommonSolverStartAndEndDate', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar SolverStartAndEndDate= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var Solution = parsedParams.Solution;\r\n    var disableplan = parsedParams.Plan;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\tLog.Info(\"Recieved Solution Type : \\\"\" + Solution + \"\\\"\");\r\n\r\n\r\n    updateMasterPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , Version){\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &SolverStartBucket.element(0).Name;';\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &SolverEndBucket.element(0).Name;';\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &SolverCurrentBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Week]={,\"'+ ExistingStartBucket +'\"},[Time].[W Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Week]={,\"'+ ExistingEndBucket +'\"},[Time].[W Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Week]={,\"'+ ExistingCurrentBucket +'\"},[Time].[W Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n\tvar SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Week]={,\"'+ CurrentBucket +'\"},[Time].[W Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n\tvar SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Week]={,\"'+ StartBucket +'\"},[Time].[W Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n\tvar SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Week]={,\"'+ EndBucket +'\"},[Time].[W Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'Master planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    updateDailyPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , DeploymentEndBucket , Version){\r\n    Log.Info(\"StartedBucket ... \");\r\n    var ExistingStartBucketTemp ='SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n    Log.Info(\"EndBucket ... \");\r\n    var ExistingEndBucketTemp ='SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n\tLog.Info(\"DeploymentEndBucket ... \");\r\n    var ExistingDeploymentEndBucketTemp ='SELECT &DeploymentSolverEndBucket.element(0).Name;';\r\n    var lsResponse4 = queryModule.select(ExistingDeploymentEndBucketTemp);\r\n    if(lsResponse4 !== null){\r\n    var ExistingDeploymentEndBucket = lsResponse4.Result;\r\n    Log.Info(\"ExistingDeploymentEndBucket ... \" + ExistingDeploymentEndBucket);}\r\n    else{\r\n    var ExistingDeploymentEndBucket = null;\r\n    Log.Info(\"ExistingDeploymentEndBucket ... \" + ExistingDeploymentEndBucket);}\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n    var ExistingCurrentBucketTemp ='SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n    if(lsResponse3 !== null){\r\n    var ExistingCurrentBucket = lsResponse3.Result;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n    else {\r\n    var ExistingCurrentBucket = null;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n    if(ExistingStartBucket !== null){\r\n    var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[D Solver Start Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n    var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[D Solver End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\tif(ExistingDeploymentEndBucket !== null){\r\n    var NullExisitingDeploymentEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingDeploymentEndBucket +'\"},[Time].[Deployment Solver End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingDeploymentEndBucket ... \" + NullExisitingDeploymentEndBucket);\r\n    queryModule.update(NullExisitingDeploymentEndBucket);}\r\n\r\n    if(ExistingCurrentBucket !== null){\r\n    var NullExisitingCurrentBucket = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[D Solver Current Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n    var SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n    Log.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n    var SetPropertyCurrentBucket = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[D Solver Current Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    Log.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n    var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[D Solver Start Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[D Solver End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n\tvar SetDeploymentEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[Deployment Plan End Bucket] = \"'+ DeploymentEndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetDeploymentEndBucket ... \" + SetDeploymentEndBucket);\r\n    queryModule.update(SetDeploymentEndBucket);\r\n\r\n\tvar SetPropertyDeploymentEndBucket = 'updatemember(Time.[Day]={,\"'+ DeploymentEndBucket +'\"},[Time].[Deployment Solver End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyDeploymentEndBucket ... \" + SetPropertyDeploymentEndBucket);\r\n    queryModule.update(SetPropertyDeploymentEndBucket);\r\n\r\n    var message = 'Daily planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    updateTLBPlanningParameters = function(StartBucket , EndBucket , Version){\r\n    Log.Info(\"StartedBucket ... \");\r\n    var ExistingStartBucketTemp ='SELECT &TLBSolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n    Log.Info(\"EndBucket ... \");\r\n    var ExistingEndBucketTemp ='SELECT &TLBSolverEndBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n    if(ExistingStartBucket !== null){\r\n    var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[TLB Start Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n    var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[TLB End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n    var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[TLB Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    Log.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n    var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[TLB Start Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[TLB Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[TLB End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'TLB planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n\r\n\tupdateIOPPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , Version){\r\n\r\n\tLog.Info(\"StartedBucket ... \");\r\n    var ExistingStartBucketTemp ='SELECT &IOPSolverStartDate.element(0).Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n    Log.Info(\"EndBucket ... \");\r\n    var ExistingEndBucketTemp ='SELECT &IOPSolverEndDate.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n    var ExistingCurrentBucketTemp ='SELECT &IOPSolverCurrentDate.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n    if(lsResponse3 !== null){\r\n    var ExistingCurrentBucket = lsResponse3.Result;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n    else {\r\n    var ExistingCurrentBucket = null;\r\n    Log.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n    if(ExistingStartBucket !== null){\r\n    var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[IOP Solver Start Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n    var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[IOP Solver End Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\r\n    if(ExistingCurrentBucket !== null){\r\n    var NullExisitingCurrentBucket = 'updatemember(Time.[Day]={,\"'+ ExistingCurrentBucket +'\"},[Time].[IOP Solver Current Bucket]={NULL,});';\r\n    Log.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n    var SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[IOP Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n    Log.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n    var SetPropertyCurrentBucket = 'updatemember(Time.[Day]={,\"'+ CurrentBucket +'\"},[Time].[IOP Solver Current Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[IOP Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    Log.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n    var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucket +'\"},[Time].[IOP Solver Start Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[IOP Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    Log.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucket +'\"},[Time].[IOP Solver End Bucket]={\"1\",});';\r\n    Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'IOP planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n\r\n    updateMEIOPlanningParameters = function(StartBucketSP,EndBucketSP,StartBucket , EndBucket ,StartBucketHistorical , EndBucketHistorical , Version){\r\n\r\n\tvar queryForFunctionalTaskStart = 'exec procedure MEIOFunctionalTaskStart {\"Version\" : \"' + Version + '\", \"PlanningHorizon\": true, \"CreateNetwork\":false, \"ValidateNetwork\":false, \"CalculateWMAPE\":false, \"CoreRun\":false, \"ApprovePublishTargets\":false, \"GenerateStats\":false, \"PlanningPolicy\":false, \"RunSegmentation\":false, \"ISLORun\":false, \"GSLOBORun\":false,\"GenFutureDepDemand\":false};';\r\n    Log.Info(\"[MEIO Solver JS] => query formed: \" + queryForFunctionalTaskStart);\r\n    queryModule.update(queryForFunctionalTaskStart);\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    var disable = 'Disable plan;';\r\n    queryModule.update(disable);\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while syncing SP Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\nif(Solution == \"MP_MEIO\"){\r\n\t    var ExistingStartBucketTemp ='SELECT &SolverStartBucket.element(0).Name;';\t\r\n\t    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\t    if(lsResponse !== null){\r\n\t    var ExistingStartBucket = lsResponse.Result;\r\n\t    // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n\t    else{\r\n\t    var ExistingStartBucket = null;\r\n\t    // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n\t\r\n\t    var ExistingEndBucketTemp ='SELECT &SolverEndBucket.element(0).Name;';\t\r\n\t    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\t    if(lsResponse2 !== null){\r\n\t    var ExistingEndBucket = lsResponse2.Result;\r\n\t    // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n\t    else{\r\n\t    var ExistingEndBucket = null;\r\n\t    // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n\r\n        if(ExistingStartBucket !== null){\r\n            var NullExisitingStartBucket = 'updatemember(Time.[Week]={,\"'+ ExistingStartBucket +'\"},[Time].[W Solver Start Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n            queryModule.update(NullExisitingStartBucket);\r\n        }\r\n            \r\n        if(ExistingEndBucket !== null){\r\n            var NullExisitingEndBucket = 'updatemember(Time.[Week]={,\"'+ ExistingEndBucket +'\"},[Time].[W Solver End Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n            queryModule.update(NullExisitingEndBucket);\r\n        }\r\n\r\n        var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan Start Bucket] = \"'+ StartBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n        queryModule.update(SetStartBucket);\r\n            \r\n        var SetPropertyStartBucket = 'updatemember(Time.[Week]={,\"'+ StartBucketSP +'\"},[Time].[W Solver Start Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n        queryModule.update(SetPropertyStartBucket);\r\n            \r\n        var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[W Plan End Bucket] = \"'+ EndBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n        queryModule.update(SetEndBucket);\r\n            \r\n        var SetPropertyEndBucket = 'updatemember(Time.[Week]={,\"'+ EndBucketSP +'\"},[Time].[W Solver End Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n        queryModule.update(SetPropertyEndBucket);      \r\n    }\r\n    else if (Solution == \"OP_MEIO\") {\r\n        var ExistingStartBucketTemp ='SELECT &DailySolverStartBucket.element(0).Name;';\t\r\n        var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n        if(lsResponse !== null){\r\n        var ExistingStartBucket = lsResponse.Result;\r\n        // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n        else{\r\n        var ExistingStartBucket = null;\r\n        // Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);\r\n        }\r\n    \r\n        var ExistingEndBucketTemp ='SELECT &DailySolverEndBucket.element(0).Name;';\t\r\n        var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n        if(lsResponse2 !== null){\r\n        var ExistingEndBucket = lsResponse2.Result;\r\n        // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n        else{\r\n        var ExistingEndBucket = null;\r\n        // Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);\r\n        }\r\n\r\n        if(ExistingStartBucket !== null){\r\n            var NullExisitingStartBucket = 'updatemember(Time.[Day]={,\"'+ ExistingStartBucket +'\"},[Time].[D Solver Start Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n            queryModule.update(NullExisitingStartBucket);\r\n        }\r\n        \r\n        if(ExistingEndBucket !== null){\r\n            var NullExisitingEndBucket = 'updatemember(Time.[Day]={,\"'+ ExistingEndBucket +'\"},[Time].[D Solver End Bucket]={NULL,});';\r\n            // Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n            queryModule.update(NullExisitingEndBucket);\r\n        }\r\n\r\n        var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan Start Bucket] = \"'+ StartBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n        queryModule.update(SetStartBucket);\r\n    \r\n        var SetPropertyStartBucket = 'updatemember(Time.[Day]={,\"'+ StartBucketSP +'\"},[Time].[D Solver Start Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n        queryModule.update(SetPropertyStartBucket);\r\n    \r\n        var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[D Plan End Bucket] = \"'+ EndBucketSP +'\" ; end scope;';\r\n        // Log.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n        queryModule.update(SetEndBucket);\r\n\t\r\n\t    var SetPropertyEndBucket = 'updatemember(Time.[Day]={,\"'+ EndBucketSP +'\"},[Time].[D Solver End Bucket]={\"1\",});';\r\n        // Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n        queryModule.update(SetPropertyEndBucket);\r\n    }\r\n    else {\r\n        Log.Info(\"StartedBucket ... \");\r\n\t    var ExistingStartBucketTemp ='SELECT &MonthlySolverStartBucket.element(0).Name;';\t\r\n\t    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\t    if(lsResponse !== null){\r\n\t        var ExistingStartBucket = lsResponse.Result;\r\n\t        Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\t    else{\r\n\t        var ExistingStartBucket = null;\r\n\t        Log.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\t\r\n\t    Log.Info(\"EndBucket ... \");\r\n\t    var ExistingEndBucketTemp ='SELECT &MonthlySolverEndBucket.element(0).Name;';\t\r\n\t    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\t    if(lsResponse2 !== null){\r\n\t        var ExistingEndBucket = lsResponse2.Result;\r\n\t        Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t    else{\r\n\t        var ExistingEndBucket = null;\r\n\t        Log.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\t\r\n\t    if(ExistingStartBucket !== null){\r\n\t    var NullExisitingStartBucket = 'updatemember(Time.[Month]={,\"'+ ExistingStartBucket +'\"},[Time].[M Solver Start Bucket]={NULL,});';\r\n\t    Log.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket); \r\n        queryModule.update(NullExisitingStartBucket);}\r\n\t\r\n\t    if(ExistingEndBucket !== null){\r\n\t    var NullExisitingEndBucket = 'updatemember(Time.[Month]={,\"'+ ExistingEndBucket +'\"},[Time].[M Solver End Bucket]={NULL,});';\r\n\t    Log.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket); \r\n        queryModule.update(NullExisitingEndBucket);}\r\n\t\r\n        var SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan Start Bucket] = \"'+ StartBucketSP +'\" ; end scope;';\r\n        Log.Info(\"SetStartBucket ... \" + SetStartBucket); \r\n        queryModule.update(SetStartBucket);\r\n        \r\n        var SetPropertyStartBucket = 'updatemember(Time.[Month]={,\"'+ StartBucketSP +'\"},[Time].[M Solver Start Bucket]={\"1\",});';\r\n        Log.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket); \r\n        queryModule.update(SetPropertyStartBucket);\r\n        \r\n        var SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan End Bucket] = \"'+ EndBucketSP +'\" ; end scope;';\r\n        Log.Info(\"SetEndBucket ... \" + SetEndBucket); \r\n        queryModule.update(SetEndBucket);\r\n        \r\n        var SetPropertyEndBucket = 'updatemember(Time.[Month]={,\"'+ EndBucketSP +'\"},[Time].[M Solver End Bucket]={\"1\",});';\r\n        Log.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket); \r\n        queryModule.update(SetPropertyEndBucket);\r\n    \r\n    }\r\n\r\n\r\n    // Populating Last Cycle Actuals and Historical Forecast\r\n    Log.Info(\"Populating Last Cycle Actuals and Historical Forecast\");\r\n    var queryForLastCycleHistorical = 'scope:(&IOHistoricalHorizon *[Version].[Version Name].['+ Version +'] * [Item].[Item] * [Location].[Location] * [Sales Domain].[Customer Group].filter(#.Name in {\"DependentDemand\"})); Measure.[IO Historical Forecast LC] = Measure.[IO Historical Forecast]; Measure.[IO Actual Shipments Historical LC] = Measure.[IO Actual Shipments Historical];end scope;';\r\n    queryModule.update(queryForLastCycleHistorical);\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Fetching Existing Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    var ExistingStartBucketTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Start Bucket - \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Start Bucket\");}\r\n\r\n    var ExistingEndBucketTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing End Bucket - \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing End Bucket\");}\r\n\r\n    var ExistingStartBucketHistoricalTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOStartBucketHistorical]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketHistoricalTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucketHistorical = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Start Bucket Historical -  \" + ExistingStartBucketHistorical);}\r\n    else{\r\n    var ExistingStartBucketHistorical = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Start Bucket Historical\");}\r\n\r\n    var ExistingEndBucketHistoricalTemp ='SELECT Time.[IO Planning Bucket].filter(#.[IOEndBucketHistorical]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketHistoricalTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucketHistorical = lsResponse2.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing End Bucket Historical - \" + ExistingEndBucketHistorical);}\r\n    else{\r\n    var ExistingEndBucketHistorical = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing End Bucket Historical\");}\r\n\r\n    var ExistingPlanningCycleStartBucketTemp ='SELECT [Planning Cycle].[Planning Cycle].filter(#.[PlanningCycleStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingPlanningCycleStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingPlanningCycleStartBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Planning Cycle Start Bucket - \" + ExistingPlanningCycleStartBucket);}\r\n    else{\r\n    var ExistingPlanningCycleStartBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Planning Cycle Start Bucket\");}\r\n\r\n    var ExistingPlanningCycleEndBucketTemp ='SELECT [Planning Cycle].[Planning Cycle].filter(#.[PlanningCycleEndBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingPlanningCycleEndBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingPlanningCycleEndBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Planning Cycle End Bucket - \" + ExistingPlanningCycleEndBucketTemp);}\r\n    else{\r\n    var ExistingPlanningCycleEndBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Planning Cycle End Bucket\");}\r\n\r\n    var ExistingPlanningCycleCurrentBucketTemp ='SELECT [Planning Cycle].[Planning Cycle].filter(#.[PlanningCycleCurrentBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingPlanningCycleCurrentBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingPlanningCycleCurrentBucket = lsResponse.Result;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Existing Planning Cycle Current Bucket - \" + ExistingPlanningCycleCurrentBucket);}\r\n    else{\r\n    var ExistingPlanningCycleCurrentBucket = null;\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Existing Planning Cycle Current Bucket\");}\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Nulling Out Existing Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    //Nulling Out Existing Dates\r\n    if(ExistingStartBucket !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Start Bucket\");\r\n    var NullExisitingStartBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingStartBucket +'\"},[Time].[IOStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing End Bucket\");\r\n    var NullExisitingEndBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingEndBucket +'\"},[Time].[IOEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n    if(ExistingStartBucketHistorical !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Start Bucket Historical\");\r\n    var NullExisitingStartBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingStartBucketHistorical +'\"},[Time].[IOStartBucketHistorical]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucketHistorical);}\r\n\r\n    if(ExistingEndBucketHistorical !== null){\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing End Bucket Historical\");\r\n    var NullExisitingEndBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ ExistingEndBucketHistorical +'\"},[Time].[IOEndBucketHistorical]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucketHistorical);}\r\n\r\n    if(ExistingPlanningCycleEndBucket !== null){\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Planning Cycle End Bucket\");\r\n    var NullExistingPlanningCycleEndBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ ExistingPlanningCycleEndBucket +'\"},[Planning Cycle].[PlanningCycleEndBucket]={NULL,});';\r\n    queryModule.update(NullExistingPlanningCycleEndBucket);}\r\n\r\n    if(ExistingPlanningCycleCurrentBucket !== null){\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Planning Cycle Current Bucket\");\r\n    var NullExistingPlanningCycleCurrentBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ ExistingStartBucket +'\"},[Planning Cycle].[PlanningCycleCurrentBucket]={NULL,});';\r\n    queryModule.update(NullExistingPlanningCycleCurrentBucket);}\r\n\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Updating New Horizon\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Historical Start Bucket - \" + StartBucketHistorical);\r\n    var SetPropertyStartBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ StartBucketHistorical +'\"},[Time].[IOStartBucketHistorical]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucketHistorical);\r\n\r\n    var SetStartBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning Start Bucket Historical] = \"'+ StartBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetStartBucketHistorical);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Historical End Bucket - \" + EndBucketHistorical);\r\n    var SetPropertyEndBucketHistorical = 'updatemember(Time.[IO Planning Bucket]={,\"'+ EndBucketHistorical +'\"},[Time].[IOEndBucketHistorical]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucketHistorical);\r\n\r\n    var SetEndBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning End Bucket Historical] = \"'+ EndBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetEndBucketHistorical);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Start Bucket - \" + StartBucket);\r\n    var SetPropertyStartBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ StartBucket +'\"},[Time].[IOStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    queryModule.update(SetStartBucket);\r\n\r\n    if (!disableplan){\r\n    \tLog.Info(\"Enabling Plan....\");\r\n    \tvar enable = 'Enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning End Bucket - \" + EndBucket);\r\n    var SetPropertyEndBucket = 'updatemember(Time.[IO Planning Bucket]={,\"'+ EndBucket +'\"},[Time].[IOEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[IO Planning End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    queryModule.update(SetEndBucket);\r\n\r\n    if(ExistingPlanningCycleStartBucket === null){\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Cycle Start Bucket - \" + StartBucketHistorical);\r\n        var SetPlanningCycleStartBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ StartBucketHistorical +'\"},[Planning Cycle].[PlanningCycleStartBucket]={\"1\",});';\r\n        queryModule.update(SetPlanningCycleStartBucket);\r\n    }\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Cycle End Bucket - \" + EndBucketHistorical);\r\n    var SetPlanningCycleEndBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ EndBucketHistorical +'\"},[Planning Cycle].[PlanningCycleEndBucket]={\"1\",});';\r\n    queryModule.update(SetPlanningCycleEndBucket);\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Cycle Current Bucket - \" + StartBucket);\r\n    var SetPlanningCycleCurrentBucket = 'updatemember([Planning Cycle].[Planning Cycle]={,\"'+ StartBucket +'\"},[Planning Cycle].[PlanningCycleCurrentBucket]={\"1\",});';\r\n    queryModule.update(SetPlanningCycleCurrentBucket);\r\n\r\n    if(disableplan){\r\n        Log.Info(\"[MEIO-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n        var enable = 'Enable plan;';\r\n        queryModule.update(enable);\r\n    }\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing IO Planning Horizon Association\");\r\n    var NullExistingIOPlanningHorizonAssoc = 'scope:(Time.[IO Planning Bucket].except(&IOPlanningHorizon) *  &CWVAndScenarios); Measure.[IO Planning Horizon Association] = Null; end scope;'\r\n    queryModule.update(NullExistingIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Horizon Association\");\r\n    var SetIOPlanningHorizonAssoc = 'cartesian scope:(&IOPlanningHorizon * &CWVAndScenarios); Measure.[IO Planning Horizon Association] = 1; end scope;'\r\n    queryModule.update(SetIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Planning Horizon Length\");\r\n    var GetPlanningHorizonLength = 'cartesian scope:(&CWVAndScenarios); Measure.[IO Planning Horizon Length] = Measure.[IO Planning Horizon Association]; end scope;'\r\n    queryModule.update(GetPlanningHorizonLength);\r\n\r\n\r\n    Log.Info(\"[MEIO-CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    var disable = 'disable plan;';\r\n    queryModule.update(disable);\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Time Group Procedure Start\");\r\n    var TimeGroupSlicing = 'exec procedure MEIOTimeGroupSlicing {\"Version\" : \"'+ Version +'\"};'\r\n    queryModule.update(TimeGroupSlicing);\r\n\r\n    Log.Info(\"[MEIO-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n    var enable = 'Enable plan;';\r\n    queryModule.update(enable);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Current Bucket Association\");\r\n    var NullExistingCurrentBucketAssociation = 'DELETE DATA FOR MODEL [004.007 MEIO Current Bucket Association] WHERE {&CWVAndScenarios};'\r\n    queryModule.update(NullExistingCurrentBucketAssociation);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Current Bucket Association\");\r\n    var SetIOCurrentBucketAssociation = 'cartesian scope:(&CWVAndScenarios * [Planning Cycle].[Planning Cycle].['+ StartBucket +']); Measure.[IO Current Bucket Association] = 1; end scope;'\r\n    queryModule.update(SetIOCurrentBucketAssociation);\r\n\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Null Existing Bucket Length in Days\");\r\n    var NullExistingBucketLengthinDays = 'scope:([Version].[Version Name].[CurrentWorkingView] * [Time].[Planning Year].except(&IOPlanningHorizon.relatedmembers([Planning Year])).relatedmembers([Day]));Measure.[IO Bucket Length Days] = Null;end scope;'\r\n    queryModule.update(NullExistingBucketLengthinDays);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Bucket Length in Days\");\r\n    var SetIOBucketLengthDays = 'cartesian scope:(&CWVAndScenarios * &IOPlanningHorizon.relatedmembers([Planning Year]).relatedmembers([Day]));Measure.[IO Bucket Length Days] = 1;end scope;'\r\n    queryModule.update(SetIOBucketLengthDays);\r\n\r\n\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Set Global Bucket Length\");\r\n    var SetIOBucketLength = 'scope: (&CWVAndScenarios * &IOPlanningHorizon);Measure.[IO Bucket Length] = Measure.[IO Bucket Length Days];end scope;'\r\n    queryModule.update(SetIOBucketLength);\r\n\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = \"Failed while Calculating Incremental Historical Bucket\"; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    // Querying Planning End Bucket Historical for Last Run\r\n    var queryEndBucketHistoricalLastRun = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[IO Planning End Bucket Historical for Last Run]});';\r\n    var lsResponse = queryModule.select(queryEndBucketHistoricalLastRun);\r\n\tdatacellsetEndBucketHistoricalLastRun = cellsetModule.createCellSet(lsResponse);\r\n    var EndBucketHistoricalLastRun = datacellsetEndBucketHistoricalLastRun.row(0).cell(datacellsetEndBucketHistoricalLastRun.measureColumnIndex('IO Planning End Bucket Historical for Last Run'));\r\n    Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => EndBucketHistoricalLastRun : \" + EndBucketHistoricalLastRun);\r\n    if (EndBucketHistoricalLastRun === undefined || EndBucketHistoricalLastRun ===null) {\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => No Incremental Bucket Found\");\r\n\t}\r\n    else {\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical for Last Run : \" + EndBucketHistoricalLastRun.toString().toLowerCase());\r\n\r\n        // // Querying Planning End Bucket Historical Run Key\r\n        // EndBucketHistoricalKey ='SELECT [Time].[IO Planning Bucket].['+EndBucketHistorical+'].Key;';\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical Key: \" + EndBucketHistoricalKey.toString().toLowerCase());\r\n        // lsResponse = queryModule.select(EndBucketHistoricalKey);\r\n        // EndBucketHistoricalTimeStamp = lsResponse.Result;\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical Time-Stamp: \" + EndBucketHistoricalTimeStamp.toString().toLowerCase());\r\n\r\n        // // Querying Planning End Bucket Historical for Last Run Key\r\n        // EndBucketHistoricalLastRunKey ='SELECT [Time].[IO Planning Bucket].['+EndBucketHistoricalLastRun+'].Key;';\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical Last Run Key: \" + EndBucketHistoricalLastRunKey.toString().toLowerCase());\r\n        // lsResponse = queryModule.select(EndBucketHistoricalLastRunKey);\r\n        // EndBucketHistoricalLastRunTimeStamp = lsResponse.Result;\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical LastRun Time-Stamp: \" + EndBucketHistoricalLastRunTimeStamp.toString().toLowerCase());\r\n\r\n        // // Querying Bucket Length\r\n        // var queryBucketLength = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[IO Bucket Length]});';\r\n        // var lsResponse = queryModule.select(queryBucketLength);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Query for Bucket Length : \" + queryBucketLength);\r\n        // datacellsetBucketLength = cellsetModule.createCellSet(lsResponse);\r\n        // var bucketLength = datacellsetBucketLength.row(0).cell(datacellsetBucketLength.measureColumnIndex('IO Bucket Length'));\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Bucket Length : \" + bucketLength.toString().toLowerCase());\r\n\r\n        // // Finding out the difference in the Last Run End Bucket and Current Run End Bucket\r\n        // const EndBucketHistoricalDate = new Date (EndBucketHistoricalTimeStamp);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical: \" + EndBucketHistoricalDate.toString().toLowerCase());\r\n        // const EndBucketHistoricalLastRunDate = new Date (EndBucketHistoricalLastRunTimeStamp);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => End Bucket Historical for Last Run : \" + EndBucketHistoricalLastRunDate.toString().toLowerCase());\r\n        // const diffTime = Math.abs(EndBucketHistoricalDate - EndBucketHistoricalLastRunDate);\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Diff Time from Last Run : \" + diffTime.toString().toLowerCase());\r\n        // const diffBuckets = Math.abs(diffTime / (1000*60*60*24*bucketLength));\r\n        // Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Diff Buckets from Last Run : \" + diffBuckets.toString().toLowerCase());\r\n\r\n        const queryBucketCount = '(SELECT (&IOHistoricalHorizon.filter((#.Key > [Time].[IO Planning Bucket].[' + EndBucketHistoricalLastRun + '].Key) && (#.Key <= [Time].[IO Planning Bucket].[' + EndBucketHistorical + '].Key)))).count;';\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Query for Bucket Count: \" + queryBucketCount.toLowerCase());\r\n\r\n        var lsResponse = queryModule.select(queryBucketCount);\r\n        var diffBuckets = lsResponse.Result;\r\n        Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Diff Buckets: \" + diffBuckets.toString().toLowerCase());\r\n\r\n\r\n        // Refreshing Incremental Bucket Association\r\n        var deleteForIncrementalHorizonBucketsAssociation = 'Delete Data for Model [003.028MEIO Incremental Historical Horizon Buckets] where {[Version].[Version Name].[' + Version + '], Step.[Step Number].[Incremental Historical Horizon]};';\r\n        queryModule.update(deleteForIncrementalHorizonBucketsAssociation);\r\n\r\n        if (diffBuckets>0) {\r\n            Log.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Populating Number of Buckets for Incremental Historical Horizon\");\r\n            var queryForPopulatingForecastAndActuals = 'cartesian scope: ([Version].[Version Name].filter(#.Name in {\"' + Version + '\"}) * [Step].[Step Number].filter(#.Name in {\"Incremental Historical Horizon\"})); Measure.[IO Incremental Historical Horizon Buckets Association] = \"'+diffBuckets+'\"; end scope;';\r\n            queryModule.update(queryForPopulatingForecastAndActuals);\r\n        }\r\n    }\r\n    // Updating Remarks for Homepage Tasks Status\r\n    var queryForTaskRemarks = 'cartesian scope: (Version.[Version Name].['+ Version +'] * Step.[Step Number].[Remarks]); Measure.[IO Status Set Planning Horizon] = Null; end scope;';\r\n    queryModule.update(queryForTaskRemarks);\r\n\r\n    var queryForFunctionalTaskEnd = 'exec procedure MEIOFunctionalTaskEnd {\"Version\" : \"' + Version + '\", \"PlanningHorizon\": true, \"CreateNetwork\":false, \"ValidateNetwork\":false, \"CalculateWMAPE\":false, \"CoreRun\":false, \"ApprovePublishTargets\":false, \"GenerateStats\":false, \"PlanningPolicy\":false, \"RunSegmentation\":false, \"ISLORun\":false, \"GSLOBORun\":false,\"GenFutureDepDemand\":false};';\r\n    Log.Info(\"[MEIO Solver JS] => query formed: \" + queryForFunctionalTaskEnd);\r\n    queryModule.update(queryForFunctionalTaskEnd);\r\n\r\n    var message = 'MEIO planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    updateDDMRPPlanningParameters = function(StartBucket , EndBucket ,StartBucketHistorical , EndBucketHistorical ,FutureStartBucket, FutureEndBucket, Version){\r\n\r\n    // Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    // var disable = 'Disable plan;';\r\n    // queryModule.update(disable);\r\n\r\n    var ExistingStartBucketTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucket = lsResponse.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing Start Bucket - \" + ExistingStartBucket);}\r\n    else{\r\n    var ExistingStartBucket = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing Start Bucket\");}\r\n\r\n    var ExistingEndBucketTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucket = lsResponse2.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing End Bucket - \" + ExistingEndBucket);}\r\n    else{\r\n    var ExistingEndBucket = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing End Bucket\");}\r\n\r\n    var ExistingStartBucketHistoricalTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPHistoricalPeriodStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketHistoricalTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucketHistorical = lsResponse.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing Start Bucket Historical -  \" + ExistingStartBucketHistorical);}\r\n    else{\r\n    var ExistingStartBucketHistorical = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing Start Bucket Historical\");}\r\n\r\n    var ExistingEndBucketHistoricalTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPHistoricalPeriodEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketHistoricalTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucketHistorical = lsResponse2.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing End Bucket Historical - \" + ExistingEndBucketHistorical);}\r\n    else{\r\n    var ExistingEndBucketHistorical = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing End Bucket Historical\");}\r\n\r\n    var ExistingStartBucketFutureTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPFuturePeriodStartBucket]== 1).first.Name;';\r\n    var lsResponse = queryModule.select(ExistingStartBucketFutureTemp);\r\n    if(lsResponse !== null){\r\n    var ExistingStartBucketFuture = lsResponse.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing Start Bucket Future -  \" + ExistingStartBucketFuture);}\r\n    else{\r\n    var ExistingStartBucketFuture = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing Start Bucket Future\");}\r\n\r\n    var ExistingEndBucketFutureTemp ='SELECT Time.[DDMRP Planning Bucket].filter(#.[DDMRPFuturePeriodEndBucket]== 1).first.Name;';\r\n    var lsResponse2 = queryModule.select(ExistingEndBucketFutureTemp);\r\n    if(lsResponse2 !== null){\r\n    var ExistingEndBucketFuture = lsResponse2.Result;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Existing End Bucket Future - \" + ExistingEndBucketFuture);}\r\n    else{\r\n    var ExistingEndBucketFuture = null;\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => No Existing End Bucket Future\");}\r\n\r\n    //Nulling Out Existing Dates\r\n    if(ExistingStartBucket !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Start Bucket\");\r\n    var NullExisitingStartBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingStartBucket +'\"},[Time].[DDMRPStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n    if(ExistingEndBucket !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing End Bucket\");\r\n    var NullExisitingEndBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingEndBucket +'\"},[Time].[DDMRPEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n    if(ExistingStartBucketHistorical !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Start Bucket Historical\");\r\n    var NullExisitingStartBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingStartBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucketHistorical);}\r\n\r\n    if(ExistingEndBucketHistorical !== null){\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing End Bucket Historical\");\r\n    var NullExisitingEndBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingEndBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucketHistorical);}\r\n\r\n    if(ExistingStartBucketFuture !== null){\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Start Bucket Future\");\r\n    var NullExisitingStartBucketFuture = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingStartBucketFuture +'\"},[Time].[DDMRPFuturePeriodStartBucket]={NULL,});';\r\n    queryModule.update(NullExisitingStartBucketFuture);}\r\n\r\n    if(ExistingEndBucketFuture !== null){\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing End Bucket Future\");\r\n    var NullExisitingEndBucketFuture = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ ExistingEndBucketFuture +'\"},[Time].[DDMRPFuturePeriodEndBucket]={NULL,});';\r\n    queryModule.update(NullExisitingEndBucketFuture);}\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Historical Start Bucket - \" + StartBucketHistorical);\r\n    var SetPropertyStartBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ StartBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucketHistorical);\r\n\r\n    var SetStartBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning Start Bucket Historical] = \"'+ StartBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetStartBucketHistorical);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Historical End Bucket - \" + EndBucketHistorical);\r\n    var SetPropertyEndBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ EndBucketHistorical +'\"},[Time].[DDMRPHistoricalPeriodEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucketHistorical);\r\n\r\n    var SetEndBucketHistorical = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning End Bucket Historical] = \"'+ EndBucketHistorical +'\" ; end scope;';\r\n    queryModule.update(SetEndBucketHistorical);\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Future Start Bucket - \" + FutureStartBucket);\r\n    var SetPropertyStartBucketFuture = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ FutureStartBucket +'\"},[Time].[DDMRPFuturePeriodStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucketFuture);\r\n\r\n    var SetStartBucketFuture = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning Start Bucket Future] = \"'+ FutureStartBucket +'\" ; end scope;';\r\n    queryModule.update(SetStartBucketFuture);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Future End Bucket - \" + FutureEndBucket);\r\n    var SetPropertyEndBucketHistorical = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ FutureEndBucket +'\"},[Time].[DDMRPFuturePeriodEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucketHistorical);\r\n\r\n    var SetEndBucketFuture = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning End Bucket Future] = \"'+ FutureEndBucket +'\" ; end scope;';\r\n    queryModule.update(SetEndBucketFuture);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning Start Bucket - \" + StartBucket);\r\n    var SetPropertyStartBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ StartBucket +'\"},[Time].[DDMRPStartBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n    var SetStartBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n    queryModule.update(SetStartBucket);\r\n\r\n    if (!disableplan){\r\n    \tLog.Info(\"Enabling Plan....\");\r\n    \tvar enable = 'Enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning End Bucket - \" + EndBucket);\r\n    var SetPropertyEndBucket = 'updatemember(Time.[DDMRP Planning Bucket]={,\"'+ EndBucket +'\"},[Time].[DDMRPEndBucket]={\"1\",});';\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var SetEndBucket = 'Cartesian scope:( &CWVAndScenarios ); Measure.[DDMRP Planning End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n    queryModule.update(SetEndBucket);\r\n\r\n\r\n    if(disableplan){\r\n        Log.Info(\"[DDMRP-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n        var enable = 'Enable plan;';\r\n        queryModule.update(enable);\r\n    }\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing IO Planning Horizon Association\");\r\n    var NullExistingIOPlanningHorizonAssoc = 'scope:(Time.[DDMRP Planning Bucket].except(&DDMRPPlanningHorizon) *  &CWVAndScenarios); Measure.[DDMRP Planning Horizon Association] = Null; end scope;'\r\n    queryModule.update(NullExistingIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning Horizon Association\");\r\n    var SetIOPlanningHorizonAssoc = 'cartesian scope:(&DDMRPPlanningHorizon * &CWVAndScenarios); Measure.[DDMRP Planning Horizon Association] = 1; end scope;'\r\n    queryModule.update(SetIOPlanningHorizonAssoc);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Planning Horizon Length\");\r\n    var GetPlanningHorizonLength = 'cartesian scope:(&CWVAndScenarios); Measure.[DDMRP Planning Horizon Length] = Measure.[DDMRP Planning Horizon Association]; end scope;'\r\n    queryModule.update(GetPlanningHorizonLength);\r\n\r\n\r\n    Log.Info(\"[DDMRP-CommonSolverStartAndEndDate JS] => Disabling Plan....\");\r\n    var disable = 'disable plan;';\r\n    queryModule.update(disable);\r\n\r\n    // if(NumberOfBuckets != 1){\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Time Group Procedure Start\");\r\n    var TimeGroupSlicing = 'exec procedure DDMRPTimeGroupSlicing {\"Version\" : \"'+ Version +'\"};'\r\n    queryModule.update(TimeGroupSlicing);\r\n    // }\r\n\r\n    Log.Info(\"[DDMRP-CommonSolverStartAndEndDate JS] => Enabling Plan....\");\r\n    var enable = 'Enable plan;';\r\n    queryModule.update(enable);\r\n\r\n\r\n    Log.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Null Existing Bucket Length in Days\");\r\n    var NullExistingBucketLengthinDays = 'DELETE DATA FOR MODEL [001.019DDMRP Plugin Inputs Bucket Length in Days] WHERE {&CWVAndScenarios};'\r\n    queryModule.update(NullExistingBucketLengthinDays);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Bucket Length in Days\");\r\n    var SetDDMRPBucketLengthDays = 'cartesian scope:(&CWVAndScenarios * &DDMRPPlanningHorizon.relatedmembers([Planning Year]).relatedmembers([Day]));Measure.[DDMRP Bucket Length Days] = 1;end scope;'\r\n    queryModule.update(SetDDMRPBucketLengthDays);\r\n\r\n\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Set Global Bucket Length\");\r\n    var SetDDMRPBucketLength = 'scope: (&CWVAndScenarios * &DDMRPPlanningHorizon);Measure.[DDMRP Bucket Length] = Measure.[DDMRP Bucket Length Days];end scope;'\r\n    queryModule.update(SetDDMRPBucketLength);\r\n\r\n\r\n    var message = 'DDMRP planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n\tupdateMonthlyPlanningParameters = function(CurrentBucket , StartBucket , EndBucket , Version){\r\n\tLog.Info(\"StartedBucket ... \");\r\n\tvar ExistingStartBucketTemp ='SELECT &MonthlySolverStartBucket.element(0).Name;';\r\n\tvar lsResponse = queryModule.select(ExistingStartBucketTemp);\r\n\tif(lsResponse !== null){\r\n\tvar ExistingStartBucket = lsResponse.Result;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\telse{\r\n\tvar ExistingStartBucket = null;\r\n\tLog.Info(\"ExistingStartBucket ... \" + ExistingStartBucket);}\r\n\r\n\tLog.Info(\"EndBucket ... \");\r\n\tvar ExistingEndBucketTemp ='SELECT &MonthlySolverEndBucket.element(0).Name;';\r\n\tvar lsResponse2 = queryModule.select(ExistingEndBucketTemp);\r\n\tif(lsResponse2 !== null){\r\n\tvar ExistingEndBucket = lsResponse2.Result;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\telse{\r\n\tvar ExistingEndBucket = null;\r\n\tLog.Info(\"ExistingEndBucket ... \" + ExistingEndBucket);}\r\n\r\n    Log.Info(\"CurrentBucket ... \");\r\n\tvar ExistingCurrentBucketTemp ='SELECT &MonthlySolverCurrentBucket.element(0).Name;';\r\n\tvar lsResponse3 = queryModule.select(ExistingCurrentBucketTemp);\r\n\tif(lsResponse3 !== null){\r\n\tvar ExistingCurrentBucket = lsResponse3.Result;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\telse {\r\n\tvar ExistingCurrentBucket = null;\r\n\tLog.Info(\"ExistingCurrentBucket ... \" + ExistingCurrentBucket);}\r\n\r\n\tif(ExistingStartBucket !== null){\r\n\tvar NullExisitingStartBucket = 'updatemember(Time.[Month]={,\"'+ ExistingStartBucket +'\"},[Time].[M Solver Start Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingStartBucket ... \" + NullExisitingStartBucket);\r\n    queryModule.update(NullExisitingStartBucket);}\r\n\r\n\tif(ExistingEndBucket !== null){\r\n\tvar NullExisitingEndBucket = 'updatemember(Time.[Month]={,\"'+ ExistingEndBucket +'\"},[Time].[M Solver End Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingEndBucket ... \" + NullExisitingEndBucket);\r\n    queryModule.update(NullExisitingEndBucket);}\r\n\r\n\tif(ExistingCurrentBucket !== null){\r\n\tvar NullExisitingCurrentBucket = 'updatemember(Time.[Month]={,\"'+ ExistingCurrentBucket +'\"},[Time].[M Solver Current Bucket]={NULL,});';\r\n\tLog.Info(\"NullExisitingCurrentBucket ... \" + NullExisitingCurrentBucket);\r\n    queryModule.update(NullExisitingCurrentBucket);}\r\n\r\n\tvar SetCurrentBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan Current Bucket] = \"'+ CurrentBucket +'\"; end scope;';\r\n\tLog.Info(\"SetCurrentBucket ... \" + SetCurrentBucket);\r\n    queryModule.update(SetCurrentBucket);\r\n\r\n\tvar SetPropertyCurrentBucket = 'updatemember(Time.[Month]={,\"'+ CurrentBucket +'\"},[Time].[M Solver Current Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyCurrentBucket ... \" + SetPropertyCurrentBucket);\r\n    queryModule.update(SetPropertyCurrentBucket);\r\n\r\n\tvar SetStartBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan Start Bucket] = \"'+ StartBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetStartBucket ... \" + SetStartBucket);\r\n    queryModule.update(SetStartBucket);\r\n\r\n\tvar SetPropertyStartBucket = 'updatemember(Time.[Month]={,\"'+ StartBucket +'\"},[Time].[M Solver Start Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyStartBucket ... \" + SetPropertyStartBucket);\r\n    queryModule.update(SetPropertyStartBucket);\r\n\r\n\tvar SetEndBucket = 'Cartesian scope:( [Version].[Version Name].['+ Version +'] ); Measure.[M Plan End Bucket] = \"'+ EndBucket +'\" ; end scope;';\r\n\tLog.Info(\"SetEndBucket ... \" + SetEndBucket);\r\n    queryModule.update(SetEndBucket);\r\n\r\n\tvar SetPropertyEndBucket = 'updatemember(Time.[Month]={,\"'+ EndBucket +'\"},[Time].[M Solver End Bucket]={\"1\",});';\r\n\tLog.Info(\"SetPropertyEndBucket ... \" + SetPropertyEndBucket);\r\n    queryModule.update(SetPropertyEndBucket);\r\n\r\n    var message = 'Monthly planning parameters updated';\r\n    return message;\r\n    }\r\n\r\n    if (disableplan){\r\n\r\n\t\tLog.Info(\"Disable Plan....\");\r\n\t\tvar disable = 'disable plan;';\r\n\t\tqueryModule.update(disable);\r\n\t}\r\n\r\n    if(Solution == \"MP\"){\r\n        Log.Info(\"Master Planning parameters Update started\");\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        CurrentBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n        Log.Info('Current Bucket is ' +CurrentBucket);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        status = updateMasterPlanningParameters(CurrentBucket , StartBucket , EndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n    else if (Solution == \"OP\"){\r\n        Log.Info(\"Daily Planning parameters Update started\");\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\t\tvar DeploymentEndDate = parsedParams.DeploymentEndDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n\t\tDeploymentEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+DeploymentEndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Deployment End Bucket is ' +DeploymentEndBucket);\r\n\r\n\r\n        status = updateDailyPlanningParameters(CurrentDay , StartBucket , EndBucket , DeploymentEndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n    else if (Solution == \"TLB\"){\r\n        Log.Info(\"TLB Planning parameters Update started\");\r\n\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n\r\n        status = updateTLBPlanningParameters(StartBucket , EndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n\r\n\telse if (Solution == \"IOP\"){\r\n        Log.Info(\"Daily Planning parameters Update started\");\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        status = updateIOPPlanningParameters(CurrentDay , StartBucket , EndBucket, Version);\r\n        Log.Info(status);\r\n    }\r\n\r\n\r\n    else if (Solution == \"MP_MEIO\" || Solution == \"OP_MEIO\"){\r\n        Log.Info(\"MEIO Planning parameters Update started\");\r\n\t\tLog.Info(\"[MEIO CommonSolverStartAndEndDate JS] => Disable Plan is \" + disableplan);\r\n\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n        var HistoricalStartDate = parsedParams.HistoricalStartDate;\r\n        var HistoricalEndDate = parsedParams.HistoricalEndDate;\r\n\r\n        if(Solution == \"MP_MEIO\"){\r\n            StartBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n            // Log.Info('Start Bucket is ' +StartBucketSP);\r\n\r\n            EndBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([Week]).element(0).Name;').Result;\r\n            // Log.Info('End Bucket is ' +EndBucketSP);\r\n        }\r\n        else {\r\n            StartBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).element(0).Name;').Result;\r\n            // Log.Info('Start Bucket is ' +StartBucketSP);\r\n\r\n            EndBucketSP = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).element(0).Name;').Result;\r\n            // Log.Info('End Bucket is ' +EndBucketSP);\r\n        }\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        HistoricalStartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalStartDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalStartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        HistoricalEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalEndDate+'\\\")).relatedmembers([IO Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalEndBucket);\r\n\r\n        status = updateMEIOPlanningParameters(StartBucketSP,EndBucketSP,StartBucket , EndBucket ,HistoricalStartBucket , HistoricalEndBucket , Version);\r\n        Log.Info(status);\r\n    }\r\n\r\n    else if (Solution == \"DDMRP\"){\r\n        Log.Info(\"DDMRP Planning parameters Update started\");\r\n\t\tLog.Info(\"[DDMRP CommonSolverStartAndEndDate JS] => Disable Plan is \" + disableplan);\r\n\r\n        // var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        // var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n        var HistoricalStartDate = parsedParams.HistoricalStartDate;\r\n        var HistoricalEndDate = parsedParams.HistoricalEndDate;\r\n        var FutureStartDate = parsedParams.FutureStartDate;\r\n        var FutureEndDate = parsedParams.FutureEndDate;\r\n\r\n        var queryforNumberOfBuckets = 'Select ([Version].[Version Name].[' + Version + '] ) on row, ({Measure.[DDMRP Number of Planning Buckets for Buffer Profiling]}) on column;'\r\n        var lsResponse = queryModule.select(queryforNumberOfBuckets);\r\n        var datacellsetforNumberOfBuckets = cellsetModule.createCellSet(lsResponse);\r\n        var NumberOfBuckets = datacellsetforNumberOfBuckets.row(0).cell(datacellsetforNumberOfBuckets.measureColumnIndex('DDMRP Number of Planning Buckets for Buffer Profiling'));\r\n        Log.Info('Number Of Buckets ' +NumberOfBuckets);\r\n\r\n        var lsresponseforstartdate =  queryModule.select('select (&CurrentDay);');\r\n        var datacellsetforstartdate = cellsetModule.createCellSet(lsresponseforstartdate);\r\n        var stdate =  datacellsetforstartdate.row(0).cell(datacellsetforstartdate.memberColumnIndex('Time','Day'));\r\n        var StartdateName = stdate.Name\r\n        Log.Info(\"Start date ... \" + StartdateName);\r\n\r\n        if(NumberOfBuckets === null){\r\n            RuleOutputToUI = {Status: 'Error',Message: 'Number of Planning Buckets for Buffer Profiling is Null'};\r\n            return;\r\n        }\r\n        else{\r\n            var NumberOfBucketsminusone = NumberOfBuckets -1;\r\n            var lsresponseforenddate = queryModule.select('select (&CurrentDay.['+ StartdateName +'].relatedmembers([DDMRP Planning Bucket]).element(0).leadoffset('+ NumberOfBucketsminusone +'));');\r\n            var datacellsetforenddate = cellsetModule.createCellSet(lsresponseforenddate);\r\n            var enddate =  datacellsetforenddate.row(0).cell(datacellsetforenddate.memberColumnIndex('Time','DDMRP Planning Bucket'));\r\n            var enddateName = enddate.Name\r\n            Log.Info(\"End date is ... \" + enddateName);\r\n        }\r\n\r\n        var StartBucket = StartdateName;\r\n        // StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        HistoricalStartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalStartDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalStartBucket);\r\n\r\n        FutureStartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+FutureStartDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +FutureStartBucket);\r\n\r\n        var EndBucket = enddateName;\r\n        // EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        HistoricalEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+HistoricalEndDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +HistoricalEndBucket);\r\n\r\n        FutureEndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+FutureEndDate+'\\\")).relatedmembers([DDMRP Planning Bucket]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket Historical is ' +FutureEndBucket);\r\n\r\n        status = updateDDMRPPlanningParameters(StartBucket , EndBucket ,HistoricalStartBucket , HistoricalEndBucket ,FutureStartBucket, FutureEndBucket,Version,NumberOfBuckets);\r\n        Log.Info(status);\r\n    }\r\n\r\n\r\n    else if (Solution == \"DP\"){\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        Log.Info(\"Current Bucket has been Updated for Demand Planning\");\r\n    }\r\n\telse if (Solution == \"CP\"){\r\n\r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent);\r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        Log.Info(\"Current Bucket has been Updated for Commercial Planning\");\r\n\t}\r\n\r\n\telse if (Solution == \"Month\"){\r\n\r\n\t\tvar CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n        var StartDate = parsedParams.StartDate.split(\"T\")[0];\r\n        var EndDate = parsedParams.EndDate.split(\"T\")[0];\r\n\r\n\t\tCurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n\r\n\t\tvar SetMonthIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetMonthIsCurrent ... \" + SetMonthIsCurrent);\r\n        queryModule.update(SetMonthIsCurrent);\r\n\r\n\t\tCurrentBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).relatedmembers([Month]).element(0).Name;').Result;\r\n        Log.Info('Current Bucket is ' +CurrentBucket);\r\n\r\n        StartBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+StartDate+'\\\")).relatedmembers([Month]).element(0).Name;').Result;\r\n        Log.Info('Start Bucket is ' +StartBucket);\r\n\r\n        EndBucket = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+EndDate+'\\\")).relatedmembers([Month]).element(0).Name;').Result;\r\n        Log.Info('End Bucket is ' +EndBucket);\r\n\r\n        status = updateMonthlyPlanningParameters(CurrentBucket , StartBucket , EndBucket , Version);\r\n        Log.Info(status);\r\n\r\n\t}\r\n\r\n    else {\r\n        Log.Info(\"Recieved Solution Type : \" + \"\\\"'+Solution+'\\\"\");\r\n        Log.Info(\"Verify valid solution type is passed to scripts. Valid inputs are \\\"MP \\\", \\\"OP\\\", \\\"MEIO\\\", \\\"DP\\\", \\\"CP\\\"\");\r\n    }\r\n\r\n    if (disableplan){\r\n    \tLog.Info(\"Enable Plan....\");\r\n    \tvar enable = 'enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\r\n\r\n};\r\n\r\nreturn {\r\n\tSolverStartAndEndDate:SolverStartAndEndDate\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.CommonSolverStartAndEndDate",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "cd7acd6b-7345-7364-c2f2-8527d8cc7490",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213062,
    "Description": "Generate Row Count",
    "Documentation": "define('o9.referencemodel.GenerateRowCount', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var GenerateRowCount = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.GenerateCount\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('o9 Params.....'+ o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\tvar RunID = ParsedParams.RunID;\r\n\tvar Day = ParsedParams.Day;\r\n\tvar ActionType = ParsedParams.ActionType;\r\n\tvar Product = ParsedParams.Product;\r\n\tvar User = ParsedParams.User;\r\n\tvar RunIDParent = ParsedParams.RunIDParent;\r\n\tvar PerformanceFlag = ParsedParams.PerformanceFlag;\r\n\t\r\n\t// To generate row count for fact data\r\n\tvar FactDataRowCount = function(MeasureValues,DimMembers){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+MeasureValues+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar queryForFactData = 'Select (&CWV * {DistinctCount(';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"CurrentWorkingView\"){\r\n\t\t\t\t\tvar string1 = ' ['+dim+'].['+attribute+'] *';\r\n\t\t\t\t\tqueryForFactData = queryForFactData.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tqueryForFactData = queryForFactData.concat('Measure.['+MeasureValues+']) as Transient.[RowCount]}) on row, () on column;');\r\n\t\t\tvar getFactData = queryModule.select(queryForFactData);\r\n\t\t\tLog.Info(\"Fact Data Count\" +  JSON.stringify(getFactData));\r\n\t\t\tvar FetchFactDataCount = cellsetModule.createCellSet(getFactData);\r\n\t\t\tLog.Info(\"Rows returned ...\" + FetchFactDataCount.rowCount);\r\n\t\t\tif (FetchFactDataCount.rowCount>0){\r\n\t\t\t\tvar FactDataCount = FetchFactDataCount.row(0).cell(FetchFactDataCount.measureColumnIndex('RowCount'));\r\n\t\t\t\tLog.Info(\"FactDataCount...\" +FactDataCount );\r\n\t\t\t\tvar CopyFactCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+']*&CurrentDay*[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = '+FactDataCount+';end scope;';\r\n\t\t\t\tqueryModule.update(CopyFactCountToMeasure);\r\n\t\t\t\tLog.Info(\"Assigning Counts to Measure \" +  CopyFactCountToMeasure);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// assign zero if there are no records\r\n\t\t\t  \tvar CopyZeroFactCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+']*&CurrentDay*[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = 0;end scope;';\r\n\t\t\t\tqueryModule.update(CopyZeroFactCountToMeasure);\r\n\t\t\t\tLog.Info(\"Assigning Zero to Measure \" +  CopyZeroFactCountToMeasure);\r\n\t\t\t\tLog.Info(\"Since no rows returned , not updating any Row count measure\");\r\n\t\t\t} \r\n\t\t\t\r\n\t};\r\n\t// To generate row count for master data\r\n\tvar MasterDataRowCount = function(MeasureValues,DimMembers){\r\n\t\tvar queryForDimData = 'Select(&'+MeasureValues+'.count);';\r\n\t\tvar getDimCount = queryModule.select(queryForDimData);\r\n\t\tLog.Info(\"Dimension Row count\" +  JSON.stringify(getDimCount));\r\n\t\tvar MasterDataCount = getDimCount.Result;\r\n\t\tif(MasterDataCount>0){\r\n\t\t\tvar CopyDimCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+'] *&CurrentDay *[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = '+MasterDataCount+';end scope;';\r\n\t\t    queryModule.update(CopyDimCountToMeasure);\r\n\t\t    Log.Info(\"Assigning Counts to Measure \" +  CopyDimCountToMeasure);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// assign zero if there are no records\r\n\t\t\tvar CopyZeroDimCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+'] *&CurrentDay *[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = 0;end scope;';\r\n\t\t    queryModule.update(CopyZeroDimCountToMeasure);\r\n\t\t    Log.Info(\"Assigning Zero to Measure \" +  CopyZeroDimCountToMeasure);\r\n\t\t}\r\n\r\n\t};\r\n\t// To get all row count attribute members of Row Count\r\n\tvar DefinedMeasureForCount = function(DefinedMeasureParams){\r\n\t\tvar ParametersForCount = cellsetModule.createCellSet(DefinedMeasureParams);\r\n\t\tif(ParametersForCount.rowCount > 0){\r\n\t\t\tfor (var i = 0; i < ParametersForCount.rowCount ; i++){\r\n\t\t\tvar MeasureValues = ParametersForCount.row(i).cell(ParametersForCount.measureColumnIndex('Row Count Definition'));\r\n\t\t\tvar DimMembers = ParametersForCount.row(i).cell(ParametersForCount.memberColumnIndex('Row Count','Row Count')).Name;\r\n\t\t\tvar DimType = ParametersForCount.row(i).cell(ParametersForCount.memberColumnIndex('Row Count','Type')).Name;\r\n\t\t\tvar DimActionType = ParametersForCount.row(i).cell(ParametersForCount.memberColumnIndex('Row Count','Action Type')).Name;\r\n\t\t\tLog.Info(\"Measure.....\" + MeasureValues);\r\n\t\t\tLog.Info(\"DimMembers....\" + DimMembers);\r\n\t\t\tLog.Info(\"DimType.......\" + DimType);\r\n\t\t\tLog.Info(\"DimActionType.......\" + DimActionType);\r\n\t\t\tif(MeasureValues !== null){\r\n\t\t\t\t// To get Namedsets value with row count members for master data\r\n\t\t\t\tif(DimType.includes('Master Data Count') === true){\r\n\t\t\t\t\tLog.Info(\"Calling Master data row count updation function\");\r\n\t\t\t\t\tMasterDataRowCount(MeasureValues,DimMembers);\r\n\t\t\t\t}\r\n\t\t\t\t// To get measure names with row count members for fact data\r\n\t\t\t\telse if(DimType.includes('Fact Data Count') === true){\r\n\t\t\t\t\tLog.Info(\"Calling Fact Data Row Count updation function\");\r\n\t\t\t\t\tFactDataRowCount(MeasureValues,DimMembers);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tLog.Info(\"Invalid Dimension Type\");\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t}\r\n\t};\t\r\n\t\tLog.Info(\"Executing Javasrcipt\");\r\n\t\t////--For tracking the start time\r\n\t\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\t\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\t\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\t\tvar ScenarioCount = getScenarioCount.Result;\r\n\t\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\t\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\t\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\t\tvar VersionCount = getVersionCount.Result;\r\n\t\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"'+Version+'\"};';\r\n\t\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t\t// Procedure to create members of row count\r\n\t\tif (PerformanceFlag === 'true'){\r\n\t\tif (ActionType == 'Create Network Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataCreateNetworkWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataCreateNetworkWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Where Used Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataWhereUsedWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure Where Used Weekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Transaction Data Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataTransactionDataWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataTransactionDataWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Prioritization Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedDemandPrioritizationWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedDemandPrioritizationWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Netting at Month Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataDemandNettingatMonthWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataDemandNettingatMonthWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Netting Solver with RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedDemandNettingSolverwithRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedDemandNettingSolverwithRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Netting Python with RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedNettingPythonwithRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedNettingPythonwithRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Skip Netting Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataSkipNettingWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataSkipNetting\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Demand Netting solver without RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedDemandNettingSolverWithoutRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedDemandNettingSolverWithoutRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Netting Python without RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedNettingPythonwithoutRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedNettingPythonwithoutRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Where Used Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataWhereUsedDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataWhereUsedDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Netting at Month Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataDemandNettingatMonthDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataDemandNettingatMonthDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Skip Netting Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataSkipNettingDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataSkipNettingDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'FinancialsDaily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedFinancialsDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedFinancialsDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Prioritization Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataDemandPrioritizationDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataBasicDemandPrioritizationDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Create Network Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataCreateNetworkDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataCreateNetworkDaily\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLog.Info(\"Invalid Action Type\");\r\n\t\t}\t\t\t\t\r\n\t\tvar ExecuteProcedure = queryModule.select(queryForExecution);\r\n\t\tLog.Info(\"Seeddata procedure Executed\");\r\n\t\t// To Fetch Namedsets and Measure Names from Row Count Definition measure\r\n\t\tvar getDefinedMeasureValues = 'select ( &CWV *[Row Count].[Type] *[Row Count].[Action Type].['+ActionType+']*[Row Count].[Row Count]) on row,({Measure.[Row Count Definition]}) on column;';\t\r\n\t\tvar DefinedMeasureValues = queryModule.select(getDefinedMeasureValues);\r\n\t\tDefinedMeasureForCount(DefinedMeasureValues);\r\n\t\t}\r\n\t\telse {\r\n\t\tLog.Info(\"Javasrcipt to generate row counts not executed\");\r\n\t\t}\r\n\t};\r\n\r\nreturn {\r\n\tGenerateRowCount:GenerateRowCount\r\n\t};\r\n});",
    "Code": "define('o9.referencemodel.GenerateRowCount', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var GenerateRowCount = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.GenerateCount\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('o9 Params.....'+ o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\tvar RunID = ParsedParams.RunID;\r\n\tvar Day = ParsedParams.Day;\r\n\tvar ActionType = ParsedParams.ActionType;\r\n\tvar Product = ParsedParams.Product;\r\n\tvar User = ParsedParams.User;\r\n\tvar RunIDParent = ParsedParams.RunIDParent;\r\n\tvar PerformanceFlag = ParsedParams.PerformanceFlag;\r\n\t\r\n\t// To generate row count for fact data\r\n\tvar FactDataRowCount = function(MeasureValues,DimMembers){\r\n\t\tvar Grainquery = 'select (_SchemaPlan.[_Measure].['+MeasureValues+'].relatedmembers([_MeasureGroup]).relatedmembers([_DimensionUsage]) ) on row, () on column include memberproperties {_SchemaPlan.[_DimensionUsage],[DimensionUsageDimensionName],[DimensionUsageDimensionAttribute]};';\r\n\t\t\tvar Grains = queryModule.select(Grainquery);\r\n\t\t\tvar queryForFactData = 'Select (&CWV * {DistinctCount(';\r\n\t\t\tfor(var k = 0; k < Grains.Meta[0].DimensionValues.length; k++){\r\n\t\t\t\tvar Grain = Grains.Meta[0].DimensionValues[k];\r\n\t\t\t\tvar memberProps = Grain.MemberProperties;\r\n\t\t\t\tvar dim , attribute;\r\n\t\t\t\tfor(var l = 0; l < memberProps.length ; l++){\r\n\t\t\t\t\tvar obj = memberProps[l];\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionName\"){\r\n\t\t\t\t\t\tdim = obj.PropertyValue; }\r\n\t\t\t\t\tif(obj.PropertyName === \"DimensionUsageDimensionAttribute\"){\r\n\t\t\t\t\t\tattribute = obj.PropertyValue; }\r\n\t\t\t\t}\r\n\t\t\t\tif(dim != \"CurrentWorkingView\"){\r\n\t\t\t\t\tvar string1 = ' ['+dim+'].['+attribute+'] *';\r\n\t\t\t\t\tqueryForFactData = queryForFactData.concat(string1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tqueryForFactData = queryForFactData.concat('Measure.['+MeasureValues+']) as Transient.[RowCount]}) on row, () on column;');\r\n\t\t\tvar getFactData = queryModule.select(queryForFactData);\r\n\t\t\tLog.Info(\"Fact Data Count\" +  JSON.stringify(getFactData));\r\n\t\t\tvar FetchFactDataCount = cellsetModule.createCellSet(getFactData);\r\n\t\t\tLog.Info(\"Rows returned ...\" + FetchFactDataCount.rowCount);\r\n\t\t\tif (FetchFactDataCount.rowCount>0){\r\n\t\t\t\tvar FactDataCount = FetchFactDataCount.row(0).cell(FetchFactDataCount.measureColumnIndex('RowCount'));\r\n\t\t\t\tLog.Info(\"FactDataCount...\" +FactDataCount );\r\n\t\t\t\tvar CopyFactCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+']*&CurrentDay*[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = '+FactDataCount+';end scope;';\r\n\t\t\t\tqueryModule.update(CopyFactCountToMeasure);\r\n\t\t\t\tLog.Info(\"Assigning Counts to Measure \" +  CopyFactCountToMeasure);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// assign zero if there are no records\r\n\t\t\t  \tvar CopyZeroFactCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+']*&CurrentDay*[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = 0;end scope;';\r\n\t\t\t\tqueryModule.update(CopyZeroFactCountToMeasure);\r\n\t\t\t\tLog.Info(\"Assigning Zero to Measure \" +  CopyZeroFactCountToMeasure);\r\n\t\t\t\tLog.Info(\"Since no rows returned , not updating any Row count measure\");\r\n\t\t\t} \r\n\t\t\t\r\n\t};\r\n\t// To generate row count for master data\r\n\tvar MasterDataRowCount = function(MeasureValues,DimMembers){\r\n\t\tvar queryForDimData = 'Select(&'+MeasureValues+'.count);';\r\n\t\tvar getDimCount = queryModule.select(queryForDimData);\r\n\t\tLog.Info(\"Dimension Row count\" +  JSON.stringify(getDimCount));\r\n\t\tvar MasterDataCount = getDimCount.Result;\r\n\t\tif(MasterDataCount>0){\r\n\t\t\tvar CopyDimCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+'] *&CurrentDay *[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = '+MasterDataCount+';end scope;';\r\n\t\t    queryModule.update(CopyDimCountToMeasure);\r\n\t\t    Log.Info(\"Assigning Counts to Measure \" +  CopyDimCountToMeasure);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// assign zero if there are no records\r\n\t\t\tvar CopyZeroDimCountToMeasure = 'Cartesian scope:(&CWV * Action.[RunID].['+RunID+'] *&CurrentDay *[Row Count].[Row Count].['+DimMembers+']);Measure.[Row Count] = 0;end scope;';\r\n\t\t    queryModule.update(CopyZeroDimCountToMeasure);\r\n\t\t    Log.Info(\"Assigning Zero to Measure \" +  CopyZeroDimCountToMeasure);\r\n\t\t}\r\n\r\n\t};\r\n\t// To get all row count attribute members of Row Count\r\n\tvar DefinedMeasureForCount = function(DefinedMeasureParams){\r\n\t\tvar ParametersForCount = cellsetModule.createCellSet(DefinedMeasureParams);\r\n\t\tif(ParametersForCount.rowCount > 0){\r\n\t\t\tfor (var i = 0; i < ParametersForCount.rowCount ; i++){\r\n\t\t\tvar MeasureValues = ParametersForCount.row(i).cell(ParametersForCount.measureColumnIndex('Row Count Definition'));\r\n\t\t\tvar DimMembers = ParametersForCount.row(i).cell(ParametersForCount.memberColumnIndex('Row Count','Row Count')).Name;\r\n\t\t\tvar DimType = ParametersForCount.row(i).cell(ParametersForCount.memberColumnIndex('Row Count','Type')).Name;\r\n\t\t\tvar DimActionType = ParametersForCount.row(i).cell(ParametersForCount.memberColumnIndex('Row Count','Action Type')).Name;\r\n\t\t\tLog.Info(\"Measure.....\" + MeasureValues);\r\n\t\t\tLog.Info(\"DimMembers....\" + DimMembers);\r\n\t\t\tLog.Info(\"DimType.......\" + DimType);\r\n\t\t\tLog.Info(\"DimActionType.......\" + DimActionType);\r\n\t\t\tif(MeasureValues !== null){\r\n\t\t\t\t// To get Namedsets value with row count members for master data\r\n\t\t\t\tif(DimType.includes('Master Data Count') === true){\r\n\t\t\t\t\tLog.Info(\"Calling Master data row count updation function\");\r\n\t\t\t\t\tMasterDataRowCount(MeasureValues,DimMembers);\r\n\t\t\t\t}\r\n\t\t\t\t// To get measure names with row count members for fact data\r\n\t\t\t\telse if(DimType.includes('Fact Data Count') === true){\r\n\t\t\t\t\tLog.Info(\"Calling Fact Data Row Count updation function\");\r\n\t\t\t\t\tFactDataRowCount(MeasureValues,DimMembers);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tLog.Info(\"Invalid Dimension Type\");\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t}\r\n\t};\t\r\n\t\tLog.Info(\"Executing Javasrcipt\");\r\n\t\t////--For tracking the start time\r\n\t\tvar queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n\t\tvar getScenarioCount = queryModule.select(queryForScenarioCount);\r\n\t\tLog.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n\t\tvar ScenarioCount = getScenarioCount.Result;\r\n\t\tvar queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n\t\tvar getVersionCount = queryModule.select(queryForVersionCount);\r\n\t\tLog.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n\t\tvar VersionCount = getVersionCount.Result;\r\n\t\tvar ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"'+Version+'\"};';\r\n\t\tvar ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n\t\t// Procedure to create members of row count\r\n\t\tif (PerformanceFlag === 'true'){\r\n\t\tif (ActionType == 'Create Network Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataCreateNetworkWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataCreateNetworkWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Where Used Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataWhereUsedWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure Where Used Weekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Transaction Data Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataTransactionDataWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataTransactionDataWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Prioritization Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedDemandPrioritizationWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedDemandPrioritizationWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Netting at Month Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataDemandNettingatMonthWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataDemandNettingatMonthWeekly\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Netting Solver with RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedDemandNettingSolverwithRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedDemandNettingSolverwithRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Netting Python with RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedNettingPythonwithRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedNettingPythonwithRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Skip Netting Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataSkipNettingWeekly {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataSkipNetting\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Demand Netting solver without RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedDemandNettingSolverWithoutRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedDemandNettingSolverWithoutRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Advanced Netting Python without RTF Run Weekly'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataAdvancedNettingPythonwithoutRTF {\"Version\" : \"CurrentWorkingView\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataAdvancedNettingPythonwithoutRTF\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Where Used Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataWhereUsedDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataWhereUsedDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Netting at Month Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataDemandNettingatMonthDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataDemandNettingatMonthDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Skip Netting Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataSkipNettingDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataSkipNettingDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'FinancialsDaily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedFinancialsDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedFinancialsDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Demand Prioritization Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataDemandPrioritizationDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataBasicDemandPrioritizationDaily\");\r\n\t\t}\r\n\t\telse if (ActionType == 'Create Network Daily'){\r\n\t\t\tvar queryForExecution = 'exec procedure SeedDataCreateNetworkDaily {\"Version\" : \"' + Version + '\"};';\r\n\t\t\tLog.Info(\"exec procedure SeedDataCreateNetworkDaily\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLog.Info(\"Invalid Action Type\");\r\n\t\t}\t\t\t\t\r\n\t\tvar ExecuteProcedure = queryModule.select(queryForExecution);\r\n\t\tLog.Info(\"Seeddata procedure Executed\");\r\n\t\t// To Fetch Namedsets and Measure Names from Row Count Definition measure\r\n\t\tvar getDefinedMeasureValues = 'select ( &CWV *[Row Count].[Type] *[Row Count].[Action Type].['+ActionType+']*[Row Count].[Row Count]) on row,({Measure.[Row Count Definition]}) on column;';\t\r\n\t\tvar DefinedMeasureValues = queryModule.select(getDefinedMeasureValues);\r\n\t\tDefinedMeasureForCount(DefinedMeasureValues);\r\n\t\t}\r\n\t\telse {\r\n\t\tLog.Info(\"Javasrcipt to generate row counts not executed\");\r\n\t\t}\r\n\t};\r\n\r\nreturn {\r\n\tGenerateRowCount:GenerateRowCount\r\n\t};\r\n});",
    "ModuleName": "o9.referencemodel.GenerateRowCount",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "e242aff3-76b1-40b6-ad81-82ec9707e2a4",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213063,
    "Description": "Delete Scenarios",
    "Documentation": "define('o9.referencemodel.DeleteScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeleteScenario = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.DeleteScenario\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\tLog.Info(\"Versions to be deleted\" +  Version);\r\n\tLog.Info(\"Length of Version\" +  Version.length);\r\n\t\r\n\tfor(var i = 0; i < Version.length; i++){\r\n\t\t\r\n\t\tvar x = Version[i];\r\n\t\tvar FetchVersionData = 'Select ([Version].[Version Name].['+x+'] ) on row, ({Measure.[Product], Measure.[Scenario Created By]}) on column;';\r\n\t\tvar VersionData = queryModule.select(FetchVersionData);\r\n\t\tLog.Info(\"Fetching Scenario Data\" +  FetchVersionData);\r\n\t\tvar Scenariodata = cellsetModule.createCellSet(VersionData);\r\n\t\tvar GlobalCountUpdate = 'Scope:(&CWV);Measure.[Global Scenario Count] = Measure.[Global Scenario Count] - 1;end Scope;';\r\n\t\tqueryModule.update(GlobalCountUpdate);\r\n\t\tLog.Info(\"Updating Global Counts\" +  GlobalCountUpdate);\r\n\t\tvar str1 = \" Scenario Count\";\r\n\t\tvar str2 = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Product'));\r\n\t\tif(str2 != \"Global\"){\r\n\t\t\tLog.Info(\"Product\" + str2);\r\n\t\t\tvar str3 = str2.concat(str1);\r\n\t\t\tvar ProductCountUpdate = 'Scope:(&CWV);Measure.['+str3+'] = Measure.['+str3+'] - 1;end Scope;';\r\n\t\t\tqueryModule.update(ProductCountUpdate);\r\n\t\t\tLog.Info(\"Updating Product level Counts\" +  ProductCountUpdate);\r\n\t\t\t}\t\r\n\t\tvar user = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Scenario Created By'));\r\n\t\tvar UserCountUpdate = 'Scope:(&CWV * [Personnel].[Email].['+user+']);Measure.[Scenario Count Per User] = Measure.[Scenario Count Per User] - 1;end Scope;';\r\n\t\tqueryModule.update(UserCountUpdate);\r\n\t\tLog.Info(\"Updating User level Counts\" +  UserCountUpdate);\r\n\t\t\r\n\t\tvar ScenarioName = 'Deleteversion (\\\"'+x+'\\\");';\r\n\t\tqueryModule.update(ScenarioName);\r\n\t\tLog.Info(\"DeletedScenario ... \" +  x );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n};   \r\n\t\r\nreturn {\r\n\tDeleteScenario:DeleteScenario\r\n\t};\r\n});",
    "Code": "define('o9.referencemodel.DeleteScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeleteScenario = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.DeleteScenario\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\tLog.Info(\"Versions to be deleted\" +  Version);\r\n\tLog.Info(\"Length of Version\" +  Version.length);\r\n\t\r\n\tfor(var i = 0; i < Version.length; i++){\r\n\t\t\r\n\t\tvar x = Version[i];\r\n\t\tvar FetchVersionData = 'Select ([Version].[Version Name].['+x+'] ) on row, ({Measure.[Product], Measure.[Scenario Created By]}) on column;';\r\n\t\tvar VersionData = queryModule.select(FetchVersionData);\r\n\t\tLog.Info(\"Fetching Scenario Data\" +  FetchVersionData);\r\n\t\tvar Scenariodata = cellsetModule.createCellSet(VersionData);\r\n\t\tvar GlobalCountUpdate = 'Scope:(&CWV);Measure.[Global Scenario Count] = Measure.[Global Scenario Count] - 1;end Scope;';\r\n\t\tqueryModule.update(GlobalCountUpdate);\r\n\t\tLog.Info(\"Updating Global Counts\" +  GlobalCountUpdate);\r\n\t\tvar str1 = \" Scenario Count\";\r\n\t\tvar str2 = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Product'));\r\n\t\tif(str2 != \"Global\"){\r\n\t\t\tLog.Info(\"Product\" + str2);\r\n\t\t\tvar str3 = str2.concat(str1);\r\n\t\t\tvar ProductCountUpdate = 'Scope:(&CWV);Measure.['+str3+'] = Measure.['+str3+'] - 1;end Scope;';\r\n\t\t\tqueryModule.update(ProductCountUpdate);\r\n\t\t\tLog.Info(\"Updating Product level Counts\" +  ProductCountUpdate);\r\n\t\t\t}\t\r\n\t\tvar user = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Scenario Created By'));\r\n\t\tvar UserCountUpdate = 'Scope:(&CWV * [Personnel].[Email].['+user+']);Measure.[Scenario Count Per User] = Measure.[Scenario Count Per User] - 1;end Scope;';\r\n\t\tqueryModule.update(UserCountUpdate);\r\n\t\tLog.Info(\"Updating User level Counts\" +  UserCountUpdate);\r\n\t\t\r\n\t\tvar ScenarioName = 'Deleteversion (\\\"'+x+'\\\");';\r\n\t\tqueryModule.update(ScenarioName);\r\n\t\tLog.Info(\"DeletedScenario ... \" +  x );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n};   \r\n\t\r\nreturn {\r\n\tDeleteScenario:DeleteScenario\r\n\t};\r\n});",
    "ModuleName": "o9.referencemodel.DeleteScenario",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "af39f9fb-3b63-4e12-b8f8-a7b711d03608",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213064,
    "Description": "testing",
    "Documentation": "define('o9.referencemodel.BulkDeleteScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeleteScenario = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.DeleteScenario\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\tLog.Info(\"Versions to be deleted\" +  Version);\r\n\tLog.Info(\"Length of Version\" +  Version.length);\r\n\t\r\n\tfor(var i = 0; i < Version.length; i++){\r\n\t\tvar x = Version[i];\r\n\t\tvar basescenariokey ='SELECT Version.[Version Name].['+ x +'].Key;';\r\n\t\tvar lsResponse1 = queryModule.select(basescenariokey);\r\n\t\tvar Key = lsResponse1.Result;\r\n\t\tLog.Info(\"Version Key \" + Key);\r\n\t\tvar condition = 'select [Version].[Version Name].['+x+'].filter(#.[Version Expiry Date]< Now()).first.Key;';\r\n\t\tvar lsResponse = queryModule.select(condition);\r\n\t\tLog.Info(\"for version \"+x + \"lsResponse is \" + lsResponse.Result);\r\n\t\tif (lsResponse.Result !== 0){\r\n\t\t\tif(Key<0){\r\n\t\t\t\tvar FetchVersionData = 'Select ([Version].[Version Name].['+x+'] ) on row, ({Measure.[Product], Measure.[Scenario Created By]}) on column;';\r\n\t\t\t\tvar VersionData = queryModule.select(FetchVersionData);\r\n\t\t\t\tLog.Info(\"Fetching Scenario Data\" +  FetchVersionData);\r\n\t\t\t\tvar Scenariodata = cellsetModule.createCellSet(VersionData);\r\n\t\t\t\tvar GlobalCountUpdate = 'Scope:(&CWV);Measure.[Global Scenario Count] = Measure.[Global Scenario Count] - 1;end Scope;';\r\n\t\t\t\tqueryModule.update(GlobalCountUpdate);\r\n\t\t\t\tLog.Info(\"Updating Global Counts\" +  GlobalCountUpdate);\r\n\t\t\t\tvar str1 = \" Scenario Count\";\r\n\t\t\t\tvar str2 = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Product'));\r\n\t\t\t\tif(str2 != \"Global\"){\r\n\t\t\t\t\tLog.Info(\"Product\" + str2);\r\n\t\t\t\t\tvar str3 = str2.concat(str1);\r\n\t\t\t\t\tvar ProductCountUpdate = 'Scope:(&CWV);Measure.['+str3+'] = Measure.['+str3+'] - 1;end Scope;';\r\n\t\t\t\t\tqueryModule.update(ProductCountUpdate);\r\n\t\t\t\t\tLog.Info(\"Updating Product level Counts\" +  ProductCountUpdate);\r\n\t\t\t\t\t}\t\r\n\t\t\t\tvar user = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Scenario Created By'));\r\n\t\t\t\tvar UserCountUpdate = 'Scope:(&CWV * [Personnel].[Email].['+user+']);Measure.[Scenario Count Per User] = Measure.[Scenario Count Per User] - 1;end Scope;';\r\n\t\t\t\tqueryModule.update(UserCountUpdate);\r\n\t\t\t\tLog.Info(\"Updating User level Counts\" +  UserCountUpdate);\r\n\t\t\t}\r\n\t\t\tvar ScenarioName = 'Deleteversion (\\\"'+x+'\\\");';\r\n\t\t\tqueryModule.update(ScenarioName);\r\n\t\t\tLog.Info(\"DeletedScenario ... \" +  x );\r\n\t\t}\r\n\t}\r\n};   \r\n\t\r\nreturn {\r\n\tDeleteScenario:DeleteScenario\r\n\t};\r\n});",
    "Code": "define('o9.referencemodel.BulkDeleteScenario', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DeleteScenario = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencemodel.DeleteScenario\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n\tLog.Info(\"Versions to be deleted\" +  Version);\r\n\tLog.Info(\"Length of Version\" +  Version.length);\r\n\t\r\n\tfor(var i = 0; i < Version.length; i++){\r\n\t\tvar x = Version[i];\r\n\t\tvar basescenariokey ='SELECT Version.[Version Name].['+ x +'].Key;';\r\n\t\tvar lsResponse1 = queryModule.select(basescenariokey);\r\n\t\tvar Key = lsResponse1.Result;\r\n\t\tLog.Info(\"Version Key \" + Key);\r\n\t\tvar condition = 'select [Version].[Version Name].['+x+'].filter(#.[Version Expiry Date]< Now()).first.Key;';\r\n\t\tvar lsResponse = queryModule.select(condition);\r\n\t\tLog.Info(\"for version \"+x + \"lsResponse is \" + lsResponse.Result);\r\n\t\tif (lsResponse.Result !== 0){\r\n\t\t\tif(Key<0){\r\n\t\t\t\tvar FetchVersionData = 'Select ([Version].[Version Name].['+x+'] ) on row, ({Measure.[Product], Measure.[Scenario Created By]}) on column;';\r\n\t\t\t\tvar VersionData = queryModule.select(FetchVersionData);\r\n\t\t\t\tLog.Info(\"Fetching Scenario Data\" +  FetchVersionData);\r\n\t\t\t\tvar Scenariodata = cellsetModule.createCellSet(VersionData);\r\n\t\t\t\tvar GlobalCountUpdate = 'Scope:(&CWV);Measure.[Global Scenario Count] = Measure.[Global Scenario Count] - 1;end Scope;';\r\n\t\t\t\tqueryModule.update(GlobalCountUpdate);\r\n\t\t\t\tLog.Info(\"Updating Global Counts\" +  GlobalCountUpdate);\r\n\t\t\t\tvar str1 = \" Scenario Count\";\r\n\t\t\t\tvar str2 = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Product'));\r\n\t\t\t\tif(str2 != \"Global\"){\r\n\t\t\t\t\tLog.Info(\"Product\" + str2);\r\n\t\t\t\t\tvar str3 = str2.concat(str1);\r\n\t\t\t\t\tvar ProductCountUpdate = 'Scope:(&CWV);Measure.['+str3+'] = Measure.['+str3+'] - 1;end Scope;';\r\n\t\t\t\t\tqueryModule.update(ProductCountUpdate);\r\n\t\t\t\t\tLog.Info(\"Updating Product level Counts\" +  ProductCountUpdate);\r\n\t\t\t\t\t}\t\r\n\t\t\t\tvar user = Scenariodata.row(0).cell(Scenariodata.measureColumnIndex('Scenario Created By'));\r\n\t\t\t\tvar UserCountUpdate = 'Scope:(&CWV * [Personnel].[Email].['+user+']);Measure.[Scenario Count Per User] = Measure.[Scenario Count Per User] - 1;end Scope;';\r\n\t\t\t\tqueryModule.update(UserCountUpdate);\r\n\t\t\t\tLog.Info(\"Updating User level Counts\" +  UserCountUpdate);\r\n\t\t\t}\r\n\t\t\tvar ScenarioName = 'Deleteversion (\\\"'+x+'\\\");';\r\n\t\t\tqueryModule.update(ScenarioName);\r\n\t\t\tLog.Info(\"DeletedScenario ... \" +  x );\r\n\t\t}\r\n\t}\r\n};   \r\n\t\r\nreturn {\r\n\tDeleteScenario:DeleteScenario\r\n\t};\r\n});",
    "ModuleName": "o9.referencemodel.BulkDeleteScenario",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "02363369-4097-4f0e-97cf-ab69350de780",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213065,
    "Description": "Current Time Rollover",
    "Documentation": "define('o9.referencemodel.CurrentTimeRollover', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar CurrentTimeRollover= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    //var Version = parsedParams.Version;\r\n    //var Solution = parsedParams.Solution;\r\n    var disableplan = parsedParams.Plan;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n  if (disableplan){\r\n\t\t\r\n\t\tLog.Info(\"Disable Plan....\");\r\n\t\tvar disable = 'disable plan;';\r\n\t\tqueryModule.update(disable);\r\n\t}\r\n \r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n    \r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent); \r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        Log.Info(\"Current Bucket has been Updated\");\r\n    \r\n\r\n    \r\n    if (disableplan){\r\n    \tLog.Info(\"Enable Plan....\");\r\n    \tvar enable = 'enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\t\r\n\t\r\n};\r\n\t\r\nreturn {\r\n\tCurrentTimeRollover:CurrentTimeRollover\r\n\t};\r\n});",
    "Code": "define('o9.referencemodel.CurrentTimeRollover', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar CurrentTimeRollover= function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    //var Version = parsedParams.Version;\r\n    //var Solution = parsedParams.Solution;\r\n    var disableplan = parsedParams.Plan;\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n  if (disableplan){\r\n\t\t\r\n\t\tLog.Info(\"Disable Plan....\");\r\n\t\tvar disable = 'disable plan;';\r\n\t\tqueryModule.update(disable);\r\n\t}\r\n \r\n        var CurrentDate = parsedParams.CurrentDate.split(\"T\")[0];\r\n\r\n        CurrentDay = queryModule.select('SELECT Time.Day.filter(#.Key == todatetime(\\\"'+CurrentDate+'\\\")).element(0).Name;').Result;\r\n        Log.Info('Current Day is ' +CurrentDay);\r\n    \r\n        var SetWeekIsCurrent = 'updatemember(Time.[Day]={,\"'+ CurrentDay +'\"},[Time].[Day$IsCurrent]={TRUE,});';\r\n        Log.Info(\"SetWeekIsCurrent ... \" + SetWeekIsCurrent); \r\n        queryModule.update(SetWeekIsCurrent);\r\n\r\n        Log.Info(\"Current Bucket has been Updated\");\r\n    \r\n\r\n    \r\n    if (disableplan){\r\n    \tLog.Info(\"Enable Plan....\");\r\n    \tvar enable = 'enable plan;';\r\n    \tqueryModule.update(enable);\r\n\t}\r\n\t\r\n\t\r\n};\r\n\t\r\nreturn {\r\n\tCurrentTimeRollover:CurrentTimeRollover\r\n\t};\r\n});",
    "ModuleName": "o9.referencemodel.CurrentTimeRollover",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "66aef7e3-32ad-e7e0-5ee6-3994baa1bbd3",
    "ModuleId": "ddab5036-c377-42df-a830-e56e77624e89"
  },
  {
    "Id": 213066,
    "Description": "Adhoc Replen Scoped Plan for skechers",
    "Documentation": "define('o9.referencesupplyplanning.AdhocReplenScopedPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var AdhocReplenScopedPlan = function(o9Params){\r\n    var queryModule = require('o9/data/query');\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var RunID = parsedParams.RunID;\r\n    var ActionType = parsedParams.ActionType;\r\n    var Product = parsedParams.Product;\r\n    var User = parsedParams.User;\r\n    var RunIDParent = parsedParams.RunIDParent;\r\n//   var Financial = parsedParams.RunFinancialPlan;\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n    \r\n    Log.Info(\"Executing Javasrcipt\");\r\n    var queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n    var getScenarioCount = queryModule.select(queryForScenarioCount);\r\n    Log.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n    var ScenarioCount = getScenarioCount.Result;\r\n    var queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n    var getVersionCount = queryModule.select(queryForVersionCount);\r\n    Log.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n    var VersionCount = getVersionCount.Result;\r\n    var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n    var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n    Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n  \r\n    var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n    var DailySolverStartBucket = lsResponse.Result;\r\n  \r\n    var queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\n    var DailySolverCurrentBucket = lsResponse2.Result;\r\n    \r\n    var queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\n    var DailySolverEndBucket = lsResponse3.Result;\r\n  \r\n    var queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n    var dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n    \r\n    var SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n    var SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n    var SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n    var SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n    var SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n    var SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n    var SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n    var SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n    var SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n    var SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n    var SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n    var SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n    var SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n    var SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n    var SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n    var SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n    var SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n    \r\n    var SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n    var SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n    var SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n    var SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n    var SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n    var SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n    var SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n    var SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n    var SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n    \r\n    // Fetching the IdentifySegmentsDaily procedure\r\n    // var identifySegments_Daily = 'exec procedure IdentifySegmentsDaily {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\"};';\r\n    // Log.Info(\"IdentifySegmentsDaily ... \" + identifySegments_Daily);\r\n    // queryModule.update(identifySegments_Daily);\r\n    \r\n    \r\n    // // Fetching the addSequenceToNetworkSegmentID_Daily procedure\r\n    // var addSequenceToNetworkSegmentID_Daily='exec procedure AddSequenceToNetworkSegmentID_Daily {\"Version\" : [\"' + Version + '\"]};';\r\n    // Log.Info(\" AddSequenceToNetworkSegmentID_Daily... \" + addSequenceToNetworkSegmentID_Daily);\r\n    // queryModule.update(addSequenceToNetworkSegmentID_Daily);\r\n  \r\n\r\n  \r\n  // Fetching the Replenishment_DemandSelection procedure\r\n//   var demandSelection =  'exec procedure  Replenishment_DemandSelection {\"Version\" : [\"' + Version + '\"]};';\r\n//   Log.Info(\"demandSelection ... \" + demandSelection);\r\n//   queryModule.update(demandSelection);\r\n  \r\n    var PhantomDemandPopulationAdhoc = 'exec procedure PhantomDemandPopulationAdhoc {\"Version\": \"' + Version + '\"};';\r\n    Log.Info(\"Phantom Demand Population Adoc..... \" + PhantomDemandPopulationAdhoc);\r\n    queryModule.update( PhantomDemandPopulationAdhoc);\r\n    var queryForExecution = 'exec procedure Replenishment_AdhocRun {\"Version\" : \"' + Version + '\", \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + '};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n    queryModule.update(queryForExecution);\r\n  //   if(Financial === true){\r\n  //   var ctfinancialprestep = 'exec procedure RunCTFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n  //   var ctfinancialpoststep = 'exec procedure RunCTFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n  //   Log.Info(\"Financial Pre Process ... \" + ctfinancialprestep);\r\n  //   Log.Info(\"Financial Post Process ... \" + ctfinancialpoststep);\r\n  //   queryModule.update(ctfinancialprestep);\r\n  //   queryModule.update(ctfinancialpoststep);\r\n  // }\r\n    // // Fetching the DailyInputBaselinePopulation procedure\r\n    // var InputBaselinePopulation_Daily ='exec procedure DailyInputBaselinePopulation {\"Version\" : \"' + Version + '\"};';\r\n    //     Log.Info(\"DailyInputBaselinePopulation ... \" + InputBaselinePopulation_Daily);\r\n    //     queryModule.update(InputBaselinePopulation_Daily);\r\n    var PhantomDemandNullificationAdhoc = 'exec procedure PhantomDemandNullificationAdhoc {\"Version\": \"' + Version + '\"};';\r\n    Log.Info(\"Phantom Demand Nullification Adhoc.....\" + PhantomDemandNullificationAdhoc);\r\n    queryModule.update(PhantomDemandNullificationAdhoc);\r\n\r\n  };\r\n  \r\n\r\n  return {\r\n    AdhocReplenScopedPlan:AdhocReplenScopedPlan\r\n  };\r\n  });",
    "Code": "define('o9.referencesupplyplanning.AdhocReplenScopedPlan', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var AdhocReplenScopedPlan = function(o9Params){\r\n    var queryModule = require('o9/data/query');\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var Version = parsedParams.Version;\r\n    var RunID = parsedParams.RunID;\r\n    var ActionType = parsedParams.ActionType;\r\n    var Product = parsedParams.Product;\r\n    var User = parsedParams.User;\r\n    var RunIDParent = parsedParams.RunIDParent;\r\n//   var Financial = parsedParams.RunFinancialPlan;\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info('Passed Fields'+ JSON.stringify(parsedParams));\r\n    \r\n    Log.Info(\"Executing Javasrcipt\");\r\n    var queryForScenarioCount = 'Select ([Version].[Version Name].filter(#.Key <=0).count);';\r\n    var getScenarioCount = queryModule.select(queryForScenarioCount);\r\n    Log.Info(\"ScenarioCount\" +  JSON.stringify(getScenarioCount));\r\n    var ScenarioCount = getScenarioCount.Result;\r\n    var queryForVersionCount = 'Select ([Version].[Version Name].filter(#.Key >=0).count);';\r\n    var getVersionCount = queryModule.select(queryForVersionCount);\r\n    Log.Info(\"VersionCount\" +  JSON.stringify(getVersionCount));\r\n    var VersionCount = getVersionCount.Result;\r\n    var ActionStartProcedure = 'exec procedure ActionStart {\"User\" : \"'+User+'\" , \"RunID\" : \"'+ RunID +'\",\"RunIDParent\" : \"'+ RunIDParent +'\", \"ActionType\" : \"'+ActionType+'\", \"Product\" : \"'+Product+'\",\"ScenarioCount\" : '+ScenarioCount+',\"VersionCount\" : '+VersionCount+',\"ScenarioName\" : \"' +Version+'\"};';\r\n    var ExecuteActionStartProcedure = queryModule.select(ActionStartProcedure);\r\n    Log.Info(\"SCS Command ... \" + ExecuteActionStartProcedure);\r\n  \r\n    var queryForPotential = 'SELECT &DailySolverStartBucket.element(0).Name;';\r\n    var lsResponse = queryModule.select(queryForPotential);\r\n    Log.Info(\"Daily Solver Start Bucket ... \" + lsResponse);\r\n    var DailySolverStartBucket = lsResponse.Result;\r\n  \r\n    var queryForPotential2 = 'SELECT &DailySolverCurrentBucket.element(0).Name;';\r\n    var lsResponse2 = queryModule.select(queryForPotential2);\r\n    Log.Info(\"Daily Solver Current Bucket ... \" + lsResponse2);\r\n    var DailySolverCurrentBucket = lsResponse2.Result;\r\n    \r\n    var queryForPotential3 = 'SELECT &DailySolverEndBucket.element(0).Name;';\r\n    var lsResponse3 = queryModule.select(queryForPotential3);\r\n    Log.Info(\"Daily Solver End Bucket ... \" + lsResponse3);\r\n    var DailySolverEndBucket = lsResponse3.Result;\r\n  \r\n    var queryForPotential4 = 'Select ([Version].[Version Name].[' + Version + '] * {Measure.[D Solver Demand Slice Factor],Measure.[D Solver Flag Allow NOH],Measure.[D Solver Flag Respect Freeze Window For WIPs],Measure.[D Solver Flag Minimize Inventory Build Ahead],(if    (Measure.[D Solver Flag Inventory Plan Type] == \"BOS_TO_QUANTITY\") then \"QUANTITY\" else Measure.[D Solver Flag Inventory Plan Type]) as Transient.[D Solver Flag Inventory Plan Type Modified],Measure.[D Solver Flag Inventory Plan Policy],Measure.[D Solver Inventory Plan Bands],Measure.[D Material Constrained],Measure.[D Capacity Constrained],Measure.[D Storage Constrained],Measure.[D Solver Capacity Bands To Minimize Lateness],Measure.[D Solver Delete Data],Measure.[D Solver Run Type Flag],Measure.[D Solver SS Build Ahead Limit],Measure.[D Solver Flag Minimize No Carry Violations],Measure.[D Solver Flag Try Material Reallocation In RCA],Measure.[D Solver Flag Inventory Plan Strategy],Measure.[D Solver Flag No Peggings],Measure.[D Solver Flag SupplyCode Plan],Measure.[D Solver Flag Shelf Life Plan],Measure.[D Plan Date Hard Peg],Measure.[D Min Time Hard Peg],Measure.[D Late Plan Strategy],Measure.[D Solver Demand Slice Threshold],Measure.[D Global Demand Build Ahead Limit], Measure.[D Global Demand Build Late Limit]});';\r\n    var lsResponse4 = queryModule.select(queryForPotential4);\r\n    Log.Info(\"SCSParameters ... \" + lsResponse4);\r\n    var dataCellSet = cellsetModule.createCellSet(lsResponse4);\r\n    \r\n    var SCPSolverDemandSliceFactor = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Factor'));\r\n    var SCPSolverFlagAllowNOH = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Allow NOH'));\r\n    var SCPSolverFlagRespectFreezeWindowForWIPs = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Respect Freeze Window For WIPs'));\r\n    var SCPSolverFlagMinimizeInventoryBuildAhead = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize Inventory Build Ahead'));\r\n    var SCPSolverFlagInventoryPlanType = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Type Modified'));\r\n    var SCPSolverFlagInventoryPlanPolicy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Policy'));\r\n    var SCPSolverInventoryPlanBands = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Inventory Plan Bands'));\r\n    var SCPMaterialConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Material Constrained'));\r\n    var SCPCapacityConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Capacity Constrained'));\r\n    var SCPStorageConstrained = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Storage Constrained'));\r\n    var SCPSolverCapacityBandsToMinimizeLateness = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Capacity Bands To Minimize Lateness'));\r\n    var SCPSolverDeleteData = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Delete Data'));\r\n    var SCPSolverRunTypeFlag = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Run Type Flag'));\r\n    var SCPSolverSSBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver SS Build Ahead Limit'));\r\n    var SCPSolverFlagMinimizeNoCarryViolations = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Minimize No Carry Violations'));\r\n    var SCPSolverFlagTryMaterialReallocationInRCA = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Try Material Reallocation In RCA'));\r\n    var SCPSolverFlagInventoryPlanStrategy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Inventory Plan Strategy'));\r\n    \r\n    var SCPSolverDemandSliceThreshold = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Demand Slice Threshold'));\r\n    var SCPLatePlanStratergy = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Late Plan Strategy'));\r\n    var SCPMinTimeHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Min Time Hard Peg'));\r\n    var SCPPlanDateHardPeg = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Plan Date Hard Peg'));\r\n    var SCPShelfLife = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag Shelf Life Plan'));\r\n    var SCPSupplyCode = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag SupplyCode Plan'));\r\n    var SCPSolverNoPegging = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Solver Flag No Peggings'));\r\n    var SCPSolverDemandBuildAheadLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Ahead Limit'));\r\n    var SCPSolverDemandBuildLateLimit = dataCellSet.row(0).cell(dataCellSet.measureColumnIndex('D Global Demand Build Late Limit'));\r\n    \r\n    // Fetching the IdentifySegmentsDaily procedure\r\n    // var identifySegments_Daily = 'exec procedure IdentifySegmentsDaily {\"Version\" : [\"' + Version + '\"], \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\"};';\r\n    // Log.Info(\"IdentifySegmentsDaily ... \" + identifySegments_Daily);\r\n    // queryModule.update(identifySegments_Daily);\r\n    \r\n    \r\n    // // Fetching the addSequenceToNetworkSegmentID_Daily procedure\r\n    // var addSequenceToNetworkSegmentID_Daily='exec procedure AddSequenceToNetworkSegmentID_Daily {\"Version\" : [\"' + Version + '\"]};';\r\n    // Log.Info(\" AddSequenceToNetworkSegmentID_Daily... \" + addSequenceToNetworkSegmentID_Daily);\r\n    // queryModule.update(addSequenceToNetworkSegmentID_Daily);\r\n  \r\n\r\n  \r\n  // Fetching the Replenishment_DemandSelection procedure\r\n//   var demandSelection =  'exec procedure  Replenishment_DemandSelection {\"Version\" : [\"' + Version + '\"]};';\r\n//   Log.Info(\"demandSelection ... \" + demandSelection);\r\n//   queryModule.update(demandSelection);\r\n  \r\n    var PhantomDemandPopulationAdhoc = 'exec procedure PhantomDemandPopulationAdhoc {\"Version\": \"' + Version + '\"};';\r\n    Log.Info(\"Phantom Demand Population Adoc..... \" + PhantomDemandPopulationAdhoc);\r\n    queryModule.update( PhantomDemandPopulationAdhoc);\r\n    var queryForExecution = 'exec procedure Replenishment_AdhocRun {\"Version\" : \"' + Version + '\", \"DSolverCurrentBucket\" : \"' + DailySolverCurrentBucket + '\" , \"DSolverStartingBucket\" : \"' + DailySolverStartBucket + '\", \"DSolverEndingBucket\" : \"' + DailySolverEndBucket + '\",\"DSolverDemandSliceFactor\" : ' + SCPSolverDemandSliceFactor + ',\"DSolverFlagAllowNOH\" : \"' + SCPSolverFlagAllowNOH + '\",\"DSolverFlagRespectFreezeWindowForWIPs\" : \"' + SCPSolverFlagRespectFreezeWindowForWIPs  + '\",\"DSolverFlagMinimizeInventoryBuildAhead\" : \"' + SCPSolverFlagMinimizeInventoryBuildAhead + '\",\"DSolverFlagInventoryPlanType\" : \"' + SCPSolverFlagInventoryPlanType +'\",\"DSolverFlagInventoryPlanPolicy\" : \"' + SCPSolverFlagInventoryPlanPolicy + '\",\"DSolverInventoryPlanBands\" : \"' + SCPSolverInventoryPlanBands + '\",\"DMaterialConstrained\" : \"' + SCPMaterialConstrained + '\",\"DCapacityConstrained\" : \"' + SCPCapacityConstrained +'\",\"DStorageConstrained\" : \"' + SCPStorageConstrained +'\",\"DSolverDeleteData\" : \"' + SCPSolverDeleteData + '\",\"DSolverCapacityBandsToMinimizeLateness\" : \"' + SCPSolverCapacityBandsToMinimizeLateness + '\",\"DSolverSSBuildAheadLimit\" : ' + SCPSolverSSBuildAheadLimit + ',\"DSolverFlagMinimizeNoCarryViolations\" : \"' + SCPSolverFlagMinimizeNoCarryViolations +'\",\"DSolverFlagTryMaterialReallocationInRCA\" : \"' + SCPSolverFlagTryMaterialReallocationInRCA + '\",\"DSolverFlagInventoryPlanStrategy\" : \"' + SCPSolverFlagInventoryPlanStrategy + '\",\"DDemandSliceThreshold\" : ' + SCPSolverDemandSliceThreshold + ',\"DLatePlanStrategy\" : \"' + SCPLatePlanStratergy + '\",\"DMinTimeHardPeg\" : \"' + SCPMinTimeHardPeg + '\",\"DPlanDateHardPeg\" : \"' + SCPPlanDateHardPeg + '\",\"DShelfLifePlan\" : \"' + SCPShelfLife + '\",\"DSupplyCodePlan\" : \"' + SCPSupplyCode + '\",\"DNoPeggings\" : \"' + SCPSolverNoPegging + '\",\"DSolverGlobalBuildAheadLimit\" : ' + SCPSolverDemandBuildAheadLimit + ',\"DSolverGlobalBuildLateLimit\" : ' + SCPSolverDemandBuildLateLimit + '};';\r\n    Log.Info(\"SCS Command ... \" + queryForExecution);\r\n    queryModule.update(queryForExecution);\r\n  //   if(Financial === true){\r\n  //   var ctfinancialprestep = 'exec procedure RunCTFinancialPreProcess {\"Version\" : '+ Version +'};';\r\n  //   var ctfinancialpoststep = 'exec procedure RunCTFinancialPostProcess {\"Version\" : '+ Version +'};';\r\n  //   Log.Info(\"Financial Pre Process ... \" + ctfinancialprestep);\r\n  //   Log.Info(\"Financial Post Process ... \" + ctfinancialpoststep);\r\n  //   queryModule.update(ctfinancialprestep);\r\n  //   queryModule.update(ctfinancialpoststep);\r\n  // }\r\n    // // Fetching the DailyInputBaselinePopulation procedure\r\n    // var InputBaselinePopulation_Daily ='exec procedure DailyInputBaselinePopulation {\"Version\" : \"' + Version + '\"};';\r\n    //     Log.Info(\"DailyInputBaselinePopulation ... \" + InputBaselinePopulation_Daily);\r\n    //     queryModule.update(InputBaselinePopulation_Daily);\r\n    var PhantomDemandNullificationAdhoc = 'exec procedure PhantomDemandNullificationAdhoc {\"Version\": \"' + Version + '\"};';\r\n    Log.Info(\"Phantom Demand Nullification Adhoc.....\" + PhantomDemandNullificationAdhoc);\r\n    queryModule.update(PhantomDemandNullificationAdhoc);\r\n\r\n  };\r\n  \r\n\r\n  return {\r\n    AdhocReplenScopedPlan:AdhocReplenScopedPlan\r\n  };\r\n  });",
    "ModuleName": "o9.referencesupplyplanning.AdhocReplenScopedPlan",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "701f1c3f-8758-5eb6-5957-f9ed0d66cdd2",
    "ModuleId": "5fb00a3a-3d20-4d2b-b866-61ef1c0c40b2"
  },
  {
    "Id": 213067,
    "Description": "Demand Netting Month level",
    "Documentation": "define('o9.referencesupplyplanning.DemandNettingatMonth', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DemandNettingatMonth = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencesupplyplanning.DemandNettingatMonth\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n    \r\n\r\n\t\r\n\tvar LoggingButtonStatusDemandNettingStarted = 'SELECT (\"Logging Button DemandNetting Started\");';\r\n    Log.Info(\"LoggingButtonStatusDemandNettingStarted ... \" + LoggingButtonStatusDemandNettingStarted); \r\n    queryModule.update(LoggingButtonStatusDemandNettingStarted);\r\n\t\r\n//Query for CreateUniqueDemandIDs\r\n\tvar CreateUniqueDemandIDs ='select (Version.[Version Name].[' + Version + '] ) on row,({Measure.[W Create Unique DemandIDs]}) on column;';\r\n\tLog.Info(\"CreateUniqueDemandIDs ... \" + CreateUniqueDemandIDs); \r\n\tvar queryForPotential3 = CreateUniqueDemandIDs ;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar lsResponse3 = queryModule.select(queryForPotential3);\r\n\tvar dataCellSet3 = cellsetModule.createCellSet(lsResponse3);\r\n\r\n\tvar CreateUniqueDemandIDs = dataCellSet3.row(0).cell(dataCellSet3.measureColumnIndex('W Create Unique DemandIDs'));\r\n\t\t\r\n//Run Demand Netting\r\n\tvar DemandNettingForecastInputs = 'exec procedure MasterDemandNettingAtMonthWeekly {\"Version\" : \"' + Version + '\"};'\r\n\tLog.Info(\"DemandNettingForecastInputs...\" + DemandNettingForecastInputs);\r\n\tqueryModule.update(DemandNettingForecastInputs);\r\n\tvar DemandNettingPostUploadFiles = 'exec procedure DemandNettingAtMonthWeekly  {\"Version\" : \"' + Version + '\",\"CreateUniqueDemandIDs\" : ' + CreateUniqueDemandIDs + '};';\r\n\tLog.Info(\"DemandNettingPostUploadFiles ... \" + DemandNettingPostUploadFiles); \r\n    queryModule.update(DemandNettingPostUploadFiles);\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tDemandNettingatMonth:DemandNettingatMonth\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.DemandNettingatMonth', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var DemandNettingatMonth = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencesupplyplanning.DemandNettingatMonth\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Version = ParsedParams.Version;\r\n    \r\n\r\n\t\r\n\tvar LoggingButtonStatusDemandNettingStarted = 'SELECT (\"Logging Button DemandNetting Started\");';\r\n    Log.Info(\"LoggingButtonStatusDemandNettingStarted ... \" + LoggingButtonStatusDemandNettingStarted); \r\n    queryModule.update(LoggingButtonStatusDemandNettingStarted);\r\n\t\r\n//Query for CreateUniqueDemandIDs\r\n\tvar CreateUniqueDemandIDs ='select (Version.[Version Name].[' + Version + '] ) on row,({Measure.[W Create Unique DemandIDs]}) on column;';\r\n\tLog.Info(\"CreateUniqueDemandIDs ... \" + CreateUniqueDemandIDs); \r\n\tvar queryForPotential3 = CreateUniqueDemandIDs ;\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar lsResponse3 = queryModule.select(queryForPotential3);\r\n\tvar dataCellSet3 = cellsetModule.createCellSet(lsResponse3);\r\n\r\n\tvar CreateUniqueDemandIDs = dataCellSet3.row(0).cell(dataCellSet3.measureColumnIndex('W Create Unique DemandIDs'));\r\n\t\t\r\n//Run Demand Netting\r\n\tvar DemandNettingForecastInputs = 'exec procedure MasterDemandNettingAtMonthWeekly {\"Version\" : \"' + Version + '\"};'\r\n\tLog.Info(\"DemandNettingForecastInputs...\" + DemandNettingForecastInputs);\r\n\tqueryModule.update(DemandNettingForecastInputs);\r\n\tvar DemandNettingPostUploadFiles = 'exec procedure DemandNettingAtMonthWeekly  {\"Version\" : \"' + Version + '\",\"CreateUniqueDemandIDs\" : ' + CreateUniqueDemandIDs + '};';\r\n\tLog.Info(\"DemandNettingPostUploadFiles ... \" + DemandNettingPostUploadFiles); \r\n    queryModule.update(DemandNettingPostUploadFiles);\r\n\r\n};   \r\n\t\r\nreturn {\r\n\tDemandNettingatMonth:DemandNettingatMonth\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.DemandNettingatMonth",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "6e25e7f7-2223-4fe1-962b-0edfdbe90aa7",
    "ModuleId": "ec3d04db-c5c2-4b47-9799-9ed962d3f306"
  },
  {
    "Id": 213068,
    "Description": "MultiDestinations",
    "Documentation": "define('o9.SCDMABDMTransformationsCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM Create Members Required], Measure.[ABDM Filter], Measure.[ABDM Group By], Measure.[ABDM Join Key], Measure.[ABDM Join Type], Measure.[ABDM Order By], Measure.[ABDM Source Column], Measure.[ABDM Source Table], Measure.[ABDM Target Column], Measure.[ABDM Target Table]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM Create Members Required] = \"false\"; Measure.[ABDM Filter] = \"\"; Measure.[ABDM Group By] = \"\"; Measure.[ABDM Join Key] = \"\"; Measure.[ABDM Order By] = \"\"; Measure.[ABDM Source Column] = \"\"; Measure.[ABDM Source Table] = \"\"; Measure.[ABDM Target Column] = \"\"; Measure.[ABDM Target Table] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "Code": "define('o9.SCDMABDMTransformationsCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM Create Members Required], Measure.[ABDM Filter], Measure.[ABDM Group By], Measure.[ABDM Join Key], Measure.[ABDM Join Type], Measure.[ABDM Order By], Measure.[ABDM Source Column], Measure.[ABDM Source Table], Measure.[ABDM Target Column], Measure.[ABDM Target Table]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM Create Members Required] = \"false\"; Measure.[ABDM Filter] = \"\"; Measure.[ABDM Group By] = \"\"; Measure.[ABDM Join Key] = \"\"; Measure.[ABDM Order By] = \"\"; Measure.[ABDM Source Column] = \"\"; Measure.[ABDM Source Table] = \"\"; Measure.[ABDM Target Column] = \"\"; Measure.[ABDM Target Table] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "ModuleName": "o9.SCDMABDMTransformationsCreateRow.MultiDestinations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "1ec502ae-f7ac-70fd-dcf3-f3b023b4d347",
    "ModuleId": "69c63dc5-4f82-4296-89e9-7839154cd5be"
  },
  {
    "Id": 213069,
    "Description": "MultiDestinations",
    "Documentation": "define('o9.SCDMABDMCreateMemberCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM CM Dimension Name], Measure.[ABDM CM Attribute Name], Measure.[ABDM CM Method], Measure.[ABDM CM Value]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM CM Attribute Name] = \"\"; Measure.[ABDM CM Dimension Name] = \"\"; Measure.[ABDM CM Method] = \"\"; Measure.[ABDM CM Value] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "Code": "define('o9.SCDMABDMCreateMemberCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM CM Dimension Name], Measure.[ABDM CM Attribute Name], Measure.[ABDM CM Method], Measure.[ABDM CM Value]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM CM Attribute Name] = \"\"; Measure.[ABDM CM Dimension Name] = \"\"; Measure.[ABDM CM Method] = \"\"; Measure.[ABDM CM Value] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "ModuleName": "o9.SCDMABDMCreateMemberCreateRow.MultiDestinations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "7253a57a-a24e-d321-721c-5ab987587de4",
    "ModuleId": "69c63dc5-4f82-4296-89e9-7839154cd5be"
  },
  {
    "Id": 213070,
    "Description": "To create a blank row in a workspace",
    "Documentation": "define('o9.SCDMABDMInputsCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n    var DataType = parsedParams.DataType;\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM Data Direction], Measure.[ABDM IBPL Query], Measure.[ABDM Input Data Source], Measure.[ABDM LS Object Name]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM Data Direction] = \"'+  DataType  +'\"; Measure.[ABDM LS Object Name] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "Code": "define('o9.SCDMABDMInputsCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n    var DataType = parsedParams.DataType;\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM Data Direction], Measure.[ABDM IBPL Query], Measure.[ABDM Input Data Source], Measure.[ABDM LS Object Name]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM Data Direction] = \"'+  DataType  +'\"; Measure.[ABDM LS Object Name] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "ModuleName": "o9.SCDMABDMInputsCreateRow.MultiDestinations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "843860bc-b196-71f6-124c-a6f371077cce",
    "ModuleId": "69c63dc5-4f82-4296-89e9-7839154cd5be"
  },
  {
    "Id": 213071,
    "Description": "MultiDestinations",
    "Documentation": "define('o9.SCDMABDMRuleMappingsCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM Input Attributes], Measure.[ABDM Measure Name in Rules UI], Measure.[ABDM RM Source Table]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM Input Attributes] = \"\"; Measure.[ABDM Measure Name in Rules UI] = \"\"; Measure.[ABDM RM Source Table] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "Code": "define('o9.SCDMABDMRuleMappingsCreateRow.MultiDestinations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\tvar MultiDestinations = function(o9Params){\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var Version = parsedParams.Version;\r\n\r\n    var DataObject = parsedParams.DataObject;\r\n\r\n    Log.Info('..................Starting with a Smile..................');\r\n\r\n    var execibplselect = 'Select ([Version].[Version Name] * [Sequence ID].[Sequence ID] * [Data Object].[Data Object].['+ DataObject +'] ) on row, ({Measure.[ABDM Input Attributes], Measure.[ABDM Measure Name in Rules UI], Measure.[ABDM RM Source Table]}) on column;'\r\n\r\n    Log.Info('select IBPL Executed...');    \r\n    var dataCellSetCAMAllocation = cellsetModule.createCellSet(queryModule.select(execibplselect));\r\n    var maxSeqNum = dataCellSetCAMAllocation.rowCount;\r\n\r\n    var nextSeqNum = maxSeqNum + 1;\r\n    Log.Info('maxSeqNum Type is ===== ');\r\n    Log.Info(typeof maxSeqNum);\r\n    Log.Info('nextSeqNum ===== ' + nextSeqNum);\r\n    Log.Info('nextSeqNum Type is ===== ');\r\n    Log.Info(typeof nextSeqNum);\r\n    \r\n    var CreateSeqID = 'createmember([Sequence ID].[Sequence ID]={,\"'+ nextSeqNum +'\"});' ;\r\n    Log.Info('Create Seq ID ===== ' + CreateSeqID);\r\n    queryModule.update(CreateSeqID);\r\n    Log.Info('Seq ID Created...');\r\n\r\n    var execibpl = 'Cartesian scope:  ([Version].[Version Name].['+ Version +'] * [Sequence ID].[Sequence ID].['+ nextSeqNum +'] * [Data Object].[Data Object].['+ DataObject +'] ); Measure.[ABDM Input Attributes] = \"\"; Measure.[ABDM Measure Name in Rules UI] = \"\"; Measure.[ABDM RM Source Table] = \"\"; end scope;'\r\n\r\n    Log.Info('IBPL Executed...');    \r\n    Log.Info(execibpl);\r\n\r\n    queryModule.update(execibpl);\r\n    Log.Info('....................Ending with a Cheesy Smile....................');\r\n};\r\nreturn {\r\n\tMultiDestinations:MultiDestinations\r\n\t};\r\n});",
    "ModuleName": "o9.SCDMABDMRuleMappingsCreateRow.MultiDestinations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "f6ccfd31-ccec-00fc-3ae0-ac7ef61b5216",
    "ModuleId": "69c63dc5-4f82-4296-89e9-7839154cd5be"
  },
  {
    "Id": 213072,
    "Description": "envDiagnostic",
    "Documentation": "define('o9.ekgconfig.envDiagnostic', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n\r\n    const failureMessages = {\r\n    \"Python Environment Check\": \"Check tenant's <b>Python Environment</b> or reach out to DevOps to resolve this issue\",\r\n    \"Tenant URL and API Key Verification\": \"Check if the tenant is running and verify the <b>Tenant URL and API key</b> in the EKG Deployment workspace\",\r\n    \"Implementor Key and Project Name Verification\": \"Verify the <b>Implementer's Key and Project Name</b> provided in EKG Deployment workspace\",\r\n    \"Data Store Connectivity Check\": \"Verify the <b>DataStore details</b> provided in EKG Deployment workspace\",\r\n    \"Int 3 Pipeline Group API Verification\": \"Unable to create <b>Pipeline Group</b> in the Int3 canvas. Reach out to Int3 team\",\r\n    \"Int 3 Pipeline API Verification\": \"Unable to create <b>Pipeline</b> in the Int3 canvas. Reach out to Int3 team\",\r\n    \"Seed Data Check\": \"Unable to fetch <b>Seed Data</b>.Please verify and upload the seed data.\"\r\n};\r\n\r\nfunction getFailureMessage(key) {\r\n    return failureMessages[key] || \"No message found for this key.\";\r\n}\r\n    var removestring = function(str) {\r\n    const endingWords = ['verification', 'check'];\r\n\r\n    for (let word of endingWords) {\r\n        if (str.toLowerCase().endsWith(word)) {\r\n            const endIndex = str.toLowerCase().lastIndexOf(word);\r\n            return str.substring(0, endIndex).trim();\r\n        }\r\n    }\r\n    \r\n    return str;\r\n};\r\n    var envDiagnostic = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n    var Flag = true;\r\n\r\n    var querynullEnvMeasure = 'scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber] );Measure.[o9EKG Env Diag Category] = null ;Measure.[o9EKG Env Diag Status] = null ;end scope;';\r\n    \r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + querynullEnvMeasure);\r\n    queryModule.update(querynullEnvMeasure);\r\n    \r\n    var queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[1] );Measure.[o9EKG Env Diag Category] = \"Python Environment Check\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n    queryModule.update(queryPythonEnvUpdate);    \r\n    \r\n    var queryPythonEnvUpdate2 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[3] );Measure.[o9EKG Env Diag Category] = \"Tenant URL and API Key Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate2);\r\n    queryModule.update(queryPythonEnvUpdate2);\r\n        \r\n    var queryPythonEnvUpdate3 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[4] );Measure.[o9EKG Env Diag Category] = \"Implementor Key and Project Name Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate3);\r\n    queryModule.update(queryPythonEnvUpdate3);\r\n    \r\n    var queryPythonEnvUpdate4 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[5] );Measure.[o9EKG Env Diag Category] = \"Data Store Connectivity Check\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate4);\r\n    queryModule.update(queryPythonEnvUpdate4);\r\n    \r\n    var queryPythonEnvUpdate5 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[6] );Measure.[o9EKG Env Diag Category] = \"Int 3 Pipeline Group API Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate5);\r\n    queryModule.update(queryPythonEnvUpdate5);  \r\n    \r\n    \r\n    var queryPythonEnvUpdate6 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[7] );Measure.[o9EKG Env Diag Category] = \"Int 3 Pipeline API Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate6);\r\n    queryModule.update(queryPythonEnvUpdate6);\r\n\r\n    var queryPythonEnvUpdate7 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate7);\r\n    queryModule.update(queryPythonEnvUpdate7); \r\n\r\n    try {\r\n    var dummpy_plugin='EXEC plugin instance o9EKGDummyPlugin;';\r\n    queryModule.update(dummpy_plugin);\r\n    }\r\n    catch(err){\r\n        Log.Error(\"<EKG - Environment Diagnostics Logs > : Python Plugin could not Run\");\r\n    }\r\n    \r\n    let dummy_checkIBPL = \"Select (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[1] ) on row,({Measure.[o9EKG Env Diag Category], Measure.[o9EKG Env Diag Status]}) on column;\";\r\n    let dummy_status = cellsetModule.createCellSet(queryModule.select(dummy_checkIBPL));\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : Python Environment Check = \"+dummy_status.row(0).cell(3));\r\n    \r\n    if (dummy_status.row(0).cell(3) == 'Success')\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( o9MKPipelineSettings.[Group] * o9MKPipelineSettings.[PipelineSettingsName] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.Pipeline_Settings\"+ err }; \r\n       let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[7] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.Pipeline_Settings)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate); \r\n    }\r\n\r\n    if (Flag === true)\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select (o9MKTime.[Year] * o9MKTime.[Quarter] * o9MKTime.[Month] * o9MKTime.[Day] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.o9MKTime.csv\" }; \r\n       let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.o9MKTime.csv)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n    }\r\n    if (Flag === true)\r\n        {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( o9EKGSequence.[o9EKGSequenceNumber] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false ;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.Dimension.o9EKGSequence\" }; \r\n       let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.o9EKGSequence)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n}\r\nif (Flag === true)\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( [o9EKGServices].[o9EKGService] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false ;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.o9EKGService\" }; \r\n        let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.o9EKGService)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n}\r\nif (Flag === true)\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( o9EKGPipelines.[Pipeline Group] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false ;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.PipelineGroup\" }; \r\n        let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.PipelineGroup)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n    }\r\nif (Flag === true)\r\n    {  \r\n        let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check \" ;Measure.[o9EKG Env Diag Status] = \"Success\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }  \r\n    }\r\n\r\n    // if (dummy_status.row(0).cell(3) == 'Success')\r\n    // {\r\n    //     var env_plugin='EXEC plugin instance o9EKGEnvDiagPlugin;';\r\n    //     queryModule.update(env_plugin);  \r\n    // }\r\n    \r\n    let SummaryIBPL = \"Select (&CWV * [o9EKGSequence].[o9EKGSequenceNumber] ) on row,({Measure.[o9EKG Env Diag Category], Measure.[o9EKG Env Diag Status]}) on column;\";\r\n    let summary2 = cellsetModule.createCellSet(queryModule.select(SummaryIBPL));\r\n\r\n    if (summary2.row(1).cell(3) == 'Success')\r\n    {\r\n        var env_plugin='EXEC plugin instance o9EKGEnvDiagPlugin;';\r\n        queryModule.update(env_plugin);  \r\n    }\r\n    // let JSONStatusFlag=JSONStatusFlagPivot.row(0).cell(2);\r\n\r\n    // let SummaryIBPL = \"Select (&CWV * [o9EKGSequence].[o9EKGSequenceNumber] ) on row,({Measure.[o9EKG Env Diag Category], Measure.[o9EKG Env Diag Status]}) on column;\";\r\n    let summary = cellsetModule.createCellSet(queryModule.select(SummaryIBPL));\r\n    \r\n    let diag_summary = '<p><b> EKG - Environment Diagnostics Summary :</b><br> ';\r\n    let failed_test = '';\r\n    let failure_message = '';\r\n    for (i=0;i<summary.rowCount;i++)\r\n    {   let status_msg = summary.row(i).cell(3);\r\n        diag_summary += summary.row(i).cell(2);\r\n        diag_summary += \" - \";\r\n        if ((summary.row(i).cell(3))=='Success')\r\n        {\r\n        diag_summary += ((status_msg).fontcolor(\"green\"));\r\n        }\r\n        else if ((summary.row(i).cell(3))=='Failure')\r\n        {\r\n          diag_summary += ((status_msg).fontcolor(\"red\"));  \r\n          failed_test += (removestring(summary.row(i).cell(2))).bold();\r\n          \r\n          const new_message = getFailureMessage(summary.row(i).cell(2));\r\n          failure_message += ((\"<b>Environment diagnostics failed</b> and couldn't perform subsequent tests.<br>\"+new_message).fontcolor('red'));\r\n          Log.Info(\"<EKG - Environment Diagnostics Logs > \"+failed_test);\r\n        }\r\n        else \r\n        {\r\n          diag_summary += (status_msg).fontcolor(\"blue\");    \r\n        }\r\n        if (i !=summary.rowCount-1 )\r\n        {\r\n        diag_summary += \"  , <br> \";\r\n        }\r\n            \r\n        }\r\n    \r\n    let success_Message = ((\"Environment Diagnostics successful.\").fontcolor('green')).bold();\r\n    \r\n    \r\n    Log.Info(summary.row(summary.rowCount - 1).cell(3));\r\n    if (summary.row(summary.rowCount - 1).cell(3) == \"Success\")\r\n    {\r\n    RuleOutputToUI={Status : \"Success\",Message: (\"<pre style='line-height: 0.8;'><font size ='2'>\"+success_Message+\"</font><font size ='1'>\"+diag_summary+\"<br></font></pre>\")};\r\n    }\r\n    else\r\n    {\r\n    \r\n    RuleOutputToUI={Status : \"Success\",Message:\"<pre style='line-height: 0.8;'><font size ='2'>\"+failure_message+\"</font><font size ='1'>\"+diag_summary+\"<br></font></pre>\"};\r\n    }\r\n\r\n    Log.Info(diag_summary);\r\n    \r\n    return;\r\n  };\r\n      return {\r\n        envDiagnostic: envDiagnostic\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.envDiagnostic', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n\r\n    const failureMessages = {\r\n    \"Python Environment Check\": \"Check tenant's <b>Python Environment</b> or reach out to DevOps to resolve this issue\",\r\n    \"Tenant URL and API Key Verification\": \"Check if the tenant is running and verify the <b>Tenant URL and API key</b> in the EKG Deployment workspace\",\r\n    \"Implementor Key and Project Name Verification\": \"Verify the <b>Implementer's Key and Project Name</b> provided in EKG Deployment workspace\",\r\n    \"Data Store Connectivity Check\": \"Verify the <b>DataStore details</b> provided in EKG Deployment workspace\",\r\n    \"Int 3 Pipeline Group API Verification\": \"Unable to create <b>Pipeline Group</b> in the Int3 canvas. Reach out to Int3 team\",\r\n    \"Int 3 Pipeline API Verification\": \"Unable to create <b>Pipeline</b> in the Int3 canvas. Reach out to Int3 team\",\r\n    \"Seed Data Check\": \"Unable to fetch <b>Seed Data</b>.Please verify and upload the seed data.\"\r\n};\r\n\r\nfunction getFailureMessage(key) {\r\n    return failureMessages[key] || \"No message found for this key.\";\r\n}\r\n    var removestring = function(str) {\r\n    const endingWords = ['verification', 'check'];\r\n\r\n    for (let word of endingWords) {\r\n        if (str.toLowerCase().endsWith(word)) {\r\n            const endIndex = str.toLowerCase().lastIndexOf(word);\r\n            return str.substring(0, endIndex).trim();\r\n        }\r\n    }\r\n    \r\n    return str;\r\n};\r\n    var envDiagnostic = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n    var Flag = true;\r\n\r\n    var querynullEnvMeasure = 'scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber] );Measure.[o9EKG Env Diag Category] = null ;Measure.[o9EKG Env Diag Status] = null ;end scope;';\r\n    \r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + querynullEnvMeasure);\r\n    queryModule.update(querynullEnvMeasure);\r\n    \r\n    var queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[1] );Measure.[o9EKG Env Diag Category] = \"Python Environment Check\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n    queryModule.update(queryPythonEnvUpdate);    \r\n    \r\n    var queryPythonEnvUpdate2 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[3] );Measure.[o9EKG Env Diag Category] = \"Tenant URL and API Key Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate2);\r\n    queryModule.update(queryPythonEnvUpdate2);\r\n        \r\n    var queryPythonEnvUpdate3 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[4] );Measure.[o9EKG Env Diag Category] = \"Implementor Key and Project Name Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate3);\r\n    queryModule.update(queryPythonEnvUpdate3);\r\n    \r\n    var queryPythonEnvUpdate4 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[5] );Measure.[o9EKG Env Diag Category] = \"Data Store Connectivity Check\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate4);\r\n    queryModule.update(queryPythonEnvUpdate4);\r\n    \r\n    var queryPythonEnvUpdate5 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[6] );Measure.[o9EKG Env Diag Category] = \"Int 3 Pipeline Group API Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate5);\r\n    queryModule.update(queryPythonEnvUpdate5);  \r\n    \r\n    \r\n    var queryPythonEnvUpdate6 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[7] );Measure.[o9EKG Env Diag Category] = \"Int 3 Pipeline API Verification\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate6);\r\n    queryModule.update(queryPythonEnvUpdate6);\r\n\r\n    var queryPythonEnvUpdate7 = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check\" ;Measure.[o9EKG Env Diag Status] = \"Could not run!\" ;end scope;';\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate7);\r\n    queryModule.update(queryPythonEnvUpdate7); \r\n\r\n    try {\r\n    var dummpy_plugin='EXEC plugin instance o9EKGDummyPlugin;';\r\n    queryModule.update(dummpy_plugin);\r\n    }\r\n    catch(err){\r\n        Log.Error(\"<EKG - Environment Diagnostics Logs > : Python Plugin could not Run\");\r\n    }\r\n    \r\n    let dummy_checkIBPL = \"Select (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[1] ) on row,({Measure.[o9EKG Env Diag Category], Measure.[o9EKG Env Diag Status]}) on column;\";\r\n    let dummy_status = cellsetModule.createCellSet(queryModule.select(dummy_checkIBPL));\r\n    Log.Info(\"<EKG - Environment Diagnostics Logs > : Python Environment Check = \"+dummy_status.row(0).cell(3));\r\n    \r\n    if (dummy_status.row(0).cell(3) == 'Success')\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( o9MKPipelineSettings.[Group] * o9MKPipelineSettings.[PipelineSettingsName] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.Pipeline_Settings\"+ err }; \r\n       let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[7] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.Pipeline_Settings)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate); \r\n    }\r\n\r\n    if (Flag === true)\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select (o9MKTime.[Year] * o9MKTime.[Quarter] * o9MKTime.[Month] * o9MKTime.[Day] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.o9MKTime.csv\" }; \r\n       let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.o9MKTime.csv)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n    }\r\n    if (Flag === true)\r\n        {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( o9EKGSequence.[o9EKGSequenceNumber] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false ;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.Dimension.o9EKGSequence\" }; \r\n       let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.o9EKGSequence)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n}\r\nif (Flag === true)\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( [o9EKGServices].[o9EKGService] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false ;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.o9EKGService\" }; \r\n        let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.o9EKGService)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n}\r\nif (Flag === true)\r\n    {\r\n    try {\r\n        let seed_dataIBPL = \"Select ( o9EKGPipelines.[Pipeline Group] );\";\r\n        let seed_data_status = cellsetModule.createCellSet(queryModule.select(seed_dataIBPL));\r\n        // Log.Info(\"<EKG - Environment Diagnostics Logs > : Seed Data Check = \"+seed_data_status.row(0).cell(3));\r\n    }\r\n    catch(err) {\r\n        Flag = false ;\r\n    //    RuleOutputToUI = {Status : \"Success\",Message: \"Dimention Not Found : Dimension.PipelineGroup\" }; \r\n        let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check (Dimension.PipelineGroup)\" ;Measure.[o9EKG Env Diag Status] = \"Failure\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }\r\n    }\r\nif (Flag === true)\r\n    {  \r\n        let queryPythonEnvUpdate = 'cartesian scope: (&CWV * [o9EKGSequence].[o9EKGSequenceNumber].[2] );Measure.[o9EKG Env Diag Category] = \"Seed Data Check \" ;Measure.[o9EKG Env Diag Status] = \"Success\" ;end scope;';\r\n       Log.Info(\"<EKG - Environment Diagnostics Logs > : query formed = \" + queryPythonEnvUpdate);\r\n       queryModule.update(queryPythonEnvUpdate);\r\n    }  \r\n    }\r\n\r\n    // if (dummy_status.row(0).cell(3) == 'Success')\r\n    // {\r\n    //     var env_plugin='EXEC plugin instance o9EKGEnvDiagPlugin;';\r\n    //     queryModule.update(env_plugin);  \r\n    // }\r\n    \r\n    let SummaryIBPL = \"Select (&CWV * [o9EKGSequence].[o9EKGSequenceNumber] ) on row,({Measure.[o9EKG Env Diag Category], Measure.[o9EKG Env Diag Status]}) on column;\";\r\n    let summary2 = cellsetModule.createCellSet(queryModule.select(SummaryIBPL));\r\n\r\n    if (summary2.row(1).cell(3) == 'Success')\r\n    {\r\n        var env_plugin='EXEC plugin instance o9EKGEnvDiagPlugin;';\r\n        queryModule.update(env_plugin);  \r\n    }\r\n    // let JSONStatusFlag=JSONStatusFlagPivot.row(0).cell(2);\r\n\r\n    // let SummaryIBPL = \"Select (&CWV * [o9EKGSequence].[o9EKGSequenceNumber] ) on row,({Measure.[o9EKG Env Diag Category], Measure.[o9EKG Env Diag Status]}) on column;\";\r\n    let summary = cellsetModule.createCellSet(queryModule.select(SummaryIBPL));\r\n    \r\n    let diag_summary = '<p><b> EKG - Environment Diagnostics Summary :</b><br> ';\r\n    let failed_test = '';\r\n    let failure_message = '';\r\n    for (i=0;i<summary.rowCount;i++)\r\n    {   let status_msg = summary.row(i).cell(3);\r\n        diag_summary += summary.row(i).cell(2);\r\n        diag_summary += \" - \";\r\n        if ((summary.row(i).cell(3))=='Success')\r\n        {\r\n        diag_summary += ((status_msg).fontcolor(\"green\"));\r\n        }\r\n        else if ((summary.row(i).cell(3))=='Failure')\r\n        {\r\n          diag_summary += ((status_msg).fontcolor(\"red\"));  \r\n          failed_test += (removestring(summary.row(i).cell(2))).bold();\r\n          \r\n          const new_message = getFailureMessage(summary.row(i).cell(2));\r\n          failure_message += ((\"<b>Environment diagnostics failed</b> and couldn't perform subsequent tests.<br>\"+new_message).fontcolor('red'));\r\n          Log.Info(\"<EKG - Environment Diagnostics Logs > \"+failed_test);\r\n        }\r\n        else \r\n        {\r\n          diag_summary += (status_msg).fontcolor(\"blue\");    \r\n        }\r\n        if (i !=summary.rowCount-1 )\r\n        {\r\n        diag_summary += \"  , <br> \";\r\n        }\r\n            \r\n        }\r\n    \r\n    let success_Message = ((\"Environment Diagnostics successful.\").fontcolor('green')).bold();\r\n    \r\n    \r\n    Log.Info(summary.row(summary.rowCount - 1).cell(3));\r\n    if (summary.row(summary.rowCount - 1).cell(3) == \"Success\")\r\n    {\r\n    RuleOutputToUI={Status : \"Success\",Message: (\"<pre style='line-height: 0.8;'><font size ='2'>\"+success_Message+\"</font><font size ='1'>\"+diag_summary+\"<br></font></pre>\")};\r\n    }\r\n    else\r\n    {\r\n    \r\n    RuleOutputToUI={Status : \"Success\",Message:\"<pre style='line-height: 0.8;'><font size ='2'>\"+failure_message+\"</font><font size ='1'>\"+diag_summary+\"<br></font></pre>\"};\r\n    }\r\n\r\n    Log.Info(diag_summary);\r\n    \r\n    return;\r\n  };\r\n      return {\r\n        envDiagnostic: envDiagnostic\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.envDiagnostic",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "c93db431-a65a-10ad-324f-36fa98a671a9",
    "ModuleId": "c5dfb0f8-a9ea-4208-a148-5e7adb4dad96"
  },
  {
    "Id": 213073,
    "Description": "validateInput",
    "Documentation": "define('o9.ekgconfig.validateInput', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateAndLoad = async function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n\r\n        var JsonStatusIBPL=`EXEC plugin instance GetJSONStatus for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]) using arguments {([ExecutionMode], \"MediumWeight\")};`;\r\n        queryModule.update(JsonStatusIBPL);\r\n\r\n        let JSONStatusFlagIBPL = \"Select ([Version].[Version Name].[CurrentWorkingView] * [o9MKPipelineSettings].[PipelineSettingsName].[JSONStatusMessage]) on row, ({Measure.[Value]}) on column;\";\r\n        let JSONStatusFlagPivot=cellsetModule.createCellSet(queryModule.select(JSONStatusFlagIBPL));\r\n        let JSONStatusFlag=JSONStatusFlagPivot.row(0).cell(2);\r\n\r\n        if(JSONStatusFlag!=='Success'){\r\n            RuleOutputToUI = { Status: 'Error', Message: JSONStatusFlag};\r\n            return;\r\n        }\r\n\r\n        var flag_query = `\r\n            scope: (&CWV *[o9MKTime].[Day] * [o9EKGServices].[o9EKGService] * [o9EKGSequence].[o9EKGSequenceNumber]);\r\n            Measure.[o9EKGLogLatest] = 0 ;\r\n            end scope;`;\r\n\r\n        queryModule.update(flag_query);\r\n\r\n        var executeBlock = function (schemaGeneration, incrementalPipeline, parallel) {\r\n\r\n            if (schemaGeneration.trim() !== '') {\r\n                var set_schema_flag = `\r\n                cartesian scope: ([Version].[Version Name].[CurrentWorkingView] * [o9MKPipelineSettings].[PipelineSettingsName].[Incremental Schema Generation]);\r\n                Measure.[Value]=${schemaGeneration};\r\n                end scope;`;\r\n\r\n                queryModule.update(set_schema_flag);\r\n            }\r\n\r\n            if (incrementalPipeline.trim() !== '') {\r\n                var set_pipeline_flag = `\r\n                cartesian scope: ([Version].[Version Name].[CurrentWorkingView] * [o9MKPipelineSettings].[PipelineSettingsName].[Incremental Pipeline Generation]);\r\n                Measure.[Value]=${incrementalPipeline};\r\n                end scope;`;\r\n\r\n                queryModule.update(set_pipeline_flag);\r\n            }\r\n\r\n            if (parallel === 'True') {\r\n                var parallel_ibpl = `\r\n                    exec parallel begin\r\n                        Block begin \r\n                            EXEC plugin instance ExecuteDeltaPipeline for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);\r\n                        End\r\n                        Block begin \r\n                            EXEC plugin instance AutoGenPipeline_v3_threading for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);\r\n                        End\r\n                    end;`;\r\n\r\n                queryModule.update(parallel_ibpl);\r\n\r\n            } else {\r\n\r\n                if (schemaGeneration.trim() !== '') {\r\n                    var delta_table_ibpl = `EXEC plugin instance ExecuteDeltaPipeline for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);`;\r\n                    queryModule.update(delta_table_ibpl);\r\n\r\n                } \r\n\r\n                else if (incrementalPipeline.trim() !== '') {\r\n                    var pipeline_ibpl = `EXEC plugin instance AutoGenPipeline_v3_threading for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);`;\r\n                    queryModule.update(pipeline_ibpl);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        if (parsedParams.Delta_Table_Instantiation === 'Incremental Create') { \r\n            if (parsedParams.Pipeline_Creation_Method === 'Incremental Create') {\r\n                executeBlock('True', 'True', 'True');\r\n            }\r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'Delete & Recreate') {\r\n                executeBlock('True', 'False', 'True');\r\n            }\r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'No') {\r\n                executeBlock('True', '', 'False');\r\n            }\r\n        }\r\n\r\n        else if (parsedParams.Delta_Table_Instantiation === 'Delete & Recreate') {\r\n            if (parsedParams.Pipeline_Creation_Method === 'Incremental Create') {\r\n                executeBlock('False', 'True', 'True');\r\n            } \r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'Delete & Recreate') {\r\n                executeBlock('False', 'False', 'True');\r\n            } \r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'No') {\r\n                executeBlock('False', '', 'False');\r\n            }\r\n        }\r\n\r\n        else if (parsedParams.Delta_Table_Instantiation === 'No') {\r\n            if (parsedParams.Pipeline_Creation_Method === 'Incremental Create') {\r\n                executeBlock('', 'True', 'False');\r\n            } else if (parsedParams.Pipeline_Creation_Method === 'Delete & Recreate') {\r\n                executeBlock('', 'False', 'False');\r\n            } else if (parsedParams.Pipeline_Creation_Method === 'No') {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'You must choose at least 1 option.' };\r\n                return;\r\n            }\r\n        }\r\n        return;\r\n    };\r\n\r\n    return {\r\n        validateAndLoad: validateAndLoad\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.validateInput', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateAndLoad = async function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n\r\n        var JsonStatusIBPL=`EXEC plugin instance GetJSONStatus for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]) using arguments {([ExecutionMode], \"MediumWeight\")};`;\r\n        queryModule.update(JsonStatusIBPL);\r\n\r\n        let JSONStatusFlagIBPL = \"Select ([Version].[Version Name].[CurrentWorkingView] * [o9MKPipelineSettings].[PipelineSettingsName].[JSONStatusMessage]) on row, ({Measure.[Value]}) on column;\";\r\n        let JSONStatusFlagPivot=cellsetModule.createCellSet(queryModule.select(JSONStatusFlagIBPL));\r\n        let JSONStatusFlag=JSONStatusFlagPivot.row(0).cell(2);\r\n\r\n        if(JSONStatusFlag!=='Success'){\r\n            RuleOutputToUI = { Status: 'Error', Message: JSONStatusFlag};\r\n            return;\r\n        }\r\n\r\n        var flag_query = `\r\n            scope: (&CWV *[o9MKTime].[Day] * [o9EKGServices].[o9EKGService] * [o9EKGSequence].[o9EKGSequenceNumber]);\r\n            Measure.[o9EKGLogLatest] = 0 ;\r\n            end scope;`;\r\n\r\n        queryModule.update(flag_query);\r\n\r\n        var executeBlock = function (schemaGeneration, incrementalPipeline, parallel) {\r\n\r\n            if (schemaGeneration.trim() !== '') {\r\n                var set_schema_flag = `\r\n                cartesian scope: ([Version].[Version Name].[CurrentWorkingView] * [o9MKPipelineSettings].[PipelineSettingsName].[Incremental Schema Generation]);\r\n                Measure.[Value]=${schemaGeneration};\r\n                end scope;`;\r\n\r\n                queryModule.update(set_schema_flag);\r\n            }\r\n\r\n            if (incrementalPipeline.trim() !== '') {\r\n                var set_pipeline_flag = `\r\n                cartesian scope: ([Version].[Version Name].[CurrentWorkingView] * [o9MKPipelineSettings].[PipelineSettingsName].[Incremental Pipeline Generation]);\r\n                Measure.[Value]=${incrementalPipeline};\r\n                end scope;`;\r\n\r\n                queryModule.update(set_pipeline_flag);\r\n            }\r\n\r\n            if (parallel === 'True') {\r\n                var parallel_ibpl = `\r\n                    exec parallel begin\r\n                        Block begin \r\n                            EXEC plugin instance ExecuteDeltaPipeline for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);\r\n                        End\r\n                        Block begin \r\n                            EXEC plugin instance AutoGenPipeline_v3_threading for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);\r\n                        End\r\n                    end;`;\r\n\r\n                queryModule.update(parallel_ibpl);\r\n\r\n            } else {\r\n\r\n                if (schemaGeneration.trim() !== '') {\r\n                    var delta_table_ibpl = `EXEC plugin instance ExecuteDeltaPipeline for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);`;\r\n                    queryModule.update(delta_table_ibpl);\r\n\r\n                } \r\n\r\n                else if (incrementalPipeline.trim() !== '') {\r\n                    var pipeline_ibpl = `EXEC plugin instance AutoGenPipeline_v3_threading for measures {[Value]} using scope (Version.[Version Name].[CurrentWorkingView]);`;\r\n                    queryModule.update(pipeline_ibpl);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        if (parsedParams.Delta_Table_Instantiation === 'Incremental Create') { \r\n            if (parsedParams.Pipeline_Creation_Method === 'Incremental Create') {\r\n                executeBlock('True', 'True', 'True');\r\n            }\r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'Delete & Recreate') {\r\n                executeBlock('True', 'False', 'True');\r\n            }\r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'No') {\r\n                executeBlock('True', '', 'False');\r\n            }\r\n        }\r\n\r\n        else if (parsedParams.Delta_Table_Instantiation === 'Delete & Recreate') {\r\n            if (parsedParams.Pipeline_Creation_Method === 'Incremental Create') {\r\n                executeBlock('False', 'True', 'True');\r\n            } \r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'Delete & Recreate') {\r\n                executeBlock('False', 'False', 'True');\r\n            } \r\n\r\n            else if (parsedParams.Pipeline_Creation_Method === 'No') {\r\n                executeBlock('False', '', 'False');\r\n            }\r\n        }\r\n\r\n        else if (parsedParams.Delta_Table_Instantiation === 'No') {\r\n            if (parsedParams.Pipeline_Creation_Method === 'Incremental Create') {\r\n                executeBlock('', 'True', 'False');\r\n            } else if (parsedParams.Pipeline_Creation_Method === 'Delete & Recreate') {\r\n                executeBlock('', 'False', 'False');\r\n            } else if (parsedParams.Pipeline_Creation_Method === 'No') {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'You must choose at least 1 option.' };\r\n                return;\r\n            }\r\n        }\r\n        return;\r\n    };\r\n\r\n    return {\r\n        validateAndLoad: validateAndLoad\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.validateInput",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "88bcac81-1f8b-41f7-b9e7-e8181d1a836c",
    "ModuleId": "c5dfb0f8-a9ea-4208-a148-5e7adb4dad96"
  },
  {
    "Id": 213074,
    "Description": "populateTenantRule",
    "Documentation": "define('o9.EKG.populateTenantRule', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    let logicalOperators = [\"AND\", \"OR\", \"NOT\"]\r\n    let comparisonOperators = [\"!=\", \"=\", \">\", \"<\", \"BETWEEN\", \" IN \", \" LIKE \", \" IS NOT NULL \", \" IS NULL \"]\r\n\r\n    var parseRuleExpression = function (ruleExpression) {\r\n        // This function return the parsed Dimension and Attribute present in RuleExpression\r\n        let trimmedExpression = ruleExpression.trim();\r\n\r\n        if (trimmedExpression == \"<any>\") return false;\r\n\r\n        let parts = null;\r\n\r\n        // iterate through and when get the first comparision operator, return this\r\n        for (let idx = 0; idx < trimmedExpression.length; idx++) {\r\n            for (let op of comparisonOperators) {\r\n                let opLength = op.length;\r\n                if (trimmedExpression.slice(idx, idx + opLength).toLowerCase() == op.toLowerCase()) {\r\n                    parts = trimmedExpression.split(op);\r\n                    break;\r\n                }\r\n            }\r\n            if (parts) break;\r\n        }\r\n\r\n        if (parts == null) return false;\r\n\r\n        return parts[0].trim();\r\n    }\r\n\r\n    var matchFieldName = function (fieldName1, fieldName2) {\r\n        // This function will loosely match two field Names\r\n        // Rules: Ignore Spaces, [, ]\r\n\r\n        fieldName1 = fieldName1.replace(/[\\[\\]]/g, '');\r\n        fieldName2 = fieldName2.replace(/[\\[\\]]/g, '');\r\n\r\n        return fieldName1 == fieldName2;\r\n    }\r\n\r\n    var matchDimFromFieldName = function (fieldName1, fieldName2) {\r\n        fieldName1 = fieldName1.trim().replace(/[\\[\\]]/g, '');\r\n        fieldName2 = fieldName2.trim().replace(/[\\[\\]]/g, '');\r\n    }\r\n\r\n    var getDimNameFromFieldName = function (fieldName) {\r\n        fieldName = fieldName.trim();\r\n\r\n        fieldName = fieldName.replace(/[\\[\\]]/g, '')\r\n        fieldName = fieldName.split(\".\")\r\n\r\n        return fieldName[0].trim();\r\n    }\r\n\r\n    var isDimField = function (fieldName) {\r\n        if (fieldName == undefined || fieldName == null || fieldName == \"\") return false;\r\n        if (fieldName.includes('.')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    var populateTenantRule = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n\r\n        Log.Info(\"Started populateTenantRule Plugin\");\r\n\r\n\r\n        const sysGen = \"System Generated\"\r\n\r\n        // clear old data routing\r\n\r\n        let deleteOldDataQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant]);\r\n                                        Measure.[o9EKG Tenant Rule] = Null;\r\n                                end scope;`;\r\n        queryModule.update(deleteOldDataQuery)\r\n\r\n        // get list of all dimension table and field ID\r\n\r\n        let tableFieldQuery = `(Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * { Measure.[o9EKG LS Table Type], Measure.[o9EKG Field Name], Measure.[o9EKG Table Included]})).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let tableFieldResult = cellsetModule.createCellSet(queryModule.select(tableFieldQuery));\r\n\r\n        let tableFieldMapping = {}; // {fieldName: [tableName1, tableName2]}\r\n        let fieldTableMapping = {};\r\n        let dimTableList = {};\r\n        let factTableList = {};\r\n\r\n        let tableFieldCount = tableFieldResult.rowCount;\r\n\r\n        for (let tableFieldIdx = 0; tableFieldIdx < tableFieldCount; tableFieldIdx++) {\r\n            let tableName = tableFieldResult.row(tableFieldIdx).cell(2).Name;\r\n            let fieldName = tableFieldResult.row(tableFieldIdx).cell(5);\r\n            let lsDimType = tableFieldResult.row(tableFieldIdx).cell(4);\r\n\r\n            if (fieldName == \"\") continue;\r\n\r\n            if (lsDimType == \"Dimension\") {\r\n                dimTableList[tableName] = true;\r\n            }\r\n            else if (lsDimType == \"Fact\") {\r\n                factTableList[tableName] = true;\r\n            }\r\n\r\n\r\n            if (!tableFieldMapping.hasOwnProperty(fieldName)) {\r\n                tableFieldMapping[fieldName] = []\r\n            }\r\n\r\n            tableFieldMapping[fieldName].push(tableName);\r\n\r\n            if (!fieldTableMapping.hasOwnProperty(tableName)) {\r\n                fieldTableMapping[tableName] = []\r\n            }\r\n\r\n            fieldTableMapping[tableName].push(fieldName)\r\n        }\r\n\r\n        let subBlockTableQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Building Blocks].[Sub Block] * [o9EKG Table].[Table Name] * [o9EKG Table].[Table Type].[LS_Upload] * {Measure.[o9EKG Field Sub Block Association], Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let subBlockTableResult = cellsetModule.createCellSet(queryModule.select(subBlockTableQuery))\r\n\r\n        // preprocess subBlockTableResult mapping to store in an {Key: Array} Pair i.e. subBlock: [Table]\r\n\r\n        let subBlockTableCount = subBlockTableResult.rowCount;\r\n        let subBlockTableMapping = {};\r\n\r\n        for (let tableidx = 0; tableidx < subBlockTableCount; tableidx++) {\r\n            let subBlockName = subBlockTableResult.row(tableidx).cell(2).Name;\r\n            let tableName = subBlockTableResult.row(tableidx).cell(3).Name;\r\n\r\n            if (!subBlockTableMapping.hasOwnProperty(subBlockName)) {\r\n                subBlockTableMapping[subBlockName] = [];\r\n            }\r\n            subBlockTableMapping[subBlockName].push(tableName)\r\n        }\r\n\r\n\r\n        let ProfileSolutionRuleQuery = `Select ([o9EKG Solution Set].[Solution Set] * [o9EKG Rule Set].[Rule Set] * [o9EKG Tenant].[Profile] * {Measure.[o9EKG Tenant Description]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]};`\r\n        let ProfileSolutionRuleResult = cellsetModule.createCellSet(queryModule.select(ProfileSolutionRuleQuery))\r\n\r\n        const profileCount = ProfileSolutionRuleResult.rowCount;\r\n\r\n        for (let profileIdx = 0; profileIdx < profileCount; profileIdx++) {\r\n            let ruleSetName = ProfileSolutionRuleResult.row(profileIdx).cell(1).Name;\r\n            let profileName = ProfileSolutionRuleResult.row(profileIdx).cell(2).Name;\r\n            let solutionSetName = ProfileSolutionRuleResult.row(profileIdx).cell(0).Name;\r\n\r\n\r\n            let tenantFromProfileQuery = `Select ([o9EKG Tenant].[Profile].[${profileName}] * [o9EKG Tenant].[Tenant] * {Measure.[o9EKG Tenant Org Name]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]};`;\r\n            let subBlockFromSolutionSetQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Building Blocks].[Sub Block] * [o9EKG Solution Set].[Solution Set].[${solutionSetName}] ) on row, \r\n({Measure.[o9EKG Solution Set SBB]}) on column;`;\r\n            let ruleFromRuleSetQuery = `Select ([o9EKG Rule Set].[Rule Set].[${ruleSetName}] *  [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]};`\r\n\r\n            let tenantFromProfileResult = cellsetModule.createCellSet(queryModule.select(tenantFromProfileQuery));\r\n            let subBlockFromSolutionSetResult = cellsetModule.createCellSet(queryModule.select(subBlockFromSolutionSetQuery));\r\n            let ruleFromRuleSetResult = cellsetModule.createCellSet(queryModule.select(ruleFromRuleSetQuery));\r\n\r\n            let tenantList = [];\r\n            let tenantCount = tenantFromProfileResult.rowCount;\r\n\r\n            for (let tenantIdx = 0; tenantIdx < tenantCount; tenantIdx++) {\r\n                tenantList.push(tenantFromProfileResult.row(tenantIdx).cell(1).Name);\r\n            }\r\n\r\n            if (tenantList.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            let ruleCount = ruleFromRuleSetResult.rowCount;\r\n            let subBlockCount = subBlockFromSolutionSetResult.rowCount;\r\n\r\n            let tableList = []\r\n\r\n            for (let subBlockIdx = 0; subBlockIdx < subBlockCount; subBlockIdx++) {\r\n                let subBlockName = subBlockFromSolutionSetResult.row(subBlockIdx).cell(2).Name\r\n                if (subBlockTableMapping.hasOwnProperty(subBlockName)) {\r\n                    tableList.push(...subBlockTableMapping[subBlockName]);\r\n                }\r\n            }\r\n\r\n            // remove duplicates from table list\r\n            tableList = [...new Set(tableList)]\r\n\r\n            // Divide the tables as Dim and Fact\r\n            let tablesCount = tableList.length;\r\n\r\n            let tableListDim = []\r\n            let tableListFact = []\r\n\r\n            let DimAttrList = []\r\n\r\n            for (let tableIdx = 0; tableIdx < tablesCount; tableIdx++) {\r\n                let tableName = tableList[tableIdx];\r\n\r\n                if (dimTableList.hasOwnProperty(tableName)) {\r\n                    tableListDim.push(tableName)\r\n                }\r\n                else if (factTableList.hasOwnProperty(tableName)) {\r\n                    tableListFact.push(tableName)\r\n                }\r\n            }\r\n\r\n\r\n            for (let ruleIdx = 0; ruleIdx < ruleCount; ruleIdx++) {\r\n\r\n                let ruleName = ruleFromRuleSetResult.row(ruleIdx).cell(1).Name;\r\n                let ruleExpression = ruleFromRuleSetResult.row(ruleIdx).cell(ruleFromRuleSetResult.measureColumnIndex('o9EKG Rule Expression'));\r\n                let parsedRuleExpression = parseRuleExpression(ruleExpression);\r\n\r\n                if (parsedRuleExpression == false) {\r\n                    continue;\r\n                }\r\n\r\n                // check if ruleExpression has any field from table\r\n                for (const [key, value] of Object.entries(tableFieldMapping)) {\r\n                    if (matchFieldName(parsedRuleExpression, key)) {\r\n\r\n                        let dimValues = [];\r\n                        for (let val of value) {\r\n                            if (dimTableList.hasOwnProperty(val)) {\r\n                                dimValues.push(val)\r\n                            }\r\n                        }\r\n\r\n                        if (dimValues.length == 0) continue;\r\n\r\n                        for (let valIter = 0; valIter < dimValues.length; valIter++) {\r\n                            // remove from tableListDim\r\n                            let valIdx = tableListDim.indexOf(dimValues[valIter]);\r\n                            if (valIdx !== -1) {\r\n                                tableListDim.splice(valIdx, 1);\r\n                            }\r\n                        }\r\n\r\n                        DimAttrList.push(getDimNameFromFieldName(key));\r\n\r\n                        ruleExpression = ruleExpression.replace(parsedRuleExpression, key);\r\n                        let Finalquery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].filter(#.Name in {${dimValues.map((item, idx) => {\r\n                            return `\"${item}\"`;\r\n                        })\r\n                            }}) * [o9EKG Tenant].[Tenant].filter(#.Name in {${tenantList.map((tenant, idx) => {\r\n                                return `\"${tenant}\"`;\r\n                            })\r\n                            }}) * [o9EKG Rule Set].[Rule].[${ruleName}] );\r\n                            Measure.[o9EKG Tenant Rule] = \"${ruleExpression}\";\r\n                            end scope;`\r\n\r\n                        Log.Info(\"<EKG: populateTenantRule> Plugin: \" + Finalquery);\r\n                        queryModule.update(Finalquery)\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (tableListDim.length !== 0) {\r\n\r\n                let Finalquery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].filter(#.Name in {${tableListDim.map((table, idx) => {\r\n                    return `\"${table}\"`;\r\n                })\r\n                    }}) * [o9EKG Tenant].[Tenant].filter(#.Name in {${tenantList.map((tenant, idx) => {\r\n                        return `\"${tenant}\"`;\r\n                    })\r\n                    }}) * [o9EKG Rule Set].[Rule].[${sysGen}] );\r\n                Measure.[o9EKG Tenant Rule] = \"<any>\";\r\n                end scope;`\r\n\r\n                Log.Info(\"<EKG: populateTenantRule> Plugin: \" + Finalquery);\r\n                queryModule.update(Finalquery)\r\n            }\r\n\r\n            for (let factIdx = 0; factIdx < tableListFact.length; factIdx++) {\r\n                let factTableName = tableListFact[factIdx];\r\n                let factDimFields = fieldTableMapping[factTableName]; // all field related to fact table\r\n\r\n                let cascadeList = [];\r\n\r\n                // loopover field and check if this is a grain[dim] for fact table, then match the field name with field name of any dim table\r\n                for (let factFieldIdx = 0; factFieldIdx < factDimFields.length; factFieldIdx++) {\r\n                    let factFieldName = factDimFields[factFieldIdx];\r\n\r\n                    if (factFieldName && isDimField(factFieldName)) {\r\n                        let fullTableList = tableFieldMapping[factFieldName];\r\n                        for (let fullTableIdx = 0; fullTableIdx < fullTableList.length; fullTableIdx++) {\r\n                            let fullTableName = fullTableList[fullTableIdx];\r\n\r\n                            const isItDim = dimTableList.hasOwnProperty(fullTableName);\r\n                            const isItHaveRule = (tableListDim.includes(fullTableName) == false);\r\n\r\n                            if (isItDim && isItHaveRule) {\r\n                                cascadeList.push(fullTableName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let ruleString = \"Cascaded from: \";\r\n                if (cascadeList.length == 0) {\r\n                    ruleString = \"<any>\";\r\n                }\r\n                else {\r\n                    for (cascadeIdx = 0; cascadeIdx < cascadeList.length; cascadeIdx++) {\r\n                        ruleString += cascadeList[cascadeIdx];\r\n                        if (cascadeIdx < cascadeList.length - 1) {\r\n                            ruleString += \", \";\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // populate in tenantRule\r\n                let Finalquery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].[${factTableName}] * [o9EKG Tenant].[Tenant].filter(#.Name in {${tenantList.map((tenant, idx) => {\r\n                    return `\"${tenant}\"`;\r\n                })\r\n                    }}) * [o9EKG Rule Set].[Rule].[${sysGen}] );\r\n                Measure.[o9EKG Tenant Rule] = \"${ruleString}\";\r\n                end scope;`\r\n\r\n                Log.Info(\"<EKG: populateTenantRule> Plugin: \" + Finalquery);\r\n                queryModule.update(Finalquery)\r\n\r\n            }\r\n\r\n        }\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Rule Expression added!' };\r\n        return RuleOutputToUI\r\n    };\r\n    return {\r\n        populateTenantRule: populateTenantRule\r\n    };\r\n})",
    "Code": "define('o9.EKG.populateTenantRule', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    let logicalOperators = [\"AND\", \"OR\", \"NOT\"]\r\n    let comparisonOperators = [\"!=\", \"=\", \">\", \"<\", \"BETWEEN\", \" IN \", \" LIKE \", \" IS NOT NULL \", \" IS NULL \"]\r\n\r\n    var parseRuleExpression = function (ruleExpression) {\r\n        // This function return the parsed Dimension and Attribute present in RuleExpression\r\n        let trimmedExpression = ruleExpression.trim();\r\n\r\n        if (trimmedExpression == \"<any>\") return false;\r\n\r\n        let parts = null;\r\n\r\n        // iterate through and when get the first comparision operator, return this\r\n        for (let idx = 0; idx < trimmedExpression.length; idx++) {\r\n            for (let op of comparisonOperators) {\r\n                let opLength = op.length;\r\n                if (trimmedExpression.slice(idx, idx + opLength).toLowerCase() == op.toLowerCase()) {\r\n                    parts = trimmedExpression.split(op);\r\n                    break;\r\n                }\r\n            }\r\n            if (parts) break;\r\n        }\r\n\r\n        if (parts == null) return false;\r\n\r\n        return parts[0].trim();\r\n    }\r\n\r\n    var matchFieldName = function (fieldName1, fieldName2) {\r\n        // This function will loosely match two field Names\r\n        // Rules: Ignore Spaces, [, ]\r\n\r\n        fieldName1 = fieldName1.replace(/[\\[\\]]/g, '');\r\n        fieldName2 = fieldName2.replace(/[\\[\\]]/g, '');\r\n\r\n        return fieldName1 == fieldName2;\r\n    }\r\n\r\n    var matchDimFromFieldName = function (fieldName1, fieldName2) {\r\n        fieldName1 = fieldName1.trim().replace(/[\\[\\]]/g, '');\r\n        fieldName2 = fieldName2.trim().replace(/[\\[\\]]/g, '');\r\n    }\r\n\r\n    var getDimNameFromFieldName = function (fieldName) {\r\n        fieldName = fieldName.trim();\r\n\r\n        fieldName = fieldName.replace(/[\\[\\]]/g, '')\r\n        fieldName = fieldName.split(\".\")\r\n\r\n        return fieldName[0].trim();\r\n    }\r\n\r\n    var isDimField = function (fieldName) {\r\n        if (fieldName == undefined || fieldName == null || fieldName == \"\") return false;\r\n        if (fieldName.includes('.')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    var populateTenantRule = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n\r\n        Log.Info(\"Started populateTenantRule Plugin\");\r\n\r\n\r\n        const sysGen = \"System Generated\"\r\n\r\n        // clear old data routing\r\n\r\n        let deleteOldDataQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant]);\r\n                                        Measure.[o9EKG Tenant Rule] = Null;\r\n                                end scope;`;\r\n        queryModule.update(deleteOldDataQuery)\r\n\r\n        // get list of all dimension table and field ID\r\n\r\n        let tableFieldQuery = `(Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * { Measure.[o9EKG LS Table Type], Measure.[o9EKG Field Name], Measure.[o9EKG Table Included]})).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let tableFieldResult = cellsetModule.createCellSet(queryModule.select(tableFieldQuery));\r\n\r\n        let tableFieldMapping = {}; // {fieldName: [tableName1, tableName2]}\r\n        let fieldTableMapping = {};\r\n        let dimTableList = {};\r\n        let factTableList = {};\r\n\r\n        let tableFieldCount = tableFieldResult.rowCount;\r\n\r\n        for (let tableFieldIdx = 0; tableFieldIdx < tableFieldCount; tableFieldIdx++) {\r\n            let tableName = tableFieldResult.row(tableFieldIdx).cell(2).Name;\r\n            let fieldName = tableFieldResult.row(tableFieldIdx).cell(5);\r\n            let lsDimType = tableFieldResult.row(tableFieldIdx).cell(4);\r\n\r\n            if (fieldName == \"\") continue;\r\n\r\n            if (lsDimType == \"Dimension\") {\r\n                dimTableList[tableName] = true;\r\n            }\r\n            else if (lsDimType == \"Fact\") {\r\n                factTableList[tableName] = true;\r\n            }\r\n\r\n\r\n            if (!tableFieldMapping.hasOwnProperty(fieldName)) {\r\n                tableFieldMapping[fieldName] = []\r\n            }\r\n\r\n            tableFieldMapping[fieldName].push(tableName);\r\n\r\n            if (!fieldTableMapping.hasOwnProperty(tableName)) {\r\n                fieldTableMapping[tableName] = []\r\n            }\r\n\r\n            fieldTableMapping[tableName].push(fieldName)\r\n        }\r\n\r\n        let subBlockTableQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Building Blocks].[Sub Block] * [o9EKG Table].[Table Name] * [o9EKG Table].[Table Type].[LS_Upload] * {Measure.[o9EKG Field Sub Block Association], Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let subBlockTableResult = cellsetModule.createCellSet(queryModule.select(subBlockTableQuery))\r\n\r\n        // preprocess subBlockTableResult mapping to store in an {Key: Array} Pair i.e. subBlock: [Table]\r\n\r\n        let subBlockTableCount = subBlockTableResult.rowCount;\r\n        let subBlockTableMapping = {};\r\n\r\n        for (let tableidx = 0; tableidx < subBlockTableCount; tableidx++) {\r\n            let subBlockName = subBlockTableResult.row(tableidx).cell(2).Name;\r\n            let tableName = subBlockTableResult.row(tableidx).cell(3).Name;\r\n\r\n            if (!subBlockTableMapping.hasOwnProperty(subBlockName)) {\r\n                subBlockTableMapping[subBlockName] = [];\r\n            }\r\n            subBlockTableMapping[subBlockName].push(tableName)\r\n        }\r\n\r\n\r\n        let ProfileSolutionRuleQuery = `Select ([o9EKG Solution Set].[Solution Set] * [o9EKG Rule Set].[Rule Set] * [o9EKG Tenant].[Profile] * {Measure.[o9EKG Tenant Description]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]};`\r\n        let ProfileSolutionRuleResult = cellsetModule.createCellSet(queryModule.select(ProfileSolutionRuleQuery))\r\n\r\n        const profileCount = ProfileSolutionRuleResult.rowCount;\r\n\r\n        for (let profileIdx = 0; profileIdx < profileCount; profileIdx++) {\r\n            let ruleSetName = ProfileSolutionRuleResult.row(profileIdx).cell(1).Name;\r\n            let profileName = ProfileSolutionRuleResult.row(profileIdx).cell(2).Name;\r\n            let solutionSetName = ProfileSolutionRuleResult.row(profileIdx).cell(0).Name;\r\n\r\n\r\n            let tenantFromProfileQuery = `Select ([o9EKG Tenant].[Profile].[${profileName}] * [o9EKG Tenant].[Tenant] * {Measure.[o9EKG Tenant Org Name]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]};`;\r\n            let subBlockFromSolutionSetQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Building Blocks].[Sub Block] * [o9EKG Solution Set].[Solution Set].[${solutionSetName}] ) on row, \r\n({Measure.[o9EKG Solution Set SBB]}) on column;`;\r\n            let ruleFromRuleSetQuery = `Select ([o9EKG Rule Set].[Rule Set].[${ruleSetName}] *  [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]};`\r\n\r\n            let tenantFromProfileResult = cellsetModule.createCellSet(queryModule.select(tenantFromProfileQuery));\r\n            let subBlockFromSolutionSetResult = cellsetModule.createCellSet(queryModule.select(subBlockFromSolutionSetQuery));\r\n            let ruleFromRuleSetResult = cellsetModule.createCellSet(queryModule.select(ruleFromRuleSetQuery));\r\n\r\n            let tenantList = [];\r\n            let tenantCount = tenantFromProfileResult.rowCount;\r\n\r\n            for (let tenantIdx = 0; tenantIdx < tenantCount; tenantIdx++) {\r\n                tenantList.push(tenantFromProfileResult.row(tenantIdx).cell(1).Name);\r\n            }\r\n\r\n            if (tenantList.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            let ruleCount = ruleFromRuleSetResult.rowCount;\r\n            let subBlockCount = subBlockFromSolutionSetResult.rowCount;\r\n\r\n            let tableList = []\r\n\r\n            for (let subBlockIdx = 0; subBlockIdx < subBlockCount; subBlockIdx++) {\r\n                let subBlockName = subBlockFromSolutionSetResult.row(subBlockIdx).cell(2).Name\r\n                if (subBlockTableMapping.hasOwnProperty(subBlockName)) {\r\n                    tableList.push(...subBlockTableMapping[subBlockName]);\r\n                }\r\n            }\r\n\r\n            // remove duplicates from table list\r\n            tableList = [...new Set(tableList)]\r\n\r\n            // Divide the tables as Dim and Fact\r\n            let tablesCount = tableList.length;\r\n\r\n            let tableListDim = []\r\n            let tableListFact = []\r\n\r\n            let DimAttrList = []\r\n\r\n            for (let tableIdx = 0; tableIdx < tablesCount; tableIdx++) {\r\n                let tableName = tableList[tableIdx];\r\n\r\n                if (dimTableList.hasOwnProperty(tableName)) {\r\n                    tableListDim.push(tableName)\r\n                }\r\n                else if (factTableList.hasOwnProperty(tableName)) {\r\n                    tableListFact.push(tableName)\r\n                }\r\n            }\r\n\r\n\r\n            for (let ruleIdx = 0; ruleIdx < ruleCount; ruleIdx++) {\r\n\r\n                let ruleName = ruleFromRuleSetResult.row(ruleIdx).cell(1).Name;\r\n                let ruleExpression = ruleFromRuleSetResult.row(ruleIdx).cell(ruleFromRuleSetResult.measureColumnIndex('o9EKG Rule Expression'));\r\n                let parsedRuleExpression = parseRuleExpression(ruleExpression);\r\n\r\n                if (parsedRuleExpression == false) {\r\n                    continue;\r\n                }\r\n\r\n                // check if ruleExpression has any field from table\r\n                for (const [key, value] of Object.entries(tableFieldMapping)) {\r\n                    if (matchFieldName(parsedRuleExpression, key)) {\r\n\r\n                        let dimValues = [];\r\n                        for (let val of value) {\r\n                            if (dimTableList.hasOwnProperty(val)) {\r\n                                dimValues.push(val)\r\n                            }\r\n                        }\r\n\r\n                        if (dimValues.length == 0) continue;\r\n\r\n                        for (let valIter = 0; valIter < dimValues.length; valIter++) {\r\n                            // remove from tableListDim\r\n                            let valIdx = tableListDim.indexOf(dimValues[valIter]);\r\n                            if (valIdx !== -1) {\r\n                                tableListDim.splice(valIdx, 1);\r\n                            }\r\n                        }\r\n\r\n                        DimAttrList.push(getDimNameFromFieldName(key));\r\n\r\n                        ruleExpression = ruleExpression.replace(parsedRuleExpression, key);\r\n                        let Finalquery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].filter(#.Name in {${dimValues.map((item, idx) => {\r\n                            return `\"${item}\"`;\r\n                        })\r\n                            }}) * [o9EKG Tenant].[Tenant].filter(#.Name in {${tenantList.map((tenant, idx) => {\r\n                                return `\"${tenant}\"`;\r\n                            })\r\n                            }}) * [o9EKG Rule Set].[Rule].[${ruleName}] );\r\n                            Measure.[o9EKG Tenant Rule] = \"${ruleExpression}\";\r\n                            end scope;`\r\n\r\n                        Log.Info(\"<EKG: populateTenantRule> Plugin: \" + Finalquery);\r\n                        queryModule.update(Finalquery)\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (tableListDim.length !== 0) {\r\n\r\n                let Finalquery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].filter(#.Name in {${tableListDim.map((table, idx) => {\r\n                    return `\"${table}\"`;\r\n                })\r\n                    }}) * [o9EKG Tenant].[Tenant].filter(#.Name in {${tenantList.map((tenant, idx) => {\r\n                        return `\"${tenant}\"`;\r\n                    })\r\n                    }}) * [o9EKG Rule Set].[Rule].[${sysGen}] );\r\n                Measure.[o9EKG Tenant Rule] = \"<any>\";\r\n                end scope;`\r\n\r\n                Log.Info(\"<EKG: populateTenantRule> Plugin: \" + Finalquery);\r\n                queryModule.update(Finalquery)\r\n            }\r\n\r\n            for (let factIdx = 0; factIdx < tableListFact.length; factIdx++) {\r\n                let factTableName = tableListFact[factIdx];\r\n                let factDimFields = fieldTableMapping[factTableName]; // all field related to fact table\r\n\r\n                let cascadeList = [];\r\n\r\n                // loopover field and check if this is a grain[dim] for fact table, then match the field name with field name of any dim table\r\n                for (let factFieldIdx = 0; factFieldIdx < factDimFields.length; factFieldIdx++) {\r\n                    let factFieldName = factDimFields[factFieldIdx];\r\n\r\n                    if (factFieldName && isDimField(factFieldName)) {\r\n                        let fullTableList = tableFieldMapping[factFieldName];\r\n                        for (let fullTableIdx = 0; fullTableIdx < fullTableList.length; fullTableIdx++) {\r\n                            let fullTableName = fullTableList[fullTableIdx];\r\n\r\n                            const isItDim = dimTableList.hasOwnProperty(fullTableName);\r\n                            const isItHaveRule = (tableListDim.includes(fullTableName) == false);\r\n\r\n                            if (isItDim && isItHaveRule) {\r\n                                cascadeList.push(fullTableName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let ruleString = \"Cascaded from: \";\r\n                if (cascadeList.length == 0) {\r\n                    ruleString = \"<any>\";\r\n                }\r\n                else {\r\n                    for (cascadeIdx = 0; cascadeIdx < cascadeList.length; cascadeIdx++) {\r\n                        ruleString += cascadeList[cascadeIdx];\r\n                        if (cascadeIdx < cascadeList.length - 1) {\r\n                            ruleString += \", \";\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // populate in tenantRule\r\n                let Finalquery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].[${factTableName}] * [o9EKG Tenant].[Tenant].filter(#.Name in {${tenantList.map((tenant, idx) => {\r\n                    return `\"${tenant}\"`;\r\n                })\r\n                    }}) * [o9EKG Rule Set].[Rule].[${sysGen}] );\r\n                Measure.[o9EKG Tenant Rule] = \"${ruleString}\";\r\n                end scope;`\r\n\r\n                Log.Info(\"<EKG: populateTenantRule> Plugin: \" + Finalquery);\r\n                queryModule.update(Finalquery)\r\n\r\n            }\r\n\r\n        }\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Rule Expression added!' };\r\n        return RuleOutputToUI\r\n    };\r\n    return {\r\n        populateTenantRule: populateTenantRule\r\n    };\r\n})",
    "ModuleName": "o9.EKG.populateTenantRule",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "51895458-97e3-462b-214f-303a03e52b81",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213075,
    "Description": "validateField",
    "Documentation": "define('o9.EKG.validateField', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n  var validateField = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info('PRINT ---' + parsedParams.FieldName);\r\n    let stringifiedParams = JSON.stringify(parsedParams);\r\n    Log.Info('PRINTING FOR PROJECT DETAILS: '+ stringifiedParams);\r\n\r\n    // Condition: Field Name should not contain characters `{},!$@%^&*\r\n    if(/[{},'!$@%^&*]/.test(parsedParams.FieldName)) {\r\n      RuleOutputToUI = {\r\n        Status: 'Error',\r\n        Message: 'Field Name should not contain characters `{},!$@%^&*'\r\n      };\r\n      return RuleOutputToUI;\r\n    }\r\n\r\n\r\n    // Condition: Field Name should be unique within a table\r\n    var ExistingIls = `(Select (&CWV * [o9EKG Customer].[Project Name].[${parsedParams.Project}] * [o9EKG Table].[Field ID] *[o9EKG Table].[Table Name].[${parsedParams.TableName}]) on row, ({ Measure.[o9EKG Field Name]}) on column).filter(Measure.[o9EKG Field Name]==\"${parsedParams.FieldName}\"); \r\n`;\r\n    Log.Info(\"PRINT --- \" +ExistingIls );\r\n    var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n    Log.Info(\"PRINT\" +temp.rowCount);\r\n\r\n    if(temp.rowCount > 0) {\r\n      RuleOutputToUI = {\r\n        Status:'Error',\r\n        Message:'This Field already exists. Please enter a new name'\r\n      };\r\n    }\r\n    else {\r\n      RuleOutputToUI = {\r\n        Status: 'Success',\r\n        Message: 'New Field added'\r\n      };\r\n    }\r\n\r\n    return RuleOutputToUI;\r\n  };\r\n\r\n  return {\r\n    validateField: validateField\r\n  };\r\n});",
    "Code": "define('o9.EKG.validateField', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n  var validateField = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info('PRINT ---' + parsedParams.FieldName);\r\n    let stringifiedParams = JSON.stringify(parsedParams);\r\n    Log.Info('PRINTING FOR PROJECT DETAILS: '+ stringifiedParams);\r\n\r\n    // Condition: Field Name should not contain characters `{},!$@%^&*\r\n    if(/[{},'!$@%^&*]/.test(parsedParams.FieldName)) {\r\n      RuleOutputToUI = {\r\n        Status: 'Error',\r\n        Message: 'Field Name should not contain characters `{},!$@%^&*'\r\n      };\r\n      return RuleOutputToUI;\r\n    }\r\n\r\n\r\n    // Condition: Field Name should be unique within a table\r\n    var ExistingIls = `(Select (&CWV * [o9EKG Customer].[Project Name].[${parsedParams.Project}] * [o9EKG Table].[Field ID] *[o9EKG Table].[Table Name].[${parsedParams.TableName}]) on row, ({ Measure.[o9EKG Field Name]}) on column).filter(Measure.[o9EKG Field Name]==\"${parsedParams.FieldName}\"); \r\n`;\r\n    Log.Info(\"PRINT --- \" +ExistingIls );\r\n    var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n    Log.Info(\"PRINT\" +temp.rowCount);\r\n\r\n    if(temp.rowCount > 0) {\r\n      RuleOutputToUI = {\r\n        Status:'Error',\r\n        Message:'This Field already exists. Please enter a new name'\r\n      };\r\n    }\r\n    else {\r\n      RuleOutputToUI = {\r\n        Status: 'Success',\r\n        Message: 'New Field added'\r\n      };\r\n    }\r\n\r\n    return RuleOutputToUI;\r\n  };\r\n\r\n  return {\r\n    validateField: validateField\r\n  };\r\n});",
    "ModuleName": "o9.EKG.validateField",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "8bf47a81-792a-4756-3196-d9df8b9c8f43",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213076,
    "Description": "o9.EKG.AddFieldsinBulkV2",
    "Documentation": "define('o9.EKG.AddFieldsinBulkV2', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var AddFieldsinBulkV2 = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info(\"Started AddFieldsinBulk Plugin\");\r\n\r\n        let projectName = parsedParams.Project;\r\n        let NewFieldsCount = parsedParams.NewFieldsCount;\r\n\r\n        let customFieldPrefixQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${projectName}] * {Measure.[o9EKG Custom Field Prefix]});`;\r\n        let customFieldPrefixResult = cellsetModule.createCellSet(queryModule.select(customFieldPrefixQuery));\r\n\r\n        let customFieldPrefixCount = customFieldPrefixResult.rowCount;\r\n\r\n        if (customFieldPrefixCount < 1) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Error: Setup Custom Field Prefix in Project Settings'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        if (NewFieldsCount < 1) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Error: Minimum Value of Field Count is 1.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let customFieldPrefix = customFieldPrefixResult.row(0).cell(2);\r\n        Log.Info(\"Using Custom Field Prefix \" + customFieldPrefix);\r\n\r\n        let ExistingIls = `Select ( [o9EKG Table].[Field ID].filter(#.Name startswith \"${customFieldPrefix}_\") );`\r\n        let temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n        var IDs = []\r\n        let IDsNo\r\n        let maxNumber\r\n\r\n        if (temp.rowCount > 0) {\r\n            for (i = 0; i < temp.rowCount; i++) {\r\n                ID = temp.row(i).cell(0).Name\r\n                if (ID.includes(customFieldPrefix)) {\r\n                    IDs.push(ID)\r\n                }\r\n            }\r\n\r\n            IDsNo = IDs.map(item => Number(item.replace(`${customFieldPrefix}_`, \"\")));\r\n\r\n            IDsNo = IDsNo.reduce((accumulator, currentValue) => {\r\n                if (Number.isInteger(currentValue)) {\r\n                    accumulator.push(currentValue);\r\n                }\r\n                return accumulator;\r\n            }, []);\r\n\r\n            IDsNo.sort((a, b) => a - b);\r\n\r\n            let IDLength = IDsNo.length;\r\n            if (IDLength > 0) {\r\n                maxNumber = IDsNo[IDsNo.length - 1];\r\n                Log.Info(\"maxNumber\")\r\n                Log.Info(maxNumber)\r\n            }\r\n            else {\r\n                maxNumber = 1;\r\n            }\r\n        } else {\r\n            maxNumber = 1\r\n        }\r\n\r\n        NewIDs = []\r\n        for (z = 0; z < parsedParams.NewFieldsCount; z++) {\r\n            // let ExistingIls2 = `Select ( [o9EKG Table].[Field ID].filter(#.Name startswith \"${customFieldPrefix}_\") );`\r\n            let NewID = `${customFieldPrefix}_${++maxNumber}`\r\n            Log.Info(NewID)\r\n            let ExistingIls2 = `Select ( [o9EKG Table].[Field ID].filter(#.Name in {\"${NewID}\"}) );`\r\n            let temp2 = cellsetModule.createCellSet(queryModule.select(ExistingIls2));\r\n            if (temp2.rowCount > 0) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: 'Error: Please try again after some time or contact EKG'\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n            NewIDs.push(NewID);\r\n        }\r\n        Log.Info(\"FieldIDs array list\" + JSON.stringify(NewIDs));\r\n\r\n        for (i = 0; i < NewIDs.length; i++) {\r\n\r\n            var CreateFieldIDMember = `createmember( [o9EKG Table].[Table Type] = { , \"${parsedParams.TableType}\" }  , [o9EKG Table].[Table Group] = { , \"${parsedParams.TableGroup}\" } , [o9EKG Table].[Table Name] = { , \"${parsedParams.TableName}\" }, [o9EKG Table].[Field ID] = { ,\"${NewIDs[i]}\"} );`\r\n\r\n            queryModule.update(CreateFieldIDMember);\r\n        }\r\n\r\n        var ExecuteIBPLCreateField = `exec procedure EKG_AddFields_InBulk {  \"FieldList\" : [${filterclause(NewIDs)}] ,  \"Project\" : \"${parsedParams.Project}\" , \"Blocklist\" : [${filterclause(parsedParams.BlockList)}], \"Caplist\" : [${filterclause(parsedParams.CapList)}],  \"user\" : \"${parsedParams.user}\",  \"now\" : \"${parsedParams.now}\"  } ;`\r\n\r\n        queryModule.update(ExecuteIBPLCreateField);\r\n\r\n\r\n        return;\r\n    };\r\n    var filterclause = function (obj) {\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(function (p) {\r\n                return '\"' + p + '\"';\r\n            }).join(',');\r\n        }\r\n        return '\"' + obj + '\"';\r\n    };\r\n    return {\r\n        AddFieldsinBulkV2: AddFieldsinBulkV2\r\n    };\r\n});",
    "Code": "define('o9.EKG.AddFieldsinBulkV2', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var AddFieldsinBulkV2 = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info(\"Started AddFieldsinBulk Plugin\");\r\n\r\n        let projectName = parsedParams.Project;\r\n        let NewFieldsCount = parsedParams.NewFieldsCount;\r\n\r\n        let customFieldPrefixQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${projectName}] * {Measure.[o9EKG Custom Field Prefix]});`;\r\n        let customFieldPrefixResult = cellsetModule.createCellSet(queryModule.select(customFieldPrefixQuery));\r\n\r\n        let customFieldPrefixCount = customFieldPrefixResult.rowCount;\r\n\r\n        if (customFieldPrefixCount < 1) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Error: Setup Custom Field Prefix in Project Settings'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        if (NewFieldsCount < 1) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Error: Minimum Value of Field Count is 1.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let customFieldPrefix = customFieldPrefixResult.row(0).cell(2);\r\n        Log.Info(\"Using Custom Field Prefix \" + customFieldPrefix);\r\n\r\n        let ExistingIls = `Select ( [o9EKG Table].[Field ID].filter(#.Name startswith \"${customFieldPrefix}_\") );`\r\n        let temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n        var IDs = []\r\n        let IDsNo\r\n        let maxNumber\r\n\r\n        if (temp.rowCount > 0) {\r\n            for (i = 0; i < temp.rowCount; i++) {\r\n                ID = temp.row(i).cell(0).Name\r\n                if (ID.includes(customFieldPrefix)) {\r\n                    IDs.push(ID)\r\n                }\r\n            }\r\n\r\n            IDsNo = IDs.map(item => Number(item.replace(`${customFieldPrefix}_`, \"\")));\r\n\r\n            IDsNo = IDsNo.reduce((accumulator, currentValue) => {\r\n                if (Number.isInteger(currentValue)) {\r\n                    accumulator.push(currentValue);\r\n                }\r\n                return accumulator;\r\n            }, []);\r\n\r\n            IDsNo.sort((a, b) => a - b);\r\n\r\n            let IDLength = IDsNo.length;\r\n            if (IDLength > 0) {\r\n                maxNumber = IDsNo[IDsNo.length - 1];\r\n                Log.Info(\"maxNumber\")\r\n                Log.Info(maxNumber)\r\n            }\r\n            else {\r\n                maxNumber = 1;\r\n            }\r\n        } else {\r\n            maxNumber = 1\r\n        }\r\n\r\n        NewIDs = []\r\n        for (z = 0; z < parsedParams.NewFieldsCount; z++) {\r\n            // let ExistingIls2 = `Select ( [o9EKG Table].[Field ID].filter(#.Name startswith \"${customFieldPrefix}_\") );`\r\n            let NewID = `${customFieldPrefix}_${++maxNumber}`\r\n            Log.Info(NewID)\r\n            let ExistingIls2 = `Select ( [o9EKG Table].[Field ID].filter(#.Name in {\"${NewID}\"}) );`\r\n            let temp2 = cellsetModule.createCellSet(queryModule.select(ExistingIls2));\r\n            if (temp2.rowCount > 0) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: 'Error: Please try again after some time or contact EKG'\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n            NewIDs.push(NewID);\r\n        }\r\n        Log.Info(\"FieldIDs array list\" + JSON.stringify(NewIDs));\r\n\r\n        for (i = 0; i < NewIDs.length; i++) {\r\n\r\n            var CreateFieldIDMember = `createmember( [o9EKG Table].[Table Type] = { , \"${parsedParams.TableType}\" }  , [o9EKG Table].[Table Group] = { , \"${parsedParams.TableGroup}\" } , [o9EKG Table].[Table Name] = { , \"${parsedParams.TableName}\" }, [o9EKG Table].[Field ID] = { ,\"${NewIDs[i]}\"} );`\r\n\r\n            queryModule.update(CreateFieldIDMember);\r\n        }\r\n\r\n        var ExecuteIBPLCreateField = `exec procedure EKG_AddFields_InBulk {  \"FieldList\" : [${filterclause(NewIDs)}] ,  \"Project\" : \"${parsedParams.Project}\" , \"Blocklist\" : [${filterclause(parsedParams.BlockList)}], \"Caplist\" : [${filterclause(parsedParams.CapList)}],  \"user\" : \"${parsedParams.user}\",  \"now\" : \"${parsedParams.now}\"  } ;`\r\n\r\n        queryModule.update(ExecuteIBPLCreateField);\r\n\r\n\r\n        return;\r\n    };\r\n    var filterclause = function (obj) {\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(function (p) {\r\n                return '\"' + p + '\"';\r\n            }).join(',');\r\n        }\r\n        return '\"' + obj + '\"';\r\n    };\r\n    return {\r\n        AddFieldsinBulkV2: AddFieldsinBulkV2\r\n    };\r\n});",
    "ModuleName": "o9.EKG.AddFieldsinBulkV2",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "645d2b97-6d77-8227-9cab-ea5d2a07b92c",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213077,
    "Description": "validateTable",
    "Documentation": "define('o9.EKG.validateTable', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateTable = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        // Condition: Table Name cannot be greater than 50 characters\r\n        if (parsedParams.TableName.length > 50) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name cannot be greater than 50 characters.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Table Name can only contain alphabets(a-z, A-Z), numbers(0-9), and _\r\n        if (!/^[a-zA-Z0-9_]+$/.test(parsedParams.TableName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name can only contain alphabets (a-z, A-Z), numbers(0-9), and underscore(_).'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Table Name cannot be only numbers\r\n        if (/^\\d+$/.test(parsedParams.TableName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name cannot be only numbers.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Table Name should not start with numbers\r\n        if (/^\\d/.test(parsedParams.TableName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name should not start with numbers.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n\r\n\r\n        Log.Info('PRINT ---' + parsedParams.TableName);\r\n        let Table_name = parsedParams.TableName;\r\n\r\n        var ExistingIls = `Select ( [o9EKG Customer].[Project Name] * [o9EKG Table].[Table Name].filter(#.Name like \"${Table_name}\")) on row, ({Measure.[o9EKG Table Included]}) on column where {&CWV, Measure.[o9EKG Table Included]==1} orderby [o9EKG Customer].[Project Name].Key desc;`;\r\n        Log.Info(\"PRINT --- \" + ExistingIls);\r\n        var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n        Log.Info(\"PRINT\" + temp.rowCount);\r\n\r\n        // Condition: Table Name should be unique in the entire tenant (EKG configurator) and not just the project (Name should not be differ in terms of casing)\r\n        let table_flag = 0;\r\n        Log.Info(\"Table \" + Table_name);\r\n        \r\n        if (temp.rowCount > 0) {\r\n            table_flag = 1;\r\n            let Projects = []\r\n            for (i = 0; i < temp.rowCount; i++) {\r\n                let TableFromIBPL = temp.row(i).cell(1).Name\r\n                if (TableFromIBPL.toLowerCase() === Table_name.toLowerCase()) {\r\n                    let Project = temp.row(i).cell(0).Name\r\n                    Projects.push(Project);\r\n                }\r\n            }\r\n            Log.Info(\"Projects \" + Projects);\r\n            Log.Info(\"Project length \" + Projects.length);\r\n\r\n            if (Projects.length === 0) {\r\n                table_flag = 0;\r\n            }\r\n\r\n            let ProjectsSet = new Set(Projects);\r\n\r\n            Projects = [...ProjectsSet]\r\n\r\n            if(Projects.length > 3){\r\n                Projects = Projects.slice(0, 3)\r\n            }\r\n\r\n            let projectString = \"\"\r\n\r\n            Projects.map((projectItem, idx) => {\r\n                if (idx == 0) {\r\n                    projectString += projectItem\r\n                }\r\n                else if (idx === Projects.length - 1) {\r\n                    projectString += ` & \"${projectItem}\"`\r\n                } else {\r\n                    projectString += `, \"${projectItem}\"`\r\n                }\r\n            })\r\n\r\n            let phrase = \"\"\r\n\r\n            if (temp.rowCount == 1) {\r\n                projectString = \"project \" + projectString\r\n                phrase = \"this project\"\r\n            }\r\n            else {\r\n                projectString = \"projects \" + projectString\r\n                phrase = \"these project\"\r\n            }\r\n\r\n            errorMessage = `This table already exists in ${projectString}.\\nPlease enter a new name or copy the table from ${phrase} to edit it here using the Copy Table button.`\r\n\r\n\r\n        }\r\n\r\n\r\n        if (table_flag > 0) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: errorMessage\r\n            };\r\n        }\r\n        else {\r\n            RuleOutputToUI = {\r\n                Status: 'Success',\r\n                Message: 'New Table added'\r\n            };\r\n        }\r\n\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    return {\r\n        validateTable: validateTable\r\n    };\r\n});",
    "Code": "define('o9.EKG.validateTable', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateTable = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        // Condition: Table Name cannot be greater than 50 characters\r\n        if (parsedParams.TableName.length > 50) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name cannot be greater than 50 characters.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Table Name can only contain alphabets(a-z, A-Z), numbers(0-9), and _\r\n        if (!/^[a-zA-Z0-9_]+$/.test(parsedParams.TableName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name can only contain alphabets (a-z, A-Z), numbers(0-9), and underscore(_).'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Table Name cannot be only numbers\r\n        if (/^\\d+$/.test(parsedParams.TableName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name cannot be only numbers.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Table Name should not start with numbers\r\n        if (/^\\d/.test(parsedParams.TableName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Table Name should not start with numbers.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n\r\n\r\n        Log.Info('PRINT ---' + parsedParams.TableName);\r\n        let Table_name = parsedParams.TableName;\r\n\r\n        var ExistingIls = `Select ( [o9EKG Customer].[Project Name] * [o9EKG Table].[Table Name].filter(#.Name like \"${Table_name}\")) on row, ({Measure.[o9EKG Table Included]}) on column where {&CWV, Measure.[o9EKG Table Included]==1} orderby [o9EKG Customer].[Project Name].Key desc;`;\r\n        Log.Info(\"PRINT --- \" + ExistingIls);\r\n        var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n        Log.Info(\"PRINT\" + temp.rowCount);\r\n\r\n        // Condition: Table Name should be unique in the entire tenant (EKG configurator) and not just the project (Name should not be differ in terms of casing)\r\n        let table_flag = 0;\r\n        Log.Info(\"Table \" + Table_name);\r\n        \r\n        if (temp.rowCount > 0) {\r\n            table_flag = 1;\r\n            let Projects = []\r\n            for (i = 0; i < temp.rowCount; i++) {\r\n                let TableFromIBPL = temp.row(i).cell(1).Name\r\n                if (TableFromIBPL.toLowerCase() === Table_name.toLowerCase()) {\r\n                    let Project = temp.row(i).cell(0).Name\r\n                    Projects.push(Project);\r\n                }\r\n            }\r\n            Log.Info(\"Projects \" + Projects);\r\n            Log.Info(\"Project length \" + Projects.length);\r\n\r\n            if (Projects.length === 0) {\r\n                table_flag = 0;\r\n            }\r\n\r\n            let ProjectsSet = new Set(Projects);\r\n\r\n            Projects = [...ProjectsSet]\r\n\r\n            if(Projects.length > 3){\r\n                Projects = Projects.slice(0, 3)\r\n            }\r\n\r\n            let projectString = \"\"\r\n\r\n            Projects.map((projectItem, idx) => {\r\n                if (idx == 0) {\r\n                    projectString += projectItem\r\n                }\r\n                else if (idx === Projects.length - 1) {\r\n                    projectString += ` & \"${projectItem}\"`\r\n                } else {\r\n                    projectString += `, \"${projectItem}\"`\r\n                }\r\n            })\r\n\r\n            let phrase = \"\"\r\n\r\n            if (temp.rowCount == 1) {\r\n                projectString = \"project \" + projectString\r\n                phrase = \"this project\"\r\n            }\r\n            else {\r\n                projectString = \"projects \" + projectString\r\n                phrase = \"these project\"\r\n            }\r\n\r\n            errorMessage = `This table already exists in ${projectString}.\\nPlease enter a new name or copy the table from ${phrase} to edit it here using the Copy Table button.`\r\n\r\n\r\n        }\r\n\r\n\r\n        if (table_flag > 0) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: errorMessage\r\n            };\r\n        }\r\n        else {\r\n            RuleOutputToUI = {\r\n                Status: 'Success',\r\n                Message: 'New Table added'\r\n            };\r\n        }\r\n\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    return {\r\n        validateTable: validateTable\r\n    };\r\n});",
    "ModuleName": "o9.EKG.validateTable",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "5e803bcd-80d9-6b28-f573-cbdaa29ad11d",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213078,
    "Description": "o9.EKG.generateFieldID",
    "Documentation": "define('o9.EKG.generateFieldID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var generateFieldID = function(o9Params){\r\n  \r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info(\"Started generateFieldID Plugin\");\r\n    \r\n    // Query to get the last used custom field ID\r\n    let ExistingIls = `Select ( [o9EKG Table].[Table Type] * [o9EKG Table].[Table Group] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID].filter(#.Name startswith \"CF_\") )  orderby [o9EKG Table].[Field ID].Key desc limit 1;`;\r\n    let temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n    var ID;\r\n    if( temp.row(0).cell(3) && temp.row(0).cell(3).Name){\r\n     ID = temp.row(0).cell(3).Name;\r\n     Log.Info(`ID if CF is present--------${ID}`);\r\n    }else{\r\n        ID = null;\r\n        Log.Info(`ID if CF is not present--------${ID}`);\r\n    }\r\n    Log.Info('Last custom Field ID---------- '+ ID);\r\n    var newID;\r\n    if(ID){\r\n        var IDNo = ID.substring(3);\r\n        var newIDNo = parseInt(IDNo) + 1;\r\n        newID = \"CF_\" + newIDNo;\r\n        Log.Info(\"New Field ID: \"+newID);\r\n    }else{\r\n        newID = \"CF_1\";\r\n        Log.Info(\"This is the first custom field, New Field ID:------- \"+newID);\r\n    }\r\n\r\n    var jsonObject = {\r\n        \"newID\": newID\r\n    };\r\n\r\n\r\n    return jsonObject;\r\n    };\r\n    return {\r\n        generateFieldID: generateFieldID\r\n  };\r\n  })",
    "Code": "define('o9.EKG.generateFieldID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var generateFieldID = function(o9Params){\r\n  \r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info(\"Started generateFieldID Plugin\");\r\n    \r\n    // Query to get the last used custom field ID\r\n    let ExistingIls = `Select ( [o9EKG Table].[Table Type] * [o9EKG Table].[Table Group] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID].filter(#.Name startswith \"CF_\") )  orderby [o9EKG Table].[Field ID].Key desc limit 1;`;\r\n    let temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n    var ID;\r\n    if( temp.row(0).cell(3) && temp.row(0).cell(3).Name){\r\n     ID = temp.row(0).cell(3).Name;\r\n     Log.Info(`ID if CF is present--------${ID}`);\r\n    }else{\r\n        ID = null;\r\n        Log.Info(`ID if CF is not present--------${ID}`);\r\n    }\r\n    Log.Info('Last custom Field ID---------- '+ ID);\r\n    var newID;\r\n    if(ID){\r\n        var IDNo = ID.substring(3);\r\n        var newIDNo = parseInt(IDNo) + 1;\r\n        newID = \"CF_\" + newIDNo;\r\n        Log.Info(\"New Field ID: \"+newID);\r\n    }else{\r\n        newID = \"CF_1\";\r\n        Log.Info(\"This is the first custom field, New Field ID:------- \"+newID);\r\n    }\r\n\r\n    var jsonObject = {\r\n        \"newID\": newID\r\n    };\r\n\r\n\r\n    return jsonObject;\r\n    };\r\n    return {\r\n        generateFieldID: generateFieldID\r\n  };\r\n  })",
    "ModuleName": "o9.EKG.generateFieldID",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "0acc9533-0c0d-59e6-0d9b-7ed1e22d62d5",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213079,
    "Description": "validateCustomFieldID",
    "Documentation": "define('o9.EKG.validateCustomFieldID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateCustomFieldID = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info(\"Started validateCustomFieldID Plugin\");\r\n\r\n        let customFieldPrefix = parsedParams.CustomFieldPrefix;\r\n        let Project = parsedParams.Project;\r\n\r\n\r\n        Log.Info(\"Using Custom Field Prefix \" + customFieldPrefix);\r\n\r\n        /*\r\n            Validation: \r\n                1. Case Senstive? Yes\r\n                2. MaxLength of Prefix? 3\r\n                3. Only Alphabets allowed? no numbers or special chars // only alphabet\r\n                4. No whitespace? or auto trimming? // trimming\r\n                5. Do we need to lock the prefix value once user has defined, or do we give them flexibility to change the prefix after defining\r\n                6. Method to identify ODMEKG Tenant, (TenantID - from Admin EKG Configurator)\r\n        */\r\n\r\n        let trimmedPrefix = customFieldPrefix.trim();\r\n\r\n        // Validation 1: Check if prefix is empty\r\n        if (!trimmedPrefix) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: Prefix cannot be empty.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Validation 2: Check MaxLength of Prefix (3)\r\n        if (trimmedPrefix.length > 3) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: Prefix cannot be longer than 3 characters.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Validation 3: Check if only alphabets are allowed\r\n        if (!/^[a-zA-Z]+$/.test(trimmedPrefix)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: Prefix must contain only alphabetic characters.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let isODMEKGTenant = false;\r\n        let ODMEKGConfiguratorTenantID = \"5935\"\r\n        let ODMEKGConfiguratorTenantURL = \"https://mygcppmm.o9solutions.com\"\r\n        let isODMPrefixOverwritten = false;\r\n\r\n        // list of restricted prefix (case - Insenstive)\r\n        let restrictedPrefixes = [\"F\", \"CF\", \"DF\", \"SF\", \"ZF\"];\r\n\r\n        // Validation 1: Should not be restricted prefix\r\n\r\n        let tenantIDQuery = `Select (&CWV * {Measure.[o9EKG Tenant ID], Measure.[o9EKG Tenant URL]});`;\r\n        // if tenant ID is for 'ODMEKGConfigurator' is defined and is same as tenant ID of ODMEKGConfigurator\r\n        let tenantIDResult = cellsetModule.createCellSet(queryModule.select(tenantIDQuery));\r\n\r\n        let tenantIDCount = tenantIDResult.rowCount;\r\n        if (tenantIDCount > 0) {\r\n            let tenantID = tenantIDResult.row(0).cell(1);\r\n            let tenantUrl = tenantIDResult.row(0).cell(2);\r\n            if (tenantID == ODMEKGConfiguratorTenantID && tenantUrl == ODMEKGConfiguratorTenantURL) {\r\n                isODMEKGTenant = true;\r\n            }\r\n        }\r\n\r\n        if (!isODMEKGTenant) {\r\n            restrictedPrefixes.push(\"PMM\")\r\n        }\r\n\r\n        let isARestrictedPrefix = restrictedPrefixes.includes(trimmedPrefix);\r\n\r\n        if (isARestrictedPrefix) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: The following prefixes are restricted: ${restrictedPrefixes.join(', ')}. Please use a different prefix.`\r\n            };\r\n            return RuleOutputToUI;\r\n        } else if (isODMEKGTenant && trimmedPrefix != \"PMM\") {\r\n            trimmedPrefix = \"PMM\"\r\n            isODMPrefixOverwritten = true;\r\n        }\r\n\r\n        let queryToWrite = `scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}]);\r\n            Measure.[o9EKG Custom Field Prefix] = \"${trimmedPrefix}\";\r\n        end scope;`\r\n\r\n        queryModule.update(queryToWrite)\r\n\r\n        if (isODMPrefixOverwritten) {\r\n            RuleOutputToUI = {\r\n                Status: 'Success',\r\n                Message: `<span style=\"color: blue;\">Info: For ODMEKG Tenant, only PMM prefix is allowed.</span>`\r\n            };\r\n        } else {\r\n            RuleOutputToUI = {\r\n                Status: 'Success',\r\n                Message: `<span style=\"color: green;\">Success: Prefix is added successfully.</span>`\r\n            };\r\n        }\r\n        return RuleOutputToUI;\r\n\r\n    };\r\n\r\n    return {\r\n        validateCustomFieldID: validateCustomFieldID\r\n    };\r\n});",
    "Code": "define('o9.EKG.validateCustomFieldID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateCustomFieldID = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info(\"Started validateCustomFieldID Plugin\");\r\n\r\n        let customFieldPrefix = parsedParams.CustomFieldPrefix;\r\n        let Project = parsedParams.Project;\r\n\r\n\r\n        Log.Info(\"Using Custom Field Prefix \" + customFieldPrefix);\r\n\r\n        /*\r\n            Validation: \r\n                1. Case Senstive? Yes\r\n                2. MaxLength of Prefix? 3\r\n                3. Only Alphabets allowed? no numbers or special chars // only alphabet\r\n                4. No whitespace? or auto trimming? // trimming\r\n                5. Do we need to lock the prefix value once user has defined, or do we give them flexibility to change the prefix after defining\r\n                6. Method to identify ODMEKG Tenant, (TenantID - from Admin EKG Configurator)\r\n        */\r\n\r\n        let trimmedPrefix = customFieldPrefix.trim();\r\n\r\n        // Validation 1: Check if prefix is empty\r\n        if (!trimmedPrefix) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: Prefix cannot be empty.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Validation 2: Check MaxLength of Prefix (3)\r\n        if (trimmedPrefix.length > 3) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: Prefix cannot be longer than 3 characters.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Validation 3: Check if only alphabets are allowed\r\n        if (!/^[a-zA-Z]+$/.test(trimmedPrefix)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: Prefix must contain only alphabetic characters.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let isODMEKGTenant = false;\r\n        let ODMEKGConfiguratorTenantID = \"5935\"\r\n        let ODMEKGConfiguratorTenantURL = \"https://mygcppmm.o9solutions.com\"\r\n        let isODMPrefixOverwritten = false;\r\n\r\n        // list of restricted prefix (case - Insenstive)\r\n        let restrictedPrefixes = [\"F\", \"CF\", \"DF\", \"SF\", \"ZF\"];\r\n\r\n        // Validation 1: Should not be restricted prefix\r\n\r\n        let tenantIDQuery = `Select (&CWV * {Measure.[o9EKG Tenant ID], Measure.[o9EKG Tenant URL]});`;\r\n        // if tenant ID is for 'ODMEKGConfigurator' is defined and is same as tenant ID of ODMEKGConfigurator\r\n        let tenantIDResult = cellsetModule.createCellSet(queryModule.select(tenantIDQuery));\r\n\r\n        let tenantIDCount = tenantIDResult.rowCount;\r\n        if (tenantIDCount > 0) {\r\n            let tenantID = tenantIDResult.row(0).cell(1);\r\n            let tenantUrl = tenantIDResult.row(0).cell(2);\r\n            if (tenantID == ODMEKGConfiguratorTenantID && tenantUrl == ODMEKGConfiguratorTenantURL) {\r\n                isODMEKGTenant = true;\r\n            }\r\n        }\r\n\r\n        if (!isODMEKGTenant) {\r\n            restrictedPrefixes.push(\"PMM\")\r\n        }\r\n\r\n        let isARestrictedPrefix = restrictedPrefixes.includes(trimmedPrefix);\r\n\r\n        if (isARestrictedPrefix) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Error: The following prefixes are restricted: ${restrictedPrefixes.join(', ')}. Please use a different prefix.`\r\n            };\r\n            return RuleOutputToUI;\r\n        } else if (isODMEKGTenant && trimmedPrefix != \"PMM\") {\r\n            trimmedPrefix = \"PMM\"\r\n            isODMPrefixOverwritten = true;\r\n        }\r\n\r\n        let queryToWrite = `scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}]);\r\n            Measure.[o9EKG Custom Field Prefix] = \"${trimmedPrefix}\";\r\n        end scope;`\r\n\r\n        queryModule.update(queryToWrite)\r\n\r\n        if (isODMPrefixOverwritten) {\r\n            RuleOutputToUI = {\r\n                Status: 'Success',\r\n                Message: `<span style=\"color: blue;\">Info: For ODMEKG Tenant, only PMM prefix is allowed.</span>`\r\n            };\r\n        } else {\r\n            RuleOutputToUI = {\r\n                Status: 'Success',\r\n                Message: `<span style=\"color: green;\">Success: Prefix is added successfully.</span>`\r\n            };\r\n        }\r\n        return RuleOutputToUI;\r\n\r\n    };\r\n\r\n    return {\r\n        validateCustomFieldID: validateCustomFieldID\r\n    };\r\n});",
    "ModuleName": "o9.EKG.validateCustomFieldID",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "b6be3366-7e51-0ac6-3b6f-90fda7181c59",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213080,
    "Description": "saveProject2",
    "Documentation": "define('o9.ekgconfig.saveProject2', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    const saveProject = function (o9Params) {\r\n        const parsedParams = JSON.parse(o9Params);\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n\r\n        const project = parsedParams.Project;\r\n        const newSequence = parsedParams.NewSeq;\r\n        const createdBy = parsedParams.user;\r\n        const creationTimestamp = parsedParams.now;\r\n\r\n        // Helper function for logging and updating queries\r\n        const logAndExecuteQuery = (logMessage, query) => {\r\n            Log.Info(`<EKG - Save Project Logs> : ${logMessage} = ${query}`);\r\n            queryModule.update(query);\r\n        };\r\n\r\n\r\n        const validationIBPLQuery = `(Select ([o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Customer].[Project Name].[${project}] * [Version].[Version Name].[CurrentWorkingView] ) on row, \r\n({ Measure.[o9EKG Validation Criticality]}) on column).filter(Measure.[o9EKG Validation Criticality] == \"Error\" );`;\r\n \r\n        Log.Info(`<EKG - Save Project Logs> : Validation IBPL Check = ${validationIBPLQuery}`);\r\n        let errorFlag = false;\r\n\r\n        try {\r\n            const validationRow = cellsetModule.createCellSet(queryModule.select(validationIBPLQuery));\r\n            const errorText = validationRow.row(0).cell(5);\r\n            const errorRow = validationRow.rowCount;\r\n            Log.Info(\"<EKG - Save Project Logs> : \" + errorText);\r\n            Log.Error(\"<EKG - Error Text > : \" + errorText);\r\n            Log.Error(\"<EKG - Error Text errorRow> : \" + errorRow);\r\n\r\n            if (errorRow !== 0) {\r\n                errorFlag = true;\r\n                Log.Error(\"<EKG - Save Project Logs> : Validation Errors found. Exiting Execution...\");\r\n            } else {\r\n                Log.Info(\"<EKG - Save Project Logs> : No validation errors found. Generating JSON data.\");\r\n            }\r\n        } catch (error) {\r\n            errorFlag = false;\r\n            Log.Info(\"<EKG - Save Project Logs> : No validation errors found. Generating JSON data.(catch)\"); // No errors found\r\n        }\r\n\r\n\r\n        // 7. Execute pipeline metadata if no errors\r\n        if (!errorFlag) {\r\n            const markLatestFalseQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKGSequence].[o9EKGSequenceNumber]);Measure.[o9EKG Project Metadata IsLatest] = \"FALSE\";end scope;`;\r\n            logAndExecuteQuery(\"Mark Latest Flag Query (Set FALSE)\", markLatestFalseQuery);\r\n    \r\n            const markLatestTrueQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKGSequence].[o9EKGSequenceNumber].[${newSequence}]);Measure.[o9EKG Project Metadata IsLatest] = \"TRUE\";end scope;`;\r\n            logAndExecuteQuery(\"Mark Latest Flag Query (Set TRUE)\", markLatestTrueQuery);\r\n    \r\n            // 5. Populate metadata measures\r\n            const populateMetadataQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKGSequence].[o9EKGSequenceNumber].[${newSequence}]);Measure.[o9EKG Project Metadata Created By] = \"${createdBy}\";Measure.[o9EKG Project Metadata Creation Timestamp] = \"${creationTimestamp}\";Measure.[o9EKG Project Metadata] = \"ABC\";end scope;`;\r\n            logAndExecuteQuery(\"Populating Metadata Measures\", populateMetadataQuery);\r\n\r\n            const executePipelineMetaQuery = `EXEC plugin instance o9EKGPipeline_Meta for measures {[o9EKG Field Name]} using scope (&CWV * [o9EKG Customer].[Project Name].[${project}]);`;\r\n            logAndExecuteQuery(\"Executing Pipeline Metadata Plugins\", executePipelineMetaQuery);\r\n            \r\n            const successMessage = \"Project saved successfully. JSON and API doc has been generated.\".fontcolor('green');\r\n            RuleOutputToUI = { Status: 'Success', Message: successMessage };\r\n            return;\r\n        } else {\r\n            const errorMessage = \"There are Validation Errors in this project. Please fix the errors and try again...\".fontcolor('red');\r\n            RuleOutputToUI = { Status: 'Success', Message: errorMessage };\r\n            return;\r\n        }\r\n    };\r\n\r\n    return {\r\n        saveProject: saveProject\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.saveProject2', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    const saveProject = function (o9Params) {\r\n        const parsedParams = JSON.parse(o9Params);\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n\r\n        const project = parsedParams.Project;\r\n        const newSequence = parsedParams.NewSeq;\r\n        const createdBy = parsedParams.user;\r\n        const creationTimestamp = parsedParams.now;\r\n\r\n        // Helper function for logging and updating queries\r\n        const logAndExecuteQuery = (logMessage, query) => {\r\n            Log.Info(`<EKG - Save Project Logs> : ${logMessage} = ${query}`);\r\n            queryModule.update(query);\r\n        };\r\n\r\n\r\n        const validationIBPLQuery = `(Select ([o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Customer].[Project Name].[${project}] * [Version].[Version Name].[CurrentWorkingView] ) on row, \r\n({ Measure.[o9EKG Validation Criticality]}) on column).filter(Measure.[o9EKG Validation Criticality] == \"Error\" );`;\r\n \r\n        Log.Info(`<EKG - Save Project Logs> : Validation IBPL Check = ${validationIBPLQuery}`);\r\n        let errorFlag = false;\r\n\r\n        try {\r\n            const validationRow = cellsetModule.createCellSet(queryModule.select(validationIBPLQuery));\r\n            const errorText = validationRow.row(0).cell(5);\r\n            const errorRow = validationRow.rowCount;\r\n            Log.Info(\"<EKG - Save Project Logs> : \" + errorText);\r\n            Log.Error(\"<EKG - Error Text > : \" + errorText);\r\n            Log.Error(\"<EKG - Error Text errorRow> : \" + errorRow);\r\n\r\n            if (errorRow !== 0) {\r\n                errorFlag = true;\r\n                Log.Error(\"<EKG - Save Project Logs> : Validation Errors found. Exiting Execution...\");\r\n            } else {\r\n                Log.Info(\"<EKG - Save Project Logs> : No validation errors found. Generating JSON data.\");\r\n            }\r\n        } catch (error) {\r\n            errorFlag = false;\r\n            Log.Info(\"<EKG - Save Project Logs> : No validation errors found. Generating JSON data.(catch)\"); // No errors found\r\n        }\r\n\r\n\r\n        // 7. Execute pipeline metadata if no errors\r\n        if (!errorFlag) {\r\n            const markLatestFalseQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKGSequence].[o9EKGSequenceNumber]);Measure.[o9EKG Project Metadata IsLatest] = \"FALSE\";end scope;`;\r\n            logAndExecuteQuery(\"Mark Latest Flag Query (Set FALSE)\", markLatestFalseQuery);\r\n    \r\n            const markLatestTrueQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKGSequence].[o9EKGSequenceNumber].[${newSequence}]);Measure.[o9EKG Project Metadata IsLatest] = \"TRUE\";end scope;`;\r\n            logAndExecuteQuery(\"Mark Latest Flag Query (Set TRUE)\", markLatestTrueQuery);\r\n    \r\n            // 5. Populate metadata measures\r\n            const populateMetadataQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKGSequence].[o9EKGSequenceNumber].[${newSequence}]);Measure.[o9EKG Project Metadata Created By] = \"${createdBy}\";Measure.[o9EKG Project Metadata Creation Timestamp] = \"${creationTimestamp}\";Measure.[o9EKG Project Metadata] = \"ABC\";end scope;`;\r\n            logAndExecuteQuery(\"Populating Metadata Measures\", populateMetadataQuery);\r\n\r\n            const executePipelineMetaQuery = `EXEC plugin instance o9EKGPipeline_Meta for measures {[o9EKG Field Name]} using scope (&CWV * [o9EKG Customer].[Project Name].[${project}]);`;\r\n            logAndExecuteQuery(\"Executing Pipeline Metadata Plugins\", executePipelineMetaQuery);\r\n            \r\n            const successMessage = \"Project saved successfully. JSON and API doc has been generated.\".fontcolor('green');\r\n            RuleOutputToUI = { Status: 'Success', Message: successMessage };\r\n            return;\r\n        } else {\r\n            const errorMessage = \"There are Validation Errors in this project. Please fix the errors and try again...\".fontcolor('red');\r\n            RuleOutputToUI = { Status: 'Success', Message: errorMessage };\r\n            return;\r\n        }\r\n    };\r\n\r\n    return {\r\n        saveProject: saveProject\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.saveProject2",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "33944f19-6417-14ed-88b2-5e3368044377",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213081,
    "Description": "toggleMultiTenant",
    "Documentation": "define('o9.EKG.toggleMultiTenant', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var chunkArray = function (array, chunkSize) {\r\n        let chunkedArray = [];\r\n\r\n        for (let i = 0; i < array.length; i += chunkSize) {\r\n            let chunk = array.slice(i, Math.min(array.length, i + chunkSize));\r\n            chunkedArray.push(chunk);\r\n        }\r\n\r\n        return chunkedArray;\r\n    }\r\n\r\n    var joinArray = function (array) {\r\n        return array.map(function (p) {\r\n            return '\"' + p + '\"';\r\n        }).join(',');\r\n    }\r\n\r\n    var toggleMultiTenant = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const project = parsedParams.Project;\r\n        const status = parsedParams.status;\r\n        const user = parsedParams.user;\r\n        const now = parsedParams.now;\r\n        let MT_Status = parsedParams.MT_Status;\r\n\r\n        MT_Status = \"\" + MT_Status\r\n\r\n        Log.Info(typeof MT_Status);\r\n        Log.Info(MT_Status);\r\n\r\n\r\n        const stripe_col_name = \"o9_ekg_tenant_stripe\";\r\n\r\n        Log.Info(\"Started toggleMultiTenant Plugin\");\r\n\r\n        // status can be New, Include, Exclude, Delete\r\n\r\n\r\n        let allLSUTablesQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Type].[LS_Upload] * [o9EKG Table].[Table Group] * [o9EKG Table].[Table Name] * {Measure.[o9EKG Table Included], Measure.[o9EKG Field Sub Block Association Name], Measure.[o9EKG Business Characteristics Field Association Name]});`;\r\n        let allLSUTablesResult = cellsetModule.createCellSet(queryModule.select(allLSUTablesQuery));\r\n\r\n        let numLSUTables = allLSUTablesResult.rowCount;\r\n\r\n        // get numLSUTables field IDs\r\n\r\n        let getLastCustomFieldIDQuery = `Select ([o9EKG Table].[Field ID].filter(#.Name startswith \"CF_\")) orderby [o9EKG Table].[Field ID].Key desc limit 1;`;\r\n        let getLastCustomFieldIDResult = cellsetModule.createCellSet(queryModule.select(getLastCustomFieldIDQuery));\r\n\r\n        let lastCFID = 0;\r\n        if (getLastCustomFieldIDResult.rowCount > 0) {\r\n            lastCFID = getLastCustomFieldIDResult.row(0).cell(0).Name\r\n            lastCFID = Number(lastCFID.replace(\"CF_\", \"\"));\r\n        }\r\n\r\n        // add a check to verify that no other field should be present in lastCFID to lastCFID + numLSUTables\r\n        let maxTries = 20;\r\n        let foundFieldIDs = false;\r\n        if (status === \"True\") {\r\n            for (let triIdx = 0; triIdx < maxTries; triIdx++) {\r\n                let startFieldID = lastCFID + numLSUTables * (triIdx);\r\n                let endFieldID = lastCFID + numLSUTables * (triIdx + 1);\r\n\r\n                let fieldListToCheck = [];\r\n                for (let tempIdx = startFieldID; tempIdx < endFieldID; tempIdx++) {\r\n                    fieldListToCheck.push(`CF_${tempIdx}`)\r\n                }\r\n\r\n                // check if these fields exists in LS\r\n                let checkCustomFieldExistQuery = `Select ([o9EKG Table].[Field ID].filter(#.Name in {${joinArray(fieldListToCheck)}})) limit 1;`;\r\n                let checkCustomFieldExistResult = cellsetModule.createCellSet(queryModule.select(checkCustomFieldExistQuery))\r\n\r\n                let numFieldsTemp = checkCustomFieldExistResult.rowCount;\r\n                if (numFieldsTemp == 0) {\r\n                    foundFieldIDs = true;\r\n                    lastCFID = startFieldID;\r\n                    Log.Info(`Found CF_ID range to use CF_${startFieldID} to CF_${endFieldID - 1}`)\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundFieldIDs == false) {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'Max number of try to search FieldIDs Exhausted!' };\r\n                return;\r\n            }\r\n        }\r\n\r\n        Log.Info(`Starting execution from CF_ ${lastCFID}`)\r\n\r\n        // query to get max(field position) for each table\r\n        let maxFieldPositionQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * {Measure.[o9EKG Field Position], Measure.[o9EKG Field Included]});`\r\n        let maxFieldPositionResult = cellsetModule.createCellSet(queryModule.select(maxFieldPositionQuery));\r\n\r\n        let tableFieldPositionMax = {};\r\n        let maxFieldPositionLen = maxFieldPositionResult.rowCount;\r\n\r\n        for (let fieldPositionIdx = 0; fieldPositionIdx < maxFieldPositionLen; fieldPositionIdx++) {\r\n            let fieldPositionTemp = maxFieldPositionResult.row(fieldPositionIdx).cell(4);\r\n            let tableNameTemp = maxFieldPositionResult.row(fieldPositionIdx).cell(2).Name;\r\n\r\n            // if fieldPositionTemp is not integer, make it zero     \r\n            if (fieldPositionTemp != parseInt(fieldPositionTemp)) {\r\n                fieldPositionTemp = 0;\r\n            }\r\n\r\n            if (!tableFieldPositionMax.hasOwnProperty(tableNameTemp)) {\r\n                tableFieldPositionMax[tableNameTemp] = 0;\r\n            }\r\n\r\n            tableFieldPositionMax[tableNameTemp] = Math.max(tableFieldPositionMax[tableNameTemp], fieldPositionTemp)\r\n        }\r\n\r\n\r\n        let tenantStripeFieldQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * {Measure.[o9EKG Field Name], Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Field Name] == \"o9_ekg_tenant_stripe\");`;\r\n        let tenantStripeFieldResult = cellsetModule.createCellSet(queryModule.select(tenantStripeFieldQuery));\r\n\r\n        const numStripeCols = tenantStripeFieldResult.rowCount;\r\n\r\n        let tableFieldMapping = {};\r\n\r\n        for (tableFieldIdx = 0; tableFieldIdx < numStripeCols; tableFieldIdx++) {\r\n            const tableName = tenantStripeFieldResult.row(tableFieldIdx).cell(2).Name;\r\n            const fieldID = tenantStripeFieldResult.row(tableFieldIdx).cell(3).Name;\r\n            const fieldIncluded = tenantStripeFieldResult.row(tableFieldIdx).cell(5);\r\n\r\n            if (!tableFieldMapping.hasOwnProperty(tableName)) {\r\n                tableFieldMapping[tableName] = [];\r\n            }\r\n\r\n            tableFieldMapping[tableName].push({ fieldID: fieldID, fieldIncluded: fieldIncluded });\r\n        }\r\n\r\n        let fieldListToDelete = [];\r\n\r\n\r\n\r\n        for (let i = 0; i < numLSUTables; i++) {\r\n            let tableType = allLSUTablesResult.row(i).cell(2).Name;\r\n            let tableGroup = allLSUTablesResult.row(i).cell(3).Name;\r\n            let tableName = allLSUTablesResult.row(i).cell(4).Name;\r\n\r\n            let tableIncluded = allLSUTablesResult.row(i).cell(5);\r\n            let subBlock = allLSUTablesResult.row(i).cell(6);\r\n            let capibility = allLSUTablesResult.row(i).cell(7);\r\n\r\n            if (tableIncluded != 1) {\r\n                tableIncluded = -1;\r\n            }\r\n\r\n\r\n            if (subBlock == null || capibility == null) {\r\n                continue;\r\n            }\r\n\r\n\r\n            if (status === \"True\") {\r\n                if (MT_Status == \"true\") {\r\n                    RuleOutputToUI = { Status: 'Error', Message: 'Multi Tenant is already enabled!' };\r\n                    return;\r\n                }\r\n                let cf_id = \"CF_\" + (++lastCFID);\r\n\r\n                let createFieldQuery = `createmember( [o9EKG Table].[Table Type] = { , \"${tableType}\" }  , [o9EKG Table].[Table Group] = { , \"${tableGroup}\" } , [o9EKG Table].[Table Name] = { , \"${tableName}\" }, [o9EKG Table].[Field ID] = { ,\"${cf_id}\"} );`;\r\n                queryModule.update(createFieldQuery);\r\n\r\n                let ExecuteIBPLCreateField = `exec procedure EKG_AddFields_InBulk {  \"FieldList\" : [\"${cf_id}\"] ,  \"Project\" : \"${project}\" , \"Blocklist\" : [${filterclause(subBlock)}], \"Caplist\" : [${filterclause(capibility)}],  \"user\" : \"${user}\",  \"now\" : \"${now}\"  } ;`\r\n\r\n                queryModule.update(ExecuteIBPLCreateField);\r\n\r\n                let fieldPosition = tableFieldPositionMax[tableName];\r\n\r\n                if (fieldPosition != parseInt(fieldPosition)) {\r\n                    fieldPosition = 0;\r\n                }\r\n\r\n\r\n                let updatefieldproperties = `\r\n                scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Field ID].[${cf_id}]);\r\n                    Measure.[o9EKG Field Name] = \"${stripe_col_name}\";\r\n                    Measure.[o9EKG Field Short Description] = \"Field for stripe column\";\r\n                    Measure.[o9EKG Field Data Type] = \"String\";\r\n                    Measure.[o9EKG Field Included] = \"${tableIncluded}\";\r\n                    Measure.[o9EKG Field Position] = \"${fieldPosition + 1}\";\r\n                end scope;`\r\n\r\n                queryModule.update(updatefieldproperties);\r\n\r\n                let updateSourceFieldMapping = `\r\n                scope: ( &CWV * [o9EKG Table].[Field ID].[${cf_id}] * [o9EKG Customer].[Project Name].[${project}] * [Sequence].[Sequence].[1] ) ;\r\n                Measure.[o9EKG Source Field Mapping] = \"Hardcode('')\";\r\n                end scope;`\r\n                queryModule.update(updateSourceFieldMapping);\r\n\r\n                Log.Info(\"Completed tenant stripe columns for \" + tableName);\r\n            } else {\r\n                // add if not fields are present for this table then skip it\r\n                const tableFieldMap = tableFieldMapping[tableName]\r\n                if (tableFieldMap == undefined) continue;\r\n\r\n                for (let fieldIDidx = 0; fieldIDidx < tableFieldMap.length; fieldIDidx++) {\r\n                    let stripeFieldID = tableFieldMap[fieldIDidx]['fieldID']\r\n                    let tableIncludedState = tableFieldMap[fieldIDidx]['fieldIncluded']\r\n\r\n                    let queryToPerformAction = ``;\r\n                    if (status === \"Include\") {\r\n                        if (tableIncludedState == '-1') {\r\n                            continue;\r\n                        }\r\n                        queryToPerformAction = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Field ID].[${stripeFieldID}]);\r\n                    Measure.[o9EKG Field Included] = 1;\r\n                    end scope;`;\r\n                    }\r\n                    else if (status === \"Exclude\") {\r\n                        queryToPerformAction = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Field ID].[${stripeFieldID}]);\r\n                    Measure.[o9EKG Field Included] = -1;\r\n                    end scope;`;\r\n                    } else if (status === \"False\") {\r\n                        fieldListToDelete.push(stripeFieldID)\r\n                        // queryToPerformAction = `deletemember([o9EKG Table].[Field ID] = {, \"${stripeFieldID}\"});`;\r\n\r\n                    }\r\n                    if (queryToPerformAction) {\r\n                        queryModule.update(queryToPerformAction);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // handle the status false scenario\r\n\r\n        Log.Info(`${status}`)\r\n        if (status === \"False\") {\r\n            if (MT_Status == \"false\") {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'Multi Tenant is already disabled!' };\r\n                return;\r\n            }\r\n            let finalFieldListToDelete = chunkArray(fieldListToDelete, 50);\r\n            Log.Info(`${finalFieldListToDelete.length}`)\r\n            for (let idx = 0; idx < finalFieldListToDelete.length; idx++) {\r\n\r\n                queryToPerformAction =\r\n                    `DELETE DATA for MODEL [o9EKG Field Validations] Where {&CWV , [o9EKG Customer].[Project Name].[${project}] , [o9EKG Table].[Field ID].filter(#.Name in {${joinArray(finalFieldListToDelete[idx])}}) };\r\n                DELETE DATA for MODEL [o9EKG Field Properties] Where {&CWV , [o9EKG Customer].[Project Name].[${project}] , [o9EKG Table].[Field ID].filter(#.Name in {${joinArray(finalFieldListToDelete[idx])}}) };\r\n                DELETE DATA for MODEL [o9EKG Field Mappings] Where {&CWV , [o9EKG Customer].[Project Name].[${project}] , [o9EKG Table].[Field ID].filter(#.Name in {${joinArray(finalFieldListToDelete[idx])}}) };`;\r\n\r\n                queryModule.update(queryToPerformAction);\r\n            }\r\n\r\n            // let purgeMemberQuery = `purge members();`;\r\n            // queryModule.update(purgeMemberQuery);\r\n        }\r\n\r\n        let updateStatusQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}]);\r\n        Measure.[o9EKG Multi Tenant Setup] = \"${status}\";\r\n        end scope;`;\r\n        let updateStatusQuery2 = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}]);\r\n        Measure.[o9EKG Multi Tenant Setup] = \"${status}\";\r\n        end scope;`;\r\n        queryModule.update(updateStatusQuery);\r\n        queryModule.update(updateStatusQuery2);\r\n\r\n        let MT_Status_Text = '';\r\n        if (MT_Status != \"true\") {\r\n            MT_Status_Text = \"Enabled\"\r\n        }\r\n        else {\r\n            MT_Status_Text = \"Disabled\"\r\n        }\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: `Successully ${MT_Status_Text} Multi - Tenant Feature!` };\r\n        return;\r\n\r\n    };\r\n\r\n    var filterclause = function (obj) {\r\n        obj = obj.split(\",\")\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(function (p) {\r\n                return '\"' + p + '\"';\r\n            }).join(',');\r\n        }\r\n        return '\"' + obj + '\"';\r\n    };\r\n\r\n    return {\r\n        toggleMultiTenant: toggleMultiTenant\r\n    };\r\n})",
    "Code": "define('o9.EKG.toggleMultiTenant', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var chunkArray = function (array, chunkSize) {\r\n        let chunkedArray = [];\r\n\r\n        for (let i = 0; i < array.length; i += chunkSize) {\r\n            let chunk = array.slice(i, Math.min(array.length, i + chunkSize));\r\n            chunkedArray.push(chunk);\r\n        }\r\n\r\n        return chunkedArray;\r\n    }\r\n\r\n    var joinArray = function (array) {\r\n        return array.map(function (p) {\r\n            return '\"' + p + '\"';\r\n        }).join(',');\r\n    }\r\n\r\n    var toggleMultiTenant = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const project = parsedParams.Project;\r\n        const status = parsedParams.status;\r\n        const user = parsedParams.user;\r\n        const now = parsedParams.now;\r\n        let MT_Status = parsedParams.MT_Status;\r\n\r\n        MT_Status = \"\" + MT_Status\r\n\r\n        Log.Info(typeof MT_Status);\r\n        Log.Info(MT_Status);\r\n\r\n\r\n        const stripe_col_name = \"o9_ekg_tenant_stripe\";\r\n\r\n        Log.Info(\"Started toggleMultiTenant Plugin\");\r\n\r\n        // status can be New, Include, Exclude, Delete\r\n\r\n\r\n        let allLSUTablesQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Type].[LS_Upload] * [o9EKG Table].[Table Group] * [o9EKG Table].[Table Name] * {Measure.[o9EKG Table Included], Measure.[o9EKG Field Sub Block Association Name], Measure.[o9EKG Business Characteristics Field Association Name]});`;\r\n        let allLSUTablesResult = cellsetModule.createCellSet(queryModule.select(allLSUTablesQuery));\r\n\r\n        let numLSUTables = allLSUTablesResult.rowCount;\r\n\r\n        // get numLSUTables field IDs\r\n\r\n        let getLastCustomFieldIDQuery = `Select ([o9EKG Table].[Field ID].filter(#.Name startswith \"CF_\")) orderby [o9EKG Table].[Field ID].Key desc limit 1;`;\r\n        let getLastCustomFieldIDResult = cellsetModule.createCellSet(queryModule.select(getLastCustomFieldIDQuery));\r\n\r\n        let lastCFID = 0;\r\n        if (getLastCustomFieldIDResult.rowCount > 0) {\r\n            lastCFID = getLastCustomFieldIDResult.row(0).cell(0).Name\r\n            lastCFID = Number(lastCFID.replace(\"CF_\", \"\"));\r\n        }\r\n\r\n        // add a check to verify that no other field should be present in lastCFID to lastCFID + numLSUTables\r\n        let maxTries = 20;\r\n        let foundFieldIDs = false;\r\n        if (status === \"True\") {\r\n            for (let triIdx = 0; triIdx < maxTries; triIdx++) {\r\n                let startFieldID = lastCFID + numLSUTables * (triIdx);\r\n                let endFieldID = lastCFID + numLSUTables * (triIdx + 1);\r\n\r\n                let fieldListToCheck = [];\r\n                for (let tempIdx = startFieldID; tempIdx < endFieldID; tempIdx++) {\r\n                    fieldListToCheck.push(`CF_${tempIdx}`)\r\n                }\r\n\r\n                // check if these fields exists in LS\r\n                let checkCustomFieldExistQuery = `Select ([o9EKG Table].[Field ID].filter(#.Name in {${joinArray(fieldListToCheck)}})) limit 1;`;\r\n                let checkCustomFieldExistResult = cellsetModule.createCellSet(queryModule.select(checkCustomFieldExistQuery))\r\n\r\n                let numFieldsTemp = checkCustomFieldExistResult.rowCount;\r\n                if (numFieldsTemp == 0) {\r\n                    foundFieldIDs = true;\r\n                    lastCFID = startFieldID;\r\n                    Log.Info(`Found CF_ID range to use CF_${startFieldID} to CF_${endFieldID - 1}`)\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundFieldIDs == false) {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'Max number of try to search FieldIDs Exhausted!' };\r\n                return;\r\n            }\r\n        }\r\n\r\n        Log.Info(`Starting execution from CF_ ${lastCFID}`)\r\n\r\n        // query to get max(field position) for each table\r\n        let maxFieldPositionQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * {Measure.[o9EKG Field Position], Measure.[o9EKG Field Included]});`\r\n        let maxFieldPositionResult = cellsetModule.createCellSet(queryModule.select(maxFieldPositionQuery));\r\n\r\n        let tableFieldPositionMax = {};\r\n        let maxFieldPositionLen = maxFieldPositionResult.rowCount;\r\n\r\n        for (let fieldPositionIdx = 0; fieldPositionIdx < maxFieldPositionLen; fieldPositionIdx++) {\r\n            let fieldPositionTemp = maxFieldPositionResult.row(fieldPositionIdx).cell(4);\r\n            let tableNameTemp = maxFieldPositionResult.row(fieldPositionIdx).cell(2).Name;\r\n\r\n            // if fieldPositionTemp is not integer, make it zero     \r\n            if (fieldPositionTemp != parseInt(fieldPositionTemp)) {\r\n                fieldPositionTemp = 0;\r\n            }\r\n\r\n            if (!tableFieldPositionMax.hasOwnProperty(tableNameTemp)) {\r\n                tableFieldPositionMax[tableNameTemp] = 0;\r\n            }\r\n\r\n            tableFieldPositionMax[tableNameTemp] = Math.max(tableFieldPositionMax[tableNameTemp], fieldPositionTemp)\r\n        }\r\n\r\n\r\n        let tenantStripeFieldQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * {Measure.[o9EKG Field Name], Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Field Name] == \"o9_ekg_tenant_stripe\");`;\r\n        let tenantStripeFieldResult = cellsetModule.createCellSet(queryModule.select(tenantStripeFieldQuery));\r\n\r\n        const numStripeCols = tenantStripeFieldResult.rowCount;\r\n\r\n        let tableFieldMapping = {};\r\n\r\n        for (tableFieldIdx = 0; tableFieldIdx < numStripeCols; tableFieldIdx++) {\r\n            const tableName = tenantStripeFieldResult.row(tableFieldIdx).cell(2).Name;\r\n            const fieldID = tenantStripeFieldResult.row(tableFieldIdx).cell(3).Name;\r\n            const fieldIncluded = tenantStripeFieldResult.row(tableFieldIdx).cell(5);\r\n\r\n            if (!tableFieldMapping.hasOwnProperty(tableName)) {\r\n                tableFieldMapping[tableName] = [];\r\n            }\r\n\r\n            tableFieldMapping[tableName].push({ fieldID: fieldID, fieldIncluded: fieldIncluded });\r\n        }\r\n\r\n        let fieldListToDelete = [];\r\n\r\n\r\n\r\n        for (let i = 0; i < numLSUTables; i++) {\r\n            let tableType = allLSUTablesResult.row(i).cell(2).Name;\r\n            let tableGroup = allLSUTablesResult.row(i).cell(3).Name;\r\n            let tableName = allLSUTablesResult.row(i).cell(4).Name;\r\n\r\n            let tableIncluded = allLSUTablesResult.row(i).cell(5);\r\n            let subBlock = allLSUTablesResult.row(i).cell(6);\r\n            let capibility = allLSUTablesResult.row(i).cell(7);\r\n\r\n            if (tableIncluded != 1) {\r\n                tableIncluded = -1;\r\n            }\r\n\r\n\r\n            if (subBlock == null || capibility == null) {\r\n                continue;\r\n            }\r\n\r\n\r\n            if (status === \"True\") {\r\n                if (MT_Status == \"true\") {\r\n                    RuleOutputToUI = { Status: 'Error', Message: 'Multi Tenant is already enabled!' };\r\n                    return;\r\n                }\r\n                let cf_id = \"CF_\" + (++lastCFID);\r\n\r\n                let createFieldQuery = `createmember( [o9EKG Table].[Table Type] = { , \"${tableType}\" }  , [o9EKG Table].[Table Group] = { , \"${tableGroup}\" } , [o9EKG Table].[Table Name] = { , \"${tableName}\" }, [o9EKG Table].[Field ID] = { ,\"${cf_id}\"} );`;\r\n                queryModule.update(createFieldQuery);\r\n\r\n                let ExecuteIBPLCreateField = `exec procedure EKG_AddFields_InBulk {  \"FieldList\" : [\"${cf_id}\"] ,  \"Project\" : \"${project}\" , \"Blocklist\" : [${filterclause(subBlock)}], \"Caplist\" : [${filterclause(capibility)}],  \"user\" : \"${user}\",  \"now\" : \"${now}\"  } ;`\r\n\r\n                queryModule.update(ExecuteIBPLCreateField);\r\n\r\n                let fieldPosition = tableFieldPositionMax[tableName];\r\n\r\n                if (fieldPosition != parseInt(fieldPosition)) {\r\n                    fieldPosition = 0;\r\n                }\r\n\r\n\r\n                let updatefieldproperties = `\r\n                scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Field ID].[${cf_id}]);\r\n                    Measure.[o9EKG Field Name] = \"${stripe_col_name}\";\r\n                    Measure.[o9EKG Field Short Description] = \"Field for stripe column\";\r\n                    Measure.[o9EKG Field Data Type] = \"String\";\r\n                    Measure.[o9EKG Field Included] = \"${tableIncluded}\";\r\n                    Measure.[o9EKG Field Position] = \"${fieldPosition + 1}\";\r\n                end scope;`\r\n\r\n                queryModule.update(updatefieldproperties);\r\n\r\n                let updateSourceFieldMapping = `\r\n                scope: ( &CWV * [o9EKG Table].[Field ID].[${cf_id}] * [o9EKG Customer].[Project Name].[${project}] * [Sequence].[Sequence].[1] ) ;\r\n                Measure.[o9EKG Source Field Mapping] = \"Hardcode('')\";\r\n                end scope;`\r\n                queryModule.update(updateSourceFieldMapping);\r\n\r\n                Log.Info(\"Completed tenant stripe columns for \" + tableName);\r\n            } else {\r\n                // add if not fields are present for this table then skip it\r\n                const tableFieldMap = tableFieldMapping[tableName]\r\n                if (tableFieldMap == undefined) continue;\r\n\r\n                for (let fieldIDidx = 0; fieldIDidx < tableFieldMap.length; fieldIDidx++) {\r\n                    let stripeFieldID = tableFieldMap[fieldIDidx]['fieldID']\r\n                    let tableIncludedState = tableFieldMap[fieldIDidx]['fieldIncluded']\r\n\r\n                    let queryToPerformAction = ``;\r\n                    if (status === \"Include\") {\r\n                        if (tableIncludedState == '-1') {\r\n                            continue;\r\n                        }\r\n                        queryToPerformAction = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Field ID].[${stripeFieldID}]);\r\n                    Measure.[o9EKG Field Included] = 1;\r\n                    end scope;`;\r\n                    }\r\n                    else if (status === \"Exclude\") {\r\n                        queryToPerformAction = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Field ID].[${stripeFieldID}]);\r\n                    Measure.[o9EKG Field Included] = -1;\r\n                    end scope;`;\r\n                    } else if (status === \"False\") {\r\n                        fieldListToDelete.push(stripeFieldID)\r\n                        // queryToPerformAction = `deletemember([o9EKG Table].[Field ID] = {, \"${stripeFieldID}\"});`;\r\n\r\n                    }\r\n                    if (queryToPerformAction) {\r\n                        queryModule.update(queryToPerformAction);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // handle the status false scenario\r\n\r\n        Log.Info(`${status}`)\r\n        if (status === \"False\") {\r\n            if (MT_Status == \"false\") {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'Multi Tenant is already disabled!' };\r\n                return;\r\n            }\r\n            let finalFieldListToDelete = chunkArray(fieldListToDelete, 50);\r\n            Log.Info(`${finalFieldListToDelete.length}`)\r\n            for (let idx = 0; idx < finalFieldListToDelete.length; idx++) {\r\n\r\n                queryToPerformAction =\r\n                    `DELETE DATA for MODEL [o9EKG Field Validations] Where {&CWV , [o9EKG Customer].[Project Name].[${project}] , [o9EKG Table].[Field ID].filter(#.Name in {${joinArray(finalFieldListToDelete[idx])}}) };\r\n                DELETE DATA for MODEL [o9EKG Field Properties] Where {&CWV , [o9EKG Customer].[Project Name].[${project}] , [o9EKG Table].[Field ID].filter(#.Name in {${joinArray(finalFieldListToDelete[idx])}}) };\r\n                DELETE DATA for MODEL [o9EKG Field Mappings] Where {&CWV , [o9EKG Customer].[Project Name].[${project}] , [o9EKG Table].[Field ID].filter(#.Name in {${joinArray(finalFieldListToDelete[idx])}}) };`;\r\n\r\n                queryModule.update(queryToPerformAction);\r\n            }\r\n\r\n            // let purgeMemberQuery = `purge members();`;\r\n            // queryModule.update(purgeMemberQuery);\r\n        }\r\n\r\n        let updateStatusQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}]);\r\n        Measure.[o9EKG Multi Tenant Setup] = \"${status}\";\r\n        end scope;`;\r\n        let updateStatusQuery2 = `scope: (&CWV * [o9EKG Customer].[Project Name].[${project}]);\r\n        Measure.[o9EKG Multi Tenant Setup] = \"${status}\";\r\n        end scope;`;\r\n        queryModule.update(updateStatusQuery);\r\n        queryModule.update(updateStatusQuery2);\r\n\r\n        let MT_Status_Text = '';\r\n        if (MT_Status != \"true\") {\r\n            MT_Status_Text = \"Enabled\"\r\n        }\r\n        else {\r\n            MT_Status_Text = \"Disabled\"\r\n        }\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: `Successully ${MT_Status_Text} Multi - Tenant Feature!` };\r\n        return;\r\n\r\n    };\r\n\r\n    var filterclause = function (obj) {\r\n        obj = obj.split(\",\")\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(function (p) {\r\n                return '\"' + p + '\"';\r\n            }).join(',');\r\n        }\r\n        return '\"' + obj + '\"';\r\n    };\r\n\r\n    return {\r\n        toggleMultiTenant: toggleMultiTenant\r\n    };\r\n})",
    "ModuleName": "o9.EKG.toggleMultiTenant",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "e9187c7c-74c8-a7d1-ccf8-7730f88fafdb",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213082,
    "Description": "Populate Rule Expression",
    "Documentation": "define('o9.EKG.populateRuleExpression', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    let logicalOperators = [\"AND\", \"OR\", \"NOT\"]\r\n    // let comparisonOperators = [\"=\", \"!=\"]\r\n    let comparisonOperators = [\"!=\", \"=\", \">\", \"<\", \"BETWEEN\", \" IN \", \" LIKE \", \" IS NOT NULL \", \" IS NULL \"]\r\n\r\n\r\n    var filterDimAttr = function (ruleExpression) {\r\n        let ruleParts = [ruleExpression];\r\n        for (let operator of logicalOperators) {\r\n            let tempRuleParts = [];\r\n            for (let ruleExp of ruleParts) {\r\n                let isIncluded = ruleExp.toLowerCase().includes(operator.toLowerCase())\r\n                if (isIncluded) {\r\n                    let caseInsensitiveDelimiter = new RegExp(operator, 'i');\r\n                    let rulePartsTemp = ruleExp.split(caseInsensitiveDelimiter);\r\n                    tempRuleParts.push(...rulePartsTemp)\r\n                }\r\n                else {\r\n                    tempRuleParts.push(ruleExp)\r\n                }\r\n            }\r\n            ruleParts = tempRuleParts;\r\n        }\r\n\r\n        // Step 2: Extract dimension and attribute names for validation\r\n        let fields = [];\r\n\r\n        ruleParts.forEach(part => {\r\n            Log.Info(part);\r\n            // trim the parts\r\n            part = part.replace('[', '').replace(']', '')\r\n            part = part.replace('(', '').replace(')', '')\r\n\r\n            if (part.includes('.')) {\r\n                let [dim, attr] = part.split('.'); // Assuming dimension is before the dot, attribute is after\r\n                let val = '';\r\n                for (let op of comparisonOperators) {\r\n                    if (attr.includes(op)) {\r\n                        attr = attr.split(op);\r\n                        val = attr.length > 0 ? attr[1] : '';\r\n                        attr = attr[0];\r\n                    }\r\n                }\r\n                if (dim) {\r\n                    dim = dim.trim();\r\n                    attr = attr.trim();\r\n                }\r\n                fields.push({ dim: dim, attr: attr, val: val });\r\n            }\r\n        });\r\n\r\n        Log.Info(fields)\r\n\r\n        return fields;\r\n    }\r\n\r\n    /** this function will take rule expression and perform following steps\r\n     *  1. Divide the expression by Logical Operators\r\n     *  2. Make sure each dim name are same\r\n     *  3. This Dim should not be present in any other rule for this rule set\r\n    **/\r\n\r\n    var validateRuleExpression = function (ruleExpression, existingRuleExpression) {\r\n        // Step 1: Split the rule expression into dim-attr\r\n        let fields = filterDimAttr(ruleExpression)\r\n\r\n        if (fields.length == 0) {\r\n            return \"No Valid field Name found\";\r\n        }\r\n\r\n        let dimName = fields[0]['dim'];\r\n        for (let dim of fields) {\r\n            Log.Info(`${dim['dim']}, ${dimName}`)\r\n            if (dimName != dim['dim']) {\r\n                return \"Only 1 Dimension allowed per rule expression\";\r\n            }\r\n        }\r\n\r\n        for (let existingRule of existingRuleExpression) {\r\n            let existingDimensions = filterDimAttr(existingRule)\r\n\r\n            for (let existingDimAttr of existingDimensions) {\r\n                if (existingDimAttr['dim'] == dimName) {\r\n                    return \"Dimension is already used in another rule\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return \"Valid\";\r\n    };\r\n\r\n    var populateRuleExpression = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const Rule = parsedParams.Rule;\r\n        const RuleSet = parsedParams.RuleSet;\r\n        const RuleType = parsedParams.RuleType;\r\n        let Expression = parsedParams.Expression;\r\n\r\n        Expression = Expression.replace(/\"/g, \"'\");\r\n\r\n        Log.Info(\"Started populateRuleExpression Plugin\");\r\n\r\n        let ruleSetRuleCountQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set] * [o9EKG Rule Set].[Rule].[${RuleSet} - ${Rule}] * {Measure.[o9EKG Rule Expression]});`;\r\n        let ruleSetRuleCount = cellsetModule.createCellSet(queryModule.select(ruleSetRuleCountQuery));\r\n        let ruleSetRuleCountLength = ruleSetRuleCount.rowCount;\r\n        if (ruleSetRuleCountLength > 0) {\r\n            let parentRuleSet = ruleSetRuleCount.row(0).cell(2).Name;\r\n            RuleOutputToUI = { Status: 'Error', Message: `Rule is already present in Ruleset: ${parentRuleSet}!` };\r\n            return;\r\n        }\r\n\r\n        let ruleSetRuleQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set].[${RuleSet}] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Set Description], Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]}).filter(~isNull(Measure.[o9EKG Rule Set Description]));`;\r\n        let ruleSetRuleResult = cellsetModule.createCellSet(queryModule.select(ruleSetRuleQuery));\r\n        let ruleSetRuleLength = ruleSetRuleResult.rowCount;\r\n\r\n        let existingRuleExpression = [];\r\n        for (let ruleExpIdx = 0; ruleExpIdx < ruleSetRuleLength; ruleExpIdx++) {\r\n            let ruleExp = ruleSetRuleResult.row(ruleExpIdx).cell(5);\r\n            let ruleType = ruleSetRuleResult.row(ruleExpIdx).cell(6);\r\n\r\n            if (ruleType == \"Cascade\") {\r\n                existingRuleExpression.push(ruleExp)\r\n            }\r\n\r\n        }\r\n\r\n        let validationResult = validateRuleExpression(Expression, existingRuleExpression)\r\n\r\n        if (validationResult != \"Valid\") {\r\n            RuleOutputToUI = { Status: 'Error', Message: validationResult };\r\n            return;\r\n        }\r\n\r\n\r\n        let createRuleSetMemberQuery = `createmember([o9EKG Rule Set].[Rule Set] = {, \"${RuleSet}\"}, [o9EKG Rule Set].[Rule] = {, \"${RuleSet} - ${Rule}\"} );`\r\n        let populateRuleSetPropertiesQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule].[${RuleSet} - ${Rule}]);\r\nMeasure.[o9EKG Rule Type] = \"${RuleType}\";\r\nMeasure.[o9EKG Rule Expression] = \"${Expression}\";\r\nend scope;`\r\n\r\n        Log.Info(createRuleSetMemberQuery)\r\n        queryModule.update(createRuleSetMemberQuery)\r\n\r\n        Log.Info(populateRuleSetPropertiesQuery)\r\n        queryModule.update(populateRuleSetPropertiesQuery)\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Rule Expression added!' };\r\n        return RuleOutputToUI\r\n    };\r\n\r\n\r\n    var editRuleExpression = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const RuleSet = parsedParams.RuleSet;\r\n        const Rule = parsedParams.Rule;\r\n        const RuleType = parsedParams.RuleType;\r\n        const OldRuleExpression = parsedParams.OldRuleExpression;\r\n        let Expression = parsedParams.RuleExpression;\r\n\r\n\r\n        // check if there are any changes:\r\n        if (OldRuleExpression == Expression) {\r\n            RuleOutputToUI = { Status: 'Success', Message: 'Rule Expression Updated!' };\r\n            return RuleOutputToUI\r\n        }\r\n\r\n        Expression = Expression.replace(/\"/g, \"'\");\r\n\r\n        // get the dim name from old expression\r\n        let oldFields = filterDimAttr(OldRuleExpression)\r\n\r\n        // get the fields from new expression\r\n        let newFields = filterDimAttr(Expression);\r\n\r\n        // old and new dims should be same\r\n        if (!(oldFields.length > 0 && newFields.length > 0 && oldFields[0]['dim'] == newFields[0]['dim'])) {\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Dimension Name of fields can not be changed' };\r\n            return;\r\n        }\r\n\r\n        let ruleSetRuleCountQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set].[${RuleSet}] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Set Description], Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]}).filter(~isNull(Measure.[o9EKG Rule Set Description]));`;\r\n        let ruleSetRuleCountResult = cellsetModule.createCellSet(queryModule.select(ruleSetRuleCountQuery));\r\n        let ruleSetRuleCountLength = ruleSetRuleCountResult.rowCount;\r\n\r\n        let existingRuleExpression = [];\r\n\r\n        for (let ruleExpIdx = 0; ruleExpIdx < ruleSetRuleCountLength; ruleExpIdx++) {\r\n            let ruleExp = ruleSetRuleCountResult.row(ruleExpIdx).cell(5);\r\n            let ruleType = ruleSetRuleCountResult.row(ruleExpIdx).cell(6);\r\n\r\n            if (ruleType == \"Cascade\" && ruleExp != OldRuleExpression) {\r\n                existingRuleExpression.push(ruleExp)\r\n            }\r\n        }\r\n\r\n        let validationResult = validateRuleExpression(Expression, existingRuleExpression)\r\n\r\n        if (validationResult != \"Valid\") {\r\n            RuleOutputToUI = { Status: 'Error', Message: validationResult };\r\n            return;\r\n        }\r\n\r\n\r\n        let populateRuleSetPropertiesQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule].[${Rule}]);\r\n            Measure.[o9EKG Rule Expression] = \"${Expression}\";\r\n        end scope;`\r\n\r\n        Log.Info(populateRuleSetPropertiesQuery)\r\n        queryModule.update(populateRuleSetPropertiesQuery)\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Rule Expression added!' };\r\n        return RuleOutputToUI\r\n\r\n    }\r\n\r\n    return {\r\n        populateRuleExpression: populateRuleExpression,\r\n        editRuleExpression: editRuleExpression\r\n    };\r\n})",
    "Code": "define('o9.EKG.populateRuleExpression', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    let logicalOperators = [\"AND\", \"OR\", \"NOT\"]\r\n    // let comparisonOperators = [\"=\", \"!=\"]\r\n    let comparisonOperators = [\"!=\", \"=\", \">\", \"<\", \"BETWEEN\", \" IN \", \" LIKE \", \" IS NOT NULL \", \" IS NULL \"]\r\n\r\n\r\n    var filterDimAttr = function (ruleExpression) {\r\n        let ruleParts = [ruleExpression];\r\n        for (let operator of logicalOperators) {\r\n            let tempRuleParts = [];\r\n            for (let ruleExp of ruleParts) {\r\n                let isIncluded = ruleExp.toLowerCase().includes(operator.toLowerCase())\r\n                if (isIncluded) {\r\n                    let caseInsensitiveDelimiter = new RegExp(operator, 'i');\r\n                    let rulePartsTemp = ruleExp.split(caseInsensitiveDelimiter);\r\n                    tempRuleParts.push(...rulePartsTemp)\r\n                }\r\n                else {\r\n                    tempRuleParts.push(ruleExp)\r\n                }\r\n            }\r\n            ruleParts = tempRuleParts;\r\n        }\r\n\r\n        // Step 2: Extract dimension and attribute names for validation\r\n        let fields = [];\r\n\r\n        ruleParts.forEach(part => {\r\n            Log.Info(part);\r\n            // trim the parts\r\n            part = part.replace('[', '').replace(']', '')\r\n            part = part.replace('(', '').replace(')', '')\r\n\r\n            if (part.includes('.')) {\r\n                let [dim, attr] = part.split('.'); // Assuming dimension is before the dot, attribute is after\r\n                let val = '';\r\n                for (let op of comparisonOperators) {\r\n                    if (attr.includes(op)) {\r\n                        attr = attr.split(op);\r\n                        val = attr.length > 0 ? attr[1] : '';\r\n                        attr = attr[0];\r\n                    }\r\n                }\r\n                if (dim) {\r\n                    dim = dim.trim();\r\n                    attr = attr.trim();\r\n                }\r\n                fields.push({ dim: dim, attr: attr, val: val });\r\n            }\r\n        });\r\n\r\n        Log.Info(fields)\r\n\r\n        return fields;\r\n    }\r\n\r\n    /** this function will take rule expression and perform following steps\r\n     *  1. Divide the expression by Logical Operators\r\n     *  2. Make sure each dim name are same\r\n     *  3. This Dim should not be present in any other rule for this rule set\r\n    **/\r\n\r\n    var validateRuleExpression = function (ruleExpression, existingRuleExpression) {\r\n        // Step 1: Split the rule expression into dim-attr\r\n        let fields = filterDimAttr(ruleExpression)\r\n\r\n        if (fields.length == 0) {\r\n            return \"No Valid field Name found\";\r\n        }\r\n\r\n        let dimName = fields[0]['dim'];\r\n        for (let dim of fields) {\r\n            Log.Info(`${dim['dim']}, ${dimName}`)\r\n            if (dimName != dim['dim']) {\r\n                return \"Only 1 Dimension allowed per rule expression\";\r\n            }\r\n        }\r\n\r\n        for (let existingRule of existingRuleExpression) {\r\n            let existingDimensions = filterDimAttr(existingRule)\r\n\r\n            for (let existingDimAttr of existingDimensions) {\r\n                if (existingDimAttr['dim'] == dimName) {\r\n                    return \"Dimension is already used in another rule\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return \"Valid\";\r\n    };\r\n\r\n    var populateRuleExpression = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const Rule = parsedParams.Rule;\r\n        const RuleSet = parsedParams.RuleSet;\r\n        const RuleType = parsedParams.RuleType;\r\n        let Expression = parsedParams.Expression;\r\n\r\n        Expression = Expression.replace(/\"/g, \"'\");\r\n\r\n        Log.Info(\"Started populateRuleExpression Plugin\");\r\n\r\n        let ruleSetRuleCountQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set] * [o9EKG Rule Set].[Rule].[${RuleSet} - ${Rule}] * {Measure.[o9EKG Rule Expression]});`;\r\n        let ruleSetRuleCount = cellsetModule.createCellSet(queryModule.select(ruleSetRuleCountQuery));\r\n        let ruleSetRuleCountLength = ruleSetRuleCount.rowCount;\r\n        if (ruleSetRuleCountLength > 0) {\r\n            let parentRuleSet = ruleSetRuleCount.row(0).cell(2).Name;\r\n            RuleOutputToUI = { Status: 'Error', Message: `Rule is already present in Ruleset: ${parentRuleSet}!` };\r\n            return;\r\n        }\r\n\r\n        let ruleSetRuleQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set].[${RuleSet}] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Set Description], Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]}).filter(~isNull(Measure.[o9EKG Rule Set Description]));`;\r\n        let ruleSetRuleResult = cellsetModule.createCellSet(queryModule.select(ruleSetRuleQuery));\r\n        let ruleSetRuleLength = ruleSetRuleResult.rowCount;\r\n\r\n        let existingRuleExpression = [];\r\n        for (let ruleExpIdx = 0; ruleExpIdx < ruleSetRuleLength; ruleExpIdx++) {\r\n            let ruleExp = ruleSetRuleResult.row(ruleExpIdx).cell(5);\r\n            let ruleType = ruleSetRuleResult.row(ruleExpIdx).cell(6);\r\n\r\n            if (ruleType == \"Cascade\") {\r\n                existingRuleExpression.push(ruleExp)\r\n            }\r\n\r\n        }\r\n\r\n        let validationResult = validateRuleExpression(Expression, existingRuleExpression)\r\n\r\n        if (validationResult != \"Valid\") {\r\n            RuleOutputToUI = { Status: 'Error', Message: validationResult };\r\n            return;\r\n        }\r\n\r\n\r\n        let createRuleSetMemberQuery = `createmember([o9EKG Rule Set].[Rule Set] = {, \"${RuleSet}\"}, [o9EKG Rule Set].[Rule] = {, \"${RuleSet} - ${Rule}\"} );`\r\n        let populateRuleSetPropertiesQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule].[${RuleSet} - ${Rule}]);\r\nMeasure.[o9EKG Rule Type] = \"${RuleType}\";\r\nMeasure.[o9EKG Rule Expression] = \"${Expression}\";\r\nend scope;`\r\n\r\n        Log.Info(createRuleSetMemberQuery)\r\n        queryModule.update(createRuleSetMemberQuery)\r\n\r\n        Log.Info(populateRuleSetPropertiesQuery)\r\n        queryModule.update(populateRuleSetPropertiesQuery)\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Rule Expression added!' };\r\n        return RuleOutputToUI\r\n    };\r\n\r\n\r\n    var editRuleExpression = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const RuleSet = parsedParams.RuleSet;\r\n        const Rule = parsedParams.Rule;\r\n        const RuleType = parsedParams.RuleType;\r\n        const OldRuleExpression = parsedParams.OldRuleExpression;\r\n        let Expression = parsedParams.RuleExpression;\r\n\r\n\r\n        // check if there are any changes:\r\n        if (OldRuleExpression == Expression) {\r\n            RuleOutputToUI = { Status: 'Success', Message: 'Rule Expression Updated!' };\r\n            return RuleOutputToUI\r\n        }\r\n\r\n        Expression = Expression.replace(/\"/g, \"'\");\r\n\r\n        // get the dim name from old expression\r\n        let oldFields = filterDimAttr(OldRuleExpression)\r\n\r\n        // get the fields from new expression\r\n        let newFields = filterDimAttr(Expression);\r\n\r\n        // old and new dims should be same\r\n        if (!(oldFields.length > 0 && newFields.length > 0 && oldFields[0]['dim'] == newFields[0]['dim'])) {\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Dimension Name of fields can not be changed' };\r\n            return;\r\n        }\r\n\r\n        let ruleSetRuleCountQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set].[${RuleSet}] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Set Description], Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]}).filter(~isNull(Measure.[o9EKG Rule Set Description]));`;\r\n        let ruleSetRuleCountResult = cellsetModule.createCellSet(queryModule.select(ruleSetRuleCountQuery));\r\n        let ruleSetRuleCountLength = ruleSetRuleCountResult.rowCount;\r\n\r\n        let existingRuleExpression = [];\r\n\r\n        for (let ruleExpIdx = 0; ruleExpIdx < ruleSetRuleCountLength; ruleExpIdx++) {\r\n            let ruleExp = ruleSetRuleCountResult.row(ruleExpIdx).cell(5);\r\n            let ruleType = ruleSetRuleCountResult.row(ruleExpIdx).cell(6);\r\n\r\n            if (ruleType == \"Cascade\" && ruleExp != OldRuleExpression) {\r\n                existingRuleExpression.push(ruleExp)\r\n            }\r\n        }\r\n\r\n        let validationResult = validateRuleExpression(Expression, existingRuleExpression)\r\n\r\n        if (validationResult != \"Valid\") {\r\n            RuleOutputToUI = { Status: 'Error', Message: validationResult };\r\n            return;\r\n        }\r\n\r\n\r\n        let populateRuleSetPropertiesQuery = `scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule].[${Rule}]);\r\n            Measure.[o9EKG Rule Expression] = \"${Expression}\";\r\n        end scope;`\r\n\r\n        Log.Info(populateRuleSetPropertiesQuery)\r\n        queryModule.update(populateRuleSetPropertiesQuery)\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Rule Expression added!' };\r\n        return RuleOutputToUI\r\n\r\n    }\r\n\r\n    return {\r\n        populateRuleExpression: populateRuleExpression,\r\n        editRuleExpression: editRuleExpression\r\n    };\r\n})",
    "ModuleName": "o9.EKG.populateRuleExpression",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "018daa34-b33c-b4fd-6f46-e80d42ae40e5",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213083,
    "Description": "Generate Tenant ID (Auto Incremental)",
    "Documentation": "define('o9.EKG.generateTenantID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var generateTenantID = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const TenantName = parsedParams.TenantName;\r\n        const TenantDescription = parsedParams.TenantDescription;\r\n        const BuildingBlockList = parsedParams.BuildingBlocks;\r\n\r\n        Log.Info(\"Started generateTenantID Plugin\");\r\n\r\n\r\n        // Query to get the last used Tenant ID\r\n        let ExistingTenantIDQuery = `Select ( [o9EKG Tenant].[Tenant ID])  orderby [o9EKG Tenant].[Tenant ID].Key desc limit 1;`;\r\n\r\n        let existingIDResult = cellsetModule.createCellSet(queryModule.select(ExistingTenantIDQuery));\r\n\r\n        let lastTenantID = existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKG Tenant', 'Tenant ID')).Name\r\n\r\n        var ID;\r\n\r\n        if (existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKG Tenant', 'Tenant ID')) && lastTenantID) {\r\n            ID = lastTenantID;\r\n            Log.Info(`Tenant details are Present--------${ID}`);\r\n        } else {\r\n            ID = null;\r\n            Log.Info(`Tenant Details are not present--------${ID}`);\r\n        }\r\n\r\n        var newTenantID;\r\n        if (ID) {\r\n            var IDNo = ID.substring(1);\r\n            var newTenantIDNo = parseInt(IDNo) + 1;\r\n            newTenantID = \"T\" + newTenantIDNo;\r\n            Log.Info(\"New Tenant ID: \" + newTenantID);\r\n        } else {\r\n            newTenantID = \"T1\";\r\n            Log.Info(\"This is the first Tenant, New Tenant ID:------- \" + newTenantID);\r\n        }\r\n\r\n\r\n        let createTenantMemberQuery = `createmember([o9EKG Tenant].[Tenant ID] = { , \"${newTenantID}\" } );`\r\n        let populateTenantPropertiesQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Tenant ID].[${newTenantID}]);\r\nMeasure.[o9EKG Tenant Name] = \"${TenantName}\";\r\nMeasure.[o9EKG Tenant Description] = \"${TenantDescription}\";\r\nMeasure.[o9EKG Driver Tenant] = false;\r\nend scope;`\r\n\r\n        Log.Info(createTenantMemberQuery)\r\n        queryModule.update(createTenantMemberQuery)\r\n\r\n        Log.Info(populateTenantPropertiesQuery)\r\n        queryModule.update(populateTenantPropertiesQuery)\r\n\r\n\r\n        BuildingBlockList.map((BuildingBlock) => {\r\n            let tenantBlockAssociationQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Tenant ID].[${newTenantID}] * [o9EKG Building Blocks].[Building Block].[${BuildingBlock}]);\r\n            Measure.[o9EKG Tenant Block Association] = \"${BuildingBlock}\";\r\n            end scope;`\r\n\r\n            Log.Info(tenantBlockAssociationQuery)\r\n            queryModule.update(tenantBlockAssociationQuery)\r\n\r\n        })\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New profile added!' };\r\n        return RuleOutputToUI\r\n    };\r\n    return {\r\n        generateTenantID: generateTenantID\r\n    };\r\n})",
    "Code": "define('o9.EKG.generateTenantID', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var generateTenantID = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const TenantName = parsedParams.TenantName;\r\n        const TenantDescription = parsedParams.TenantDescription;\r\n        const BuildingBlockList = parsedParams.BuildingBlocks;\r\n\r\n        Log.Info(\"Started generateTenantID Plugin\");\r\n\r\n\r\n        // Query to get the last used Tenant ID\r\n        let ExistingTenantIDQuery = `Select ( [o9EKG Tenant].[Tenant ID])  orderby [o9EKG Tenant].[Tenant ID].Key desc limit 1;`;\r\n\r\n        let existingIDResult = cellsetModule.createCellSet(queryModule.select(ExistingTenantIDQuery));\r\n\r\n        let lastTenantID = existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKG Tenant', 'Tenant ID')).Name\r\n\r\n        var ID;\r\n\r\n        if (existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKG Tenant', 'Tenant ID')) && lastTenantID) {\r\n            ID = lastTenantID;\r\n            Log.Info(`Tenant details are Present--------${ID}`);\r\n        } else {\r\n            ID = null;\r\n            Log.Info(`Tenant Details are not present--------${ID}`);\r\n        }\r\n\r\n        var newTenantID;\r\n        if (ID) {\r\n            var IDNo = ID.substring(1);\r\n            var newTenantIDNo = parseInt(IDNo) + 1;\r\n            newTenantID = \"T\" + newTenantIDNo;\r\n            Log.Info(\"New Tenant ID: \" + newTenantID);\r\n        } else {\r\n            newTenantID = \"T1\";\r\n            Log.Info(\"This is the first Tenant, New Tenant ID:------- \" + newTenantID);\r\n        }\r\n\r\n\r\n        let createTenantMemberQuery = `createmember([o9EKG Tenant].[Tenant ID] = { , \"${newTenantID}\" } );`\r\n        let populateTenantPropertiesQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Tenant ID].[${newTenantID}]);\r\nMeasure.[o9EKG Tenant Name] = \"${TenantName}\";\r\nMeasure.[o9EKG Tenant Description] = \"${TenantDescription}\";\r\nMeasure.[o9EKG Driver Tenant] = false;\r\nend scope;`\r\n\r\n        Log.Info(createTenantMemberQuery)\r\n        queryModule.update(createTenantMemberQuery)\r\n\r\n        Log.Info(populateTenantPropertiesQuery)\r\n        queryModule.update(populateTenantPropertiesQuery)\r\n\r\n\r\n        BuildingBlockList.map((BuildingBlock) => {\r\n            let tenantBlockAssociationQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Tenant ID].[${newTenantID}] * [o9EKG Building Blocks].[Building Block].[${BuildingBlock}]);\r\n            Measure.[o9EKG Tenant Block Association] = \"${BuildingBlock}\";\r\n            end scope;`\r\n\r\n            Log.Info(tenantBlockAssociationQuery)\r\n            queryModule.update(tenantBlockAssociationQuery)\r\n\r\n        })\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New profile added!' };\r\n        return RuleOutputToUI\r\n    };\r\n    return {\r\n        generateTenantID: generateTenantID\r\n    };\r\n})",
    "ModuleName": "o9.EKG.generateTenantID",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "53ec71a4-1cf8-15f6-8fa0-2936e13834b1",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213084,
    "Description": "clearValidations",
    "Documentation": "define('o9.ekgconfig.clearValidations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var clearValidations = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    var project = parsedParams.Project;\r\n    var Select = parsedParams.clearRows;\r\n   \r\n    Log.Info(\"<EKG - Clear Validation Logs > : Deleting selected Validations\" );\r\n    for(var j=0; j<Select.length;j++)\r\n        {\r\n\r\n            var queryIgnoreTextUpdate1 = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Validation Error Text] = null ;Measure.[o9EKG Validation Type] = null;Measure.[o9EKG Error Type] = null; Measure.[o9EKG Validation Severity] = null; end scope;';\r\n            // Log.Info(\"<EKG - Ignore Validation Logs > : Validation Delete Query ====== \" + queryIgnoreTextUpdate1);\r\n            queryModule.update(queryIgnoreTextUpdate1);\r\n        }\r\n\r\n            \r\n    };\r\n          return {\r\n            clearValidations: clearValidations\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.clearValidations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var clearValidations = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    var project = parsedParams.Project;\r\n    var Select = parsedParams.clearRows;\r\n   \r\n    Log.Info(\"<EKG - Clear Validation Logs > : Deleting selected Validations\" );\r\n    for(var j=0; j<Select.length;j++)\r\n        {\r\n\r\n            var queryIgnoreTextUpdate1 = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Validation Error Text] = null ;Measure.[o9EKG Validation Type] = null;Measure.[o9EKG Error Type] = null; Measure.[o9EKG Validation Severity] = null; end scope;';\r\n            // Log.Info(\"<EKG - Ignore Validation Logs > : Validation Delete Query ====== \" + queryIgnoreTextUpdate1);\r\n            queryModule.update(queryIgnoreTextUpdate1);\r\n        }\r\n\r\n            \r\n    };\r\n          return {\r\n            clearValidations: clearValidations\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.clearValidations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "04472e62-c2f7-148d-f095-14e2dfa4388f",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213085,
    "Description": "Duplicate Tenant Name Validation",
    "Documentation": "define('o9.EKG.validateTenantName', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateTenantName = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const TenantName = parsedParams.TenantInstance;\r\n\r\n        Log.Info(\"Started validateTenantName Plugin\");\r\n\r\n        // Check for duplicate Tenant Name:\r\n        let duplicateTenantNameQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Profile] * [o9EKG Tenant].[Tenant].[${TenantName}] * {Measure.[o9EKG Tenant Org Name]}).filter(~isNull(Measure.[o9EKG Tenant Org Name]));`;\r\n        let duplicateTenantName = cellsetModule.createCellSet(queryModule.select(duplicateTenantNameQuery));\r\n\r\n        if (duplicateTenantName.rowCount > 0) {\r\n            let profileName = duplicateTenantName.row(0).cell(2).Name;\r\n            RuleOutputToUI = { Status: 'Error', Message: `Tenant: ${TenantName} is already present in Profile: ${profileName}` };\r\n            return;\r\n        }\r\n    };\r\n    \r\n    return {\r\n        validateTenantName: validateTenantName\r\n    };\r\n})",
    "Code": "define('o9.EKG.validateTenantName', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateTenantName = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const TenantName = parsedParams.TenantInstance;\r\n\r\n        Log.Info(\"Started validateTenantName Plugin\");\r\n\r\n        // Check for duplicate Tenant Name:\r\n        let duplicateTenantNameQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Profile] * [o9EKG Tenant].[Tenant].[${TenantName}] * {Measure.[o9EKG Tenant Org Name]}).filter(~isNull(Measure.[o9EKG Tenant Org Name]));`;\r\n        let duplicateTenantName = cellsetModule.createCellSet(queryModule.select(duplicateTenantNameQuery));\r\n\r\n        if (duplicateTenantName.rowCount > 0) {\r\n            let profileName = duplicateTenantName.row(0).cell(2).Name;\r\n            RuleOutputToUI = { Status: 'Error', Message: `Tenant: ${TenantName} is already present in Profile: ${profileName}` };\r\n            return;\r\n        }\r\n    };\r\n    \r\n    return {\r\n        validateTenantName: validateTenantName\r\n    };\r\n})",
    "ModuleName": "o9.EKG.validateTenantName",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "ddc0c907-b37a-33c4-3aa3-030b58bdccfe",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213086,
    "Description": "replaceSourceName",
    "Documentation": "define('o9.EKG.replaceSourceName', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var replaceSourceName = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params source ---' + o9Params);\r\n        const selectedTable = parsedParams.SelectedTable; \r\n        const renameTableName = parsedParams.RenameTableName;\r\n        const anchorTable = parsedParams.anchorTable;\r\n   \r\n        \r\n    };\r\n\r\n    return {\r\n        replaceSourceName : replaceSourceName     \r\n    };\r\n});",
    "Code": "define('o9.EKG.replaceSourceName', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var replaceSourceName = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params source ---' + o9Params);\r\n        const selectedTable = parsedParams.SelectedTable; \r\n        const renameTableName = parsedParams.RenameTableName;\r\n        const anchorTable = parsedParams.anchorTable;\r\n   \r\n        \r\n    };\r\n\r\n    return {\r\n        replaceSourceName : replaceSourceName     \r\n    };\r\n});",
    "ModuleName": "o9.EKG.replaceSourceName",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "30c4f18c-d5e7-d1fa-75a6-86de75dd1a2b",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213087,
    "Description": "o9.ekgconfig.dict",
    "Documentation": "define('o9.ekgconfig.dict', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var dictionary = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        var escap = parsedParams.Escape;\r\n        var quot = parsedParams.Quote;\r\n        var encoding = parsedParams.Encoding;\r\n        var multiline = parsedParams.MultiLineJSON;\r\n\r\n        // Escape handling\r\n        if (escap === '\"') {\r\n            escap = '\\\\\\\"';\r\n        } else if (escap === \"'\") {\r\n            escap = \"\\\\\\\\\\'\";\r\n        } else if(escap === \"\\\\\"){\r\n            escap='\\\\\\\\\\\\';\r\n        }else if (escap === undefined || escap === null || escap === '') {\r\n            escap = undefined; // Don't set if not provided or invalid\r\n        }\r\n\r\n        // Quote handling\r\n        if (quot === '\"') {\r\n            quot = '\\\\\\\"';\r\n        } else if (quot === \"'\") {\r\n            quot = \"\\\\\\\\\\'\";\r\n        } else if (quot === undefined || quot === null || quot === '') {\r\n            quot = undefined; // Don't set if not provided or invalid\r\n        }\r\n\r\n        // Encoding handling\r\n        if (encoding === undefined || encoding === null || encoding === '') {\r\n            encoding = undefined; // Don't set if not provided\r\n        }\r\n\r\n        // MultiLineJSON handling (only include if it has a value)\r\n        if (multiline === undefined || multiline === null || multiline === '') {\r\n            multiline = undefined; // Don't set if not provided\r\n        }\r\n\r\n        Log.Info('o9 params ---' + escap);\r\n        Log.Info('o9 params ---' + quot);\r\n        Log.Info('o9 params ---' + encoding);\r\n        Log.Info('o9 params ---' + multiline);\r\n\r\n        // Check if all parameters are NULL or undefined\r\n        if (!escap && !quot && !encoding && !multiline) {\r\n            Log.Info('o9 params --- All parameters are NULL, skipping dictionary construction');\r\n            return;  // Skip dictionary construction if all are NULL or undefined\r\n        }\r\n\r\n        // Constructing the dictionary based on conditions\r\n        let dict = {};\r\n        if (encoding) dict['encoding'] = encoding.toString();\r\n        if (quot) dict['quote'] = quot;\r\n        if (escap) dict['escape'] = escap;\r\n        if (multiline !== undefined) dict['multiline'] = multiline.toString(); // Only add if multiLine is defined\r\n\r\n        // Check if dict is empty\r\n        if (Object.keys(dict).length === 0) {\r\n            Log.Info('o9 params --- Empty dictionary, skipping dictionary construction');\r\n            // Skip constructing dictString and don't set ScopeQuery\r\n            return;\r\n        }\r\n\r\n        // Manually constructing the dictionary string\r\n        let dictString = '{';\r\n        for (let key in dict) {\r\n            if (dict.hasOwnProperty(key)) {\r\n                // Manually format the key-value pairs (escape quotes properly)\r\n                dictString += `'${key}': '${dict[key]}', `;\r\n            }\r\n        }\r\n        // Remove the trailing comma and space\r\n        dictString = dictString.slice(0, -2) + '}';\r\n\r\n        Log.Info('o9 params ---' + dictString); // Log the manually constructed dictionary string\r\n\r\n        // Constructing the ScopeQuery with the manually constructed dictString\r\n        var ScopeQuery = `cartesian scope: (&CWV *[o9EKG Customer].[Project Name].[` + parsedParams.Project + `] * [o9EKG Documents].[File Name].[` + parsedParams.SelectedFile + `] *[o9EKG Table].[Table Name].[` + parsedParams.Table + `]);Measure.[o9EKG Text Qualifier] =\"` + dictString + `\";end scope;`;\r\n\r\n        Log.Info(\"<EKG - Create Dictionary > :\" + ScopeQuery);\r\n\r\n        queryModule.update(ScopeQuery);\r\n\r\n    };\r\n    return {\r\n        dictionary: dictionary\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.dict', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var dictionary = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        var escap = parsedParams.Escape;\r\n        var quot = parsedParams.Quote;\r\n        var encoding = parsedParams.Encoding;\r\n        var multiline = parsedParams.MultiLineJSON;\r\n\r\n        // Escape handling\r\n        if (escap === '\"') {\r\n            escap = '\\\\\\\"';\r\n        } else if (escap === \"'\") {\r\n            escap = \"\\\\\\\\\\'\";\r\n        } else if(escap === \"\\\\\"){\r\n            escap='\\\\\\\\\\\\';\r\n        }else if (escap === undefined || escap === null || escap === '') {\r\n            escap = undefined; // Don't set if not provided or invalid\r\n        }\r\n\r\n        // Quote handling\r\n        if (quot === '\"') {\r\n            quot = '\\\\\\\"';\r\n        } else if (quot === \"'\") {\r\n            quot = \"\\\\\\\\\\'\";\r\n        } else if (quot === undefined || quot === null || quot === '') {\r\n            quot = undefined; // Don't set if not provided or invalid\r\n        }\r\n\r\n        // Encoding handling\r\n        if (encoding === undefined || encoding === null || encoding === '') {\r\n            encoding = undefined; // Don't set if not provided\r\n        }\r\n\r\n        // MultiLineJSON handling (only include if it has a value)\r\n        if (multiline === undefined || multiline === null || multiline === '') {\r\n            multiline = undefined; // Don't set if not provided\r\n        }\r\n\r\n        Log.Info('o9 params ---' + escap);\r\n        Log.Info('o9 params ---' + quot);\r\n        Log.Info('o9 params ---' + encoding);\r\n        Log.Info('o9 params ---' + multiline);\r\n\r\n        // Check if all parameters are NULL or undefined\r\n        if (!escap && !quot && !encoding && !multiline) {\r\n            Log.Info('o9 params --- All parameters are NULL, skipping dictionary construction');\r\n            return;  // Skip dictionary construction if all are NULL or undefined\r\n        }\r\n\r\n        // Constructing the dictionary based on conditions\r\n        let dict = {};\r\n        if (encoding) dict['encoding'] = encoding.toString();\r\n        if (quot) dict['quote'] = quot;\r\n        if (escap) dict['escape'] = escap;\r\n        if (multiline !== undefined) dict['multiline'] = multiline.toString(); // Only add if multiLine is defined\r\n\r\n        // Check if dict is empty\r\n        if (Object.keys(dict).length === 0) {\r\n            Log.Info('o9 params --- Empty dictionary, skipping dictionary construction');\r\n            // Skip constructing dictString and don't set ScopeQuery\r\n            return;\r\n        }\r\n\r\n        // Manually constructing the dictionary string\r\n        let dictString = '{';\r\n        for (let key in dict) {\r\n            if (dict.hasOwnProperty(key)) {\r\n                // Manually format the key-value pairs (escape quotes properly)\r\n                dictString += `'${key}': '${dict[key]}', `;\r\n            }\r\n        }\r\n        // Remove the trailing comma and space\r\n        dictString = dictString.slice(0, -2) + '}';\r\n\r\n        Log.Info('o9 params ---' + dictString); // Log the manually constructed dictionary string\r\n\r\n        // Constructing the ScopeQuery with the manually constructed dictString\r\n        var ScopeQuery = `cartesian scope: (&CWV *[o9EKG Customer].[Project Name].[` + parsedParams.Project + `] * [o9EKG Documents].[File Name].[` + parsedParams.SelectedFile + `] *[o9EKG Table].[Table Name].[` + parsedParams.Table + `]);Measure.[o9EKG Text Qualifier] =\"` + dictString + `\";end scope;`;\r\n\r\n        Log.Info(\"<EKG - Create Dictionary > :\" + ScopeQuery);\r\n\r\n        queryModule.update(ScopeQuery);\r\n\r\n    };\r\n    return {\r\n        dictionary: dictionary\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.dict",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "733dce89-e345-3f4b-24a4-7079fb73d563",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213088,
    "Description": "Validate Pipeline Grouping Name",
    "Documentation": "define('o9.EKG.validatePipelineGroup', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validatePipelineGroup = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const pipeLineGroupName = parsedParams.PipelineName\r\n\r\n        if (pipeLineGroupName && pipeLineGroupName !== \"\") {\r\n            // step 1:\r\n            let firstChar = pipeLineGroupName[0];\r\n            const regex = /^[a-zA-Z_]+$/;\r\n\r\n            let RuleOutToUI = \"\"\r\n\r\n            if (!regex.test(firstChar)) {\r\n                RuleOutToUI += \"Cannot start with number or special character, Only special character allowed is _. \"\r\n            }\r\n\r\n            // step 2:\r\n            let pipelineGroupLength = pipeLineGroupName.length\r\n            if (pipelineGroupLength > 128) {\r\n                RuleOutToUI += \"Maximum Allowed Length is 128\"\r\n            }\r\n\r\n            if (RuleOutToUI) {\r\n                RuleOutputToUI = { Status: 'Error', Message: RuleOutToUI };\r\n            }\r\n\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        validatePipelineGroup: validatePipelineGroup\r\n    };\r\n})",
    "Code": "define('o9.EKG.validatePipelineGroup', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validatePipelineGroup = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const pipeLineGroupName = parsedParams.PipelineName\r\n\r\n        if (pipeLineGroupName && pipeLineGroupName !== \"\") {\r\n            // step 1:\r\n            let firstChar = pipeLineGroupName[0];\r\n            const regex = /^[a-zA-Z_]+$/;\r\n\r\n            let RuleOutToUI = \"\"\r\n\r\n            if (!regex.test(firstChar)) {\r\n                RuleOutToUI += \"Cannot start with number or special character, Only special character allowed is _. \"\r\n            }\r\n\r\n            // step 2:\r\n            let pipelineGroupLength = pipeLineGroupName.length\r\n            if (pipelineGroupLength > 128) {\r\n                RuleOutToUI += \"Maximum Allowed Length is 128\"\r\n            }\r\n\r\n            if (RuleOutToUI) {\r\n                RuleOutputToUI = { Status: 'Error', Message: RuleOutToUI };\r\n            }\r\n\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        validatePipelineGroup: validatePipelineGroup\r\n    };\r\n})",
    "ModuleName": "o9.EKG.validatePipelineGroup",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "5a533773-a0f4-3ff4-00fe-05d17ebf9f27",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213089,
    "Description": "o9.EKG.MassValidationJS",
    "Documentation": "define('o9.EKG.MassValidationJS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var errorNumber = 0;\r\n    const ignoreErrorMap = new Map();\r\n    const ignoresequenceList = [];\r\n    const TableList = new Set();\r\n    const FieldList = new Set();\r\n    const IncludedOutTableList = new Set();\r\n    const IncludedLSDTableList = new Set();\r\n    const IncludedLSUTableList = new Set();\r\n    const FieldDetailsMap = new Map();\r\n    const tableSourceFieldMap = new Map();\r\n    const navigationMapping = new Map();\r\n    const validationMapping = new Map();\r\n    const multilevelMap = new Map();\r\n    const tableuniqueGroupby = new Map(); \r\n    const tableuniqueGroupbytext = new Map(); \r\n    let Project ;\r\n    let version ;\r\n\r\n    function isFieldNamePresent(tableName, fieldName) {\r\n        if (!FieldDetailsMap.has(tableName)) {\r\n            return false; \r\n        }\r\n        return FieldDetailsMap.get(tableName).some(field => field[0] === fieldName);\r\n    };\r\n\r\n    var ExcuteIBPL = function(validationNavigation,errorText,validationCategory,navigationFilters,validationCriticality,validationEntity){\r\n        let temnpErrorList = JSON.stringify([validationNavigation,errorText,validationCategory,navigationFilters,validationCriticality,validationEntity]);\r\n        if(!ignoreErrorMap.has(temnpErrorList)){\r\n            errorNumber+=1;\r\n            let queryCreateMassValidation = `cartesian scope : ([Version].[Version Name].[${version}] * [o9EKGSequence].[o9EKGSequenceNumber].[${errorNumber}] * [o9EKG Customer].[Project Name].[${Project}]) ;\r\n                Measure.[o9EKG Error Text] =\"${errorText}\";\r\n                Measure.[o9EKG Navigation Filters] =\"${navigationFilters}\";\r\n                Measure.[o9EKG Validation Category] =\"${validationCategory}\";\r\n                Measure.[o9EKG Validation Criticality] =\"${validationCriticality}\";\r\n                Measure.[o9EKG Validation Entity] =\"${validationEntity}\";\r\n                Measure.[o9EKG Validation Navigation] =\"${validationNavigation}\";\r\n                end scope;`;                  \r\n    \r\n            var queryCreateMassValidationResponse = queryModule.update(queryCreateMassValidation);\r\n        }\r\n    };\r\n\r\n    var ValidateFieldname = function () {\r\n        Log.Info(`<MassValidation>-Started Validate Field name with ${Project} , ${version} `);\r\n        let fieldListQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * {Measure.[o9EKG Date Time Format], Measure.[o9EKG Field Created By], Measure.[o9EKG Field Created Source Project], Measure.[o9EKG Field Creation Timestamp], Measure.[o9EKG Field Data Type], Measure.[o9EKG Field Default Value], Measure.[o9EKG Field Description], Measure.[o9EKG Field Included], Measure.[o9EKG Field IsKey], Measure.[o9EKG Field Locked], Measure.[o9EKG Field Name], Measure.[o9EKG Field Placeholder 1], Measure.[o9EKG Field Placeholder 2], Measure.[o9EKG Field Placeholder 3], Measure.[o9EKG Field Placeholder 4], Measure.[o9EKG Field Placeholder 5], Measure.[o9EKG Field Position], Measure.[o9EKG Field Short Description], Measure.[o9EKG Is Mapped],Measure.[o9EKG LS Dim Check],Measure.[o9EKG Input Master Data Check]}).filter(Measure.[o9EKG Field Included]==1);`;\r\n        let fieldListResult = cellsetModule.createCellSet(queryModule.select(fieldListQuery));            \r\n        let fieldNameMap = new Map();\r\n        let valid_types = [\"Datetime\", \"Boolean\", \"Integer\", \"String\", \"Number\"];  \r\n        const invalidCharacters = new Set(['~', '!', '@', '#', '$', '%', '^', '&', '*', '<', '>', '?', '/', '|', '\"', \"'\", ':', '\\\\']);\r\n        for(let index = 0; index < fieldListResult.rowCount ; index++){\r\n            let tableName = fieldListResult.row(index).cell(2).Name;\r\n            let fieldId = fieldListResult.row(index).cell(3).Name;\r\n            let fieldDatatype = fieldListResult.row(index).cell(8);\r\n            let fieldDescription = fieldListResult.row(index).cell(10);\r\n            let fieldkey = fieldListResult.row(index).cell(12) ;\r\n            let fieldName = fieldListResult.row(index).cell(14) ;\r\n            let fieldposition = fieldListResult.row(index).cell(20);\r\n            let InputMasterDataCheck = fieldListResult.row(index).cell(24);\r\n            let lsDIMCheck = fieldListResult.row(index).cell(23);\r\n            let tempAppendList = [fieldName, fieldId, fieldposition, fieldkey]; \r\n            TableList.add(tableName);\r\n            (FieldDetailsMap.get(tableName) || FieldDetailsMap.set(tableName, []).get(tableName)).push(tempAppendList);            \r\n            if(fieldName != null)FieldList.add(fieldName);\r\n\r\n            if(lsDIMCheck !== \"\" && lsDIMCheck !== '' && !IncludedLSDTableList.has(tableName) && !IncludedOutTableList.has(tableName) && !IncludedLSUTableList.has(tableName)){\r\n                if ((lsDIMCheck  && !lsDIMCheck.includes(\".\") ) ) {\r\n                    let validationNavigation = navigationMapping.get(\"LS Dim Check\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"LS Dim Check\");              \r\n                    let navigationFilters = navigationMapping.get(\"LS Dim Check\")[1];\r\n                    let errorText = `The Field Name '${fieldName}' has the LS Dim Check value set as '${lsDIMCheck}'.The expected LS Dim Check format is [DimensionName].[AttributeName].`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                else{\r\n                    if(lsDIMCheck){\r\n                        let validateNames = lsDIMCheck.split('.');\r\n                        for (let name of validateNames) {\r\n                            if (name != null && name.includes(\"[\")) {\r\n                                if (!name.includes(\"]\")) {\r\n                                    let validationNavigation = navigationMapping.get(\"LS Dim Check\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"LS Dim Check\");              \r\n                                    let navigationFilters = navigationMapping.get(\"LS Dim Check\")[1];\r\n                                    let errorText = `The Field Name '${fieldName}' has the LS Dim Check value set as '${lsDIMCheck}'.The expected LS Dim Check format is [DimensionName].[AttributeName].`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                }\r\n                            }\r\n                            else{\r\n                                let validationNavigation = navigationMapping.get(\"LS Dim Check\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"LS Dim Check\");              \r\n                                let navigationFilters = navigationMapping.get(\"LS Dim Check\")[1];\r\n                                let errorText = `The Field Name '${fieldName}' has the LS Dim Check value set as '${lsDIMCheck}'.The expected LS Dim Check format is [DimensionName].[AttributeName].`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const InputMasterDataCheckregex = /^[a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*$/;\r\n\r\n            if (InputMasterDataCheck !== \"\" && InputMasterDataCheck !== ''  && !IncludedLSDTableList.has(tableName) && !IncludedOutTableList.has(tableName) && !IncludedLSUTableList.has(tableName)) {\r\n                if ((InputMasterDataCheck && (!InputMasterDataCheck.includes(\".\")))){\r\n                    let validationNavigation = navigationMapping.get(\"LS Entity Check\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"LS Entity Check\");              \r\n                    let navigationFilters = navigationMapping.get(\"LS Entity Check\")[1];\r\n                    let errorText = `The Field Name '${fieldName}' has the Input Master Data Check set as '${InputMasterDataCheck}'.The expected Input Master Data Check format is TableName.ColumnName.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                else{\r\n                    if(InputMasterDataCheck !== null && InputMasterDataCheck !== \"\" && InputMasterDataCheck !== ''){\r\n                        const [table_name, column_name] = InputMasterDataCheck.split('.');\r\n                        if(table_name != null && table_name != \"\" && table_name != ''){\r\n                            let verifyTableQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].[${table_name}] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n                            let verifyTableQueryResult = cellsetModule.createCellSet(queryModule.select(verifyTableQuery));\r\n                            let verifyTableQueryLength = verifyTableQueryResult.rowCount;\r\n                            if(verifyTableQueryLength == 0){\r\n                                Log.Info(`<MassValidation>-From InputMasterDataCheck ${verifyTableQueryLength} , ${table_name}`);\r\n                                let validationNavigation = navigationMapping.get(\"LS Entity Check\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"LS Entity Check\");              \r\n                                let navigationFilters = navigationMapping.get(\"LS Entity Check\")[1];\r\n                                let errorText = `The Field Name '${fieldName}'  has the Input Master Data Check set as  '${InputMasterDataCheck}'.The Table '${table_name}' may not be in the Tables Included list.`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                            }\r\n                            else if(column_name != null && column_name != \"\" && column_name != ''){\r\n                                let verifyColumnQuery = `select ([o9EKG Customer].[Project Name] .[${Project}] * [Version].[Version Name].[${version}] * [o9EKG Table].[Field ID] *[o9EKG Table].[Table Name].[${table_name}] *{Measure.[o9EKG Field Name], Measure.[o9EKG Field Included]}).filter( Measure.[o9EKG Field Included] == 1  && Measure.[o9EKG Field Name]==\"${column_name}\");`;\r\n                                let verifyColumnQueryResult = cellsetModule.createCellSet(queryModule.select(verifyColumnQuery));\r\n                                let verifyColumnQueryLength = verifyColumnQueryResult.rowCount;                                    \r\n                                if (verifyColumnQueryLength == 0) {               \r\n                                    let validationNavigation = navigationMapping.get(\"LS Entity Check\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"LS Entity Check\");              \r\n                                    let navigationFilters = navigationMapping.get(\"LS Entity Check\")[1];\r\n                                    let errorText = `The Field Name '${fieldName}'  has the Input Master Data Check set as  '${InputMasterDataCheck}'.The Field '${column_name}' may not be in the table '${table_name}'`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (fieldName === null || fieldName === \"\" ||  fieldName === \" \"){\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");\r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = `The Field Name with ID '${fieldId}' is NULL.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);      \r\n            }\r\n            if (fieldDatatype!== null && !valid_types.includes(fieldDatatype)) { \r\n                let validationNavigation = navigationMapping.get(\"Data Type Check\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Data Type Check\");              \r\n                let navigationFilters = navigationMapping.get(\"Data Type Check\")[1];\r\n                let errorText = `The Field Name '${fieldName}' has an invalid Data Type.The expected Data Type should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);        \r\n            }\r\n            if (fieldDatatype === null || fieldDatatype == \"\") { \r\n                let validationNavigation = navigationMapping.get(\"Data Type Check\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Data Type Check\");              \r\n                let navigationFilters = navigationMapping.get(\"Data Type Check\")[1];\r\n                let errorText = `The Field Name '${fieldName}' has an invalid Data Type.The expected Data Type should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);      \r\n            }\r\n            // Duplicate field Name check\r\n            if (fieldName!== null && fieldNameMap.has(tableName) && fieldNameMap.get(tableName).has(fieldName)) {\r\n                let validationNavigation = navigationMapping.get(\"Duplicate Data Handling\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Duplicate Data Handling\");              \r\n                let navigationFilters = navigationMapping.get(\"Duplicate Data Handling\")[1];\r\n                let errorText = `Field Name '${fieldName}' is present more than once in the table.The Field Name value should be unique within a table.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);         \r\n            } \r\n            if(fieldName!= null && tableName!=null){\r\n                if (!fieldNameMap.has(tableName)) {fieldNameMap.set(tableName, new Set());}\r\n                fieldNameMap.get(tableName).add(fieldName);\r\n            }\r\n        }\r\n    };\r\n\r\n    var DuplicateDataHandling = function () {\r\n        Log.Info(`<MassValidation>-Started Validate Duplicate Data Handling with ${Project} , ${version} and  ${validationMapping} ${navigationMapping}`);\r\n      \r\n        let tableListQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * {Measure.[o9EKG Table Included], Measure.[o9EKG Duplicate Data Handling]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        //End\r\n\r\n        for (let row = 0; row < tableListResult.rowCount; row++) {\r\n            let duplicateDataHand = tableListResult.row(row).cell(4) ? tableListResult.row(row).cell(4) : \"\";\r\n            let tableName = tableListResult.row(row).cell(2) ? tableListResult.row(row).cell(2).Name : \"\";\r\n            if (duplicateDataHand == \"\") {\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");             \r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = \"Duplicate Data Handling value is empty and will default to the Ignore setting.\";\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);   \r\n            }\r\n        }\r\n    };\r\n\r\n    var HierarchyCheck = function () {\r\n\r\n        Log.Info(`<MassValidation>-Started Validate Duplicate Data Handling with ${Project} , ${version} ${validationMapping} , ${navigationMapping}`);\r\n        let tableListQuery = `select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * {measure.[o9EKG Table Included],Measure.[o9EKG LS Dimension Name],Measure.[o9EKG LS Table Type],Measure.[o9EKG Hierarchy Check Required]} ).filter( measure.[o9EKG Table Included] == 1 );`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        //End\r\n\r\n        for (let row = 0; row < tableListResult.rowCount; row++) {\r\n            let HierarchyCheck = tableListResult.row(row).cell(6);\r\n            let lsTableType =  tableListResult.row(row).cell(5);\r\n            let tableName = tableListResult.row(row).cell(2);\r\n\r\n            if (HierarchyCheck === \"true\"  && lsTableType !==\"Dimension\"){\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");             \r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = `The Hierarchy Check setting is '${HierarchyCheck}'.Hierarchy check will not be done for this table, only dimension tables are validated for hierarchy.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);\r\n                \r\n            }\r\n        }\r\n    };\r\n\r\n    var GCPipelineTarget = function () {\r\n\r\n        Log.Info(`<MassValidation>-Started Validate GC Pipeline Target with ${Project} , ${version}  , ${validationMapping} and ${navigationMapping}`);\r\n      \r\n        let tableListQuery = `select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]*[o9EKG Table].[Table Name] * {measure.[o9EKG Table Included],Measure.[o9EKG LS GC Pipeline Target],Measure.[o9EKG LS GC Sync Direction],Measure.[o9EKG LS Table Type],Measure.[o9EKG LS Dimension Name]} ).filter( measure.[o9EKG Table Included] == 1 );`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        //End\r\n\r\n        // pipeline - Table Mappings\r\n        let tablePipelineMapQuery = `Select ([o9EKG Batch Type].[Batch Type] * [o9EKG Pipeline].[Pipeline Name] * [Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]  * {Measure.[o9EKG Table Order], Measure.[o9EKG Pipeline Folder Group]});`;\r\n        let tablePipelineMapQueryResult = cellsetModule.createCellSet(queryModule.select(tablePipelineMapQuery));\r\n\r\n        let tablePipelinehashMap = new Map();        \r\n        for (let row = 0; row < tablePipelineMapQueryResult.rowCount; row++) {\r\n            let pipelienName = tablePipelineMapQueryResult.row(row).cell(4) ? tablePipelineMapQueryResult.row(row).cell(4).Name : \"\";\r\n            let tableName = tablePipelineMapQueryResult.row(row).cell(5) ? tablePipelineMapQueryResult.row(row).cell(5).Name : \"\";\r\n            if(!tablePipelinehashMap.has(tableName)){tablePipelinehashMap.set(tableName, []);}\r\n            tablePipelinehashMap.get(tableName).push(pipelienName);\r\n        }\r\n\r\n        // GC List\r\n        const gcListMap = new Map();\r\n        let lsuGCTablequery = `select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]* [o9EKG Table].[Table Name] * {measure.[o9EKG Table Included],Measure.[o9EKG LS GC Pipeline Target],Measure.[o9EKG LS GC Sync Direction]} );`;\r\n        let lsuGCTablequeryResult = cellsetModule.createCellSet(queryModule.select(lsuGCTablequery));\r\n        for (let row = 0; row < lsuGCTablequeryResult.length; row++) {\r\n            let pipelineTargetObj = lsuGCTablequeryResult.row(row).cell(4);\r\n            let syncDirectionObj = lsuGCTablequeryResult.row(row).cell(5);\r\n            let tableName = lsuGCTablequeryResult.row(row).cell(2).Name;\r\n            if (!gcListMap.has(tableName)) {\r\n                gcListMap.set(tableName, [null,null]);\r\n            }\r\n            let tempLi = [pipelineTargetObj, syncDirectionObj];\r\n            gcListMap.set(tableName, tempLi);\r\n        }\r\n\r\n        let uniqueInfoMap = new Map();\r\n        for (let row = 0; row < tableListResult.rowCount; row++) {\r\n            let GCPipelineTarget = tableListResult.row(row).cell(4) ? tableListResult.row(row).cell(4) : \"\";\r\n            let tableName = tableListResult.row(row).cell(2) ? tableListResult.row(row).cell(2).Name : \"\";\r\n            let lsTabletype = tableListResult.row(row).cell(6) ? tableListResult.row(row).cell(6): \"\";\r\n\r\n            if(lsTabletype != null && (lsTabletype == \"Fact\" || lsTabletype == \"Graph\")){\r\n                if( GCPipelineTarget == \"LS External Table Overwrite\" || GCPipelineTarget == \"LS External Table Merge\"){\r\n                    \r\n                    let fieldListResult = (FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : []).filter(([fieldName, fieldId, fieldposition, fieldkey]) => fieldkey === true);\r\n                    let dimension_names = [];\r\n                    for (let field = 0; field < fieldListResult.length; field++) {\r\n                        let fieldName = fieldListResult[field][0];\r\n                        let match = fieldName.match(/\\[([^\\]]+)\\]/);\r\n                        if (match) {dimension_names.push(match[1]);}\r\n                    }\r\n                    let matching_tables = [];\r\n                    for (let tableNameobj of IncludedLSUTableList) {\r\n                        if (dimension_names.some(dim => tableNameobj.includes(dim))) {matching_tables.push(tableNameobj);}\r\n                    }\r\n                    let pipelineNames = tablePipelinehashMap.get(tableName) || [];\r\n                    let flag = false;\r\n                    for (let matchtable in matching_tables) {\r\n                        let matchpipeline = tablePipelinehashMap.get(matchtable) || [];\r\n\r\n                        if (matchpipeline.some(item => pipelineNames.includes(item))) {\r\n                            flag = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(flag){\r\n                        let validationNavigation = navigationMapping.get(\"GC Pipeline Target\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"GC Pipeline Target\");             \r\n                        let navigationFilters = navigationMapping.get(\"GC Pipeline Target\")[1];\r\n                        let errorText = `For table '${tableName}', the GC Pipeline Target setting is set to LS External Table Overwrite or LS External Table Merge.For pipelines '${pipelineNames}', the '${matching_tables}' table is grouped along with '${dimension_names}'.A fact type table cannot be grouped with dimension type tables for this GC Pipeline Target setting.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);\r\n                    }   \r\n                    for (let matchtable in matching_tables) {\r\n                        let pipelineTargetValue = (gcListMap.has(matchtable) && gcListMap.get(matchtable)[0] != null) ? gcListMap.get(matchtable)[0] : \"\";\r\n                        let syncDirectionValue = (gcListMap.has(matchtable) && gcListMap.get(matchtable)[1] != null) ? gcListMap.get(matchtable)[1] : \"\" ;\r\n                        if(pipelineTargetValue !=\"Tenant\" || syncDirectionValue != \"External\"){\r\n\r\n                            let updateGCSettings = `scope: ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].[${matching_tables[matchtable]}]*[o9EKG Table].[Table Type].[LS_Upload]);\r\n                                Measure.[o9EKG LS GC Sync Direction]  = \"External\" ;\r\n                                Measure.[o9EKG LS GC Pipeline Target] = \"Tenant\";\r\n                                end scope;`;\r\n                        \r\n                            var updateGCSettingsResponse = queryModule.update(updateGCSettings);\r\n\r\n                            // Append this in Error report:-\r\n                            let validationNavigation = navigationMapping.get(\"GC Pipeline Target\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Info\";\r\n                            let validationCategory = validationMapping.get(\"GC Pipeline Target\");             \r\n                            let navigationFilters = navigationMapping.get(\"GC Pipeline Target\")[1];\r\n                            let errorText = `For table '${tableName}', the GC Pipeline Target setting is set to '${pipelineTargetValue}'. For this table, the GC Pipeline Target setting has been auto-corrected to 'Tenant' and the GC Sync Direction to 'External'.`;\r\n                            //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);\r\n\r\n                            uniqueInfoMap.set(tableName, { \r\n                                validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project \r\n                            });                            \r\n                        }                                              \r\n \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Append Info //\r\n        for (let [tableName, errorDetails] of uniqueInfoMap) {\r\n            ExcuteIBPL(\r\n                errorDetails.validationNavigation, \r\n                errorDetails.errorText, \r\n                errorDetails.validationCategory, \r\n                errorDetails.navigationFilters, \r\n                errorDetails.validationCriticality, \r\n                errorDetails.validationEntity, \r\n                errorDetails.version, \r\n                errorDetails.Project\r\n            );\r\n        }\r\n    };\r\n\r\n    function extractColumnsFromClause(clause) {\r\n        clause = clause.replace(/'[^']*'/g, '');\r\n        const columnPattern = /`([^`]+)`|([a-zA-Z_]\\w*(?:[^\\s(),;{}=\\n\\t]*)?)/g;\r\n        const sqlKeywords = new Set([\r\n            'cast', 'as', 'or', 'and', 'between', 'to_date', 'double', 'select', 'from', \r\n            'where', 'is', 'not', 'null', 'inner', 'outer', 'join', 'left', 'right', 'union', \r\n            'group', 'order', 'limit', 'having', 'distinct', 'in', 'like', 'exists', 'case',\r\n            'when', 'then', 'end', 'else', 'coalesce', 'count', 'avg', 'sum', 'min', 'max',\r\n            'date', 'time', 'timestamp', 'now', 'current_date', 'current_time', 'date_add',\r\n            'date_sub', 'trim', 'substring', 'concat', 'concat_ws', 'abs', 'round', 'ceil',\r\n            'floor', 'coalesce', 'if', 'isnull', 'nvl', 'decode', 'contains', 'select',\r\n            'from', 'where', 'exists', 'by', 'desc', 'asc'\r\n        ]);\r\n        \r\n        const columns = new Set();\r\n        let match;\r\n        \r\n        while ((match = columnPattern.exec(clause)) !== null) {\r\n            let columnName = match[1] || match[2];\r\n            \r\n            if (columnName && !sqlKeywords.has(columnName.toLowerCase())) {\r\n                columns.add(columnName);\r\n            }\r\n        }\r\n        \r\n        return Array.from(columns);\r\n    };\r\n    \r\n    var RAWINValidation = function () {\r\n        Log.Info(`<MassValidation>-Started RAW-IN Validation with ${Project} , ${version} and  ${validationMapping} ${navigationMapping}`);\r\n\r\n        let rawINQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] *[o9EKG Table].[Table Type].[IN].[Table Name]*[o9EKG Table].[Table Group]*[o9EKG Documents].[File Name]\r\n*{Measure.[o9EKG File Data Filter Clause], Measure.[o9EKG File Decryption], Measure.[o9EKG File Delimiter], Measure.[o9EKG File Description], Measure.[o9EKG File Insert Methodology], Measure.[o9EKG File Requirement], Measure.[o9EKG File Source Type], Measure.[o9EKG File Target Path Param], Measure.[o9EKG File Type], Measure.[o9EKG Text Qualifier]}).filter( measure.[o9EKG Table Included] == 1 ) ;`;\r\n        let rawINQueryResult = cellsetModule.createCellSet(queryModule.select(rawINQuery));\r\n\r\n        for (let row = 0; row < rawINQueryResult.rowCount; row++) {\r\n            let fileSource = rawINQueryResult.row(row).cell(11);\r\n            let tableName = rawINQueryResult.row(row).cell(2).Name;\r\n            let fileDelimiter = rawINQueryResult.row(row).cell(7);\r\n            let fileType = rawINQueryResult.row(row).cell(13);\r\n            let fileName = rawINQueryResult.row(row).cell(4).Name;\r\n            let fileInsertMethodology = rawINQueryResult.row(row).cell(9);\r\n            let fileDataFilter = rawINQueryResult.row(row).cell(5);\r\n            let fileDecryption = rawINQueryResult.row(row).cell(6);\r\n            if(fileSource == null){\r\n                let validationNavigation = navigationMapping.get(\"File Source IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Source IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Source IN\")[1];\r\n                let errorText = `The table '${tableName}' has no File Source defined.Please select an acceptable value from the File Source dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                \r\n            }\r\n            if(fileType == null){\r\n                let validationNavigation = navigationMapping.get(\"File Type IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Type IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Type IN\")[1];\r\n                let errorText = `The table '${tableName}' has no File Type defined.The expected File Type should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n            }\r\n            if(fileType == \"Csv\" && fileDelimiter == null){\r\n                let validationNavigation = navigationMapping.get(\"File Delimiter\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Delimiter\");             \r\n                let navigationFilters = navigationMapping.get(\"File Delimiter\")[1];\r\n                let errorText = `The table '${tableName}' has File Delimiter set as 'Null' for File Type CSV.The expected File Delimiter should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                     \r\n            }\r\n            let fileExtension = fileName.split('.').pop();\r\n            if(fileExtension != null && fileType != null &&(fileExtension.toLowerCase() !== fileType.toLowerCase())){\r\n                let validationNavigation = navigationMapping.get(\"File Type IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Type IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Type IN\")[1];\r\n                let errorText = `The table '${tableName}' has File name set as '${fileName}'. The file extension should match the File Type from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            if (fileDataFilter && fileDataFilter.trim()) {\r\n                if (fileInsertMethodology != 'Match Header' && fileInsertMethodology != null) {\r\n                    let validationNavigation = navigationMapping.get(\"File Data Filter Clause\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"File Data Filter Clause\");             \r\n                    let navigationFilters = navigationMapping.get(\"File Data Filter Clause\")[1];\r\n                    let errorText = `'File Data Filter Clause' is not supported when the 'File Insert Methodology' is set to '${fileInsertMethodology}'.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n                let fieldName = new Set();\r\n                for (let field = 0; field < fieldListResult.length; field++) {fieldName.add(fieldListResult[field][0]); }\r\n                let extractedFieldList = extractColumnsFromClause(fileDataFilter);\r\n                let result = extractedFieldList.filter(item => !fieldName.has(item));\r\n                if(result.length > 0){\r\n                    let columns_str = result.length > 0 ? result.map(col => `'${col}'`).join(\", \") : \"\";\r\n                    let validationNavigation = navigationMapping.get(\"File Data Filter Clause\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"File Data Filter Clause\");             \r\n                    let navigationFilters = navigationMapping.get(\"File Data Filter Clause\")[1];\r\n                    let errorText = `The File Data Filter Clause has columns '${columns_str}' not present in the table. Please includes the columns in the table.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n            if (fileDecryption !== null && ['SingleInsertAPI', 'SingleInsertAPI_Resilient', 'BulkInsertAPI', 'BulkInsertAPI_Resilient', 'External API'].includes(fileSource)) {\r\n                let validationNavigation = navigationMapping.get(\"File Data Filter Clause\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Data Filter Clause\");             \r\n                let navigationFilters = navigationMapping.get(\"File Data Filter Clause\")[1];\r\n                let errorText = `The File Decryption setting is '${fileDecryption}' with the File Source set to '${fileSource}'. Please set the File decryption as empty for API based source data.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            if(fileInsertMethodology == null){\r\n                let validationNavigation = navigationMapping.get(\"File Source IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Info\";\r\n                let validationCategory = validationMapping.get(\"File Source IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Source IN\")[1];\r\n                let errorText = `The table '${tableName}' has no File Insert Methodology defined and will default to the 'Match Header' setting.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n            }\r\n        }      \r\n    };\r\n\r\n    function containsSparkSqlAggFunction(query) {\r\n        // List of Spark SQL aggregation functions\r\n        const aggFunctions = new Set([\r\n            'any', 'any_value', 'approx_count_distinct', 'approx_percentile',\r\n            'array_agg', 'avg', 'bit_and', 'bit_or', 'bit_xor',\r\n            'bitmap_construct_agg', 'bitmap_or_agg', 'bool_and', 'bool_or',\r\n            'collect_list', 'collect_set', 'corr', 'count', 'count_if',\r\n            'covar_pop', 'covar_samp', 'every', 'first', 'first_value',\r\n            'grouping', 'grouping_id', 'histogram_numeric', 'hll_sketch_agg',\r\n            'hll_union_agg', 'kurtosis', 'last', 'last_value', 'max', 'max_by',\r\n            'mean', 'median', 'min', 'min_by', 'mode', 'percentile', 'percentile_approx',\r\n            'regr_avgx', 'regr_avgy', 'regr_count', 'regr_intercept', 'regr_r2', \r\n            'regr_slope', 'regr_sxx', 'regr_sxy', 'regr_syy', 'skewness', \r\n            'some', 'std', 'stddev', 'stddev_pop', 'stddev_samp', 'sum', 'try_avg',\r\n            'try_sum', 'var_pop', 'var_samp', 'variance','current_date','date_format','CURRENT_TIMESTAMP','ROW_NUMBER','CONCAT','concat','SUBSTRING'\r\n        ]);\r\n    \r\n        // Convert query to lowercase for case-insensitive matching\r\n        const queryLower = query.toLowerCase();\r\n    \r\n        // Check for exact word matches using regex with word boundaries (`\\b`)\r\n        return [...aggFunctions].some(func => new RegExp(`\\\\b${func}\\\\b`, 'i').test(queryLower));\r\n    };\r\n\r\n    function extractAnchorAndJoinedFields(inputString) {\r\n        const parts = inputString.split(\"|\");\r\n        const anchorTable = parts[0];\r\n        const joins = parts.slice(1);\r\n        const bracePattern = /{(.*?)}/g;\r\n        let joinedFields = [];\r\n    \r\n        joins.forEach(join => {\r\n            if (typeof join === 'string') { // Ensure join is a string\r\n                let matches = [];\r\n                let match;\r\n                while ((match = bracePattern.exec(join)) !== null) {\r\n                    matches.push(match[1]);\r\n                }\r\n                \r\n                if (matches.length > 3 && matches[3].includes(',')) {\r\n                    joinedFields = joinedFields.concat(matches[3].split(','));\r\n                } else if (matches.length > 3) {\r\n                    joinedFields.push(matches[3]);\r\n                }\r\n            }\r\n        });\r\n    \r\n        return { anchorTable, joinedFields };\r\n    };   \r\n\r\n    function getSingleSourceTable(tableName, sequenceNumber) {\r\n        if (multilevelMap.has(tableName)) {\r\n            let tableMap = multilevelMap.get(tableName);\r\n            if (tableMap.has(sequenceNumber)) {\r\n                let sourceTables = Array.from(tableMap.get(sequenceNumber)); // Convert Set to Array\r\n                \r\n                return sourceTables.length === 1 ? sourceTables[0] : null; // Return single source or null\r\n            }\r\n        }\r\n        return null; // Return null if not found\r\n    };\r\n\r\n    function getSingleGroupBy(tableName, sequenceNumber) {\r\n        if (tableuniqueGroupby.has(tableName)) {\r\n            let tableMap = tableuniqueGroupby.get(tableName);\r\n            if (tableMap.has(sequenceNumber)) {\r\n                let sourceTables = Array.from(tableMap.get(sequenceNumber)); \r\n                \r\n                return sourceTables.length === 1 ? sourceTables[0] : null; \r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    function getSingleGroupByText(tableName, sequenceNumber) {\r\n        if (tableuniqueGroupbytext.has(tableName)) {\r\n            let tableMap = tableuniqueGroupbytext.get(tableName);\r\n            if (tableMap.has(sequenceNumber)) {\r\n                let sourceTables = Array.from(tableMap.get(sequenceNumber)); \r\n                \r\n                return sourceTables.length === 1 ? sourceTables[0] : null; \r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // JOINS UTILITY FUNCTION\r\n    function buildJoinTableColumnMap(s, result = [], isCrossJoin) {\r\n        if (!s || s.length === 0) return result;\r\n    \r\n        const add = {\r\n            info: [],\r\n            operation: \"\",\r\n            data: [],\r\n            takenFromFirst: [],\r\n            takenFromSecond: [],\r\n        };\r\n    \r\n        const extractTablesAndFields = (expression) => {\r\n            const map = new Map();\r\n            if (!expression) return map;\r\n    \r\n            let table = \"\", column = \"\", insideBraces = false;\r\n            for (let i = 0; i < expression.length; i++) {\r\n                const char = expression[i];\r\n                switch (char) {\r\n                    case \",\":\r\n                        if (insideBraces && table) {\r\n                            map.get(table) ? map.get(table).push(column.trim()) : map.set(table, [column.trim()]);\r\n                        }\r\n                        column = \"\";\r\n                        break;\r\n                    case \"{\":\r\n                        insideBraces = true;\r\n                        table = table.trim();\r\n                        if (!map.has(table)) map.set(table, []);\r\n                        break;\r\n                    case \"}\":\r\n                        insideBraces = false;\r\n                        if (table && column) map.get(table) ? map.get(table).push(column.trim()) : map.set(table, [column.trim()]);\r\n                        table = column = \"\";\r\n                        break;\r\n                    default:\r\n                        if (insideBraces) column += char;\r\n                        else table += char;\r\n                }\r\n            }\r\n            table = table.trim();\r\n            if (table && !map.has(table)) map.set(table, []);\r\n            return map;\r\n        };\r\n\r\n        function processValue(value) { value = value.trim();\r\n            if (value.startsWith('`') && value.endsWith('`'))  return value.slice(1, -1);\r\n            if (value.includes('.')) {\r\n              const parts = value.split('.');\r\n              return processValue(parts.slice(1).join('.'));\r\n            }\r\n            return value.replace(/^['\"]|['\"]$/g, '');\r\n        };\r\n    \r\n        if (s.includes(\"cross join\")) {\r\n            const op = s.lastIndexOf(\"|\");\r\n            const leftPart = s.substring(0, op).trim();\r\n            const crossPart = s.substring(op + 1).trim();\r\n            const prev = buildJoinTableColumnMap(leftPart, result, true);\r\n    \r\n            const a = crossPart.indexOf(\"(\"), b = crossPart.indexOf(\")\");\r\n            const yo = extractTablesAndFields(crossPart.slice(a + 1, b));\r\n    \r\n            let prevTable = prev.length > 0\r\n                ? \"IT_Join_\" + prev[prev.length - 1].info.join(\"_\")\r\n                : \"\";\r\n    \r\n            for (const [key, val] of yo.entries()) {\r\n                if (!prevTable) {\r\n                    prevTable = key;\r\n                } else {\r\n                    result.push({\r\n                        info: [prevTable, key],\r\n                        operation: \"cross join\",\r\n                        data: [],\r\n                        takenFromFirst: prev.length > 0 ? [] : (yo.get(prevTable) ? yo.get(prevTable) : []),\r\n                        takenFromSecond: val,\r\n                    });\r\n                    prevTable = `IT_Join_${prevTable}_${key}`;\r\n                }\r\n            }\r\n    \r\n        } else {\r\n            const parts = s.split(\"|\");\r\n            const baseTable = parts.length > 0 ? parts[0].trim() : \"\";\r\n            const joinExpr = parts.length > 1 ? parts[1].trim() : \"\";\r\n            const rawMatches = joinExpr.match(/\\{([^}]+)\\}/g) || [];\r\n            const matches = rawMatches.map(m => m.slice(1, -1));\r\n            const secondTable = matches[1];\r\n            const leftCols = matches[0] ? matches[0].split(\",\").map(processValue) : [];\r\n            const rightCols = matches[2] ? matches[2].split(\",\").map(processValue) : [];\r\n            const extraCols = matches[3] ? matches[3].split(\",\").map(processValue) : [];\r\n            for (let i = 0; i < leftCols.length; i++) {\r\n                add.data.push([leftCols[i], rightCols[i]]);\r\n            }\r\n    \r\n            add.takenFromFirst.push(...leftCols);\r\n            add.takenFromSecond.push(...rightCols, ...extraCols);\r\n            add.info.push(baseTable, secondTable);\r\n            add.operation = joinExpr.includes(\"inner join\") ? \"inner join\" : \"left join\";\r\n    \r\n            result.push(add);\r\n    \r\n            if (parts.length > 2) {\r\n                const remStart = s.indexOf(\")\");\r\n                const remainder = s.slice(remStart + 1).trim();\r\n                const joinAlias = `IT_Join_${baseTable}_${secondTable}`;\r\n                buildJoinTableColumnMap(`${joinAlias}${remainder}`, result, isCrossJoin);\r\n            }\r\n        }\r\n    \r\n        return result;\r\n    };\r\n  \r\n    // Build table to column map\r\n    function UtilsbuildJoinTableColumnMap(output) {\r\n        const mp = new Map();\r\n        for (const { info, takenFromFirst, takenFromSecond } of output) {\r\n            if (info[0] && !info[0].includes(\"IT_Join\") && !info[0].includes(\"ODM_Master\") && !info[0].includes(\"Time\")  && !info[0].includes(\"time\")) {\r\n            if (!mp.has(info[0])) mp.set(info[0], []);\r\n            mp.get(info[0]).push(...takenFromFirst);\r\n            }\r\n            if (info[1] && !info[1].includes(\"IT_Join\") && !info[1].includes(\"ODM_Master\") && !info[1].includes(\"Time\")  && !info[1].includes(\"time\")) {\r\n            if (!mp.has(info[1])) mp.set(info[1], []);\r\n            mp.get(info[1]).push(...takenFromSecond);\r\n            }\r\n        }\r\n        return mp;\r\n        \r\n    };\r\n    \r\n    var fieldLevelMappingValidation = function () {\r\n        Log.Info(`<MassValidation>-Started field Level Mapping Validation with ${Project} , ${version} and  ${validationMapping} ${navigationMapping}`);\r\n      \r\n        // Fetch Data Mappings Details.\r\n        let mappingsListQuery = `Select ([Version].[Version Name].[${version}] *[o9EKG Customer].[Project Name] .[${Project}] * [o9EKG Table].[Field ID] * [o9EKG Table].[Table Name]*[o9EKG Table].[Table Type].filter(#.Name in {\"LS_Upload\",\"OUT\",\"o9 Data Model\"})*[Sequence].[Sequence] * {Measure.[o9EKG Field Name], Measure.[o9EKG Field Data Type],Measure.[o9EKG Field IsKey],Measure.[o9EKG Field Short Description],Measure.[o9EKG Source Field Mapping],Measure.[o9EKG SQL Join Anchor Table],Measure.[o9EKG Distinct Select],Measure.[o9EKG Auto Generate Group By],Measure.[o9EKG Group By Text],Measure.[o9EKG Source Field Where Clause Filter],Measure.[o9EKG IN Mapping Source System]}).filter(Measure.[o9EKG Table Included] == 1 && Measure.[o9EKG Field Included] == 1  );`;\r\n        let mappingsListQueryResult = cellsetModule.createCellSet(queryModule.select(mappingsListQuery));\r\n        //End\r\n\r\n        //Table Name - source Field Mapping\r\n        for (let row = 0; row < mappingsListQueryResult.rowCount; row++) {\r\n            let tableName = mappingsListQueryResult.row(row).cell(3).Name;\r\n            let sourceFieldName = mappingsListQueryResult.row(row).cell(10);\r\n            if (!tableSourceFieldMap.has(tableName)) {\r\n                tableSourceFieldMap.set(tableName, new Set());\r\n            }\r\n            tableSourceFieldMap.get(tableName).add(sourceFieldName);\r\n        }\r\n        //End\r\n \r\n        const sourceAnchorTableMap = new Map();\r\n        \r\n        for (let row = 0; row < mappingsListQueryResult.rowCount; row++) {\r\n            let tableName = mappingsListQueryResult.row(row).cell(3).Name;\r\n            let sourceTableName = mappingsListQueryResult.row(row).cell(11);\r\n            let sequenceNumber = mappingsListQueryResult.row(row).cell(5).Name;\r\n            let autoGenerateGroupBy = mappingsListQueryResult.row(row).cell(13);\r\n            let GroupBytext = mappingsListQueryResult.row(row).cell(14);\r\n\r\n            if (!multilevelMap.has(tableName)) {\r\n                multilevelMap.set(tableName, new Map());\r\n                let tableMap = multilevelMap.get(tableName);\r\n                if (!tableMap.has(sequenceNumber)) {\r\n                    tableMap.set(sequenceNumber, new Set());\r\n                }\r\n            }\r\n            if (!tableuniqueGroupby.has(tableName)) {\r\n                tableuniqueGroupby.set(tableName, new Map());\r\n                let tableMapun = tableuniqueGroupby.get(tableName);\r\n                if (!tableMapun.has(sequenceNumber)) {\r\n                    tableMapun.set(sequenceNumber, new Set());\r\n                }\r\n            }\r\n            if (!sourceAnchorTableMap.has(tableName)) {\r\n                sourceAnchorTableMap.set(tableName, new Set());\r\n            }\r\n            if (!tableuniqueGroupbytext.has(tableName)) {\r\n                tableuniqueGroupbytext.set(tableName, new Map());\r\n                let GroupMapun = tableuniqueGroupbytext.get(tableName);\r\n                if (!GroupMapun.has(sequenceNumber)) {\r\n                    GroupMapun.set(sequenceNumber, new Set());\r\n                }\r\n            }\r\n            if (sourceTableName != null && sourceTableName !== '' && sourceTableName !== \"\") {\r\n                let tableMap = multilevelMap.get(tableName);\r\n                if (!tableMap.has(sequenceNumber)) {\r\n                    tableMap.set(sequenceNumber, new Set());\r\n                }\r\n                tableMap.get(sequenceNumber).add(sourceTableName);\r\n                sourceAnchorTableMap.get(tableName).add(sourceTableName);\r\n            }\r\n            if (autoGenerateGroupBy != null && autoGenerateGroupBy !== '' && autoGenerateGroupBy !== \"\") {\r\n                let tableMapun = tableuniqueGroupby.get(tableName);\r\n                if (!tableMapun.has(sequenceNumber)) {\r\n                    tableMapun.set(sequenceNumber, new Set());\r\n                }\r\n                tableMapun.get(sequenceNumber).add(autoGenerateGroupBy);\r\n            }\r\n\r\n            if (GroupBytext != null && GroupBytext !== '' && GroupBytext !== \"\") {\r\n                let GroupMapun = tableuniqueGroupbytext.get(tableName);\r\n                if (!GroupMapun.has(sequenceNumber)) {\r\n                    GroupMapun.set(sequenceNumber, new Set());\r\n                }\r\n                GroupMapun.get(sequenceNumber).add(GroupBytext);\r\n            }\r\n        }\r\n        //table name - [source table]\r\n        for (const [tableName, tableMap] of multilevelMap) {\r\n            for (const [sequenceNumber, sourceTableSet] of tableMap) {\r\n                const [validationNavigation, navigationFilters] = navigationMapping.get(\"Source Field Mapping\") || [];\r\n                const validationCategory = validationMapping.get(\"Source Field Mapping\");\r\n                const validationCriticality = \"Error\";\r\n                const sourceTableList = Array.from(sourceTableSet);\r\n\r\n                if (sourceTableList.length === 0) {\r\n                    // Case: No source anchor table\r\n                    ExcuteIBPL(validationNavigation, `The Source Table for '${tableName}' could not be found. The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                } \r\n                else if (sourceTableList.length > 1) {\r\n                    // Case: Multiple source anchor tables\r\n                    ExcuteIBPL(validationNavigation, `The table '${tableName}' has more than one Source Table against a union '${sequenceNumber}'.Please add a unique source table value for each union operator.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                }\r\n                else {\r\n                    // Case: Single source table exists\r\n                    let singleSourceTable = sourceTableList[0];\r\n                    if(singleSourceTable && singleSourceTable == \"Not specified\"){\r\n                        let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                        let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                        let errorText = `The Source Table '${singleSourceTable}' could not be found.The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                    else if (singleSourceTable && (singleSourceTable.includes('join') ||singleSourceTable.includes('JOIN'))) {\r\n                        const output = buildJoinTableColumnMap(singleSourceTable, [], (singleSourceTable.includes('|cross join') || singleSourceTable.includes('|CROSS JOIN')));\r\n                        const finalMap = UtilsbuildJoinTableColumnMap(output);\r\n\r\n                        outerLoop:\r\n                        for (const [jointable, joincolumns] of finalMap) {\r\n                            for (const columnname of joincolumns) {\r\n                                console.log(jointable, columnname);\r\n                                if(!TableList.has(jointable)){\r\n                                    let sanitizedSourceFieldName = singleSourceTable.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                                    let errorText = `The Source Table '${sanitizedSourceFieldName}' could not be found.The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                    break outerLoop;\r\n                                }\r\n                                else if(!isFieldNamePresent(jointable,columnname)){\r\n                                    let sanitizedSourceFieldName = singleSourceTable.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                                    let errorText = `The Source Table Mapping  is '${sanitizedSourceFieldName}'. The column '${columnname}' does not exist in the Source Table '${jointable}'.Please enter a valid field from the source table.`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                    break outerLoop;\r\n                                }\r\n                            }\r\n                        }\r\n                              \r\n                    }\r\n                } \r\n            }\r\n        }\r\n\r\n        // for Multiple auto Group by\r\n        for (const [tableName, tableMap] of tableuniqueGroupby) {\r\n            for (const [sequenceNumber, autoGroupBY] of tableMap) {\r\n                const [validationNavigation, navigationFilters] = navigationMapping.get(\"Source Field Mapping\") || [];\r\n                const validationCategory = validationMapping.get(\"Source Field Mapping\");\r\n                const validationCriticality = \"Error\";\r\n                const sourceGroupList = Array.from(autoGroupBY);\r\n\r\n                if (sourceGroupList.length === 0) {\r\n                    ExcuteIBPL(validationNavigation, `The table '${tableName}' has no Auto Generate Group by defined against union '${sequenceNumber}'.Please add a unique Auto Generate Group by value for each union operator.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                } \r\n                else if (sourceGroupList.length > 1) {\r\n                    ExcuteIBPL(validationNavigation, `The table '${tableName}' has more than one Auto Generate Group by defined against union.Please add a unique Auto Generate Group by value for each union operator.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                }\r\n            }\r\n        }\r\n\r\n        const parentTable = new Set();\r\n        let uniqueInfoMap = new Map();\r\n        let deltaschema = new Map();\r\n        for (let row = 0; row < mappingsListQueryResult.rowCount; row++) {\r\n            let tableName = mappingsListQueryResult.row(row).cell(3).Name;\r\n            let isKey = mappingsListQueryResult.row(row).cell(8);\r\n            let sourceFieldName = mappingsListQueryResult.row(row).cell(10);\r\n            let sequenceNumber = mappingsListQueryResult.row(row).cell(5).Name;\r\n            let sourceTableName = getSingleSourceTable(tableName, sequenceNumber);\r\n            let autoGenerateGroupBy = getSingleGroupBy(tableName,sequenceNumber);\r\n            let GroupBytext = getSingleGroupByText(tableName,sequenceNumber);\r\n            if (sourceTableName == null || autoGenerateGroupBy==null || sourceTableName == \"Not specified\") { continue; }\r\n\r\n            if(autoGenerateGroupBy == 'Auto Generate' && isKey === false && !sourceFieldName.includes('Hardcode') && !containsSparkSqlAggFunction(sourceFieldName)){\r\n                let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                let validationNavigation = navigationMapping.get(\"Group By\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Group By\");             \r\n                let navigationFilters = navigationMapping.get(\"Group By\")[1];\r\n                let errorText = `The Source Field Mapping is '${sanitizedSourceFieldName}' and the Group By setting is '${autoGenerateGroupBy}'.Please add a valid Spark SQL aggregate function to this non-key source field mapping.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n            }\r\n            if(autoGenerateGroupBy == 'User Specified' && GroupBytext == null){\r\n                let validationNavigation = navigationMapping.get(\"Group By\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Group By\");             \r\n                let navigationFilters = navigationMapping.get(\"Group By\")[1];\r\n                let errorText = `The Auto Generate Group By setting is 'User Specified' and the User specified Group By setting is 'Null'. Please add a valid set of fields to group by in the User specified Group By cell.`;\r\n                uniqueInfoMap.set(tableName, { \r\n                    validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project \r\n                });     \r\n                //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            let sourceTableList = Array.from(sourceAnchorTableMap.get(tableName) || []);\r\n            if(sourceTableName == null && sourceFieldName != null &&!sourceFieldName.includes('Hardcode') && (sourceTableList.length == 0 || sourceTableList.length > 1)){\r\n                let validationNavigation = navigationMapping.get(\"Group By\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Group By\");             \r\n                let navigationFilters = navigationMapping.get(\"Group By\")[1];\r\n                let errorText = `The Source Table is '${tableName}' and the Auto Generate Group By setting is '${autoGenerateGroupBy}'.Please add a valid source table value required for this setting.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            else if (sourceTableList.length === 1 && sourceTableName != null && !sourceTableName.includes('join') && !sourceTableName.includes('JOIN')) {\r\n                if(!TableList.has(sourceTableName)  && sourceFieldName != null && !sourceFieldName.includes('Hardcode')){\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The Source Table '${sourceTableName}' could not be found.The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`;\r\n                    deltaschema.set(tableName, { \r\n                        validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project \r\n                    });\r\n                    //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n            if (sourceFieldName != null && sourceFieldName.startsWith(\"UDF_\")) {\r\n                if (!sourceFieldName.startsWith(\"UDF_SequenceIDGeneration\") && !sourceFieldName.startsWith(\"UDF_ColumnValueAggregation\")){\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The Source Field Mapping is '${sanitizedSourceFieldName}'. Sequence ID gen and Column Value aggregation are the only UDF functions supported.Please enter an a valid UDF function.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                else {\r\n                    const pattern = /\\(\\{([^}]+)\\},\\{([^}]+)\\}/;\r\n                    const matches1 = sourceFieldName.match(pattern);\r\n                    if (matches1) {\r\n                        let columns1 = matches1[1].split(',').concat(matches1[2].split(','));\r\n                        columns1 = columns1.map(i => i.replace(/`/g, \"\"));\r\n                        for (let col of columns1) {                            \r\n                            if (!isFieldNamePresent(tableName,col)) {\r\n                                let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                                let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"Source Field Mapping\");\r\n                                let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                                let errorText = `The Source Field Mapping is '${sanitizedSourceFieldName}'. Sequence ID generation and Column Value aggregation are the only UDF functions supported. Please enter a valid UDF function.`;\r\n                                ExcuteIBPL(validationNavigation,errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n                            }\r\n                        }\r\n                    }                  \r\n                }\r\n            }\r\n            else if(sourceFieldName != null && (sourceFieldName.startsWith(\"COALESCE\")||sourceFieldName.startsWith(\"coalesce\") )){\r\n                const matchColease = sourceFieldName.match(/\\(([^,]+)/);\r\n                if(matchColease){\r\n                    let colnm = matchColease[1].trim();\r\n                    if(!sourceTableName.includes('join') && !sourceTableName.includes('JOIN')){\r\n                        if(!isFieldNamePresent(sourceTableName,colnm)){\r\n                            let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                            let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Error\";\r\n                            let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                            let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                            let errorText = `The Source Field Mapping  is '${sanitizedSourceFieldName}'. The column does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                            //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The Source Field Mapping  is '${sanitizedSourceFieldName}'. The column does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n            else if(sourceFieldName !=null && sourceFieldName.startsWith(\"Hardcode\")){\r\n                const matchcoats = sourceFieldName.match(/\\((.*?)\\)/); \r\n                if(!matchcoats){\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The table has the Source Field Mapping set to '${sanitizedSourceFieldName}'.Please enter a valid value within single quotes inside the Hardcode function.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n                }\r\n                else{\r\n                    const content = matchcoats[1].trim();\r\n                    if (content !== null && ((content.startsWith('``') && content.endsWith('``')))){\r\n                        const cleanedContent = content.slice(1, -1);\r\n                        if(!FieldList.has(cleanedContent)){\r\n                            let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                            let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Error\";\r\n                            let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                            let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                            let errorText = `The table has the Source Field Mapping set to '${sanitizedSourceFieldName}'.Please enter a valid value within single quotes inside the Hardcode function.`;\r\n                            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        }\r\n                    }\r\n                    else if (content !== null &&!((content.startsWith(\"'\") && content.endsWith(\"'\")) ||(content.startsWith('\"') && content.endsWith('\"'))||(content.startsWith('‘') && content.endsWith('’')))){\r\n                        if (!(content.toLowerCase() === \"null\" || content === null || !isNaN(content))) {\r\n                            let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                            let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Error\";\r\n                            let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                            let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                            let errorText = `The table has the Source Field Mapping set to '${sanitizedSourceFieldName}'.Please enter a valid value within single quotes inside the Hardcode function.`;\r\n                            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        }               \r\n                    }\r\n                }\r\n            }\r\n            else if (sourceFieldName ==null || sourceFieldName == \"\" || sourceFieldName ==''){\r\n                let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                let errorText = `The Source Field Mapping  is '${sourceFieldName}'. The column '${sourceFieldName}' does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            else if(sourceFieldName && sourceTableName && !sourceTableName.toLowerCase().includes('join') && !isFieldNamePresent(sourceTableName, sourceFieldName) && !sourceFieldName.includes('.') && !containsSparkSqlAggFunction(sourceFieldName) && !sourceFieldName.includes('Hardcode') && !(sourceFieldName.startsWith(\"COALESCE\") || sourceFieldName.startsWith(\"coalesce\"))&& !sourceFieldName.startsWith(\"UDF_\")){\r\n                let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                let errorText = `The Source Field Mapping  is '${sourceFieldName}'. The column '${sourceFieldName}' does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            parentTable.add(tableName);           \r\n        }\r\n\r\n        for (let [tableName, errorDetails] of uniqueInfoMap) {\r\n            ExcuteIBPL(\r\n                errorDetails.validationNavigation, \r\n                errorDetails.errorText, \r\n                errorDetails.validationCategory, \r\n                errorDetails.navigationFilters, \r\n                errorDetails.validationCriticality, \r\n                errorDetails.validationEntity, \r\n                errorDetails.version, \r\n                errorDetails.Project\r\n            );\r\n        }\r\n        for (let [tableName, errorDetails] of deltaschema) {\r\n            ExcuteIBPL(\r\n                errorDetails.validationNavigation, \r\n                errorDetails.errorText, \r\n                errorDetails.validationCategory, \r\n                errorDetails.navigationFilters, \r\n                errorDetails.validationCriticality, \r\n                errorDetails.validationEntity, \r\n                errorDetails.version, \r\n                errorDetails.Project\r\n            );\r\n        }\r\n    };\r\n\r\n    function extractMutitenantTableNames(inputString) {\r\n        let pattern = /Cascaded from:\\s*([\\w,\\s]+)/;\r\n        let match = inputString.match(pattern);\r\n        if (match) {\r\n            let tableNames = match[1];\r\n            return tableNames.split(',').map(name => name.trim());\r\n        }\r\n    \r\n        return [];\r\n    };\r\n    \r\n    function extractParts(expression) {\r\n        let tokens = [];\r\n        let current = \"\";\r\n        let inBrackets = false;\r\n        let inSingleQuotes = false;\r\n        let inDoubleQuotes = false;\r\n        const operators = new Set(['=', '!=', '<', '>', '<=', '>=']); \r\n        let i = 0;\r\n        while (i < expression.length) {\r\n            let char = expression[i];\r\n    \r\n            if (char === '[') {\r\n                inBrackets = true;\r\n            } else if (char === ']') {\r\n                inBrackets = false;\r\n            } else if (char === \"'\") {\r\n                inSingleQuotes = !inSingleQuotes;\r\n            } else if (char === '\"') {\r\n                inDoubleQuotes = !inDoubleQuotes;\r\n            }\r\n    \r\n            // If an operator is found outside quotes and brackets, split it\r\n            if ((char === '=' || char === '!' || char === '<' || char === '>') && !(inBrackets || inSingleQuotes || inDoubleQuotes)) {\r\n                if (current) {\r\n                    tokens.push(current);\r\n                    current = \"\";\r\n                }\r\n                // Handle multi-character operators like !=, >=, <=\r\n                if (i + 1 < expression.length && operators.has(expression.substring(i, i + 2))) {\r\n                    tokens.push(expression.substring(i, i + 2));\r\n                    i++; // Skip next character as it's part of the operator\r\n                } else {\r\n                    tokens.push(char);\r\n                }\r\n            } else if (char === ' ' && !(inBrackets || inSingleQuotes || inDoubleQuotes)) {\r\n                if (current) {\r\n                    tokens.push(current);\r\n                    current = \"\";\r\n                }\r\n            } else {\r\n                current += char;\r\n            }\r\n    \r\n            i++;\r\n        }\r\n    \r\n        if (current) {\r\n            tokens.push(current);\r\n        }\r\n    \r\n        return tokens;\r\n    };\r\n\r\n    function extractFirstValues(expression) {\r\n        const operators = new Set(['=', '!=', '<', '>', '<=', '>=']);\r\n        \r\n        return expression.split(/\\s+(AND|OR)\\s+/i)\r\n            .map(condition => {\r\n                const match = condition.match(/(.+?)\\s*(=|!=|<|>|<=|>=)/);\r\n                return match ? match[1].trim() : null;\r\n            })\r\n            .filter(Boolean);\r\n    }\r\n\r\n    function extractBracketedValues(str) {\r\n        const matches = str.match(/\\[(.*?)\\]/g);\r\n        if (!matches) return [null, null]; \r\n        const values = matches.map(s => s.replace(/\\[|\\]/g, ''));\r\n        return [values[0] || null, values[1] || null]; \r\n    };\r\n\r\n    function validateLSUString(s) {\r\n        // Regular expression to match the pattern '[text].[text]'\r\n        const pattern = /^\\[.*\\]\\.\\[.*\\]$/;\r\n        return pattern.test(s);\r\n    };\r\n\r\n    function allSubstringsHaveValidOperator(s) {\r\n        const allowedOperators = new Set(['=', '!=', '<', '>', '<=', '>=']);\r\n        const substrings = s.split(/\\s+AND\\s+|\\s+OR\\s+/);\r\n        return substrings.every(substring => {\r\n            const foundOperators = substring.match(/!=|<=|>=|=|<|>/g) || [];\r\n            return foundOperators.some(op => allowedOperators.has(op));\r\n        });\r\n    }\r\n\r\n    var multiTenantValidation = function(){\r\n        Log.Info(`<MassValidation> - Started Multi - Tenant Validation with ${Project} and ${version}`);\r\n\r\n        // Heirchy level extraction\r\n        let SchemaDimensionQuery = `SELECT ([_SchemaDimension].[_Dimension] * [_SchemaDimension].[_Level]) on row , () on column include memberproperties {[_SchemaDimension].[_Level],[LevelPosition]};`;\r\n        let SchemaDimensionResult = cellsetModule.createCellSet(queryModule.select(SchemaDimensionQuery));\r\n\r\n        const SchemaDimensiondMap = new Map();\r\n        for(let i =0;i<SchemaDimensionResult.rowCount;i++){\r\n            let level = SchemaDimensionResult.row(i).cell(1).Name;\r\n            let position = SchemaDimensionResult.row(i).cell(1).LevelPosition;\r\n            SchemaDimensiondMap.set(level, position);\r\n        }\r\n        // END\r\n\r\n        let multiTenantcheckQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]* {Measure.[o9EKG Multi Tenant Setup]});`;\r\n        let multiTenantcheckQueryResult = cellsetModule.createCellSet(queryModule.select(multiTenantcheckQuery));\r\n\r\n        if(multiTenantcheckQueryResult.rowCount == 1){\r\n\r\n            let ruleSetQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set] * {Measure.[o9EKG Rule Set Description]});`;\r\n            let ruleSetQueryReult = cellsetModule.createCellSet(queryModule.select(ruleSetQuery));\r\n            if(ruleSetQueryReult.rowCount ==0 ){\r\n                let validationNavigation = navigationMapping.get(\"Rule Set\")[0];\r\n                let validationEntity = Project;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Rule Set\");             \r\n                let navigationFilters = navigationMapping.get(\"Rule Set\")[1];\r\n                let errorText = `Multi-tenant enabled project '${Project}' does not have any rule sets. Data filtering will not be applied.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);       \r\n            }\r\n            \r\n            let solutionSetQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Solution Set].[Solution Set] * {Measure.[o9EKG Solution Set Description], Measure.[o9EKG Solution Set SBB]});`;\r\n            let solutionSetQueryResult = cellsetModule.createCellSet(queryModule.select(solutionSetQuery));\r\n            if(solutionSetQueryResult.rowCount == 0){\r\n                let validationNavigation = navigationMapping.get(\"Solution Set\")[0];\r\n                let validationEntity = Project;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Solution Set\");             \r\n                let navigationFilters = navigationMapping.get(\"Solution Set\")[1];\r\n                let errorText = `Multi-tenant enabled project '${Project}' does not have solution sets.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                \r\n            }\r\n            let dataRoutingQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Table Specific Rule], Measure.[o9EKG Tenant Rule]}).filter(~isNull(Measure.[o9EKG Tenant Rule]));`\r\n            let dataRoutingQueryResult = cellsetModule.createCellSet(queryModule.select(dataRoutingQuery));\r\n            if(dataRoutingQueryResult.rowCount == 0){\r\n                let validationNavigation = navigationMapping.get(\"Data Routing\")[0];\r\n                let validationEntity = Project;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Data Routing\");             \r\n                let navigationFilters = navigationMapping.get(\"Data Routing\")[1];\r\n                let errorText = `Multi-tenant enabled project '${Project}' does not have data routings generated for it.Please generate and review them before publishing the project.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n            }\r\n            let tenantRuleQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]  * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Table Specific Rule], Measure.[o9EKG Tenant Rule]});`;\r\n            let tenantRuleQueryResult = cellsetModule.createCellSet(queryModule.select(tenantRuleQuery));\r\n            let tenantRuleTableNameMap = new Map();\r\n\r\n            for(let row =0;row<tenantRuleQueryResult.rowCount;row++){\r\n                let tenantRule = tenantRuleQueryResult.row(row).cell(6);\r\n                let tableName = tenantRuleQueryResult.row(row).cell(2).Name;\r\n                if(tenantRule != \"<any>\" && tenantRule!== null){\r\n                    if(tenantRule != null && tenantRule.includes('Cascaded from')){\r\n                        let values = extractMutitenantTableNames(tenantRule);\r\n                        for(let val in values){\r\n                            if(!TableList.has(values[val])){\r\n                                let validationNavigation = navigationMapping.get(\"Tenant Rule\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Warning\";\r\n                                let validationCategory = validationMapping.get(\"Tenant Rule\");              \r\n                                let navigationFilters = navigationMapping.get(\"Tenant Rule\")[1];\r\n                                let errorText = `The Tenant Rule is '${tenantRule}' Table name '${values[val]}' does not exist in a dimension type LSU Table List of project '${Project}'.`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                            }\r\n                        }\r\n                    }\r\n                    else{\r\n                        let configList = extractParts(tenantRule);\r\n                        for(part in configList){\r\n                            Log.Info(`<MassValidation> - Started Multi - Tenant Validation with configList ${configList[part]} ${configList}`);\r\n                            if(configList[part] != null && configList[part] != \"\" && configList[part].includes('[')){\r\n                                if(validateLSUString(configList[part])){\r\n                                    if (!tenantRuleTableNameMap.has(tableName)) {tenantRuleTableNameMap.set(tableName, new Set());}\r\n                                    tenantRuleTableNameMap.get(tableName).add(configList[part]);\r\n                                    if(!FieldList.has(configList[part])){\r\n                                        let validationNavigation = navigationMapping.get(\"Rule Expression\")[0];\r\n                                        let validationEntity = tableName;\r\n                                        let validationCriticality = \"Error\";\r\n                                        let validationCategory = validationMapping.get(\"Rule Expression\");\r\n                                        let navigationFilters = navigationMapping.get(\"Rule Expression\")[1];\r\n                                        let errorText = `The Tenant Rule is '${tenantRule}' Field name '${configList[part]}' does not exist in a dimension type LSU table '${tableName}' of project '${Project}'.`;\r\n                                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                                    }\r\n                                }\r\n                                else{\r\n                                    let validationNavigation = navigationMapping.get(\"Tenant Rule\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"Tenant Rule\");\r\n                                    let navigationFilters = navigationMapping.get(\"Tenant Rule\")[1];\r\n                                    let errorText = `The Tenant Rule is '${tenantRule}'.The dimension attribute could not be found from a set of valid dimension attributes`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let ruleExpressionQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]});`;\r\n            let ruleExpressionQueryResult = cellsetModule.createCellSet(queryModule.select(ruleExpressionQuery));\r\n            for(let row = 0; row<ruleExpressionQueryResult.rowCount;row++){\r\n                let ruleExpression = ruleExpressionQueryResult.row(row).cell(4);\r\n                let ruleExpressionList = extractParts(ruleExpression);\r\n                for(let rule in ruleExpressionList){\r\n                    if(ruleExpressionList[rule].includes('[') && !validateLSUString(ruleExpressionList[rule])){\r\n                        let validationNavigation = navigationMapping.get(\"Rule Expression\")[0];\r\n                        let validationEntity = Project;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Rule Expression\");\r\n                        let navigationFilters = navigationMapping.get(\"Rule Expression\")[1];\r\n                        let errorText = `The Rule Expression is '${ruleExpression}'.Please enter a valid value.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                    }\r\n                    else if (/^[+\\-*/%=<>!&|^~?:]+$/.test(ruleExpressionList[rule]) && !['=', '!=', '<', '>', '<=', '>=', 'AND', 'OR'].includes(ruleExpressionList[rule])) {\r\n                        let validationNavigation = navigationMapping.get(\"Rule Expression\")[0];\r\n                        let validationEntity = Project;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Rule Expression\");\r\n                        let navigationFilters = navigationMapping.get(\"Rule Expression\")[1];\r\n                        let errorText = `The Rule Expression is '${ruleExpression}'.Please enter a valid operator.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            let tenantSpecificQueryy = `(Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]  * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Table Specific Rule], Measure.[o9EKG Tenant Rule]})).filter(~isNull(Measure.[o9EKG Tenant Rule]));`;\r\n            let tenantSpecificQueryResult2 = cellsetModule.createCellSet(queryModule.select(tenantSpecificQueryy));\r\n\r\n            for(let row = 0; row<tenantSpecificQueryResult2.rowCount;row++){\r\n                let ruleExpression = tenantSpecificQueryResult2.row(row).cell(5);\r\n                let tableName = tenantSpecificQueryResult2.row(row).cell(2).Name;\r\n                if (ruleExpression !=null && ruleExpression!=\"\" && ruleExpression !='') {\r\n                    if(!allSubstringsHaveValidOperator(ruleExpression)){\r\n                        let validationNavigation = navigationMapping.get(\"Table Specific Rule\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Table Specific Rule\");\r\n                        let navigationFilters = navigationMapping.get(\"Table Specific Rule\")[1];\r\n                        let errorText = `The Table Specific Rule is '${ruleExpression}'.Please enter a valid operand does not have operand.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                    }\r\n                    else{\r\n                        let allValues = extractFirstValues(ruleExpression);\r\n                        for (let val of allValues) {\r\n                            if (!isFieldNamePresent(tableName,val)) {\r\n                                let validationNavigation = navigationMapping.get(\"Table Specific Rule 1\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"Table Specific Rule 1\");\r\n                                let navigationFilters = navigationMapping.get(\"Table Specific Rule 1\")[1];\r\n                                let errorText = `The Table Specific Rule is '${ruleExpression}'Field name '${val}' does not exist table '${tableName}' of project '${Project}'.`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                            }\r\n                        }\r\n                    }\r\n                }               \r\n            }\r\n            // Cascade Validation\r\n            for(let row =0;row<tenantRuleQueryResult.rowCount;row++){\r\n                let tenantRule = tenantRuleQueryResult.row(row).cell(6);\r\n                let tableName = tenantRuleQueryResult.row(row).cell(2).Name;\r\n                if(tenantRule != \"<any>\" && tenantRule!== null){\r\n                    if(tenantRule != null && tenantRule.includes('Cascaded from')){\r\n                        let values = extractMutitenantTableNames(tenantRule);\r\n                        for(let val of values){\r\n                            let columnList = Array.from(tenantRuleTableNameMap.get(val) || new Set());\r\n                            let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n                            for(let col of columnList){\r\n                                Log.Info(`<MassValidation> - Multi-Tenant Validation with col ${col}`);\r\n                                let [tabname, colname] = extractBracketedValues(col);\r\n                                for(let col2 of fieldListResult ){\r\n                                    let [tabname2, colname2] = extractBracketedValues(col2[0]);\r\n                                    Log.Info(`<MassValidation> - Multi-Tenant Validation with col col2[0] ${col} and ${col2[0]}`);\r\n                                    if(tabname !=null && tabname2 != null && tabname === tabname2){\r\n                                        let position1 = SchemaDimensiondMap.has(col) ? SchemaDimensiondMap.get(col) : -1;\r\n                                        let position2 = SchemaDimensiondMap.has(col2[0]) ? SchemaDimensiondMap.get(col2[0]) : -1;\r\n                                        if(position1<position2){\r\n                                            let validationNavigation = navigationMapping.get(\"Rule Set\")[0];\r\n                                            let validationEntity = tableName;\r\n                                            let validationCriticality = \"Warning\";\r\n                                            let validationCategory = validationMapping.get(\"Rule Set\");             \r\n                                            let navigationFilters = navigationMapping.get(\"Rule Set\")[1];\r\n                                            let errorText = `The cascaded filter rule is '${tenantRule}'. The rule expression is at a lower level for table ${tableName}`;\r\n                                            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                            \r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var file_insert_methodology_validation = function() {\r\n        Log.Info(`<MassValidation> - Started File Insert Validation with ${Project} and ${version}`);\r\n    \r\n        let headerRAWINMapping = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Table Group] * [o9EKG Documents].[File Name] * {Measure.[o9EKG File Insert Methodology]}).filter(measure.[o9EKG Table Included] == 1);`;\r\n        let headerRAWINMappingResult = cellsetModule.createCellSet(queryModule.select(headerRAWINMapping));\r\n    \r\n        let validationNav = navigationMapping.has(\"Field Position\") ? navigationMapping.get(\"Field Position\") : \"\";\r\n        let validationCategory = validationMapping.has(\"Field Position\") ? validationMapping.get(\"Field Position\") : \"\";\r\n        let validationNavigation = validationNav[0];\r\n        let navigationFilters = validationNav[1];\r\n    \r\n        for (let row = 0; row < headerRAWINMappingResult.rowCount; row++) {\r\n            let tableName = headerRAWINMappingResult.row(row).cell(2).Name;\r\n            let fileInsertmed = headerRAWINMappingResult.row(row).cell(5);\r\n    \r\n            if (['Position Based (Ignore Header)', 'Position Based (No Header)'].includes(fileInsertmed)) {\r\n                let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n\r\n                let fieldPositionSet = new Set();\r\n                let errors = [];\r\n                for (let index = 0; index < fieldListResult.length; index++) {\r\n                    let [fieldName, fieldId, fieldposition,fieldkey] = fieldListResult[index];\r\n    \r\n                    if (fieldposition === null || fieldposition === \"\") {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`,\r\n                            entity: tableName\r\n                        });\r\n                    } else if (!/^\\d+$/.test(fieldposition)) {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`,\r\n                            entity: tableName\r\n                        });\r\n                    } else if (fieldposition == 0) {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`,\r\n                            entity: tableName\r\n                        });\r\n                    } else if (fieldPositionSet.has(fieldposition)) {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}'. Please enter unique positive number for the Field Positions.`,\r\n                            entity: tableName\r\n                        });\r\n                    }\r\n    \r\n                    if (fieldposition !== null) {\r\n                        fieldPositionSet.add(fieldposition);\r\n                    }\r\n                }\r\n    \r\n                // Process all collected errors in one go\r\n                for (let error of errors) {\r\n                    ExcuteIBPL(validationNavigation, error.errorText, validationCategory, navigationFilters, \"Error\", error.entity, version, Project);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var tenant_Data_Download = function(){\r\n\r\n        Log.Info(`<MassValidation> - Started Tenant Data Download Validation with ${Project} and ${version}`);\r\n    \r\n        let tenantDataDownload = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Table Type].[LS Download]) on row, ({Measure.[o9EKG Tenant Data Download IBPL Delimiter], Measure.[o9EKG Tenant Data Download IBPL Query]}) on column;`;\r\n        let tenantDataDownloadResult = cellsetModule.createCellSet(queryModule.select(tenantDataDownload));\r\n    \r\n        let tempLSUList = new Set();\r\n    \r\n        for(let row = 0; row<tenantDataDownloadResult.rowCount;row++){\r\n            let delimiter = tenantDataDownloadResult.row(row).cell(4);\r\n            let IBPLRule = tenantDataDownloadResult.row(row).cell(5);\r\n            let tableName = tenantDataDownloadResult.row(row).cell(2).Name;\r\n    \r\n            tempLSUList.add(tableName);           \r\n    \r\n            if(delimiter == null || delimiter == \"\" || delimiter == \" \"){\r\n                let validationNavigation = navigationMapping.get(\"Delimiter 1\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Delimiter 1\");              \r\n                let navigationFilters = navigationMapping.get(\"Delimiter 1\")[1];\r\n                let errorText = `The table '${tableName}' has no Delimiter defined.Please add a valid Delimiter.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);                \r\n            }\r\n            if(IBPLRule == null || IBPLRule == \"\" || IBPLRule== \" \"){\r\n                let validationNavigation = navigationMapping.get(\"IBPL Query\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"IBPL Query\");              \r\n                let navigationFilters = navigationMapping.get(\"IBPL Query\")[1];\r\n                let errorText = `The table '${tableName}' has no IBPL Query defined.Please add a valid IBPL Query.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                             \r\n            }\r\n        }\r\n\r\n        for (let tableName of IncludedLSDTableList) {\r\n            if (!tempLSUList.has(tableName)) {\r\n                let validationNavigation = navigationMapping.get(\"IBPL Query\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"IBPL Query\");\r\n                let navigationFilters = navigationMapping.get(\"IBPL Query\")[1];\r\n                let errorText = `The table '${tableName}' has no IBPL Query and Delimiter defined. Please add a valid IBPL Query and Delimiter.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n        }\r\n    };   \r\n    \r\n    var oUTRawValidation = function (){\r\n        let outrawQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Documents].[File Name] * [o9EKG Table].[Table Type].[OUT] ) on row, ({Measure.[o9EKG File Delimiter], Measure.[o9EKG File Source Type], Measure.[o9EKG File Target Path Param], Measure.[o9EKG File Type], Measure.[o9EKG File Encryption]}) on column;`;\r\n        let outrawQueryResult = cellsetModule.createCellSet(queryModule.select(outrawQuery));\r\n        let outTableList = new Set();\r\n        for(let row = 0; row<outrawQueryResult.rowCount;row++){\r\n            let fileName = outrawQueryResult.row(row).cell(3).Name;\r\n            let tableName = outrawQueryResult.row(row).cell(2).Name;\r\n            let fileDelimiter = outrawQueryResult.row(row).cell(5);\r\n            let sourceType = outrawQueryResult.row(row).cell(6);\r\n            let TargetParam = outrawQueryResult.row(row).cell(7);\r\n            let fileType = outrawQueryResult.row(row).cell(8);\r\n            let fileEncy = outrawQueryResult.row(row).cell(9);\r\n            outTableList.add(tableName);\r\n\r\n            if(fileName != 'Not Applicable'){\r\n                if(sourceType == 'External API'){\r\n                    if(fileType != null){\r\n                        let validationNavigation = navigationMapping.get(\"File Type OUT\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"File Type OUT\");              \r\n                        let navigationFilters = navigationMapping.get(\"File Type OUT\")[1];\r\n                        let errorText = `Table '${tableName}' has File Type as '${fileType}'.The File Type should be empty for 'External API' source type. `;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        \r\n                    }\r\n                    if (fileDelimiter != null){\r\n                        let validationNavigation = navigationMapping.get(\"Delimiter\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Delimiter\");              \r\n                        let navigationFilters = navigationMapping.get(\"Delimiter\")[1];\r\n                        let errorText = `Table '${tableName}' has Delimiter as '${fileDelimiter}'.The Delimiter should be empty for 'External API' source type.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        \r\n                    }\r\n                    if (TargetParam!= null){\r\n                        let validationNavigation = navigationMapping.get(\"Target Path\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Target Path\");              \r\n                        let navigationFilters = navigationMapping.get(\"Target Path\")[1];\r\n                        let errorText = `Table '${tableName}' has Target Path is '${TargetParam}'.The Target Path should be empty for 'External API' source type.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                }\r\n                else if(sourceType !=null){\r\n                    if(fileType == null){\r\n                        let validationNavigation = navigationMapping.get(\"File Type OUT\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"File Type OUT\");              \r\n                        let navigationFilters = navigationMapping.get(\"File Type OUT\")[1];\r\n                        let errorText = `Table '${tableName}' has sourceType '${sourceType}'. So Please add a Valid File Type. `;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                    if (fileDelimiter == null){\r\n                        let validationNavigation = navigationMapping.get(\"Delimiter\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Delimiter\");              \r\n                        let navigationFilters = navigationMapping.get(\"Delimiter\")[1];\r\n                        let errorText = `Table '${tableName}' has sourceType '${sourceType}'. So Please add a Valid File Delimiter.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n                    }\r\n                    if (TargetParam == null){\r\n                        let validationNavigation = navigationMapping.get(\"Target Path\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Target Path\");              \r\n                        let navigationFilters = navigationMapping.get(\"Target Path\")[1];\r\n                        let errorText = `Table '${tableName}' has sourceType '${sourceType}'. So Please add a Valid Target Path.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n                    }\r\n                }\r\n                if (fileEncy !== null && ['SingleInsertAPI', 'SingleInsertAPI_Resilient', 'BulkInsertAPI', 'BulkInsertAPI_Resilient', 'External API'].includes(sourceType)) {\r\n                    let validationNavigation = navigationMapping.get(\"File Encryption Method\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"File Encryption Method\");             \r\n                    let navigationFilters = navigationMapping.get(\"File Encryption Method\")[1];\r\n                    let errorText = `The File Encryption setting is '${fileEncy}' with the File Source set to '${sourceType}'.Please set the File encryption as empty for API based source data.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let tableName of IncludedOutTableList) {\r\n            if(!outTableList.has(tableName)){\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");              \r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = `The Specified OUT Table '${tableName}' does not exist in OUT RAW view.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n        }\r\n    };\r\n\r\n    var outBoundsFieldsPosition = function(){\r\n        let tableListQuery = `Select ([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]*[o9EKG Table].[Table Name]*[o9EKG Table].[Table Type].filter(#.Name in {\"LS Download\",\"OUT\"})*{Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        let tableListResultLength = tableListResult.rowCount; \r\n        //End    \r\n        for (let row = 0; row < tableListResultLength; row++) {\r\n            let tableName = tableListResult.row(row).cell(2).Name;\r\n            let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n            let fieldPositionSet = new Set();\r\n            for(let index = 0; index < fieldListResult.length; index++){\r\n                let fieldposition = fieldListResult[index][2]; \r\n                let fieldName = fieldListResult[index][0];\r\n                if ((fieldposition=== null || fieldposition === \"\") ) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);                \r\n                }\r\n                if ((fieldposition!== null && !/^\\d+$/.test(fieldposition))) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                if ((fieldposition!== null && fieldPositionSet.has(fieldposition))) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}'. Please enter unique positive number for the Field Positions.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n                }\r\n                if ((fieldposition!== null && fieldposition == 0)) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);           \r\n                }\r\n                if(fieldposition!= null){fieldPositionSet.add(fieldposition);}\r\n            }\r\n        }\r\n    };\r\n\r\n    var lsDimCheck = function(){\r\n        Log.Info(`<MassValidation> - Started LS Dim Check with ${Project} and ${version}`);\r\n\r\n        let projectDimCheckQuery = `Select ([o9EKG Customer].[Project Name].[${Project}] * [Version].[Version Name].[${version}] ) on row, ({Measure.[o9EKG Master Data Access]}) on column;`;\r\n        let projectDimCheckQueryResult = cellsetModule.createCellSet(queryModule.select(projectDimCheckQuery));\r\n        if(projectDimCheckQueryResult.rowCount == 0){\r\n            let validationNavigation = navigationMapping.get(\"Master Data Access 1\")[0];\r\n            let validationEntity = Project;\r\n            let validationCriticality = \"Warning\";\r\n            let validationCategory = validationMapping.get(\"Master Data Access 1\");              \r\n            let navigationFilters = navigationMapping.get(\"Master Data Access 1\")[1];\r\n            let errorText = `The Master Data Access Type is missing for Project '${Project}'.Please set a valid value from the dropdown list.`;\r\n            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n        }\r\n        else{\r\n            let projectDimCheckValue = projectDimCheckQueryResult.row(0).cell(2);\r\n            if(projectDimCheckValue == 'LSExternalTable'){\r\n                let tableListQuery = `Select ([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]* [o9EKG Table].[Table Type].[LS_Upload].[Table Name] * {Measure.[o9EKG LS GC Pipeline Target], Measure.[o9EKG LS GC Sync Direction], Measure.[o9EKG LS Table Type],  Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1 && Measure.[o9EKG LS Table Type] == \"Dimension\");`;\r\n                let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n                for(let row = 0 ; row <tableListResult.rowCount; row++){\r\n                    let tableName = tableListResult.row(row).cell(2).Name;\r\n                    let LSGCSyncDirection = tableListResult.row(row).cell(4);\r\n                    let LSGCPipelineTarget = tableListResult.row(row).cell(3);\r\n                    if(LSGCSyncDirection != 'External' || LSGCPipelineTarget!= 'Tenant'){\r\n                        let validationNavigation = navigationMapping.get(\"Master Data Access\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Master Data Access\");              \r\n                        let navigationFilters = navigationMapping.get(\"Master Data Access\")[1];\r\n                        let errorText = `The table '${tableName}' has the Master Data Access setting in the Table Settings screen as '${LSGCSyncDirection}' and '${LSGCPipelineTarget}', but LS GC Sync Direction should be 'External' and LS GC Pipeline Target should be 'Tenant'.Please Update your Settings.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                }\r\n            }\r\n        }       \r\n    };\r\n\r\n    function extractParameters2(vlookupFormula) {\r\n        const pattern = /\\{([^}]*)\\}/g;\r\n        let matches = [];\r\n        let match;\r\n        while ((match = pattern.exec(vlookupFormula)) !== null) {\r\n            matches.push(match[1]);\r\n        }\r\n        return matches;\r\n    };\r\n\r\n    function cleanJoinSyntax2(inputString) {\r\n        const parts = inputString.split(/\\s+/);\r\n        const cleanedParts = [];\r\n    \r\n        for (let i = 0; i < parts.length; i++) {\r\n            const part = parts[i].toLowerCase();\r\n    \r\n            if (part === \"inner\" && i + 1 < parts.length && parts[i + 1].toLowerCase() === \"join\") {\r\n                cleanedParts.push(\"inner join\");\r\n                i++; // skip the next word\r\n            } else if (part === \"left\" && i + 1 < parts.length && parts[i + 1].toLowerCase() === \"join\") {\r\n                cleanedParts.push(\"left join\");\r\n                i++; // skip the next word\r\n            } else {\r\n                cleanedParts.push(parts[i].trim());\r\n            }\r\n        }\r\n    \r\n        let cleanedString = cleanedParts.join(\" \");\r\n        cleanedString = cleanedString.replace(/ \\| /g, \"|\").replace(/\\| /g, \"|\").replace(/ \\|/g, \"|\");\r\n    \r\n        return cleanedString;\r\n    };\r\n\r\n    var optionalLeftJoin = function(){\r\n        Log.Info(`<MassValidation> - Started Optional LeftJoin Check with ${Project} and ${version}`);\r\n\r\n        let optionalLeftJoinQuery = `Select ( [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type] * [o9EKG Table].[Table Group] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * [Sequence].[Sequence] ) on row,  ({Measure.[o9EKG Field Name], Measure.[o9EKG Source Field Mapping], Measure.[o9EKG SQL Join Anchor Table]}) on column  where {[Version].[Version Name].[${version}]}.filter( Measure.[o9EKG Field Included] == 1 );`;\r\n        let optionalLeftJoinQueryResult = cellsetModule.createCellSet(queryModule.select(optionalLeftJoinQuery));\r\n        const sourceAnchorTableMap = new Map();\r\n\r\n        const errorList = [];\r\n        for (let row = 0; row < optionalLeftJoinQueryResult.rowCount; row++) {\r\n            let tableCell3 = optionalLeftJoinQueryResult.row(row).cell(3);\r\n            let tableName = (tableCell3 && tableCell3.Name) ? tableCell3.Name : \"\"; // Safe access\r\n\r\n            let tableCell8 = optionalLeftJoinQueryResult.row(row).cell(8);\r\n            let sourceTableName = (tableCell8 && tableCell8.Name) ? tableCell8.Name : (tableCell8 || \"\"); \r\n\r\n            sourceTableName = cleanJoinSyntax2(sourceTableName);\r\n\r\n            if (!sourceAnchorTableMap.has(tableName)) {\r\n                sourceAnchorTableMap.set(tableName, new Set());\r\n            }\r\n            if (typeof sourceTableName === \"string\" && (sourceTableName.includes(\"left join\") || sourceTableName.includes(\"LEFT JOIN\"))) { \r\n                let tables = sourceTableName.split(\"|\");\r\n\r\n                for (let i = 1; i < tables.length; i++) {\r\n                    let lookup = tables[i];\r\n\r\n                    if (lookup != null && (lookup.startsWith(\"left join\")|| sourceTableName.includes(\"LEFT JOIN\")) && extractParameters2(lookup).length === 4) {\r\n                        let [param1, param2, param3, param4] = extractParameters2(lookup);\r\n                        let fieldList = Array.from(tableSourceFieldMap.get(tableName) || []);\r\n                        let inputFields = Array.from(new Set(param4.split(\",\")));\r\n\r\n                        for (let var1 of inputFields) {\r\n                            let flag = false;\r\n                            for (let var2 of fieldList) {\r\n                                if (var2.includes(var1) && (var2.includes(\"COALESCE\")|| var2.includes(\"coalesce\"))) {\r\n                                    flag = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!flag) {\r\n                                let errorText = `The Source Table is '${sourceTableName}' This operation may result in null values. Please consider using the COALESCE function for the '${var1}' field.`;\r\n                                errorList.push({ errorText, tableName, var1 });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const uniqueErrors = new Map();\r\n        (errorList || []).forEach(({ errorText, tableName, var1 }) => {\r\n            // Create a unique key based on relevant properties\r\n            let key = `${errorText}|${tableName}|${var1}`;\r\n\r\n            // Add to map if the key doesn't exist\r\n            if (!uniqueErrors.has(key)) {\r\n                uniqueErrors.set(key, { errorText, tableName, var1 });\r\n            }\r\n        });\r\n\r\n        // Convert the unique values back to an array and iterate\r\n        for (let { errorText, tableName, var1 } of uniqueErrors.values()) {\r\n            let sourceFieldMapping = navigationMapping.get(\"Source Field Mapping\") || [];\r\n            let validationNavigation = sourceFieldMapping[0] || null;\r\n            let navigationFilters = sourceFieldMapping[1] || null;\r\n\r\n            let validationEntity = tableName;\r\n            let validationCriticality = \"Error\";\r\n            let validationCategory = validationMapping.get(\"Source Field Mapping\") || null;\r\n\r\n            if (validationNavigation && validationCategory) {\r\n                ExcuteIBPL(\r\n                    validationNavigation,\r\n                    errorText,\r\n                    validationCategory,\r\n                    navigationFilters,\r\n                    validationCriticality,\r\n                    validationEntity,\r\n                    version,\r\n                    Project\r\n                );\r\n            }\r\n        }           \r\n    };  \r\n        \r\n    var lsuFactValidation = function() {\r\n        Log.Info(`<MassValidation> - Started lsu Fact Validation with ${Project} and ${version}`);\r\n        let lsutableListQuery = `Select ([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]* [o9EKG Table].[Table Type].[LS_Upload].[Table Name] * {Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1 && Measure.[o9EKG LS Table Type] == \"Fact\");`;\r\n        let lsutableListQueryResult = cellsetModule.createCellSet(queryModule.select(lsutableListQuery));\r\n        for (let row = 0; row < lsutableListQueryResult.rowCount; row++) {\r\n            let tableName = lsutableListQueryResult.row(row).cell(2).Name;\r\n            let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n            let lsuFact = new Set();\r\n            for (let field of fieldListResult) {\r\n                if(field.includes(\".\")){\r\n                    let fieldName = (field && field[0]) ? field[0] : \"\";\r\n                    let match = fieldName.match(/\\[([^\\]]+)\\]/);\r\n                    let extractedValue = match ? match[1] : \"\"; \r\n                    if (lsuFact.has(extractedValue)) {\r\n                        let validationNavigation = navigationMapping.get(\"Column Count\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Column Count\");\r\n                        let navigationFilters = navigationMapping.get(\"Column Count\")[1];\r\n                        let errorText = `Table '${tableName}' has field '${fieldName}' of the same dimension. The expected value for a fact type table is one attribute per dimension.`;\r\n        \r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    } else {\r\n                        lsuFact.add(extractedValue);\r\n                    }\r\n\r\n                }\r\n                \r\n            }\r\n        }\r\n    };\r\n    \r\n    var MassValidationMainFunction = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Project = parsedParams.Project;\r\n        version = parsedParams.version;\r\n        Log.Info(`<MassValidation>-Started Mass Validation Main Function Plugin with ${Project} and ${version}`);\r\n\r\n        // Clear Error Details\r\n        let queryDeleteMassValidationError = `scope: ([Version].[Version Name].[${version}] * [o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Customer].[Project Name].[${Project}] ) ;\r\n            Measure.[o9EKG Error Text] = Null ;\r\n            Measure.[o9EKG Navigation Filters] = Null ;\r\n            Measure.[o9EKG Validation Category] = Null;\r\n            Measure.[o9EKG Validation Criticality] = Null;\r\n            Measure.[o9EKG Validation Entity] = Null;\r\n            Measure.[o9EKG Validation Navigation] = Null;\r\n            Measure.[o9EKG Validation Timestamp] = Null;\r\n            Measure.[o9EKG Validation User] = Null;\r\n            end scope ;`;\r\n\r\n        Log.Info(`<MassValidation>-queryDeleteMassValidationError ${queryDeleteMassValidationError}`);\r\n        var queryCreateMassValidationResponse = queryModule.update(queryDeleteMassValidationError);\r\n        Log.Info(`<MassValidation>-queryDeleteMassValidationErrorResponse ${queryDeleteMassValidationError}`);\r\n        //End\r\n\r\n        // 2. Auto-populate hierarchy checks\r\n        const autoPopulateHierarchyQuery =`EXEC plugin instance o9EKGLSUTable for measures {[o9EKG LS Table Type]} using scope (&CWV * [o9EKG Customer].[Project Name].[${Project}])using arguments {([ExecutionMode], \"LightWeight\")};`;\r\n        var autoPopulateHierarchyQueryResponse = queryModule.update(autoPopulateHierarchyQuery);\r\n        Log.Info(`<MassValidation>-queryDeleteMassValidationErrorResponse ${autoPopulateHierarchyQueryResponse}`);\r\n\r\n        //Fetch current instance of Error Report for specific Project and version.\r\n        let errorListQuery = `Select ([o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Customer].[Project Name].[${Project}] * [Version].[Version Name].[${version}] ) on row, ({Measure.[o9EKG Error Text], Measure.[o9EKG Navigation Filters], Measure.[o9EKG Validation Category], Measure.[o9EKG Validation Criticality], Measure.[o9EKG Validation Entity], Measure.[o9EKG Validation Navigation]}) on column;`;\r\n        let errorListResult = cellsetModule.createCellSet(queryModule.select(errorListQuery));\r\n        let errorListResultLength = errorListResult ? errorListResult.rowCount : 0;\r\n        let sequenceNumber = errorListResultLength+1;\r\n        Log.Info(`<MassValidation>- errorListResultLength: ${errorListQuery} `);\r\n        //End\r\n\r\n        // Fetch Mappings for o9EKG Dim Validation Type versus Dim Validation Category\r\n        let validationMappingQuery = `Select([o9EKG Validation].[o9EKG Dim Validation Category]*[o9EKG Validation].[o9EKG Dim Validation Type]);`;\r\n        let validationMappingQueryResult = cellsetModule.createCellSet(queryModule.select(validationMappingQuery));\r\n        \r\n        for (let row = 0; row < validationMappingQueryResult.rowCount; row++) {\r\n            let validationKey = validationMappingQueryResult.row(row).cell(1).Name;\r\n            let value= validationMappingQueryResult.row(row).cell(0).Name;            \r\n            validationMapping.set(validationKey, value);\r\n            Log.Info(`<MassValidation>- validationMappingValue: ${validationKey} ${value}`);\r\n        }\r\n        // End\r\n\r\n        // Fetch View ID \r\n        let viewIDQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Validation].[o9EKG Dim Validation Type] * [o9EKG Error Navigation].[o9EKG View ID] * [o9EKG Navigation Filters].[o9EKG Target Filter Info] ) on row, ({Measure.[o9EKG Validation Mapping]}) on column;`;\r\n        let viewIDQueryResult = cellsetModule.createCellSet(queryModule.select(viewIDQuery));\r\n        Log.Info(`<MassValidation>- View ID Query Result: ${viewIDQueryResult}`);\r\n       \r\n        for (let row = 0; row < viewIDQueryResult.rowCount; row++) {\r\n            let validationKey = viewIDQueryResult.row(row).cell(1).Name;  \r\n            let viewID = viewIDQueryResult.row(row).cell(2).Name;\r\n            let TargetFilterInfo = viewIDQueryResult.row(row).cell(3).Name;\r\n            let validationSeq = viewIDQueryResult.row(row).cell(4).Name;            \r\n            // Store values as an array in the map\r\n            navigationMapping.set(validationKey, [viewID, TargetFilterInfo, validationSeq]);\r\n            Log.Info(`<MassValidation> - validationMappingValue: Key=${validationKey}, ViewID=${viewID}, TargetFilterInfo=${TargetFilterInfo}, ValidationSeq=${validationSeq}`);\r\n        }\r\n        //End\r\n\r\n        // Fetching Ignore Errors\r\n        let ignoreErrorQuery = `Select([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]*[o9EKGSequence].[o9EKGSequenceNumber]) on row, \r\n({Measure.[o9EKG Ignore Errors Timestamp], Measure.[o9EKG Ignore Flag], Measure.[o9EKG Ignored Category], Measure.[o9EKG Ignored Criticality], Measure.[o9EKG Ignored Entity], Measure.[o9EKG Ignored Error Text], Measure.[o9EKG Ignored Errors User], Measure.[o9EKG Ignored Navigation], Measure.[o9EKG Ignored Navigation Filters]}) on column;`;\r\n        let ignoreErrorQueryResult = cellsetModule.createCellSet(queryModule.select(ignoreErrorQuery));\r\n\r\n        for(var row = 0; row < ignoreErrorQueryResult.rowCount ;row++){\r\n            let ignoredCategory = ignoreErrorQueryResult.row(row).cell(5);\r\n            let ignoredCriticality = ignoreErrorQueryResult.row(row).cell(6);\r\n            let ignoredEntity = ignoreErrorQueryResult.row(row).cell(7);\r\n            let ignoredErrorText = ignoreErrorQueryResult.row(row).cell(8);\r\n            let ignoredNavigation = ignoreErrorQueryResult.row(row).cell(10);\r\n            let ignoredNavigationFilters = ignoreErrorQueryResult.row(row).cell(11);\r\n            let sequence = Number(ignoreErrorQueryResult.row(row).cell(2).Name) || 0;\r\n            //validationNavigation,errorText,validationCategory,navigationFilters,validationCriticality,validationEntity\r\n\r\n            let key = JSON.stringify([ignoredNavigation, ignoredErrorText, ignoredCategory, ignoredNavigationFilters, ignoredCriticality, ignoredEntity]);\r\n            ignoreErrorMap.set(\r\n                key,\r\n                sequence\r\n            );\r\n            ignoresequenceList.push(sequence);\r\n            errorNumber = Math.max(errorNumber, sequence);\r\n        }\r\n        //End\r\n\r\n        // populate OUT Table List\r\n        let outIncludedtable = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type].[OUT].[Table Name] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let outIncludedtableResult = cellsetModule.createCellSet(queryModule.select(outIncludedtable));\r\n        for (let row = 0; row < outIncludedtableResult.rowCount; row++) {\r\n            IncludedOutTableList.add(outIncludedtableResult.row(row).cell(2).Name);\r\n        }\r\n\r\n        // populate LSD Table List\r\n        let lsDIncludedtable = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type].[LS Download].[Table Name] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let lsDIncludedtableResult = cellsetModule.createCellSet(queryModule.select(lsDIncludedtable));\r\n        for (let row = 0; row < lsDIncludedtableResult.rowCount; row++) {\r\n            IncludedLSDTableList.add(lsDIncludedtableResult.row(row).cell(2).Name);\r\n        }\r\n\r\n        // populate LSU Table List\r\n        let lsuIncludedtable = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type].[LS_Upload].[Table Name] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let lsuIncludedtableResult = cellsetModule.createCellSet(queryModule.select(lsuIncludedtable));\r\n        for (let row = 0; row < lsuIncludedtableResult.rowCount; row++) {\r\n            IncludedLSUTableList.add(lsuIncludedtableResult.row(row).cell(2).Name);\r\n        }\r\n\r\n        ValidateFieldname();\r\n        DuplicateDataHandling();\r\n        HierarchyCheck();\r\n        GCPipelineTarget();\r\n        RAWINValidation();\r\n        file_insert_methodology_validation();\r\n        tenant_Data_Download();\r\n        oUTRawValidation();\r\n        outBoundsFieldsPosition();\r\n        lsDimCheck();\r\n        fieldLevelMappingValidation();\r\n        optionalLeftJoin();\r\n        multiTenantValidation();\r\n        lsuFactValidation();\r\n    };\r\n    return {\r\n        MassValidationMainFunction: MassValidationMainFunction\r\n    };\r\n});",
    "Code": "define('o9.EKG.MassValidationJS', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    var errorNumber = 0;\r\n    const ignoreErrorMap = new Map();\r\n    const ignoresequenceList = [];\r\n    const TableList = new Set();\r\n    const FieldList = new Set();\r\n    const IncludedOutTableList = new Set();\r\n    const IncludedLSDTableList = new Set();\r\n    const IncludedLSUTableList = new Set();\r\n    const FieldDetailsMap = new Map();\r\n    const tableSourceFieldMap = new Map();\r\n    const navigationMapping = new Map();\r\n    const validationMapping = new Map();\r\n    const multilevelMap = new Map();\r\n    const tableuniqueGroupby = new Map(); \r\n    const tableuniqueGroupbytext = new Map(); \r\n    let Project ;\r\n    let version ;\r\n\r\n    function isFieldNamePresent(tableName, fieldName) {\r\n        if (!FieldDetailsMap.has(tableName)) {\r\n            return false; \r\n        }\r\n        return FieldDetailsMap.get(tableName).some(field => field[0] === fieldName);\r\n    };\r\n\r\n    var ExcuteIBPL = function(validationNavigation,errorText,validationCategory,navigationFilters,validationCriticality,validationEntity){\r\n        let temnpErrorList = JSON.stringify([validationNavigation,errorText,validationCategory,navigationFilters,validationCriticality,validationEntity]);\r\n        if(!ignoreErrorMap.has(temnpErrorList)){\r\n            errorNumber+=1;\r\n            let queryCreateMassValidation = `cartesian scope : ([Version].[Version Name].[${version}] * [o9EKGSequence].[o9EKGSequenceNumber].[${errorNumber}] * [o9EKG Customer].[Project Name].[${Project}]) ;\r\n                Measure.[o9EKG Error Text] =\"${errorText}\";\r\n                Measure.[o9EKG Navigation Filters] =\"${navigationFilters}\";\r\n                Measure.[o9EKG Validation Category] =\"${validationCategory}\";\r\n                Measure.[o9EKG Validation Criticality] =\"${validationCriticality}\";\r\n                Measure.[o9EKG Validation Entity] =\"${validationEntity}\";\r\n                Measure.[o9EKG Validation Navigation] =\"${validationNavigation}\";\r\n                end scope;`;                  \r\n    \r\n            var queryCreateMassValidationResponse = queryModule.update(queryCreateMassValidation);\r\n        }\r\n    };\r\n\r\n    var ValidateFieldname = function () {\r\n        Log.Info(`<MassValidation>-Started Validate Field name with ${Project} , ${version} `);\r\n        let fieldListQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * {Measure.[o9EKG Date Time Format], Measure.[o9EKG Field Created By], Measure.[o9EKG Field Created Source Project], Measure.[o9EKG Field Creation Timestamp], Measure.[o9EKG Field Data Type], Measure.[o9EKG Field Default Value], Measure.[o9EKG Field Description], Measure.[o9EKG Field Included], Measure.[o9EKG Field IsKey], Measure.[o9EKG Field Locked], Measure.[o9EKG Field Name], Measure.[o9EKG Field Placeholder 1], Measure.[o9EKG Field Placeholder 2], Measure.[o9EKG Field Placeholder 3], Measure.[o9EKG Field Placeholder 4], Measure.[o9EKG Field Placeholder 5], Measure.[o9EKG Field Position], Measure.[o9EKG Field Short Description], Measure.[o9EKG Is Mapped],Measure.[o9EKG LS Dim Check],Measure.[o9EKG Input Master Data Check]}).filter(Measure.[o9EKG Field Included]==1);`;\r\n        let fieldListResult = cellsetModule.createCellSet(queryModule.select(fieldListQuery));            \r\n        let fieldNameMap = new Map();\r\n        let valid_types = [\"Datetime\", \"Boolean\", \"Integer\", \"String\", \"Number\"];  \r\n        const invalidCharacters = new Set(['~', '!', '@', '#', '$', '%', '^', '&', '*', '<', '>', '?', '/', '|', '\"', \"'\", ':', '\\\\']);\r\n        for(let index = 0; index < fieldListResult.rowCount ; index++){\r\n            let tableName = fieldListResult.row(index).cell(2).Name;\r\n            let fieldId = fieldListResult.row(index).cell(3).Name;\r\n            let fieldDatatype = fieldListResult.row(index).cell(8);\r\n            let fieldDescription = fieldListResult.row(index).cell(10);\r\n            let fieldkey = fieldListResult.row(index).cell(12) ;\r\n            let fieldName = fieldListResult.row(index).cell(14) ;\r\n            let fieldposition = fieldListResult.row(index).cell(20);\r\n            let InputMasterDataCheck = fieldListResult.row(index).cell(24);\r\n            let lsDIMCheck = fieldListResult.row(index).cell(23);\r\n            let tempAppendList = [fieldName, fieldId, fieldposition, fieldkey]; \r\n            TableList.add(tableName);\r\n            (FieldDetailsMap.get(tableName) || FieldDetailsMap.set(tableName, []).get(tableName)).push(tempAppendList);            \r\n            if(fieldName != null)FieldList.add(fieldName);\r\n\r\n            if(lsDIMCheck !== \"\" && lsDIMCheck !== '' && !IncludedLSDTableList.has(tableName) && !IncludedOutTableList.has(tableName) && !IncludedLSUTableList.has(tableName)){\r\n                if ((lsDIMCheck  && !lsDIMCheck.includes(\".\") ) ) {\r\n                    let validationNavigation = navigationMapping.get(\"LS Dim Check\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"LS Dim Check\");              \r\n                    let navigationFilters = navigationMapping.get(\"LS Dim Check\")[1];\r\n                    let errorText = `The Field Name '${fieldName}' has the LS Dim Check value set as '${lsDIMCheck}'.The expected LS Dim Check format is [DimensionName].[AttributeName].`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                else{\r\n                    if(lsDIMCheck){\r\n                        let validateNames = lsDIMCheck.split('.');\r\n                        for (let name of validateNames) {\r\n                            if (name != null && name.includes(\"[\")) {\r\n                                if (!name.includes(\"]\")) {\r\n                                    let validationNavigation = navigationMapping.get(\"LS Dim Check\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"LS Dim Check\");              \r\n                                    let navigationFilters = navigationMapping.get(\"LS Dim Check\")[1];\r\n                                    let errorText = `The Field Name '${fieldName}' has the LS Dim Check value set as '${lsDIMCheck}'.The expected LS Dim Check format is [DimensionName].[AttributeName].`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                }\r\n                            }\r\n                            else{\r\n                                let validationNavigation = navigationMapping.get(\"LS Dim Check\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"LS Dim Check\");              \r\n                                let navigationFilters = navigationMapping.get(\"LS Dim Check\")[1];\r\n                                let errorText = `The Field Name '${fieldName}' has the LS Dim Check value set as '${lsDIMCheck}'.The expected LS Dim Check format is [DimensionName].[AttributeName].`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const InputMasterDataCheckregex = /^[a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*$/;\r\n\r\n            if (InputMasterDataCheck !== \"\" && InputMasterDataCheck !== ''  && !IncludedLSDTableList.has(tableName) && !IncludedOutTableList.has(tableName) && !IncludedLSUTableList.has(tableName)) {\r\n                if ((InputMasterDataCheck && (!InputMasterDataCheck.includes(\".\")))){\r\n                    let validationNavigation = navigationMapping.get(\"LS Entity Check\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"LS Entity Check\");              \r\n                    let navigationFilters = navigationMapping.get(\"LS Entity Check\")[1];\r\n                    let errorText = `The Field Name '${fieldName}' has the Input Master Data Check set as '${InputMasterDataCheck}'.The expected Input Master Data Check format is TableName.ColumnName.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                else{\r\n                    if(InputMasterDataCheck !== null && InputMasterDataCheck !== \"\" && InputMasterDataCheck !== ''){\r\n                        const [table_name, column_name] = InputMasterDataCheck.split('.');\r\n                        if(table_name != null && table_name != \"\" && table_name != ''){\r\n                            let verifyTableQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].[${table_name}] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n                            let verifyTableQueryResult = cellsetModule.createCellSet(queryModule.select(verifyTableQuery));\r\n                            let verifyTableQueryLength = verifyTableQueryResult.rowCount;\r\n                            if(verifyTableQueryLength == 0){\r\n                                Log.Info(`<MassValidation>-From InputMasterDataCheck ${verifyTableQueryLength} , ${table_name}`);\r\n                                let validationNavigation = navigationMapping.get(\"LS Entity Check\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"LS Entity Check\");              \r\n                                let navigationFilters = navigationMapping.get(\"LS Entity Check\")[1];\r\n                                let errorText = `The Field Name '${fieldName}'  has the Input Master Data Check set as  '${InputMasterDataCheck}'.The Table '${table_name}' may not be in the Tables Included list.`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                            }\r\n                            else if(column_name != null && column_name != \"\" && column_name != ''){\r\n                                let verifyColumnQuery = `select ([o9EKG Customer].[Project Name] .[${Project}] * [Version].[Version Name].[${version}] * [o9EKG Table].[Field ID] *[o9EKG Table].[Table Name].[${table_name}] *{Measure.[o9EKG Field Name], Measure.[o9EKG Field Included]}).filter( Measure.[o9EKG Field Included] == 1  && Measure.[o9EKG Field Name]==\"${column_name}\");`;\r\n                                let verifyColumnQueryResult = cellsetModule.createCellSet(queryModule.select(verifyColumnQuery));\r\n                                let verifyColumnQueryLength = verifyColumnQueryResult.rowCount;                                    \r\n                                if (verifyColumnQueryLength == 0) {               \r\n                                    let validationNavigation = navigationMapping.get(\"LS Entity Check\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"LS Entity Check\");              \r\n                                    let navigationFilters = navigationMapping.get(\"LS Entity Check\")[1];\r\n                                    let errorText = `The Field Name '${fieldName}'  has the Input Master Data Check set as  '${InputMasterDataCheck}'.The Field '${column_name}' may not be in the table '${table_name}'`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (fieldName === null || fieldName === \"\" ||  fieldName === \" \"){\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");\r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = `The Field Name with ID '${fieldId}' is NULL.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);      \r\n            }\r\n            if (fieldDatatype!== null && !valid_types.includes(fieldDatatype)) { \r\n                let validationNavigation = navigationMapping.get(\"Data Type Check\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Data Type Check\");              \r\n                let navigationFilters = navigationMapping.get(\"Data Type Check\")[1];\r\n                let errorText = `The Field Name '${fieldName}' has an invalid Data Type.The expected Data Type should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);        \r\n            }\r\n            if (fieldDatatype === null || fieldDatatype == \"\") { \r\n                let validationNavigation = navigationMapping.get(\"Data Type Check\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Data Type Check\");              \r\n                let navigationFilters = navigationMapping.get(\"Data Type Check\")[1];\r\n                let errorText = `The Field Name '${fieldName}' has an invalid Data Type.The expected Data Type should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);      \r\n            }\r\n            // Duplicate field Name check\r\n            if (fieldName!== null && fieldNameMap.has(tableName) && fieldNameMap.get(tableName).has(fieldName)) {\r\n                let validationNavigation = navigationMapping.get(\"Duplicate Data Handling\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Duplicate Data Handling\");              \r\n                let navigationFilters = navigationMapping.get(\"Duplicate Data Handling\")[1];\r\n                let errorText = `Field Name '${fieldName}' is present more than once in the table.The Field Name value should be unique within a table.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);         \r\n            } \r\n            if(fieldName!= null && tableName!=null){\r\n                if (!fieldNameMap.has(tableName)) {fieldNameMap.set(tableName, new Set());}\r\n                fieldNameMap.get(tableName).add(fieldName);\r\n            }\r\n        }\r\n    };\r\n\r\n    var DuplicateDataHandling = function () {\r\n        Log.Info(`<MassValidation>-Started Validate Duplicate Data Handling with ${Project} , ${version} and  ${validationMapping} ${navigationMapping}`);\r\n      \r\n        let tableListQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * {Measure.[o9EKG Table Included], Measure.[o9EKG Duplicate Data Handling]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        //End\r\n\r\n        for (let row = 0; row < tableListResult.rowCount; row++) {\r\n            let duplicateDataHand = tableListResult.row(row).cell(4) ? tableListResult.row(row).cell(4) : \"\";\r\n            let tableName = tableListResult.row(row).cell(2) ? tableListResult.row(row).cell(2).Name : \"\";\r\n            if (duplicateDataHand == \"\") {\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");             \r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = \"Duplicate Data Handling value is empty and will default to the Ignore setting.\";\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);   \r\n            }\r\n        }\r\n    };\r\n\r\n    var HierarchyCheck = function () {\r\n\r\n        Log.Info(`<MassValidation>-Started Validate Duplicate Data Handling with ${Project} , ${version} ${validationMapping} , ${navigationMapping}`);\r\n        let tableListQuery = `select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * {measure.[o9EKG Table Included],Measure.[o9EKG LS Dimension Name],Measure.[o9EKG LS Table Type],Measure.[o9EKG Hierarchy Check Required]} ).filter( measure.[o9EKG Table Included] == 1 );`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        //End\r\n\r\n        for (let row = 0; row < tableListResult.rowCount; row++) {\r\n            let HierarchyCheck = tableListResult.row(row).cell(6);\r\n            let lsTableType =  tableListResult.row(row).cell(5);\r\n            let tableName = tableListResult.row(row).cell(2);\r\n\r\n            if (HierarchyCheck === \"true\"  && lsTableType !==\"Dimension\"){\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");             \r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = `The Hierarchy Check setting is '${HierarchyCheck}'.Hierarchy check will not be done for this table, only dimension tables are validated for hierarchy.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);\r\n                \r\n            }\r\n        }\r\n    };\r\n\r\n    var GCPipelineTarget = function () {\r\n\r\n        Log.Info(`<MassValidation>-Started Validate GC Pipeline Target with ${Project} , ${version}  , ${validationMapping} and ${navigationMapping}`);\r\n      \r\n        let tableListQuery = `select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]*[o9EKG Table].[Table Name] * {measure.[o9EKG Table Included],Measure.[o9EKG LS GC Pipeline Target],Measure.[o9EKG LS GC Sync Direction],Measure.[o9EKG LS Table Type],Measure.[o9EKG LS Dimension Name]} ).filter( measure.[o9EKG Table Included] == 1 );`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        //End\r\n\r\n        // pipeline - Table Mappings\r\n        let tablePipelineMapQuery = `Select ([o9EKG Batch Type].[Batch Type] * [o9EKG Pipeline].[Pipeline Name] * [Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]  * {Measure.[o9EKG Table Order], Measure.[o9EKG Pipeline Folder Group]});`;\r\n        let tablePipelineMapQueryResult = cellsetModule.createCellSet(queryModule.select(tablePipelineMapQuery));\r\n\r\n        let tablePipelinehashMap = new Map();        \r\n        for (let row = 0; row < tablePipelineMapQueryResult.rowCount; row++) {\r\n            let pipelienName = tablePipelineMapQueryResult.row(row).cell(4) ? tablePipelineMapQueryResult.row(row).cell(4).Name : \"\";\r\n            let tableName = tablePipelineMapQueryResult.row(row).cell(5) ? tablePipelineMapQueryResult.row(row).cell(5).Name : \"\";\r\n            if(!tablePipelinehashMap.has(tableName)){tablePipelinehashMap.set(tableName, []);}\r\n            tablePipelinehashMap.get(tableName).push(pipelienName);\r\n        }\r\n\r\n        // GC List\r\n        const gcListMap = new Map();\r\n        let lsuGCTablequery = `select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]* [o9EKG Table].[Table Name] * {measure.[o9EKG Table Included],Measure.[o9EKG LS GC Pipeline Target],Measure.[o9EKG LS GC Sync Direction]} );`;\r\n        let lsuGCTablequeryResult = cellsetModule.createCellSet(queryModule.select(lsuGCTablequery));\r\n        for (let row = 0; row < lsuGCTablequeryResult.length; row++) {\r\n            let pipelineTargetObj = lsuGCTablequeryResult.row(row).cell(4);\r\n            let syncDirectionObj = lsuGCTablequeryResult.row(row).cell(5);\r\n            let tableName = lsuGCTablequeryResult.row(row).cell(2).Name;\r\n            if (!gcListMap.has(tableName)) {\r\n                gcListMap.set(tableName, [null,null]);\r\n            }\r\n            let tempLi = [pipelineTargetObj, syncDirectionObj];\r\n            gcListMap.set(tableName, tempLi);\r\n        }\r\n\r\n        let uniqueInfoMap = new Map();\r\n        for (let row = 0; row < tableListResult.rowCount; row++) {\r\n            let GCPipelineTarget = tableListResult.row(row).cell(4) ? tableListResult.row(row).cell(4) : \"\";\r\n            let tableName = tableListResult.row(row).cell(2) ? tableListResult.row(row).cell(2).Name : \"\";\r\n            let lsTabletype = tableListResult.row(row).cell(6) ? tableListResult.row(row).cell(6): \"\";\r\n\r\n            if(lsTabletype != null && (lsTabletype == \"Fact\" || lsTabletype == \"Graph\")){\r\n                if( GCPipelineTarget == \"LS External Table Overwrite\" || GCPipelineTarget == \"LS External Table Merge\"){\r\n                    \r\n                    let fieldListResult = (FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : []).filter(([fieldName, fieldId, fieldposition, fieldkey]) => fieldkey === true);\r\n                    let dimension_names = [];\r\n                    for (let field = 0; field < fieldListResult.length; field++) {\r\n                        let fieldName = fieldListResult[field][0];\r\n                        let match = fieldName.match(/\\[([^\\]]+)\\]/);\r\n                        if (match) {dimension_names.push(match[1]);}\r\n                    }\r\n                    let matching_tables = [];\r\n                    for (let tableNameobj of IncludedLSUTableList) {\r\n                        if (dimension_names.some(dim => tableNameobj.includes(dim))) {matching_tables.push(tableNameobj);}\r\n                    }\r\n                    let pipelineNames = tablePipelinehashMap.get(tableName) || [];\r\n                    let flag = false;\r\n                    for (let matchtable in matching_tables) {\r\n                        let matchpipeline = tablePipelinehashMap.get(matchtable) || [];\r\n\r\n                        if (matchpipeline.some(item => pipelineNames.includes(item))) {\r\n                            flag = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(flag){\r\n                        let validationNavigation = navigationMapping.get(\"GC Pipeline Target\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"GC Pipeline Target\");             \r\n                        let navigationFilters = navigationMapping.get(\"GC Pipeline Target\")[1];\r\n                        let errorText = `For table '${tableName}', the GC Pipeline Target setting is set to LS External Table Overwrite or LS External Table Merge.For pipelines '${pipelineNames}', the '${matching_tables}' table is grouped along with '${dimension_names}'.A fact type table cannot be grouped with dimension type tables for this GC Pipeline Target setting.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);\r\n                    }   \r\n                    for (let matchtable in matching_tables) {\r\n                        let pipelineTargetValue = (gcListMap.has(matchtable) && gcListMap.get(matchtable)[0] != null) ? gcListMap.get(matchtable)[0] : \"\";\r\n                        let syncDirectionValue = (gcListMap.has(matchtable) && gcListMap.get(matchtable)[1] != null) ? gcListMap.get(matchtable)[1] : \"\" ;\r\n                        if(pipelineTargetValue !=\"Tenant\" || syncDirectionValue != \"External\"){\r\n\r\n                            let updateGCSettings = `scope: ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name].[${matching_tables[matchtable]}]*[o9EKG Table].[Table Type].[LS_Upload]);\r\n                                Measure.[o9EKG LS GC Sync Direction]  = \"External\" ;\r\n                                Measure.[o9EKG LS GC Pipeline Target] = \"Tenant\";\r\n                                end scope;`;\r\n                        \r\n                            var updateGCSettingsResponse = queryModule.update(updateGCSettings);\r\n\r\n                            // Append this in Error report:-\r\n                            let validationNavigation = navigationMapping.get(\"GC Pipeline Target\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Info\";\r\n                            let validationCategory = validationMapping.get(\"GC Pipeline Target\");             \r\n                            let navigationFilters = navigationMapping.get(\"GC Pipeline Target\")[1];\r\n                            let errorText = `For table '${tableName}', the GC Pipeline Target setting is set to '${pipelineTargetValue}'. For this table, the GC Pipeline Target setting has been auto-corrected to 'Tenant' and the GC Sync Direction to 'External'.`;\r\n                            //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project);\r\n\r\n                            uniqueInfoMap.set(tableName, { \r\n                                validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project \r\n                            });                            \r\n                        }                                              \r\n \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Append Info //\r\n        for (let [tableName, errorDetails] of uniqueInfoMap) {\r\n            ExcuteIBPL(\r\n                errorDetails.validationNavigation, \r\n                errorDetails.errorText, \r\n                errorDetails.validationCategory, \r\n                errorDetails.navigationFilters, \r\n                errorDetails.validationCriticality, \r\n                errorDetails.validationEntity, \r\n                errorDetails.version, \r\n                errorDetails.Project\r\n            );\r\n        }\r\n    };\r\n\r\n    function extractColumnsFromClause(clause) {\r\n        clause = clause.replace(/'[^']*'/g, '');\r\n        const columnPattern = /`([^`]+)`|([a-zA-Z_]\\w*(?:[^\\s(),;{}=\\n\\t]*)?)/g;\r\n        const sqlKeywords = new Set([\r\n            'cast', 'as', 'or', 'and', 'between', 'to_date', 'double', 'select', 'from', \r\n            'where', 'is', 'not', 'null', 'inner', 'outer', 'join', 'left', 'right', 'union', \r\n            'group', 'order', 'limit', 'having', 'distinct', 'in', 'like', 'exists', 'case',\r\n            'when', 'then', 'end', 'else', 'coalesce', 'count', 'avg', 'sum', 'min', 'max',\r\n            'date', 'time', 'timestamp', 'now', 'current_date', 'current_time', 'date_add',\r\n            'date_sub', 'trim', 'substring', 'concat', 'concat_ws', 'abs', 'round', 'ceil',\r\n            'floor', 'coalesce', 'if', 'isnull', 'nvl', 'decode', 'contains', 'select',\r\n            'from', 'where', 'exists', 'by', 'desc', 'asc'\r\n        ]);\r\n        \r\n        const columns = new Set();\r\n        let match;\r\n        \r\n        while ((match = columnPattern.exec(clause)) !== null) {\r\n            let columnName = match[1] || match[2];\r\n            \r\n            if (columnName && !sqlKeywords.has(columnName.toLowerCase())) {\r\n                columns.add(columnName);\r\n            }\r\n        }\r\n        \r\n        return Array.from(columns);\r\n    };\r\n    \r\n    var RAWINValidation = function () {\r\n        Log.Info(`<MassValidation>-Started RAW-IN Validation with ${Project} , ${version} and  ${validationMapping} ${navigationMapping}`);\r\n\r\n        let rawINQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] *[o9EKG Table].[Table Type].[IN].[Table Name]*[o9EKG Table].[Table Group]*[o9EKG Documents].[File Name]\r\n*{Measure.[o9EKG File Data Filter Clause], Measure.[o9EKG File Decryption], Measure.[o9EKG File Delimiter], Measure.[o9EKG File Description], Measure.[o9EKG File Insert Methodology], Measure.[o9EKG File Requirement], Measure.[o9EKG File Source Type], Measure.[o9EKG File Target Path Param], Measure.[o9EKG File Type], Measure.[o9EKG Text Qualifier]}).filter( measure.[o9EKG Table Included] == 1 ) ;`;\r\n        let rawINQueryResult = cellsetModule.createCellSet(queryModule.select(rawINQuery));\r\n\r\n        for (let row = 0; row < rawINQueryResult.rowCount; row++) {\r\n            let fileSource = rawINQueryResult.row(row).cell(11);\r\n            let tableName = rawINQueryResult.row(row).cell(2).Name;\r\n            let fileDelimiter = rawINQueryResult.row(row).cell(7);\r\n            let fileType = rawINQueryResult.row(row).cell(13);\r\n            let fileName = rawINQueryResult.row(row).cell(4).Name;\r\n            let fileInsertMethodology = rawINQueryResult.row(row).cell(9);\r\n            let fileDataFilter = rawINQueryResult.row(row).cell(5);\r\n            let fileDecryption = rawINQueryResult.row(row).cell(6);\r\n            if(fileSource == null){\r\n                let validationNavigation = navigationMapping.get(\"File Source IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Source IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Source IN\")[1];\r\n                let errorText = `The table '${tableName}' has no File Source defined.Please select an acceptable value from the File Source dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                \r\n            }\r\n            if(fileType == null){\r\n                let validationNavigation = navigationMapping.get(\"File Type IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Type IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Type IN\")[1];\r\n                let errorText = `The table '${tableName}' has no File Type defined.The expected File Type should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n            }\r\n            if(fileType == \"Csv\" && fileDelimiter == null){\r\n                let validationNavigation = navigationMapping.get(\"File Delimiter\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Delimiter\");             \r\n                let navigationFilters = navigationMapping.get(\"File Delimiter\")[1];\r\n                let errorText = `The table '${tableName}' has File Delimiter set as 'Null' for File Type CSV.The expected File Delimiter should be from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                     \r\n            }\r\n            let fileExtension = fileName.split('.').pop();\r\n            if(fileExtension != null && fileType != null &&(fileExtension.toLowerCase() !== fileType.toLowerCase())){\r\n                let validationNavigation = navigationMapping.get(\"File Type IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Type IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Type IN\")[1];\r\n                let errorText = `The table '${tableName}' has File name set as '${fileName}'. The file extension should match the File Type from the dropdown list.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            if (fileDataFilter && fileDataFilter.trim()) {\r\n                if (fileInsertMethodology != 'Match Header' && fileInsertMethodology != null) {\r\n                    let validationNavigation = navigationMapping.get(\"File Data Filter Clause\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"File Data Filter Clause\");             \r\n                    let navigationFilters = navigationMapping.get(\"File Data Filter Clause\")[1];\r\n                    let errorText = `'File Data Filter Clause' is not supported when the 'File Insert Methodology' is set to '${fileInsertMethodology}'.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n                let fieldName = new Set();\r\n                for (let field = 0; field < fieldListResult.length; field++) {fieldName.add(fieldListResult[field][0]); }\r\n                let extractedFieldList = extractColumnsFromClause(fileDataFilter);\r\n                let result = extractedFieldList.filter(item => !fieldName.has(item));\r\n                if(result.length > 0){\r\n                    let columns_str = result.length > 0 ? result.map(col => `'${col}'`).join(\", \") : \"\";\r\n                    let validationNavigation = navigationMapping.get(\"File Data Filter Clause\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"File Data Filter Clause\");             \r\n                    let navigationFilters = navigationMapping.get(\"File Data Filter Clause\")[1];\r\n                    let errorText = `The File Data Filter Clause has columns '${columns_str}' not present in the table. Please includes the columns in the table.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n            if (fileDecryption !== null && ['SingleInsertAPI', 'SingleInsertAPI_Resilient', 'BulkInsertAPI', 'BulkInsertAPI_Resilient', 'External API'].includes(fileSource)) {\r\n                let validationNavigation = navigationMapping.get(\"File Data Filter Clause\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"File Data Filter Clause\");             \r\n                let navigationFilters = navigationMapping.get(\"File Data Filter Clause\")[1];\r\n                let errorText = `The File Decryption setting is '${fileDecryption}' with the File Source set to '${fileSource}'. Please set the File decryption as empty for API based source data.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            if(fileInsertMethodology == null){\r\n                let validationNavigation = navigationMapping.get(\"File Source IN\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Info\";\r\n                let validationCategory = validationMapping.get(\"File Source IN\");             \r\n                let navigationFilters = navigationMapping.get(\"File Source IN\")[1];\r\n                let errorText = `The table '${tableName}' has no File Insert Methodology defined and will default to the 'Match Header' setting.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n            }\r\n        }      \r\n    };\r\n\r\n    function containsSparkSqlAggFunction(query) {\r\n        // List of Spark SQL aggregation functions\r\n        const aggFunctions = new Set([\r\n            'any', 'any_value', 'approx_count_distinct', 'approx_percentile',\r\n            'array_agg', 'avg', 'bit_and', 'bit_or', 'bit_xor',\r\n            'bitmap_construct_agg', 'bitmap_or_agg', 'bool_and', 'bool_or',\r\n            'collect_list', 'collect_set', 'corr', 'count', 'count_if',\r\n            'covar_pop', 'covar_samp', 'every', 'first', 'first_value',\r\n            'grouping', 'grouping_id', 'histogram_numeric', 'hll_sketch_agg',\r\n            'hll_union_agg', 'kurtosis', 'last', 'last_value', 'max', 'max_by',\r\n            'mean', 'median', 'min', 'min_by', 'mode', 'percentile', 'percentile_approx',\r\n            'regr_avgx', 'regr_avgy', 'regr_count', 'regr_intercept', 'regr_r2', \r\n            'regr_slope', 'regr_sxx', 'regr_sxy', 'regr_syy', 'skewness', \r\n            'some', 'std', 'stddev', 'stddev_pop', 'stddev_samp', 'sum', 'try_avg',\r\n            'try_sum', 'var_pop', 'var_samp', 'variance','current_date','date_format','CURRENT_TIMESTAMP','ROW_NUMBER','CONCAT','concat','SUBSTRING'\r\n        ]);\r\n    \r\n        // Convert query to lowercase for case-insensitive matching\r\n        const queryLower = query.toLowerCase();\r\n    \r\n        // Check for exact word matches using regex with word boundaries (`\\b`)\r\n        return [...aggFunctions].some(func => new RegExp(`\\\\b${func}\\\\b`, 'i').test(queryLower));\r\n    };\r\n\r\n    function extractAnchorAndJoinedFields(inputString) {\r\n        const parts = inputString.split(\"|\");\r\n        const anchorTable = parts[0];\r\n        const joins = parts.slice(1);\r\n        const bracePattern = /{(.*?)}/g;\r\n        let joinedFields = [];\r\n    \r\n        joins.forEach(join => {\r\n            if (typeof join === 'string') { // Ensure join is a string\r\n                let matches = [];\r\n                let match;\r\n                while ((match = bracePattern.exec(join)) !== null) {\r\n                    matches.push(match[1]);\r\n                }\r\n                \r\n                if (matches.length > 3 && matches[3].includes(',')) {\r\n                    joinedFields = joinedFields.concat(matches[3].split(','));\r\n                } else if (matches.length > 3) {\r\n                    joinedFields.push(matches[3]);\r\n                }\r\n            }\r\n        });\r\n    \r\n        return { anchorTable, joinedFields };\r\n    };   \r\n\r\n    function getSingleSourceTable(tableName, sequenceNumber) {\r\n        if (multilevelMap.has(tableName)) {\r\n            let tableMap = multilevelMap.get(tableName);\r\n            if (tableMap.has(sequenceNumber)) {\r\n                let sourceTables = Array.from(tableMap.get(sequenceNumber)); // Convert Set to Array\r\n                \r\n                return sourceTables.length === 1 ? sourceTables[0] : null; // Return single source or null\r\n            }\r\n        }\r\n        return null; // Return null if not found\r\n    };\r\n\r\n    function getSingleGroupBy(tableName, sequenceNumber) {\r\n        if (tableuniqueGroupby.has(tableName)) {\r\n            let tableMap = tableuniqueGroupby.get(tableName);\r\n            if (tableMap.has(sequenceNumber)) {\r\n                let sourceTables = Array.from(tableMap.get(sequenceNumber)); \r\n                \r\n                return sourceTables.length === 1 ? sourceTables[0] : null; \r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    function getSingleGroupByText(tableName, sequenceNumber) {\r\n        if (tableuniqueGroupbytext.has(tableName)) {\r\n            let tableMap = tableuniqueGroupbytext.get(tableName);\r\n            if (tableMap.has(sequenceNumber)) {\r\n                let sourceTables = Array.from(tableMap.get(sequenceNumber)); \r\n                \r\n                return sourceTables.length === 1 ? sourceTables[0] : null; \r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // JOINS UTILITY FUNCTION\r\n    function buildJoinTableColumnMap(s, result = [], isCrossJoin) {\r\n        if (!s || s.length === 0) return result;\r\n    \r\n        const add = {\r\n            info: [],\r\n            operation: \"\",\r\n            data: [],\r\n            takenFromFirst: [],\r\n            takenFromSecond: [],\r\n        };\r\n    \r\n        const extractTablesAndFields = (expression) => {\r\n            const map = new Map();\r\n            if (!expression) return map;\r\n    \r\n            let table = \"\", column = \"\", insideBraces = false;\r\n            for (let i = 0; i < expression.length; i++) {\r\n                const char = expression[i];\r\n                switch (char) {\r\n                    case \",\":\r\n                        if (insideBraces && table) {\r\n                            map.get(table) ? map.get(table).push(column.trim()) : map.set(table, [column.trim()]);\r\n                        }\r\n                        column = \"\";\r\n                        break;\r\n                    case \"{\":\r\n                        insideBraces = true;\r\n                        table = table.trim();\r\n                        if (!map.has(table)) map.set(table, []);\r\n                        break;\r\n                    case \"}\":\r\n                        insideBraces = false;\r\n                        if (table && column) map.get(table) ? map.get(table).push(column.trim()) : map.set(table, [column.trim()]);\r\n                        table = column = \"\";\r\n                        break;\r\n                    default:\r\n                        if (insideBraces) column += char;\r\n                        else table += char;\r\n                }\r\n            }\r\n            table = table.trim();\r\n            if (table && !map.has(table)) map.set(table, []);\r\n            return map;\r\n        };\r\n\r\n        function processValue(value) { value = value.trim();\r\n            if (value.startsWith('`') && value.endsWith('`'))  return value.slice(1, -1);\r\n            if (value.includes('.')) {\r\n              const parts = value.split('.');\r\n              return processValue(parts.slice(1).join('.'));\r\n            }\r\n            return value.replace(/^['\"]|['\"]$/g, '');\r\n        };\r\n    \r\n        if (s.includes(\"cross join\")) {\r\n            const op = s.lastIndexOf(\"|\");\r\n            const leftPart = s.substring(0, op).trim();\r\n            const crossPart = s.substring(op + 1).trim();\r\n            const prev = buildJoinTableColumnMap(leftPart, result, true);\r\n    \r\n            const a = crossPart.indexOf(\"(\"), b = crossPart.indexOf(\")\");\r\n            const yo = extractTablesAndFields(crossPart.slice(a + 1, b));\r\n    \r\n            let prevTable = prev.length > 0\r\n                ? \"IT_Join_\" + prev[prev.length - 1].info.join(\"_\")\r\n                : \"\";\r\n    \r\n            for (const [key, val] of yo.entries()) {\r\n                if (!prevTable) {\r\n                    prevTable = key;\r\n                } else {\r\n                    result.push({\r\n                        info: [prevTable, key],\r\n                        operation: \"cross join\",\r\n                        data: [],\r\n                        takenFromFirst: prev.length > 0 ? [] : (yo.get(prevTable) ? yo.get(prevTable) : []),\r\n                        takenFromSecond: val,\r\n                    });\r\n                    prevTable = `IT_Join_${prevTable}_${key}`;\r\n                }\r\n            }\r\n    \r\n        } else {\r\n            const parts = s.split(\"|\");\r\n            const baseTable = parts.length > 0 ? parts[0].trim() : \"\";\r\n            const joinExpr = parts.length > 1 ? parts[1].trim() : \"\";\r\n            const rawMatches = joinExpr.match(/\\{([^}]+)\\}/g) || [];\r\n            const matches = rawMatches.map(m => m.slice(1, -1));\r\n            const secondTable = matches[1];\r\n            const leftCols = matches[0] ? matches[0].split(\",\").map(processValue) : [];\r\n            const rightCols = matches[2] ? matches[2].split(\",\").map(processValue) : [];\r\n            const extraCols = matches[3] ? matches[3].split(\",\").map(processValue) : [];\r\n            for (let i = 0; i < leftCols.length; i++) {\r\n                add.data.push([leftCols[i], rightCols[i]]);\r\n            }\r\n    \r\n            add.takenFromFirst.push(...leftCols);\r\n            add.takenFromSecond.push(...rightCols, ...extraCols);\r\n            add.info.push(baseTable, secondTable);\r\n            add.operation = joinExpr.includes(\"inner join\") ? \"inner join\" : \"left join\";\r\n    \r\n            result.push(add);\r\n    \r\n            if (parts.length > 2) {\r\n                const remStart = s.indexOf(\")\");\r\n                const remainder = s.slice(remStart + 1).trim();\r\n                const joinAlias = `IT_Join_${baseTable}_${secondTable}`;\r\n                buildJoinTableColumnMap(`${joinAlias}${remainder}`, result, isCrossJoin);\r\n            }\r\n        }\r\n    \r\n        return result;\r\n    };\r\n  \r\n    // Build table to column map\r\n    function UtilsbuildJoinTableColumnMap(output) {\r\n        const mp = new Map();\r\n        for (const { info, takenFromFirst, takenFromSecond } of output) {\r\n            if (info[0] && !info[0].includes(\"IT_Join\") && !info[0].includes(\"ODM_Master\") && !info[0].includes(\"Time\")  && !info[0].includes(\"time\")) {\r\n            if (!mp.has(info[0])) mp.set(info[0], []);\r\n            mp.get(info[0]).push(...takenFromFirst);\r\n            }\r\n            if (info[1] && !info[1].includes(\"IT_Join\") && !info[1].includes(\"ODM_Master\") && !info[1].includes(\"Time\")  && !info[1].includes(\"time\")) {\r\n            if (!mp.has(info[1])) mp.set(info[1], []);\r\n            mp.get(info[1]).push(...takenFromSecond);\r\n            }\r\n        }\r\n        return mp;\r\n        \r\n    };\r\n    \r\n    var fieldLevelMappingValidation = function () {\r\n        Log.Info(`<MassValidation>-Started field Level Mapping Validation with ${Project} , ${version} and  ${validationMapping} ${navigationMapping}`);\r\n      \r\n        // Fetch Data Mappings Details.\r\n        let mappingsListQuery = `Select ([Version].[Version Name].[${version}] *[o9EKG Customer].[Project Name] .[${Project}] * [o9EKG Table].[Field ID] * [o9EKG Table].[Table Name]*[o9EKG Table].[Table Type].filter(#.Name in {\"LS_Upload\",\"OUT\",\"o9 Data Model\"})*[Sequence].[Sequence] * {Measure.[o9EKG Field Name], Measure.[o9EKG Field Data Type],Measure.[o9EKG Field IsKey],Measure.[o9EKG Field Short Description],Measure.[o9EKG Source Field Mapping],Measure.[o9EKG SQL Join Anchor Table],Measure.[o9EKG Distinct Select],Measure.[o9EKG Auto Generate Group By],Measure.[o9EKG Group By Text],Measure.[o9EKG Source Field Where Clause Filter],Measure.[o9EKG IN Mapping Source System]}).filter(Measure.[o9EKG Table Included] == 1 && Measure.[o9EKG Field Included] == 1  );`;\r\n        let mappingsListQueryResult = cellsetModule.createCellSet(queryModule.select(mappingsListQuery));\r\n        //End\r\n\r\n        //Table Name - source Field Mapping\r\n        for (let row = 0; row < mappingsListQueryResult.rowCount; row++) {\r\n            let tableName = mappingsListQueryResult.row(row).cell(3).Name;\r\n            let sourceFieldName = mappingsListQueryResult.row(row).cell(10);\r\n            if (!tableSourceFieldMap.has(tableName)) {\r\n                tableSourceFieldMap.set(tableName, new Set());\r\n            }\r\n            tableSourceFieldMap.get(tableName).add(sourceFieldName);\r\n        }\r\n        //End\r\n \r\n        const sourceAnchorTableMap = new Map();\r\n        \r\n        for (let row = 0; row < mappingsListQueryResult.rowCount; row++) {\r\n            let tableName = mappingsListQueryResult.row(row).cell(3).Name;\r\n            let sourceTableName = mappingsListQueryResult.row(row).cell(11);\r\n            let sequenceNumber = mappingsListQueryResult.row(row).cell(5).Name;\r\n            let autoGenerateGroupBy = mappingsListQueryResult.row(row).cell(13);\r\n            let GroupBytext = mappingsListQueryResult.row(row).cell(14);\r\n\r\n            if (!multilevelMap.has(tableName)) {\r\n                multilevelMap.set(tableName, new Map());\r\n                let tableMap = multilevelMap.get(tableName);\r\n                if (!tableMap.has(sequenceNumber)) {\r\n                    tableMap.set(sequenceNumber, new Set());\r\n                }\r\n            }\r\n            if (!tableuniqueGroupby.has(tableName)) {\r\n                tableuniqueGroupby.set(tableName, new Map());\r\n                let tableMapun = tableuniqueGroupby.get(tableName);\r\n                if (!tableMapun.has(sequenceNumber)) {\r\n                    tableMapun.set(sequenceNumber, new Set());\r\n                }\r\n            }\r\n            if (!sourceAnchorTableMap.has(tableName)) {\r\n                sourceAnchorTableMap.set(tableName, new Set());\r\n            }\r\n            if (!tableuniqueGroupbytext.has(tableName)) {\r\n                tableuniqueGroupbytext.set(tableName, new Map());\r\n                let GroupMapun = tableuniqueGroupbytext.get(tableName);\r\n                if (!GroupMapun.has(sequenceNumber)) {\r\n                    GroupMapun.set(sequenceNumber, new Set());\r\n                }\r\n            }\r\n            if (sourceTableName != null && sourceTableName !== '' && sourceTableName !== \"\") {\r\n                let tableMap = multilevelMap.get(tableName);\r\n                if (!tableMap.has(sequenceNumber)) {\r\n                    tableMap.set(sequenceNumber, new Set());\r\n                }\r\n                tableMap.get(sequenceNumber).add(sourceTableName);\r\n                sourceAnchorTableMap.get(tableName).add(sourceTableName);\r\n            }\r\n            if (autoGenerateGroupBy != null && autoGenerateGroupBy !== '' && autoGenerateGroupBy !== \"\") {\r\n                let tableMapun = tableuniqueGroupby.get(tableName);\r\n                if (!tableMapun.has(sequenceNumber)) {\r\n                    tableMapun.set(sequenceNumber, new Set());\r\n                }\r\n                tableMapun.get(sequenceNumber).add(autoGenerateGroupBy);\r\n            }\r\n\r\n            if (GroupBytext != null && GroupBytext !== '' && GroupBytext !== \"\") {\r\n                let GroupMapun = tableuniqueGroupbytext.get(tableName);\r\n                if (!GroupMapun.has(sequenceNumber)) {\r\n                    GroupMapun.set(sequenceNumber, new Set());\r\n                }\r\n                GroupMapun.get(sequenceNumber).add(GroupBytext);\r\n            }\r\n        }\r\n        //table name - [source table]\r\n        for (const [tableName, tableMap] of multilevelMap) {\r\n            for (const [sequenceNumber, sourceTableSet] of tableMap) {\r\n                const [validationNavigation, navigationFilters] = navigationMapping.get(\"Source Field Mapping\") || [];\r\n                const validationCategory = validationMapping.get(\"Source Field Mapping\");\r\n                const validationCriticality = \"Error\";\r\n                const sourceTableList = Array.from(sourceTableSet);\r\n\r\n                if (sourceTableList.length === 0) {\r\n                    // Case: No source anchor table\r\n                    ExcuteIBPL(validationNavigation, `The Source Table for '${tableName}' could not be found. The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                } \r\n                else if (sourceTableList.length > 1) {\r\n                    // Case: Multiple source anchor tables\r\n                    ExcuteIBPL(validationNavigation, `The table '${tableName}' has more than one Source Table against a union '${sequenceNumber}'.Please add a unique source table value for each union operator.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                }\r\n                else {\r\n                    // Case: Single source table exists\r\n                    let singleSourceTable = sourceTableList[0];\r\n                    if(singleSourceTable && singleSourceTable == \"Not specified\"){\r\n                        let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                        let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                        let errorText = `The Source Table '${singleSourceTable}' could not be found.The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                    else if (singleSourceTable && (singleSourceTable.includes('join') ||singleSourceTable.includes('JOIN'))) {\r\n                        const output = buildJoinTableColumnMap(singleSourceTable, [], (singleSourceTable.includes('|cross join') || singleSourceTable.includes('|CROSS JOIN')));\r\n                        const finalMap = UtilsbuildJoinTableColumnMap(output);\r\n\r\n                        outerLoop:\r\n                        for (const [jointable, joincolumns] of finalMap) {\r\n                            for (const columnname of joincolumns) {\r\n                                console.log(jointable, columnname);\r\n                                if(!TableList.has(jointable)){\r\n                                    let sanitizedSourceFieldName = singleSourceTable.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                                    let errorText = `The Source Table '${sanitizedSourceFieldName}' could not be found.The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                    break outerLoop;\r\n                                }\r\n                                else if(!isFieldNamePresent(jointable,columnname)){\r\n                                    let sanitizedSourceFieldName = singleSourceTable.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                                    let errorText = `The Source Table Mapping  is '${sanitizedSourceFieldName}'. The column '${columnname}' does not exist in the Source Table '${jointable}'.Please enter a valid field from the source table.`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                    break outerLoop;\r\n                                }\r\n                            }\r\n                        }\r\n                              \r\n                    }\r\n                } \r\n            }\r\n        }\r\n\r\n        // for Multiple auto Group by\r\n        for (const [tableName, tableMap] of tableuniqueGroupby) {\r\n            for (const [sequenceNumber, autoGroupBY] of tableMap) {\r\n                const [validationNavigation, navigationFilters] = navigationMapping.get(\"Source Field Mapping\") || [];\r\n                const validationCategory = validationMapping.get(\"Source Field Mapping\");\r\n                const validationCriticality = \"Error\";\r\n                const sourceGroupList = Array.from(autoGroupBY);\r\n\r\n                if (sourceGroupList.length === 0) {\r\n                    ExcuteIBPL(validationNavigation, `The table '${tableName}' has no Auto Generate Group by defined against union '${sequenceNumber}'.Please add a unique Auto Generate Group by value for each union operator.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                } \r\n                else if (sourceGroupList.length > 1) {\r\n                    ExcuteIBPL(validationNavigation, `The table '${tableName}' has more than one Auto Generate Group by defined against union.Please add a unique Auto Generate Group by value for each union operator.`, validationCategory, navigationFilters, validationCriticality, tableName);\r\n                }\r\n            }\r\n        }\r\n\r\n        const parentTable = new Set();\r\n        let uniqueInfoMap = new Map();\r\n        let deltaschema = new Map();\r\n        for (let row = 0; row < mappingsListQueryResult.rowCount; row++) {\r\n            let tableName = mappingsListQueryResult.row(row).cell(3).Name;\r\n            let isKey = mappingsListQueryResult.row(row).cell(8);\r\n            let sourceFieldName = mappingsListQueryResult.row(row).cell(10);\r\n            let sequenceNumber = mappingsListQueryResult.row(row).cell(5).Name;\r\n            let sourceTableName = getSingleSourceTable(tableName, sequenceNumber);\r\n            let autoGenerateGroupBy = getSingleGroupBy(tableName,sequenceNumber);\r\n            let GroupBytext = getSingleGroupByText(tableName,sequenceNumber);\r\n            if (sourceTableName == null || autoGenerateGroupBy==null || sourceTableName == \"Not specified\") { continue; }\r\n\r\n            if(autoGenerateGroupBy == 'Auto Generate' && isKey === false && !sourceFieldName.includes('Hardcode') && !containsSparkSqlAggFunction(sourceFieldName)){\r\n                let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                let validationNavigation = navigationMapping.get(\"Group By\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Group By\");             \r\n                let navigationFilters = navigationMapping.get(\"Group By\")[1];\r\n                let errorText = `The Source Field Mapping is '${sanitizedSourceFieldName}' and the Group By setting is '${autoGenerateGroupBy}'.Please add a valid Spark SQL aggregate function to this non-key source field mapping.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n            }\r\n            if(autoGenerateGroupBy == 'User Specified' && GroupBytext == null){\r\n                let validationNavigation = navigationMapping.get(\"Group By\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Group By\");             \r\n                let navigationFilters = navigationMapping.get(\"Group By\")[1];\r\n                let errorText = `The Auto Generate Group By setting is 'User Specified' and the User specified Group By setting is 'Null'. Please add a valid set of fields to group by in the User specified Group By cell.`;\r\n                uniqueInfoMap.set(tableName, { \r\n                    validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project \r\n                });     \r\n                //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            let sourceTableList = Array.from(sourceAnchorTableMap.get(tableName) || []);\r\n            if(sourceTableName == null && sourceFieldName != null &&!sourceFieldName.includes('Hardcode') && (sourceTableList.length == 0 || sourceTableList.length > 1)){\r\n                let validationNavigation = navigationMapping.get(\"Group By\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Group By\");             \r\n                let navigationFilters = navigationMapping.get(\"Group By\")[1];\r\n                let errorText = `The Source Table is '${tableName}' and the Auto Generate Group By setting is '${autoGenerateGroupBy}'.Please add a valid source table value required for this setting.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            else if (sourceTableList.length === 1 && sourceTableName != null && !sourceTableName.includes('join') && !sourceTableName.includes('JOIN')) {\r\n                if(!TableList.has(sourceTableName)  && sourceFieldName != null && !sourceFieldName.includes('Hardcode')){\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The Source Table '${sourceTableName}' could not be found.The table specified may not be in the Tables Included list or it may be missing from the delta lake schema.`;\r\n                    deltaschema.set(tableName, { \r\n                        validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity, version, Project \r\n                    });\r\n                    //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n            if (sourceFieldName != null && sourceFieldName.startsWith(\"UDF_\")) {\r\n                if (!sourceFieldName.startsWith(\"UDF_SequenceIDGeneration\") && !sourceFieldName.startsWith(\"UDF_ColumnValueAggregation\")){\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The Source Field Mapping is '${sanitizedSourceFieldName}'. Sequence ID gen and Column Value aggregation are the only UDF functions supported.Please enter an a valid UDF function.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                else {\r\n                    const pattern = /\\(\\{([^}]+)\\},\\{([^}]+)\\}/;\r\n                    const matches1 = sourceFieldName.match(pattern);\r\n                    if (matches1) {\r\n                        let columns1 = matches1[1].split(',').concat(matches1[2].split(','));\r\n                        columns1 = columns1.map(i => i.replace(/`/g, \"\"));\r\n                        for (let col of columns1) {                            \r\n                            if (!isFieldNamePresent(tableName,col)) {\r\n                                let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                                let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"Source Field Mapping\");\r\n                                let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                                let errorText = `The Source Field Mapping is '${sanitizedSourceFieldName}'. Sequence ID generation and Column Value aggregation are the only UDF functions supported. Please enter a valid UDF function.`;\r\n                                ExcuteIBPL(validationNavigation,errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n                            }\r\n                        }\r\n                    }                  \r\n                }\r\n            }\r\n            else if(sourceFieldName != null && (sourceFieldName.startsWith(\"COALESCE\")||sourceFieldName.startsWith(\"coalesce\") )){\r\n                const matchColease = sourceFieldName.match(/\\(([^,]+)/);\r\n                if(matchColease){\r\n                    let colnm = matchColease[1].trim();\r\n                    if(!sourceTableName.includes('join') && !sourceTableName.includes('JOIN')){\r\n                        if(!isFieldNamePresent(sourceTableName,colnm)){\r\n                            let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                            let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Error\";\r\n                            let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                            let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                            let errorText = `The Source Field Mapping  is '${sanitizedSourceFieldName}'. The column does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                            //ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The Source Field Mapping  is '${sanitizedSourceFieldName}'. The column does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n            else if(sourceFieldName !=null && sourceFieldName.startsWith(\"Hardcode\")){\r\n                const matchcoats = sourceFieldName.match(/\\((.*?)\\)/); \r\n                if(!matchcoats){\r\n                    let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                    let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                    let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                    let errorText = `The table has the Source Field Mapping set to '${sanitizedSourceFieldName}'.Please enter a valid value within single quotes inside the Hardcode function.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n                }\r\n                else{\r\n                    const content = matchcoats[1].trim();\r\n                    if (content !== null && ((content.startsWith('``') && content.endsWith('``')))){\r\n                        const cleanedContent = content.slice(1, -1);\r\n                        if(!FieldList.has(cleanedContent)){\r\n                            let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                            let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Error\";\r\n                            let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                            let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                            let errorText = `The table has the Source Field Mapping set to '${sanitizedSourceFieldName}'.Please enter a valid value within single quotes inside the Hardcode function.`;\r\n                            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        }\r\n                    }\r\n                    else if (content !== null &&!((content.startsWith(\"'\") && content.endsWith(\"'\")) ||(content.startsWith('\"') && content.endsWith('\"'))||(content.startsWith('‘') && content.endsWith('’')))){\r\n                        if (!(content.toLowerCase() === \"null\" || content === null || !isNaN(content))) {\r\n                            let sanitizedSourceFieldName = sourceFieldName.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\r\n                            let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                            let validationEntity = tableName;\r\n                            let validationCriticality = \"Error\";\r\n                            let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                            let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                            let errorText = `The table has the Source Field Mapping set to '${sanitizedSourceFieldName}'.Please enter a valid value within single quotes inside the Hardcode function.`;\r\n                            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        }               \r\n                    }\r\n                }\r\n            }\r\n            else if (sourceFieldName ==null || sourceFieldName == \"\" || sourceFieldName ==''){\r\n                let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                let errorText = `The Source Field Mapping  is '${sourceFieldName}'. The column '${sourceFieldName}' does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            else if(sourceFieldName && sourceTableName && !sourceTableName.toLowerCase().includes('join') && !isFieldNamePresent(sourceTableName, sourceFieldName) && !sourceFieldName.includes('.') && !containsSparkSqlAggFunction(sourceFieldName) && !sourceFieldName.includes('Hardcode') && !(sourceFieldName.startsWith(\"COALESCE\") || sourceFieldName.startsWith(\"coalesce\"))&& !sourceFieldName.startsWith(\"UDF_\")){\r\n                let validationNavigation = navigationMapping.get(\"Source Field Mapping\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Source Field Mapping\");             \r\n                let navigationFilters = navigationMapping.get(\"Source Field Mapping\")[1];\r\n                let errorText = `The Source Field Mapping  is '${sourceFieldName}'. The column '${sourceFieldName}' does not exist in the Source Table '${sourceTableName}'.Please enter a valid field from the source table.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n            parentTable.add(tableName);           \r\n        }\r\n\r\n        for (let [tableName, errorDetails] of uniqueInfoMap) {\r\n            ExcuteIBPL(\r\n                errorDetails.validationNavigation, \r\n                errorDetails.errorText, \r\n                errorDetails.validationCategory, \r\n                errorDetails.navigationFilters, \r\n                errorDetails.validationCriticality, \r\n                errorDetails.validationEntity, \r\n                errorDetails.version, \r\n                errorDetails.Project\r\n            );\r\n        }\r\n        for (let [tableName, errorDetails] of deltaschema) {\r\n            ExcuteIBPL(\r\n                errorDetails.validationNavigation, \r\n                errorDetails.errorText, \r\n                errorDetails.validationCategory, \r\n                errorDetails.navigationFilters, \r\n                errorDetails.validationCriticality, \r\n                errorDetails.validationEntity, \r\n                errorDetails.version, \r\n                errorDetails.Project\r\n            );\r\n        }\r\n    };\r\n\r\n    function extractMutitenantTableNames(inputString) {\r\n        let pattern = /Cascaded from:\\s*([\\w,\\s]+)/;\r\n        let match = inputString.match(pattern);\r\n        if (match) {\r\n            let tableNames = match[1];\r\n            return tableNames.split(',').map(name => name.trim());\r\n        }\r\n    \r\n        return [];\r\n    };\r\n    \r\n    function extractParts(expression) {\r\n        let tokens = [];\r\n        let current = \"\";\r\n        let inBrackets = false;\r\n        let inSingleQuotes = false;\r\n        let inDoubleQuotes = false;\r\n        const operators = new Set(['=', '!=', '<', '>', '<=', '>=']); \r\n        let i = 0;\r\n        while (i < expression.length) {\r\n            let char = expression[i];\r\n    \r\n            if (char === '[') {\r\n                inBrackets = true;\r\n            } else if (char === ']') {\r\n                inBrackets = false;\r\n            } else if (char === \"'\") {\r\n                inSingleQuotes = !inSingleQuotes;\r\n            } else if (char === '\"') {\r\n                inDoubleQuotes = !inDoubleQuotes;\r\n            }\r\n    \r\n            // If an operator is found outside quotes and brackets, split it\r\n            if ((char === '=' || char === '!' || char === '<' || char === '>') && !(inBrackets || inSingleQuotes || inDoubleQuotes)) {\r\n                if (current) {\r\n                    tokens.push(current);\r\n                    current = \"\";\r\n                }\r\n                // Handle multi-character operators like !=, >=, <=\r\n                if (i + 1 < expression.length && operators.has(expression.substring(i, i + 2))) {\r\n                    tokens.push(expression.substring(i, i + 2));\r\n                    i++; // Skip next character as it's part of the operator\r\n                } else {\r\n                    tokens.push(char);\r\n                }\r\n            } else if (char === ' ' && !(inBrackets || inSingleQuotes || inDoubleQuotes)) {\r\n                if (current) {\r\n                    tokens.push(current);\r\n                    current = \"\";\r\n                }\r\n            } else {\r\n                current += char;\r\n            }\r\n    \r\n            i++;\r\n        }\r\n    \r\n        if (current) {\r\n            tokens.push(current);\r\n        }\r\n    \r\n        return tokens;\r\n    };\r\n\r\n    function extractFirstValues(expression) {\r\n        const operators = new Set(['=', '!=', '<', '>', '<=', '>=']);\r\n        \r\n        return expression.split(/\\s+(AND|OR)\\s+/i)\r\n            .map(condition => {\r\n                const match = condition.match(/(.+?)\\s*(=|!=|<|>|<=|>=)/);\r\n                return match ? match[1].trim() : null;\r\n            })\r\n            .filter(Boolean);\r\n    }\r\n\r\n    function extractBracketedValues(str) {\r\n        const matches = str.match(/\\[(.*?)\\]/g);\r\n        if (!matches) return [null, null]; \r\n        const values = matches.map(s => s.replace(/\\[|\\]/g, ''));\r\n        return [values[0] || null, values[1] || null]; \r\n    };\r\n\r\n    function validateLSUString(s) {\r\n        // Regular expression to match the pattern '[text].[text]'\r\n        const pattern = /^\\[.*\\]\\.\\[.*\\]$/;\r\n        return pattern.test(s);\r\n    };\r\n\r\n    function allSubstringsHaveValidOperator(s) {\r\n        const allowedOperators = new Set(['=', '!=', '<', '>', '<=', '>=']);\r\n        const substrings = s.split(/\\s+AND\\s+|\\s+OR\\s+/);\r\n        return substrings.every(substring => {\r\n            const foundOperators = substring.match(/!=|<=|>=|=|<|>/g) || [];\r\n            return foundOperators.some(op => allowedOperators.has(op));\r\n        });\r\n    }\r\n\r\n    var multiTenantValidation = function(){\r\n        Log.Info(`<MassValidation> - Started Multi - Tenant Validation with ${Project} and ${version}`);\r\n\r\n        // Heirchy level extraction\r\n        let SchemaDimensionQuery = `SELECT ([_SchemaDimension].[_Dimension] * [_SchemaDimension].[_Level]) on row , () on column include memberproperties {[_SchemaDimension].[_Level],[LevelPosition]};`;\r\n        let SchemaDimensionResult = cellsetModule.createCellSet(queryModule.select(SchemaDimensionQuery));\r\n\r\n        const SchemaDimensiondMap = new Map();\r\n        for(let i =0;i<SchemaDimensionResult.rowCount;i++){\r\n            let level = SchemaDimensionResult.row(i).cell(1).Name;\r\n            let position = SchemaDimensionResult.row(i).cell(1).LevelPosition;\r\n            SchemaDimensiondMap.set(level, position);\r\n        }\r\n        // END\r\n\r\n        let multiTenantcheckQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]* {Measure.[o9EKG Multi Tenant Setup]});`;\r\n        let multiTenantcheckQueryResult = cellsetModule.createCellSet(queryModule.select(multiTenantcheckQuery));\r\n\r\n        if(multiTenantcheckQueryResult.rowCount == 1){\r\n\r\n            let ruleSetQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set] * {Measure.[o9EKG Rule Set Description]});`;\r\n            let ruleSetQueryReult = cellsetModule.createCellSet(queryModule.select(ruleSetQuery));\r\n            if(ruleSetQueryReult.rowCount ==0 ){\r\n                let validationNavigation = navigationMapping.get(\"Rule Set\")[0];\r\n                let validationEntity = Project;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Rule Set\");             \r\n                let navigationFilters = navigationMapping.get(\"Rule Set\")[1];\r\n                let errorText = `Multi-tenant enabled project '${Project}' does not have any rule sets. Data filtering will not be applied.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);       \r\n            }\r\n            \r\n            let solutionSetQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Solution Set].[Solution Set] * {Measure.[o9EKG Solution Set Description], Measure.[o9EKG Solution Set SBB]});`;\r\n            let solutionSetQueryResult = cellsetModule.createCellSet(queryModule.select(solutionSetQuery));\r\n            if(solutionSetQueryResult.rowCount == 0){\r\n                let validationNavigation = navigationMapping.get(\"Solution Set\")[0];\r\n                let validationEntity = Project;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Solution Set\");             \r\n                let navigationFilters = navigationMapping.get(\"Solution Set\")[1];\r\n                let errorText = `Multi-tenant enabled project '${Project}' does not have solution sets.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                \r\n            }\r\n            let dataRoutingQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Table Specific Rule], Measure.[o9EKG Tenant Rule]}).filter(~isNull(Measure.[o9EKG Tenant Rule]));`\r\n            let dataRoutingQueryResult = cellsetModule.createCellSet(queryModule.select(dataRoutingQuery));\r\n            if(dataRoutingQueryResult.rowCount == 0){\r\n                let validationNavigation = navigationMapping.get(\"Data Routing\")[0];\r\n                let validationEntity = Project;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Data Routing\");             \r\n                let navigationFilters = navigationMapping.get(\"Data Routing\")[1];\r\n                let errorText = `Multi-tenant enabled project '${Project}' does not have data routings generated for it.Please generate and review them before publishing the project.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n            }\r\n            let tenantRuleQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]  * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Table Specific Rule], Measure.[o9EKG Tenant Rule]});`;\r\n            let tenantRuleQueryResult = cellsetModule.createCellSet(queryModule.select(tenantRuleQuery));\r\n            let tenantRuleTableNameMap = new Map();\r\n\r\n            for(let row =0;row<tenantRuleQueryResult.rowCount;row++){\r\n                let tenantRule = tenantRuleQueryResult.row(row).cell(6);\r\n                let tableName = tenantRuleQueryResult.row(row).cell(2).Name;\r\n                if(tenantRule != \"<any>\" && tenantRule!== null){\r\n                    if(tenantRule != null && tenantRule.includes('Cascaded from')){\r\n                        let values = extractMutitenantTableNames(tenantRule);\r\n                        for(let val in values){\r\n                            if(!TableList.has(values[val])){\r\n                                let validationNavigation = navigationMapping.get(\"Tenant Rule\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Warning\";\r\n                                let validationCategory = validationMapping.get(\"Tenant Rule\");              \r\n                                let navigationFilters = navigationMapping.get(\"Tenant Rule\")[1];\r\n                                let errorText = `The Tenant Rule is '${tenantRule}' Table name '${values[val]}' does not exist in a dimension type LSU Table List of project '${Project}'.`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                            }\r\n                        }\r\n                    }\r\n                    else{\r\n                        let configList = extractParts(tenantRule);\r\n                        for(part in configList){\r\n                            Log.Info(`<MassValidation> - Started Multi - Tenant Validation with configList ${configList[part]} ${configList}`);\r\n                            if(configList[part] != null && configList[part] != \"\" && configList[part].includes('[')){\r\n                                if(validateLSUString(configList[part])){\r\n                                    if (!tenantRuleTableNameMap.has(tableName)) {tenantRuleTableNameMap.set(tableName, new Set());}\r\n                                    tenantRuleTableNameMap.get(tableName).add(configList[part]);\r\n                                    if(!FieldList.has(configList[part])){\r\n                                        let validationNavigation = navigationMapping.get(\"Rule Expression\")[0];\r\n                                        let validationEntity = tableName;\r\n                                        let validationCriticality = \"Error\";\r\n                                        let validationCategory = validationMapping.get(\"Rule Expression\");\r\n                                        let navigationFilters = navigationMapping.get(\"Rule Expression\")[1];\r\n                                        let errorText = `The Tenant Rule is '${tenantRule}' Field name '${configList[part]}' does not exist in a dimension type LSU table '${tableName}' of project '${Project}'.`;\r\n                                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                                    }\r\n                                }\r\n                                else{\r\n                                    let validationNavigation = navigationMapping.get(\"Tenant Rule\")[0];\r\n                                    let validationEntity = tableName;\r\n                                    let validationCriticality = \"Error\";\r\n                                    let validationCategory = validationMapping.get(\"Tenant Rule\");\r\n                                    let navigationFilters = navigationMapping.get(\"Tenant Rule\")[1];\r\n                                    let errorText = `The Tenant Rule is '${tenantRule}'.The dimension attribute could not be found from a set of valid dimension attributes`;\r\n                                    ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let ruleExpressionQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Rule Set].[Rule Set] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Rule Expression], Measure.[o9EKG Rule Type]});`;\r\n            let ruleExpressionQueryResult = cellsetModule.createCellSet(queryModule.select(ruleExpressionQuery));\r\n            for(let row = 0; row<ruleExpressionQueryResult.rowCount;row++){\r\n                let ruleExpression = ruleExpressionQueryResult.row(row).cell(4);\r\n                let ruleExpressionList = extractParts(ruleExpression);\r\n                for(let rule in ruleExpressionList){\r\n                    if(ruleExpressionList[rule].includes('[') && !validateLSUString(ruleExpressionList[rule])){\r\n                        let validationNavigation = navigationMapping.get(\"Rule Expression\")[0];\r\n                        let validationEntity = Project;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Rule Expression\");\r\n                        let navigationFilters = navigationMapping.get(\"Rule Expression\")[1];\r\n                        let errorText = `The Rule Expression is '${ruleExpression}'.Please enter a valid value.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                    }\r\n                    else if (/^[+\\-*/%=<>!&|^~?:]+$/.test(ruleExpressionList[rule]) && !['=', '!=', '<', '>', '<=', '>=', 'AND', 'OR'].includes(ruleExpressionList[rule])) {\r\n                        let validationNavigation = navigationMapping.get(\"Rule Expression\")[0];\r\n                        let validationEntity = Project;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Rule Expression\");\r\n                        let navigationFilters = navigationMapping.get(\"Rule Expression\")[1];\r\n                        let errorText = `The Rule Expression is '${ruleExpression}'.Please enter a valid operator.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            let tenantSpecificQueryy = `(Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}]  * [o9EKG Table].[Table Name] * [o9EKG Tenant].[Tenant] * [o9EKG Rule Set].[Rule] * {Measure.[o9EKG Table Specific Rule], Measure.[o9EKG Tenant Rule]})).filter(~isNull(Measure.[o9EKG Tenant Rule]));`;\r\n            let tenantSpecificQueryResult2 = cellsetModule.createCellSet(queryModule.select(tenantSpecificQueryy));\r\n\r\n            for(let row = 0; row<tenantSpecificQueryResult2.rowCount;row++){\r\n                let ruleExpression = tenantSpecificQueryResult2.row(row).cell(5);\r\n                let tableName = tenantSpecificQueryResult2.row(row).cell(2).Name;\r\n                if (ruleExpression !=null && ruleExpression!=\"\" && ruleExpression !='') {\r\n                    if(!allSubstringsHaveValidOperator(ruleExpression)){\r\n                        let validationNavigation = navigationMapping.get(\"Table Specific Rule\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Table Specific Rule\");\r\n                        let navigationFilters = navigationMapping.get(\"Table Specific Rule\")[1];\r\n                        let errorText = `The Table Specific Rule is '${ruleExpression}'.Please enter a valid operand does not have operand.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                    }\r\n                    else{\r\n                        let allValues = extractFirstValues(ruleExpression);\r\n                        for (let val of allValues) {\r\n                            if (!isFieldNamePresent(tableName,val)) {\r\n                                let validationNavigation = navigationMapping.get(\"Table Specific Rule 1\")[0];\r\n                                let validationEntity = tableName;\r\n                                let validationCriticality = \"Error\";\r\n                                let validationCategory = validationMapping.get(\"Table Specific Rule 1\");\r\n                                let navigationFilters = navigationMapping.get(\"Table Specific Rule 1\")[1];\r\n                                let errorText = `The Table Specific Rule is '${ruleExpression}'Field name '${val}' does not exist table '${tableName}' of project '${Project}'.`;\r\n                                ExcuteIBPL(validationNavigation, errorText, validationCategory,navigationFilters,validationCriticality,validationEntity);\r\n                            }\r\n                        }\r\n                    }\r\n                }               \r\n            }\r\n            // Cascade Validation\r\n            for(let row =0;row<tenantRuleQueryResult.rowCount;row++){\r\n                let tenantRule = tenantRuleQueryResult.row(row).cell(6);\r\n                let tableName = tenantRuleQueryResult.row(row).cell(2).Name;\r\n                if(tenantRule != \"<any>\" && tenantRule!== null){\r\n                    if(tenantRule != null && tenantRule.includes('Cascaded from')){\r\n                        let values = extractMutitenantTableNames(tenantRule);\r\n                        for(let val of values){\r\n                            let columnList = Array.from(tenantRuleTableNameMap.get(val) || new Set());\r\n                            let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n                            for(let col of columnList){\r\n                                Log.Info(`<MassValidation> - Multi-Tenant Validation with col ${col}`);\r\n                                let [tabname, colname] = extractBracketedValues(col);\r\n                                for(let col2 of fieldListResult ){\r\n                                    let [tabname2, colname2] = extractBracketedValues(col2[0]);\r\n                                    Log.Info(`<MassValidation> - Multi-Tenant Validation with col col2[0] ${col} and ${col2[0]}`);\r\n                                    if(tabname !=null && tabname2 != null && tabname === tabname2){\r\n                                        let position1 = SchemaDimensiondMap.has(col) ? SchemaDimensiondMap.get(col) : -1;\r\n                                        let position2 = SchemaDimensiondMap.has(col2[0]) ? SchemaDimensiondMap.get(col2[0]) : -1;\r\n                                        if(position1<position2){\r\n                                            let validationNavigation = navigationMapping.get(\"Rule Set\")[0];\r\n                                            let validationEntity = tableName;\r\n                                            let validationCriticality = \"Warning\";\r\n                                            let validationCategory = validationMapping.get(\"Rule Set\");             \r\n                                            let navigationFilters = navigationMapping.get(\"Rule Set\")[1];\r\n                                            let errorText = `The cascaded filter rule is '${tenantRule}'. The rule expression is at a lower level for table ${tableName}`;\r\n                                            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                                            \r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var file_insert_methodology_validation = function() {\r\n        Log.Info(`<MassValidation> - Started File Insert Validation with ${Project} and ${version}`);\r\n    \r\n        let headerRAWINMapping = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Table Group] * [o9EKG Documents].[File Name] * {Measure.[o9EKG File Insert Methodology]}).filter(measure.[o9EKG Table Included] == 1);`;\r\n        let headerRAWINMappingResult = cellsetModule.createCellSet(queryModule.select(headerRAWINMapping));\r\n    \r\n        let validationNav = navigationMapping.has(\"Field Position\") ? navigationMapping.get(\"Field Position\") : \"\";\r\n        let validationCategory = validationMapping.has(\"Field Position\") ? validationMapping.get(\"Field Position\") : \"\";\r\n        let validationNavigation = validationNav[0];\r\n        let navigationFilters = validationNav[1];\r\n    \r\n        for (let row = 0; row < headerRAWINMappingResult.rowCount; row++) {\r\n            let tableName = headerRAWINMappingResult.row(row).cell(2).Name;\r\n            let fileInsertmed = headerRAWINMappingResult.row(row).cell(5);\r\n    \r\n            if (['Position Based (Ignore Header)', 'Position Based (No Header)'].includes(fileInsertmed)) {\r\n                let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n\r\n                let fieldPositionSet = new Set();\r\n                let errors = [];\r\n                for (let index = 0; index < fieldListResult.length; index++) {\r\n                    let [fieldName, fieldId, fieldposition,fieldkey] = fieldListResult[index];\r\n    \r\n                    if (fieldposition === null || fieldposition === \"\") {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`,\r\n                            entity: tableName\r\n                        });\r\n                    } else if (!/^\\d+$/.test(fieldposition)) {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`,\r\n                            entity: tableName\r\n                        });\r\n                    } else if (fieldposition == 0) {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`,\r\n                            entity: tableName\r\n                        });\r\n                    } else if (fieldPositionSet.has(fieldposition)) {\r\n                        errors.push({\r\n                            errorText: `Field Name '${fieldName}' has a Field Position '${fieldposition}'. Please enter unique positive number for the Field Positions.`,\r\n                            entity: tableName\r\n                        });\r\n                    }\r\n    \r\n                    if (fieldposition !== null) {\r\n                        fieldPositionSet.add(fieldposition);\r\n                    }\r\n                }\r\n    \r\n                // Process all collected errors in one go\r\n                for (let error of errors) {\r\n                    ExcuteIBPL(validationNavigation, error.errorText, validationCategory, navigationFilters, \"Error\", error.entity, version, Project);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    var tenant_Data_Download = function(){\r\n\r\n        Log.Info(`<MassValidation> - Started Tenant Data Download Validation with ${Project} and ${version}`);\r\n    \r\n        let tenantDataDownload = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Table].[Table Type].[LS Download]) on row, ({Measure.[o9EKG Tenant Data Download IBPL Delimiter], Measure.[o9EKG Tenant Data Download IBPL Query]}) on column;`;\r\n        let tenantDataDownloadResult = cellsetModule.createCellSet(queryModule.select(tenantDataDownload));\r\n    \r\n        let tempLSUList = new Set();\r\n    \r\n        for(let row = 0; row<tenantDataDownloadResult.rowCount;row++){\r\n            let delimiter = tenantDataDownloadResult.row(row).cell(4);\r\n            let IBPLRule = tenantDataDownloadResult.row(row).cell(5);\r\n            let tableName = tenantDataDownloadResult.row(row).cell(2).Name;\r\n    \r\n            tempLSUList.add(tableName);           \r\n    \r\n            if(delimiter == null || delimiter == \"\" || delimiter == \" \"){\r\n                let validationNavigation = navigationMapping.get(\"Delimiter 1\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"Delimiter 1\");              \r\n                let navigationFilters = navigationMapping.get(\"Delimiter 1\")[1];\r\n                let errorText = `The table '${tableName}' has no Delimiter defined.Please add a valid Delimiter.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);                \r\n            }\r\n            if(IBPLRule == null || IBPLRule == \"\" || IBPLRule== \" \"){\r\n                let validationNavigation = navigationMapping.get(\"IBPL Query\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"IBPL Query\");              \r\n                let navigationFilters = navigationMapping.get(\"IBPL Query\")[1];\r\n                let errorText = `The table '${tableName}' has no IBPL Query defined.Please add a valid IBPL Query.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                             \r\n            }\r\n        }\r\n\r\n        for (let tableName of IncludedLSDTableList) {\r\n            if (!tempLSUList.has(tableName)) {\r\n                let validationNavigation = navigationMapping.get(\"IBPL Query\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Error\";\r\n                let validationCategory = validationMapping.get(\"IBPL Query\");\r\n                let navigationFilters = navigationMapping.get(\"IBPL Query\")[1];\r\n                let errorText = `The table '${tableName}' has no IBPL Query and Delimiter defined. Please add a valid IBPL Query and Delimiter.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n        }\r\n    };   \r\n    \r\n    var oUTRawValidation = function (){\r\n        let outrawQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Name] * [o9EKG Documents].[File Name] * [o9EKG Table].[Table Type].[OUT] ) on row, ({Measure.[o9EKG File Delimiter], Measure.[o9EKG File Source Type], Measure.[o9EKG File Target Path Param], Measure.[o9EKG File Type], Measure.[o9EKG File Encryption]}) on column;`;\r\n        let outrawQueryResult = cellsetModule.createCellSet(queryModule.select(outrawQuery));\r\n        let outTableList = new Set();\r\n        for(let row = 0; row<outrawQueryResult.rowCount;row++){\r\n            let fileName = outrawQueryResult.row(row).cell(3).Name;\r\n            let tableName = outrawQueryResult.row(row).cell(2).Name;\r\n            let fileDelimiter = outrawQueryResult.row(row).cell(5);\r\n            let sourceType = outrawQueryResult.row(row).cell(6);\r\n            let TargetParam = outrawQueryResult.row(row).cell(7);\r\n            let fileType = outrawQueryResult.row(row).cell(8);\r\n            let fileEncy = outrawQueryResult.row(row).cell(9);\r\n            outTableList.add(tableName);\r\n\r\n            if(fileName != 'Not Applicable'){\r\n                if(sourceType == 'External API'){\r\n                    if(fileType != null){\r\n                        let validationNavigation = navigationMapping.get(\"File Type OUT\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"File Type OUT\");              \r\n                        let navigationFilters = navigationMapping.get(\"File Type OUT\")[1];\r\n                        let errorText = `Table '${tableName}' has File Type as '${fileType}'.The File Type should be empty for 'External API' source type. `;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        \r\n                    }\r\n                    if (fileDelimiter != null){\r\n                        let validationNavigation = navigationMapping.get(\"Delimiter\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Delimiter\");              \r\n                        let navigationFilters = navigationMapping.get(\"Delimiter\")[1];\r\n                        let errorText = `Table '${tableName}' has Delimiter as '${fileDelimiter}'.The Delimiter should be empty for 'External API' source type.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                        \r\n                    }\r\n                    if (TargetParam!= null){\r\n                        let validationNavigation = navigationMapping.get(\"Target Path\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Target Path\");              \r\n                        let navigationFilters = navigationMapping.get(\"Target Path\")[1];\r\n                        let errorText = `Table '${tableName}' has Target Path is '${TargetParam}'.The Target Path should be empty for 'External API' source type.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                }\r\n                else if(sourceType !=null){\r\n                    if(fileType == null){\r\n                        let validationNavigation = navigationMapping.get(\"File Type OUT\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"File Type OUT\");              \r\n                        let navigationFilters = navigationMapping.get(\"File Type OUT\")[1];\r\n                        let errorText = `Table '${tableName}' has sourceType '${sourceType}'. So Please add a Valid File Type. `;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                    if (fileDelimiter == null){\r\n                        let validationNavigation = navigationMapping.get(\"Delimiter\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Delimiter\");              \r\n                        let navigationFilters = navigationMapping.get(\"Delimiter\")[1];\r\n                        let errorText = `Table '${tableName}' has sourceType '${sourceType}'. So Please add a Valid File Delimiter.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);   \r\n                    }\r\n                    if (TargetParam == null){\r\n                        let validationNavigation = navigationMapping.get(\"Target Path\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Target Path\");              \r\n                        let navigationFilters = navigationMapping.get(\"Target Path\")[1];\r\n                        let errorText = `Table '${tableName}' has sourceType '${sourceType}'. So Please add a Valid Target Path.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n                    }\r\n                }\r\n                if (fileEncy !== null && ['SingleInsertAPI', 'SingleInsertAPI_Resilient', 'BulkInsertAPI', 'BulkInsertAPI_Resilient', 'External API'].includes(sourceType)) {\r\n                    let validationNavigation = navigationMapping.get(\"File Encryption Method\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"File Encryption Method\");             \r\n                    let navigationFilters = navigationMapping.get(\"File Encryption Method\")[1];\r\n                    let errorText = `The File Encryption setting is '${fileEncy}' with the File Source set to '${sourceType}'.Please set the File encryption as empty for API based source data.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let tableName of IncludedOutTableList) {\r\n            if(!outTableList.has(tableName)){\r\n                let validationNavigation = navigationMapping.get(\"Table Name\")[0];\r\n                let validationEntity = tableName;\r\n                let validationCriticality = \"Warning\";\r\n                let validationCategory = validationMapping.get(\"Table Name\");              \r\n                let navigationFilters = navigationMapping.get(\"Table Name\")[1];\r\n                let errorText = `The Specified OUT Table '${tableName}' does not exist in OUT RAW view.`;\r\n                ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n            }\r\n        }\r\n    };\r\n\r\n    var outBoundsFieldsPosition = function(){\r\n        let tableListQuery = `Select ([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]*[o9EKG Table].[Table Name]*[o9EKG Table].[Table Type].filter(#.Name in {\"LS Download\",\"OUT\"})*{Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n        let tableListResultLength = tableListResult.rowCount; \r\n        //End    \r\n        for (let row = 0; row < tableListResultLength; row++) {\r\n            let tableName = tableListResult.row(row).cell(2).Name;\r\n            let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n            let fieldPositionSet = new Set();\r\n            for(let index = 0; index < fieldListResult.length; index++){\r\n                let fieldposition = fieldListResult[index][2]; \r\n                let fieldName = fieldListResult[index][0];\r\n                if ((fieldposition=== null || fieldposition === \"\") ) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);                \r\n                }\r\n                if ((fieldposition!== null && !/^\\d+$/.test(fieldposition))) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                }\r\n                if ((fieldposition!== null && fieldPositionSet.has(fieldposition))) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}'. Please enter unique positive number for the Field Positions.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);    \r\n                }\r\n                if ((fieldposition!== null && fieldposition == 0)) {\r\n                    let validationNavigation = navigationMapping.get(\"Field Position\")[0];\r\n                    let validationEntity = tableName;\r\n                    let validationCriticality = \"Error\";\r\n                    let validationCategory = validationMapping.get(\"Field Position\");              \r\n                    let navigationFilters = navigationMapping.get(\"Field Position\")[1];\r\n                    let errorText = `Field Name '${fieldName}' has a Field Position '${fieldposition}' .The expected Field Position value is a positive number.`;\r\n                    ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);           \r\n                }\r\n                if(fieldposition!= null){fieldPositionSet.add(fieldposition);}\r\n            }\r\n        }\r\n    };\r\n\r\n    var lsDimCheck = function(){\r\n        Log.Info(`<MassValidation> - Started LS Dim Check with ${Project} and ${version}`);\r\n\r\n        let projectDimCheckQuery = `Select ([o9EKG Customer].[Project Name].[${Project}] * [Version].[Version Name].[${version}] ) on row, ({Measure.[o9EKG Master Data Access]}) on column;`;\r\n        let projectDimCheckQueryResult = cellsetModule.createCellSet(queryModule.select(projectDimCheckQuery));\r\n        if(projectDimCheckQueryResult.rowCount == 0){\r\n            let validationNavigation = navigationMapping.get(\"Master Data Access 1\")[0];\r\n            let validationEntity = Project;\r\n            let validationCriticality = \"Warning\";\r\n            let validationCategory = validationMapping.get(\"Master Data Access 1\");              \r\n            let navigationFilters = navigationMapping.get(\"Master Data Access 1\")[1];\r\n            let errorText = `The Master Data Access Type is missing for Project '${Project}'.Please set a valid value from the dropdown list.`;\r\n            ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n        }\r\n        else{\r\n            let projectDimCheckValue = projectDimCheckQueryResult.row(0).cell(2);\r\n            if(projectDimCheckValue == 'LSExternalTable'){\r\n                let tableListQuery = `Select ([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]* [o9EKG Table].[Table Type].[LS_Upload].[Table Name] * {Measure.[o9EKG LS GC Pipeline Target], Measure.[o9EKG LS GC Sync Direction], Measure.[o9EKG LS Table Type],  Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1 && Measure.[o9EKG LS Table Type] == \"Dimension\");`;\r\n                let tableListResult = cellsetModule.createCellSet(queryModule.select(tableListQuery));\r\n                for(let row = 0 ; row <tableListResult.rowCount; row++){\r\n                    let tableName = tableListResult.row(row).cell(2).Name;\r\n                    let LSGCSyncDirection = tableListResult.row(row).cell(4);\r\n                    let LSGCPipelineTarget = tableListResult.row(row).cell(3);\r\n                    if(LSGCSyncDirection != 'External' || LSGCPipelineTarget!= 'Tenant'){\r\n                        let validationNavigation = navigationMapping.get(\"Master Data Access\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Master Data Access\");              \r\n                        let navigationFilters = navigationMapping.get(\"Master Data Access\")[1];\r\n                        let errorText = `The table '${tableName}' has the Master Data Access setting in the Table Settings screen as '${LSGCSyncDirection}' and '${LSGCPipelineTarget}', but LS GC Sync Direction should be 'External' and LS GC Pipeline Target should be 'Tenant'.Please Update your Settings.`;\r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    }\r\n                }\r\n            }\r\n        }       \r\n    };\r\n\r\n    function extractParameters2(vlookupFormula) {\r\n        const pattern = /\\{([^}]*)\\}/g;\r\n        let matches = [];\r\n        let match;\r\n        while ((match = pattern.exec(vlookupFormula)) !== null) {\r\n            matches.push(match[1]);\r\n        }\r\n        return matches;\r\n    };\r\n\r\n    function cleanJoinSyntax2(inputString) {\r\n        const parts = inputString.split(/\\s+/);\r\n        const cleanedParts = [];\r\n    \r\n        for (let i = 0; i < parts.length; i++) {\r\n            const part = parts[i].toLowerCase();\r\n    \r\n            if (part === \"inner\" && i + 1 < parts.length && parts[i + 1].toLowerCase() === \"join\") {\r\n                cleanedParts.push(\"inner join\");\r\n                i++; // skip the next word\r\n            } else if (part === \"left\" && i + 1 < parts.length && parts[i + 1].toLowerCase() === \"join\") {\r\n                cleanedParts.push(\"left join\");\r\n                i++; // skip the next word\r\n            } else {\r\n                cleanedParts.push(parts[i].trim());\r\n            }\r\n        }\r\n    \r\n        let cleanedString = cleanedParts.join(\" \");\r\n        cleanedString = cleanedString.replace(/ \\| /g, \"|\").replace(/\\| /g, \"|\").replace(/ \\|/g, \"|\");\r\n    \r\n        return cleanedString;\r\n    };\r\n\r\n    var optionalLeftJoin = function(){\r\n        Log.Info(`<MassValidation> - Started Optional LeftJoin Check with ${Project} and ${version}`);\r\n\r\n        let optionalLeftJoinQuery = `Select ( [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type] * [o9EKG Table].[Table Group] * [o9EKG Table].[Table Name] * [o9EKG Table].[Field ID] * [Sequence].[Sequence] ) on row,  ({Measure.[o9EKG Field Name], Measure.[o9EKG Source Field Mapping], Measure.[o9EKG SQL Join Anchor Table]}) on column  where {[Version].[Version Name].[${version}]}.filter( Measure.[o9EKG Field Included] == 1 );`;\r\n        let optionalLeftJoinQueryResult = cellsetModule.createCellSet(queryModule.select(optionalLeftJoinQuery));\r\n        const sourceAnchorTableMap = new Map();\r\n\r\n        const errorList = [];\r\n        for (let row = 0; row < optionalLeftJoinQueryResult.rowCount; row++) {\r\n            let tableCell3 = optionalLeftJoinQueryResult.row(row).cell(3);\r\n            let tableName = (tableCell3 && tableCell3.Name) ? tableCell3.Name : \"\"; // Safe access\r\n\r\n            let tableCell8 = optionalLeftJoinQueryResult.row(row).cell(8);\r\n            let sourceTableName = (tableCell8 && tableCell8.Name) ? tableCell8.Name : (tableCell8 || \"\"); \r\n\r\n            sourceTableName = cleanJoinSyntax2(sourceTableName);\r\n\r\n            if (!sourceAnchorTableMap.has(tableName)) {\r\n                sourceAnchorTableMap.set(tableName, new Set());\r\n            }\r\n            if (typeof sourceTableName === \"string\" && (sourceTableName.includes(\"left join\") || sourceTableName.includes(\"LEFT JOIN\"))) { \r\n                let tables = sourceTableName.split(\"|\");\r\n\r\n                for (let i = 1; i < tables.length; i++) {\r\n                    let lookup = tables[i];\r\n\r\n                    if (lookup != null && (lookup.startsWith(\"left join\")|| sourceTableName.includes(\"LEFT JOIN\")) && extractParameters2(lookup).length === 4) {\r\n                        let [param1, param2, param3, param4] = extractParameters2(lookup);\r\n                        let fieldList = Array.from(tableSourceFieldMap.get(tableName) || []);\r\n                        let inputFields = Array.from(new Set(param4.split(\",\")));\r\n\r\n                        for (let var1 of inputFields) {\r\n                            let flag = false;\r\n                            for (let var2 of fieldList) {\r\n                                if (var2.includes(var1) && (var2.includes(\"COALESCE\")|| var2.includes(\"coalesce\"))) {\r\n                                    flag = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!flag) {\r\n                                let errorText = `The Source Table is '${sourceTableName}' This operation may result in null values. Please consider using the COALESCE function for the '${var1}' field.`;\r\n                                errorList.push({ errorText, tableName, var1 });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const uniqueErrors = new Map();\r\n        (errorList || []).forEach(({ errorText, tableName, var1 }) => {\r\n            // Create a unique key based on relevant properties\r\n            let key = `${errorText}|${tableName}|${var1}`;\r\n\r\n            // Add to map if the key doesn't exist\r\n            if (!uniqueErrors.has(key)) {\r\n                uniqueErrors.set(key, { errorText, tableName, var1 });\r\n            }\r\n        });\r\n\r\n        // Convert the unique values back to an array and iterate\r\n        for (let { errorText, tableName, var1 } of uniqueErrors.values()) {\r\n            let sourceFieldMapping = navigationMapping.get(\"Source Field Mapping\") || [];\r\n            let validationNavigation = sourceFieldMapping[0] || null;\r\n            let navigationFilters = sourceFieldMapping[1] || null;\r\n\r\n            let validationEntity = tableName;\r\n            let validationCriticality = \"Error\";\r\n            let validationCategory = validationMapping.get(\"Source Field Mapping\") || null;\r\n\r\n            if (validationNavigation && validationCategory) {\r\n                ExcuteIBPL(\r\n                    validationNavigation,\r\n                    errorText,\r\n                    validationCategory,\r\n                    navigationFilters,\r\n                    validationCriticality,\r\n                    validationEntity,\r\n                    version,\r\n                    Project\r\n                );\r\n            }\r\n        }           \r\n    };  \r\n        \r\n    var lsuFactValidation = function() {\r\n        Log.Info(`<MassValidation> - Started lsu Fact Validation with ${Project} and ${version}`);\r\n        let lsutableListQuery = `Select ([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]* [o9EKG Table].[Table Type].[LS_Upload].[Table Name] * {Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1 && Measure.[o9EKG LS Table Type] == \"Fact\");`;\r\n        let lsutableListQueryResult = cellsetModule.createCellSet(queryModule.select(lsutableListQuery));\r\n        for (let row = 0; row < lsutableListQueryResult.rowCount; row++) {\r\n            let tableName = lsutableListQueryResult.row(row).cell(2).Name;\r\n            let fieldListResult = FieldDetailsMap.has(tableName) ? FieldDetailsMap.get(tableName) : [];\r\n            let lsuFact = new Set();\r\n            for (let field of fieldListResult) {\r\n                if(field.includes(\".\")){\r\n                    let fieldName = (field && field[0]) ? field[0] : \"\";\r\n                    let match = fieldName.match(/\\[([^\\]]+)\\]/);\r\n                    let extractedValue = match ? match[1] : \"\"; \r\n                    if (lsuFact.has(extractedValue)) {\r\n                        let validationNavigation = navigationMapping.get(\"Column Count\")[0];\r\n                        let validationEntity = tableName;\r\n                        let validationCriticality = \"Error\";\r\n                        let validationCategory = validationMapping.get(\"Column Count\");\r\n                        let navigationFilters = navigationMapping.get(\"Column Count\")[1];\r\n                        let errorText = `Table '${tableName}' has field '${fieldName}' of the same dimension. The expected value for a fact type table is one attribute per dimension.`;\r\n        \r\n                        ExcuteIBPL(validationNavigation, errorText, validationCategory, navigationFilters, validationCriticality, validationEntity);\r\n                    } else {\r\n                        lsuFact.add(extractedValue);\r\n                    }\r\n\r\n                }\r\n                \r\n            }\r\n        }\r\n    };\r\n    \r\n    var MassValidationMainFunction = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Project = parsedParams.Project;\r\n        version = parsedParams.version;\r\n        Log.Info(`<MassValidation>-Started Mass Validation Main Function Plugin with ${Project} and ${version}`);\r\n\r\n        // Clear Error Details\r\n        let queryDeleteMassValidationError = `scope: ([Version].[Version Name].[${version}] * [o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Customer].[Project Name].[${Project}] ) ;\r\n            Measure.[o9EKG Error Text] = Null ;\r\n            Measure.[o9EKG Navigation Filters] = Null ;\r\n            Measure.[o9EKG Validation Category] = Null;\r\n            Measure.[o9EKG Validation Criticality] = Null;\r\n            Measure.[o9EKG Validation Entity] = Null;\r\n            Measure.[o9EKG Validation Navigation] = Null;\r\n            Measure.[o9EKG Validation Timestamp] = Null;\r\n            Measure.[o9EKG Validation User] = Null;\r\n            end scope ;`;\r\n\r\n        Log.Info(`<MassValidation>-queryDeleteMassValidationError ${queryDeleteMassValidationError}`);\r\n        var queryCreateMassValidationResponse = queryModule.update(queryDeleteMassValidationError);\r\n        Log.Info(`<MassValidation>-queryDeleteMassValidationErrorResponse ${queryDeleteMassValidationError}`);\r\n        //End\r\n\r\n        // 2. Auto-populate hierarchy checks\r\n        const autoPopulateHierarchyQuery =`EXEC plugin instance o9EKGLSUTable for measures {[o9EKG LS Table Type]} using scope (&CWV * [o9EKG Customer].[Project Name].[${Project}])using arguments {([ExecutionMode], \"LightWeight\")};`;\r\n        var autoPopulateHierarchyQueryResponse = queryModule.update(autoPopulateHierarchyQuery);\r\n        Log.Info(`<MassValidation>-queryDeleteMassValidationErrorResponse ${autoPopulateHierarchyQueryResponse}`);\r\n\r\n        //Fetch current instance of Error Report for specific Project and version.\r\n        let errorListQuery = `Select ([o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Customer].[Project Name].[${Project}] * [Version].[Version Name].[${version}] ) on row, ({Measure.[o9EKG Error Text], Measure.[o9EKG Navigation Filters], Measure.[o9EKG Validation Category], Measure.[o9EKG Validation Criticality], Measure.[o9EKG Validation Entity], Measure.[o9EKG Validation Navigation]}) on column;`;\r\n        let errorListResult = cellsetModule.createCellSet(queryModule.select(errorListQuery));\r\n        let errorListResultLength = errorListResult ? errorListResult.rowCount : 0;\r\n        let sequenceNumber = errorListResultLength+1;\r\n        Log.Info(`<MassValidation>- errorListResultLength: ${errorListQuery} `);\r\n        //End\r\n\r\n        // Fetch Mappings for o9EKG Dim Validation Type versus Dim Validation Category\r\n        let validationMappingQuery = `Select([o9EKG Validation].[o9EKG Dim Validation Category]*[o9EKG Validation].[o9EKG Dim Validation Type]);`;\r\n        let validationMappingQueryResult = cellsetModule.createCellSet(queryModule.select(validationMappingQuery));\r\n        \r\n        for (let row = 0; row < validationMappingQueryResult.rowCount; row++) {\r\n            let validationKey = validationMappingQueryResult.row(row).cell(1).Name;\r\n            let value= validationMappingQueryResult.row(row).cell(0).Name;            \r\n            validationMapping.set(validationKey, value);\r\n            Log.Info(`<MassValidation>- validationMappingValue: ${validationKey} ${value}`);\r\n        }\r\n        // End\r\n\r\n        // Fetch View ID \r\n        let viewIDQuery = `Select ([Version].[Version Name].[${version}] * [o9EKG Validation].[o9EKG Dim Validation Type] * [o9EKG Error Navigation].[o9EKG View ID] * [o9EKG Navigation Filters].[o9EKG Target Filter Info] ) on row, ({Measure.[o9EKG Validation Mapping]}) on column;`;\r\n        let viewIDQueryResult = cellsetModule.createCellSet(queryModule.select(viewIDQuery));\r\n        Log.Info(`<MassValidation>- View ID Query Result: ${viewIDQueryResult}`);\r\n       \r\n        for (let row = 0; row < viewIDQueryResult.rowCount; row++) {\r\n            let validationKey = viewIDQueryResult.row(row).cell(1).Name;  \r\n            let viewID = viewIDQueryResult.row(row).cell(2).Name;\r\n            let TargetFilterInfo = viewIDQueryResult.row(row).cell(3).Name;\r\n            let validationSeq = viewIDQueryResult.row(row).cell(4).Name;            \r\n            // Store values as an array in the map\r\n            navigationMapping.set(validationKey, [viewID, TargetFilterInfo, validationSeq]);\r\n            Log.Info(`<MassValidation> - validationMappingValue: Key=${validationKey}, ViewID=${viewID}, TargetFilterInfo=${TargetFilterInfo}, ValidationSeq=${validationSeq}`);\r\n        }\r\n        //End\r\n\r\n        // Fetching Ignore Errors\r\n        let ignoreErrorQuery = `Select([Version].[Version Name].[${version}]*[o9EKG Customer].[Project Name].[${Project}]*[o9EKGSequence].[o9EKGSequenceNumber]) on row, \r\n({Measure.[o9EKG Ignore Errors Timestamp], Measure.[o9EKG Ignore Flag], Measure.[o9EKG Ignored Category], Measure.[o9EKG Ignored Criticality], Measure.[o9EKG Ignored Entity], Measure.[o9EKG Ignored Error Text], Measure.[o9EKG Ignored Errors User], Measure.[o9EKG Ignored Navigation], Measure.[o9EKG Ignored Navigation Filters]}) on column;`;\r\n        let ignoreErrorQueryResult = cellsetModule.createCellSet(queryModule.select(ignoreErrorQuery));\r\n\r\n        for(var row = 0; row < ignoreErrorQueryResult.rowCount ;row++){\r\n            let ignoredCategory = ignoreErrorQueryResult.row(row).cell(5);\r\n            let ignoredCriticality = ignoreErrorQueryResult.row(row).cell(6);\r\n            let ignoredEntity = ignoreErrorQueryResult.row(row).cell(7);\r\n            let ignoredErrorText = ignoreErrorQueryResult.row(row).cell(8);\r\n            let ignoredNavigation = ignoreErrorQueryResult.row(row).cell(10);\r\n            let ignoredNavigationFilters = ignoreErrorQueryResult.row(row).cell(11);\r\n            let sequence = Number(ignoreErrorQueryResult.row(row).cell(2).Name) || 0;\r\n            //validationNavigation,errorText,validationCategory,navigationFilters,validationCriticality,validationEntity\r\n\r\n            let key = JSON.stringify([ignoredNavigation, ignoredErrorText, ignoredCategory, ignoredNavigationFilters, ignoredCriticality, ignoredEntity]);\r\n            ignoreErrorMap.set(\r\n                key,\r\n                sequence\r\n            );\r\n            ignoresequenceList.push(sequence);\r\n            errorNumber = Math.max(errorNumber, sequence);\r\n        }\r\n        //End\r\n\r\n        // populate OUT Table List\r\n        let outIncludedtable = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type].[OUT].[Table Name] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let outIncludedtableResult = cellsetModule.createCellSet(queryModule.select(outIncludedtable));\r\n        for (let row = 0; row < outIncludedtableResult.rowCount; row++) {\r\n            IncludedOutTableList.add(outIncludedtableResult.row(row).cell(2).Name);\r\n        }\r\n\r\n        // populate LSD Table List\r\n        let lsDIncludedtable = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type].[LS Download].[Table Name] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let lsDIncludedtableResult = cellsetModule.createCellSet(queryModule.select(lsDIncludedtable));\r\n        for (let row = 0; row < lsDIncludedtableResult.rowCount; row++) {\r\n            IncludedLSDTableList.add(lsDIncludedtableResult.row(row).cell(2).Name);\r\n        }\r\n\r\n        // populate LSU Table List\r\n        let lsuIncludedtable = `Select ([Version].[Version Name].[${version}] * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Table].[Table Type].[LS_Upload].[Table Name] * { Measure.[o9EKG Table Included]}).filter(Measure.[o9EKG Table Included] == 1);`;\r\n        let lsuIncludedtableResult = cellsetModule.createCellSet(queryModule.select(lsuIncludedtable));\r\n        for (let row = 0; row < lsuIncludedtableResult.rowCount; row++) {\r\n            IncludedLSUTableList.add(lsuIncludedtableResult.row(row).cell(2).Name);\r\n        }\r\n\r\n        ValidateFieldname();\r\n        DuplicateDataHandling();\r\n        HierarchyCheck();\r\n        GCPipelineTarget();\r\n        RAWINValidation();\r\n        file_insert_methodology_validation();\r\n        tenant_Data_Download();\r\n        oUTRawValidation();\r\n        outBoundsFieldsPosition();\r\n        lsDimCheck();\r\n        fieldLevelMappingValidation();\r\n        optionalLeftJoin();\r\n        multiTenantValidation();\r\n        lsuFactValidation();\r\n    };\r\n    return {\r\n        MassValidationMainFunction: MassValidationMainFunction\r\n    };\r\n});",
    "ModuleName": "o9.EKG.MassValidationJS",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "1925a189-7856-d814-0097-c5483161317e",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213090,
    "Description": "massValidation",
    "Documentation": "define('o9.ekgconfig.massValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var massValidation = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    \r\n\r\n    var querynullValidationMeasure = 'DELETE DATA FOR MODEL [o9EKG Validation Errors] WHERE {Version.[Version Name].[CurrentWorkingView], [o9EKG Customer].[Project Name].['+ parsedParams.Project +']};';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : Delete Data query = \" + querynullValidationMeasure);\r\n    queryModule.update(querynullValidationMeasure);\r\n\r\n    var LsuTable = 'EXEC plugin instance o9EKGLSUTable for measures {[o9EKG LS Table Type]}  using scope (&CWV * [o9EKG Customer].[Project Name].['+ parsedParams.Project +'] );';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : Auto Populate Hierarchy Checks = \" + LsuTable);\r\n    queryModule.update(LsuTable);\r\n\r\n    var DLTable = 'EXEC plugin instance o9EKGLSUTable for measures {[o9EKG LS Table Type]}  using scope (&CWV * [o9EKG Customer].[Project Name].['+ parsedParams.Project +'] );';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : Auto populate Master Data Checks = \" + DLTable);\r\n    queryModule.update(DLTable);\r\n\r\n    var executeMassValidation = 'Exec plugin instance o9EKGPython_Mass_Validation for measures {[o9EKG Field Name]}  using scope (&CWV * [o9EKG Customer].[Project Name].['+ parsedParams.Project +'] ) ;';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : query formed = \" + executeMassValidation);\r\n    queryModule.update(executeMassValidation);\r\n\r\n    }\r\n      return {\r\n        massValidation: massValidation\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.massValidation', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var massValidation = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    \r\n\r\n    var querynullValidationMeasure = 'DELETE DATA FOR MODEL [o9EKG Validation Errors] WHERE {Version.[Version Name].[CurrentWorkingView], [o9EKG Customer].[Project Name].['+ parsedParams.Project +']};';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : Delete Data query = \" + querynullValidationMeasure);\r\n    queryModule.update(querynullValidationMeasure);\r\n\r\n    var LsuTable = 'EXEC plugin instance o9EKGLSUTable for measures {[o9EKG LS Table Type]}  using scope (&CWV * [o9EKG Customer].[Project Name].['+ parsedParams.Project +'] );';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : Auto Populate Hierarchy Checks = \" + LsuTable);\r\n    queryModule.update(LsuTable);\r\n\r\n    var DLTable = 'EXEC plugin instance o9EKGLSUTable for measures {[o9EKG LS Table Type]}  using scope (&CWV * [o9EKG Customer].[Project Name].['+ parsedParams.Project +'] );';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : Auto populate Master Data Checks = \" + DLTable);\r\n    queryModule.update(DLTable);\r\n\r\n    var executeMassValidation = 'Exec plugin instance o9EKGPython_Mass_Validation for measures {[o9EKG Field Name]}  using scope (&CWV * [o9EKG Customer].[Project Name].['+ parsedParams.Project +'] ) ;';\r\n    \r\n    Log.Info(\"<EKG - Mass Validation Logs > : query formed = \" + executeMassValidation);\r\n    queryModule.update(executeMassValidation);\r\n\r\n    }\r\n      return {\r\n        massValidation: massValidation\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.massValidation",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "3c290e9f-3846-2a16-f624-3d9b034f2c41",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213091,
    "Description": "validatePipelineTableMapping",
    "Documentation": "define('o9.EKG.validatePipelineTableMapping', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validatePipelineTableMapping = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const pipelineList = parsedParams.Pipeline;\r\n\r\n        pipelineList.map((pipeline) => {\r\n            const selectQuery = `Select (&CWV * [o9EKG Customer].[Project Name] * [o9EKG Table].[Table Name] * [o9EKG Pipeline].[Pipeline Name].[${pipeline}] ) on row, \r\n({ Measure.[o9EKG Valid Pipeline Table Mapping]}) on column where {Measure.[o9EKG Valid Pipeline Table Mapping] == 1};`;\r\n\r\n            const pipelineTableCellSet = cellsetModule.createCellSet(queryModule.select(selectQuery));\r\n\r\n            if (pipelineTableCellSet.rowCount > 0) {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'You cannot delete the pipeline if there are tables associated with it' };\r\n                return;\r\n            }\r\n\r\n        });\r\n        \r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        validatePipelineTableMapping: validatePipelineTableMapping\r\n    };\r\n})",
    "Code": "define('o9.EKG.validatePipelineTableMapping', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validatePipelineTableMapping = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const pipelineList = parsedParams.Pipeline;\r\n\r\n        pipelineList.map((pipeline) => {\r\n            const selectQuery = `Select (&CWV * [o9EKG Customer].[Project Name] * [o9EKG Table].[Table Name] * [o9EKG Pipeline].[Pipeline Name].[${pipeline}] ) on row, \r\n({ Measure.[o9EKG Valid Pipeline Table Mapping]}) on column where {Measure.[o9EKG Valid Pipeline Table Mapping] == 1};`;\r\n\r\n            const pipelineTableCellSet = cellsetModule.createCellSet(queryModule.select(selectQuery));\r\n\r\n            if (pipelineTableCellSet.rowCount > 0) {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'You cannot delete the pipeline if there are tables associated with it' };\r\n                return;\r\n            }\r\n\r\n        });\r\n        \r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        validatePipelineTableMapping: validatePipelineTableMapping\r\n    };\r\n})",
    "ModuleName": "o9.EKG.validatePipelineTableMapping",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "18035eda-e5c9-208d-b13a-94c2fdced222",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213092,
    "Description": "Validate Profile Name for multi tenant",
    "Documentation": "define('o9.EKG.validateProfileName', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateProfileName = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const ProfileName = parsedParams.Name;\r\n\r\n        Log.Info(\"Started validateProfileName Plugin\");\r\n\r\n\r\n        // Check for duplicate Tenant Name:\r\n        let duplicateProfileNameQuery = `Select (&CWV * [o9EKG Solution Set].[Solution Set] * [o9EKG Rule Set].[Rule Set] * [o9EKG Tenant].[Profile].[${ProfileName}] * {Measure.[o9EKG Tenant Description]}) where {[o9EKG Customer].[Project Name].[${Project}]};`;\r\n        let duplicateProfileName = cellsetModule.createCellSet(queryModule.select(duplicateProfileNameQuery));\r\n\r\n        if (duplicateProfileName.rowCount > 0) {\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Profile already added!' };\r\n            return;\r\n        }\r\n    };\r\n    return {\r\n        validateProfileName: validateProfileName\r\n    };\r\n})",
    "Code": "define('o9.EKG.validateProfileName', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateProfileName = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const ProfileName = parsedParams.Name;\r\n\r\n        Log.Info(\"Started validateProfileName Plugin\");\r\n\r\n\r\n        // Check for duplicate Tenant Name:\r\n        let duplicateProfileNameQuery = `Select (&CWV * [o9EKG Solution Set].[Solution Set] * [o9EKG Rule Set].[Rule Set] * [o9EKG Tenant].[Profile].[${ProfileName}] * {Measure.[o9EKG Tenant Description]}) where {[o9EKG Customer].[Project Name].[${Project}]};`;\r\n        let duplicateProfileName = cellsetModule.createCellSet(queryModule.select(duplicateProfileNameQuery));\r\n\r\n        if (duplicateProfileName.rowCount > 0) {\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Profile already added!' };\r\n            return;\r\n        }\r\n    };\r\n    return {\r\n        validateProfileName: validateProfileName\r\n    };\r\n})",
    "ModuleName": "o9.EKG.validateProfileName",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "cddecc03-931e-feef-9727-62c4e33641b1",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213093,
    "Description": "validateFileNameRename",
    "Documentation": "define('o9.EKG.validateFileNameRename', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validateFileNameRename = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        const currentFileNam = parsedParams.SelectedFile;\r\n        const currentProjec = parsedParams.ProjectName;\r\n        const currentFileType = parsedParams.fileType;\r\n        const currentFileTypeLower = currentFileType.toLowerCase();\r\n\r\n        let newFileName = parsedParams.NewFileName;\r\n        newFileName = newFileName.replace(/\"/g, '\\\\\"');\r\n\r\n        Log.Info(\"Started validateFileNameRename Plugin\");\r\n\r\n        const newFileNameWithoutExtension = newFileName.substring(0, newFileName.lastIndexOf('.'));\r\n        const newFileExtension = newFileName.substring(newFileName.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n        // Fetch all existing file names\r\n        let allFilesQuery = `Select ([o9EKG Customer].[Project Name].[${currentProjec}]*[o9EKG Documents].[File Name]* &CWV *[o9EKG Table].[Table Name] *{Measure.[o9EKG Table Included],Measure.[o9EKG File Type]}).filter(Measure.[o9EKG Table Included]==1 );`;\r\n        let allFilesCellSet = cellsetModule.createCellSet(queryModule.select(allFilesQuery));\r\n        const fileRow = allFilesCellSet.rowCount;\r\n\r\n        // Check if the new file name (case-sensitive) with extension (case-insensitive) is already associated with another table\r\n        for (let fileIdx = 0; fileIdx < fileRow; fileIdx++) {\r\n            let existingFileName = allFilesCellSet.row(fileIdx).cell(1).Name;\r\n            const existingFileNameWithoutExtension = existingFileName.substring(0, existingFileName.lastIndexOf('.'));\r\n            const existingFileExtension = existingFileName.substring(existingFileName.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n            if (newFileNameWithoutExtension === existingFileNameWithoutExtension && newFileExtension === existingFileExtension) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: `Rename Failed: File Name [${newFileName}] is already associated with another table. Please enter a different file name.`\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n        }\r\n\r\n        if (newFileName.endsWith('.')) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File name cannot end with a dot.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Allow .dsv and .csv file extensions if current file type is either csv or dsv\r\n        if (currentFileTypeLower === 'csv' || currentFileTypeLower === 'dsv') {\r\n            if (!(newFileExtension === 'csv' || newFileExtension === 'dsv')) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: 'Rename Failed: File type \"' + currentFileType + '\" should have .csv or .dsv extension.'\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n        } else if (currentFileTypeLower !== newFileExtension) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File type and extension do not match.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let namePart = newFileName.substring(0, newFileName.lastIndexOf('.'));\r\n        if (/^\\s*$/.test(namePart)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File name cannot consist of only spaces.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name cannot contain special characters: \\, :, ?, \", <, >, |\r\n        const invalidChars = /[\\\\:\\?\\\\\"<>\\|]/;\r\n        if (invalidChars.test(newFileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File name cannot contain these characters \"\\\\ : ? \\\" < > |\".'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // If all validations pass\r\n        RuleOutputToUI = {\r\n            Status: 'Success',\r\n            Message: ''\r\n        };\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    // function to rename file \r\n    var FileRename = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModul = require('o9/data/query');\r\n        var cellsetModul = require('o9/data/cellset');\r\n\r\n        const currentFileName = parsedParams.SelectedFile;\r\n        const currentProject = parsedParams.ProjectName;\r\n        const fileKey = parsedParams.Key;\r\n        let newFileName = parsedParams.NewFileName;\r\n        let selectedtable = parsedParams.SelectedTable;\r\n\r\n        newFileName = newFileName.replace(/\"/g, '\\\\\"');\r\n\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        let selectedFileQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${currentProject}]* [o9EKG Table].[Table Name]*[o9EKG Table].[Table Group]*[o9EKG Documents].[File Name].[${currentFileName}]*{Measure.[o9EKG File Type],Measure.[o9EKG File Delimiter],Measure.[o9EKG Text Qualifier],Measure.[o9EKG File Decryption],Measure.[o9EKG File Source Type],Measure.[o9EKG File Insert Methodology],Measure.[o9EKG Table Included],Measure.[o9EKG File Requirement], Measure.[o9EKG File Description]}).filter( Measure.[o9EKG Table Included] == 1);`;\r\n\r\n        let allFiles = cellsetModul.createCellSet(queryModul.select(selectedFileQuery));\r\n        Log.Info(\"Fetching selected row ... \" + allFiles);\r\n        const fileRows = allFiles.rowCount;\r\n\r\n        for (let fileidx = 0; fileidx < fileRows; fileidx++) {\r\n            let tableName = allFiles.row(fileidx).cell(2).Name;\r\n            let tableGroup = allFiles.row(fileidx).cell(3).Name;\r\n            let fileName = allFiles.row(fileidx).cell(4).Name;\r\n            let fileType = allFiles.row(fileidx).cell(5);\r\n            let fileDelimeter = allFiles.row(fileidx).cell(6);\r\n            let textQualifier = allFiles.row(fileidx).cell(7);\r\n            let fileDecryption = allFiles.row(fileidx).cell(8);\r\n            let fileSourceType = allFiles.row(fileidx).cell(9);\r\n            let fileInsertMethod = allFiles.row(fileidx).cell(10);\r\n            let tableIncluded = allFiles.row(fileidx).cell(11);\r\n            let fileReq = allFiles.row(fileidx).cell(12);\r\n            let filDesc = allFiles.row(fileidx).cell(13);\r\n\r\n            // delete earlier intersections\r\n            let deleteEarlierIntersection = `DELETE DATA for MODEL [o9EKG File Table Association] Where { &CWV , [o9EKG Customer].[Project Name].[${currentProject}],[o9EKG Documents].[File Name].[${currentFileName}],[o9EKG Table].[Table Name]};`;\r\n            queryModul.update(deleteEarlierIntersection);\r\n\r\n            // update file name query \r\n            let updateFileNameQuery = `createmember( [o9EKG Documents].[File Type] = { ,\"IN\"} , [o9EKG Documents].[File Name] = { , \"${newFileName}\" } );`;\r\n            Log.Info(\"update FileName Query \" + updateFileNameQuery);\r\n\r\n            let populateQuer = `cartesian scope: ( &CWV * [o9EKG Customer].[Project Name].[${currentProject}] * [o9EKG Documents].[File Name].[${newFileName}] * [o9EKG Table].[Table Name].[${tableName}]);\r\n                Measure.[o9EKG File Type] = ${fileType ? `\"${fileType}\"` : null};\r\n                Measure.[o9EKG File Delimiter] = ${fileDelimeter ? `\"${fileDelimeter}\"` : null};\r\n                Measure.[o9EKG Text Qualifier] = ${textQualifier ? `\"${textQualifier}\"` : null};\r\n                Measure.[o9EKG File Decryption] = ${fileDecryption ? `\"${fileDecryption}\"` : null};\r\n                Measure.[o9EKG File Source Type] = ${fileSourceType ? `\"${fileSourceType}\"` : null};\r\n                Measure.[o9EKG File Insert Methodology] = ${fileInsertMethod ? `\"${fileInsertMethod}\"` : null};\r\n                Measure.[o9EKG Table Included] = ${tableIncluded ? `\"${tableIncluded}\"` : null};\r\n                Measure.[o9EKG File Requirement] = ${fileReq ? `\"${fileReq}\"` : null};\r\n                Measure.[o9EKG File Description] = ${filDesc ? `\"${filDesc}\"` : null};\r\n            end scope;`;\r\n\r\n            Log.Info(\"updateFileNameQuery\" + updateFileNameQuery);\r\n            queryModul.update(updateFileNameQuery);\r\n\r\n            Log.Info(\"populateQuery \" + populateQuer);\r\n            queryModul.update(populateQuer);\r\n        }\r\n    };\r\n\r\n    return {\r\n        validateFileNameRename: validateFileNameRename,\r\n        FileRename: FileRename\r\n    };\r\n});",
    "Code": "define('o9.EKG.validateFileNameRename', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validateFileNameRename = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        const currentFileNam = parsedParams.SelectedFile;\r\n        const currentProjec = parsedParams.ProjectName;\r\n        const currentFileType = parsedParams.fileType;\r\n        const currentFileTypeLower = currentFileType.toLowerCase();\r\n\r\n        let newFileName = parsedParams.NewFileName;\r\n        newFileName = newFileName.replace(/\"/g, '\\\\\"');\r\n\r\n        Log.Info(\"Started validateFileNameRename Plugin\");\r\n\r\n        const newFileNameWithoutExtension = newFileName.substring(0, newFileName.lastIndexOf('.'));\r\n        const newFileExtension = newFileName.substring(newFileName.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n        // Fetch all existing file names\r\n        let allFilesQuery = `Select ([o9EKG Customer].[Project Name].[${currentProjec}]*[o9EKG Documents].[File Name]* &CWV *[o9EKG Table].[Table Name] *{Measure.[o9EKG Table Included],Measure.[o9EKG File Type]}).filter(Measure.[o9EKG Table Included]==1 );`;\r\n        let allFilesCellSet = cellsetModule.createCellSet(queryModule.select(allFilesQuery));\r\n        const fileRow = allFilesCellSet.rowCount;\r\n\r\n        // Check if the new file name (case-sensitive) with extension (case-insensitive) is already associated with another table\r\n        for (let fileIdx = 0; fileIdx < fileRow; fileIdx++) {\r\n            let existingFileName = allFilesCellSet.row(fileIdx).cell(1).Name;\r\n            const existingFileNameWithoutExtension = existingFileName.substring(0, existingFileName.lastIndexOf('.'));\r\n            const existingFileExtension = existingFileName.substring(existingFileName.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n            if (newFileNameWithoutExtension === existingFileNameWithoutExtension && newFileExtension === existingFileExtension) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: `Rename Failed: File Name [${newFileName}] is already associated with another table. Please enter a different file name.`\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n        }\r\n\r\n        if (newFileName.endsWith('.')) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File name cannot end with a dot.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Allow .dsv and .csv file extensions if current file type is either csv or dsv\r\n        if (currentFileTypeLower === 'csv' || currentFileTypeLower === 'dsv') {\r\n            if (!(newFileExtension === 'csv' || newFileExtension === 'dsv')) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: 'Rename Failed: File type \"' + currentFileType + '\" should have .csv or .dsv extension.'\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n        } else if (currentFileTypeLower !== newFileExtension) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File type and extension do not match.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let namePart = newFileName.substring(0, newFileName.lastIndexOf('.'));\r\n        if (/^\\s*$/.test(namePart)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File name cannot consist of only spaces.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name cannot contain special characters: \\, :, ?, \", <, >, |\r\n        const invalidChars = /[\\\\:\\?\\\\\"<>\\|]/;\r\n        if (invalidChars.test(newFileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Rename Failed: File name cannot contain these characters \"\\\\ : ? \\\" < > |\".'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // If all validations pass\r\n        RuleOutputToUI = {\r\n            Status: 'Success',\r\n            Message: ''\r\n        };\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    // function to rename file \r\n    var FileRename = function (o9Params) {\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModul = require('o9/data/query');\r\n        var cellsetModul = require('o9/data/cellset');\r\n\r\n        const currentFileName = parsedParams.SelectedFile;\r\n        const currentProject = parsedParams.ProjectName;\r\n        const fileKey = parsedParams.Key;\r\n        let newFileName = parsedParams.NewFileName;\r\n        let selectedtable = parsedParams.SelectedTable;\r\n\r\n        newFileName = newFileName.replace(/\"/g, '\\\\\"');\r\n\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        let selectedFileQuery = `Select (&CWV * [o9EKG Customer].[Project Name].[${currentProject}]* [o9EKG Table].[Table Name]*[o9EKG Table].[Table Group]*[o9EKG Documents].[File Name].[${currentFileName}]*{Measure.[o9EKG File Type],Measure.[o9EKG File Delimiter],Measure.[o9EKG Text Qualifier],Measure.[o9EKG File Decryption],Measure.[o9EKG File Source Type],Measure.[o9EKG File Insert Methodology],Measure.[o9EKG Table Included],Measure.[o9EKG File Requirement], Measure.[o9EKG File Description]}).filter( Measure.[o9EKG Table Included] == 1);`;\r\n\r\n        let allFiles = cellsetModul.createCellSet(queryModul.select(selectedFileQuery));\r\n        Log.Info(\"Fetching selected row ... \" + allFiles);\r\n        const fileRows = allFiles.rowCount;\r\n\r\n        for (let fileidx = 0; fileidx < fileRows; fileidx++) {\r\n            let tableName = allFiles.row(fileidx).cell(2).Name;\r\n            let tableGroup = allFiles.row(fileidx).cell(3).Name;\r\n            let fileName = allFiles.row(fileidx).cell(4).Name;\r\n            let fileType = allFiles.row(fileidx).cell(5);\r\n            let fileDelimeter = allFiles.row(fileidx).cell(6);\r\n            let textQualifier = allFiles.row(fileidx).cell(7);\r\n            let fileDecryption = allFiles.row(fileidx).cell(8);\r\n            let fileSourceType = allFiles.row(fileidx).cell(9);\r\n            let fileInsertMethod = allFiles.row(fileidx).cell(10);\r\n            let tableIncluded = allFiles.row(fileidx).cell(11);\r\n            let fileReq = allFiles.row(fileidx).cell(12);\r\n            let filDesc = allFiles.row(fileidx).cell(13);\r\n\r\n            // delete earlier intersections\r\n            let deleteEarlierIntersection = `DELETE DATA for MODEL [o9EKG File Table Association] Where { &CWV , [o9EKG Customer].[Project Name].[${currentProject}],[o9EKG Documents].[File Name].[${currentFileName}],[o9EKG Table].[Table Name]};`;\r\n            queryModul.update(deleteEarlierIntersection);\r\n\r\n            // update file name query \r\n            let updateFileNameQuery = `createmember( [o9EKG Documents].[File Type] = { ,\"IN\"} , [o9EKG Documents].[File Name] = { , \"${newFileName}\" } );`;\r\n            Log.Info(\"update FileName Query \" + updateFileNameQuery);\r\n\r\n            let populateQuer = `cartesian scope: ( &CWV * [o9EKG Customer].[Project Name].[${currentProject}] * [o9EKG Documents].[File Name].[${newFileName}] * [o9EKG Table].[Table Name].[${tableName}]);\r\n                Measure.[o9EKG File Type] = ${fileType ? `\"${fileType}\"` : null};\r\n                Measure.[o9EKG File Delimiter] = ${fileDelimeter ? `\"${fileDelimeter}\"` : null};\r\n                Measure.[o9EKG Text Qualifier] = ${textQualifier ? `\"${textQualifier}\"` : null};\r\n                Measure.[o9EKG File Decryption] = ${fileDecryption ? `\"${fileDecryption}\"` : null};\r\n                Measure.[o9EKG File Source Type] = ${fileSourceType ? `\"${fileSourceType}\"` : null};\r\n                Measure.[o9EKG File Insert Methodology] = ${fileInsertMethod ? `\"${fileInsertMethod}\"` : null};\r\n                Measure.[o9EKG Table Included] = ${tableIncluded ? `\"${tableIncluded}\"` : null};\r\n                Measure.[o9EKG File Requirement] = ${fileReq ? `\"${fileReq}\"` : null};\r\n                Measure.[o9EKG File Description] = ${filDesc ? `\"${filDesc}\"` : null};\r\n            end scope;`;\r\n\r\n            Log.Info(\"updateFileNameQuery\" + updateFileNameQuery);\r\n            queryModul.update(updateFileNameQuery);\r\n\r\n            Log.Info(\"populateQuery \" + populateQuer);\r\n            queryModul.update(populateQuer);\r\n        }\r\n    };\r\n\r\n    return {\r\n        validateFileNameRename: validateFileNameRename,\r\n        FileRename: FileRename\r\n    };\r\n});",
    "ModuleName": "o9.EKG.validateFileNameRename",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "82f19474-2a87-3c77-b44b-0eb3c91c9ce7",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213094,
    "Description": "Validate File Name",
    "Documentation": "define('o9.EKG.validateFileName', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validateFileName = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        let fileName = parsedParams.FileName; // Using fileName instead of newFileName\r\n        const fileType = parsedParams.FileType; // Store the FileType in a variable\r\n        const existingFile = parsedParams.AlreadyExistedFile; // If there already mapping exists for table name -> file name \r\n        const project = parsedParams.Project;\r\n        fileName = fileName.replace(/\"/g, '\\\\\"');\r\n        Log.Info(\"Started validateFileNameAdd Plugin\");\r\n\r\n        // Condition: Check if an existing file mapping already exists for the table\r\n        if (existingFile !== null) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Invalid File Mapping: File Name [${existingFile}] is already associated with the table [${parsedParams.TableName}]. Can't add another file name for the same table.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Check if the file name is already associated with another table\r\n        // Extract the file name without the extension and the extension itself\r\n        const fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.')).toLowerCase();\r\n        const fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n        // Fetch all existing file names\r\n        let allFilesQuery = `Select ([o9EKG Customer].[Project Name].[${project}] * [o9EKG Documents].[File Name]* &CWV *[o9EKG Table].[Table Name] *{Measure.[o9EKG Table Included],Measure.[o9EKG File Type]}).filter(Measure.[o9EKG Table Included]==1 );`;\r\n        let allFilesCellSet = cellsetModule.createCellSet(queryModule.select(allFilesQuery));\r\n        const FileRows = allFilesCellSet.rowCount;\r\n\r\n        for (let fileIdx = 0; fileIdx < FileRows; fileIdx++) {\r\n            let existingFileName = allFilesCellSet.row(fileIdx).cell(1).Name.toLowerCase();\r\n            const existingFileNameWithoutExtension = existingFileName.substring(0, existingFileName.lastIndexOf('.'));\r\n            const existingFileExtension = existingFileName.substring(existingFileName.lastIndexOf('.') + 1);\r\n\r\n            // Check if the new file name (case-insensitive) with extension (case-insensitive) is already associated with another table\r\n            if (fileNameWithoutExtension === existingFileNameWithoutExtension && existingFileExtension === fileExtension) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: `Invalid File Name: File Name [${fileName}] is already associated with another table. Please enter a different file name.`\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n\r\n            // Additional check for CSV file type to ensure no duplicate .csv and .dsv\r\n            if (fileType.toLowerCase() === 'csv' && fileNameWithoutExtension === existingFileNameWithoutExtension && ['csv', 'dsv'].includes(existingFileExtension)) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: `Invalid File Name: File Name [${fileName}] is already associated with another table as .csv or .dsv. Please enter a different file name.`\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n        }\r\n\r\n        // Condition: File name cannot end with a dot\r\n        if (fileName.endsWith('.')) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot end with a dot.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name type and extension should match (case-insensitive)\r\n        // Allow both .csv and .dsv for CSV file type\r\n        if (fileType.toLowerCase() === 'csv' && !['csv', 'dsv'].includes(fileExtension)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Type: For CSV file type, only .csv or .dsv extensions are allowed.'\r\n            };\r\n            return RuleOutputToUI;\r\n        } else if (fileType.toLowerCase() !== 'csv' && fileType.toLowerCase() !== fileExtension) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Type: File type and extension do not match.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name cannot contain special characters: \\, :, ?, \", <, >, |\r\n        const invalidChars = /[\\\\:\\?\\\"<>\\|]/; // Updated the character list as per the request\r\n        if (invalidChars.test(fileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot contain these characters \"\\\\ : ? \\\" < > |\".'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let namePart = fileName.substring(0, fileName.lastIndexOf('.'));\r\n        if (/^\\s*$/.test(namePart)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot consist of only spaces.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // If all validations pass\r\n        RuleOutputToUI = {\r\n            Status: 'Success',\r\n            Message: ''\r\n        };\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    return {\r\n        validateFileName: validateFileName\r\n    };\r\n});",
    "Code": "define('o9.EKG.validateFileName', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validateFileName = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        let fileName = parsedParams.FileName; // Using fileName instead of newFileName\r\n        const fileType = parsedParams.FileType; // Store the FileType in a variable\r\n        const existingFile = parsedParams.AlreadyExistedFile; // If there already mapping exists for table name -> file name \r\n        const project = parsedParams.Project;\r\n        fileName = fileName.replace(/\"/g, '\\\\\"');\r\n        Log.Info(\"Started validateFileNameAdd Plugin\");\r\n\r\n        // Condition: Check if an existing file mapping already exists for the table\r\n        if (existingFile !== null) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: `Invalid File Mapping: File Name [${existingFile}] is already associated with the table [${parsedParams.TableName}]. Can't add another file name for the same table.`\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: Check if the file name is already associated with another table\r\n        // Extract the file name without the extension and the extension itself\r\n        const fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.')).toLowerCase();\r\n        const fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n        // Fetch all existing file names\r\n        let allFilesQuery = `Select ([o9EKG Customer].[Project Name].[${project}] * [o9EKG Documents].[File Name]* &CWV *[o9EKG Table].[Table Name] *{Measure.[o9EKG Table Included],Measure.[o9EKG File Type]}).filter(Measure.[o9EKG Table Included]==1 );`;\r\n        let allFilesCellSet = cellsetModule.createCellSet(queryModule.select(allFilesQuery));\r\n        const FileRows = allFilesCellSet.rowCount;\r\n\r\n        for (let fileIdx = 0; fileIdx < FileRows; fileIdx++) {\r\n            let existingFileName = allFilesCellSet.row(fileIdx).cell(1).Name.toLowerCase();\r\n            const existingFileNameWithoutExtension = existingFileName.substring(0, existingFileName.lastIndexOf('.'));\r\n            const existingFileExtension = existingFileName.substring(existingFileName.lastIndexOf('.') + 1);\r\n\r\n            // Check if the new file name (case-insensitive) with extension (case-insensitive) is already associated with another table\r\n            if (fileNameWithoutExtension === existingFileNameWithoutExtension && existingFileExtension === fileExtension) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: `Invalid File Name: File Name [${fileName}] is already associated with another table. Please enter a different file name.`\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n\r\n            // Additional check for CSV file type to ensure no duplicate .csv and .dsv\r\n            if (fileType.toLowerCase() === 'csv' && fileNameWithoutExtension === existingFileNameWithoutExtension && ['csv', 'dsv'].includes(existingFileExtension)) {\r\n                RuleOutputToUI = {\r\n                    Status: 'Error',\r\n                    Message: `Invalid File Name: File Name [${fileName}] is already associated with another table as .csv or .dsv. Please enter a different file name.`\r\n                };\r\n                return RuleOutputToUI;\r\n            }\r\n        }\r\n\r\n        // Condition: File name cannot end with a dot\r\n        if (fileName.endsWith('.')) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot end with a dot.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name type and extension should match (case-insensitive)\r\n        // Allow both .csv and .dsv for CSV file type\r\n        if (fileType.toLowerCase() === 'csv' && !['csv', 'dsv'].includes(fileExtension)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Type: For CSV file type, only .csv or .dsv extensions are allowed.'\r\n            };\r\n            return RuleOutputToUI;\r\n        } else if (fileType.toLowerCase() !== 'csv' && fileType.toLowerCase() !== fileExtension) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Type: File type and extension do not match.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name cannot contain special characters: \\, :, ?, \", <, >, |\r\n        const invalidChars = /[\\\\:\\?\\\"<>\\|]/; // Updated the character list as per the request\r\n        if (invalidChars.test(fileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot contain these characters \"\\\\ : ? \\\" < > |\".'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        let namePart = fileName.substring(0, fileName.lastIndexOf('.'));\r\n        if (/^\\s*$/.test(namePart)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot consist of only spaces.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // If all validations pass\r\n        RuleOutputToUI = {\r\n            Status: 'Success',\r\n            Message: ''\r\n        };\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    return {\r\n        validateFileName: validateFileName\r\n    };\r\n});",
    "ModuleName": "o9.EKG.validateFileName",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "5e706231-4fb9-2750-0f55-c9415469c4cc",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213095,
    "Description": "Batch update",
    "Documentation": "define('o9.EKG.batchupdate', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var updatebatch = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        var project = parsedParams.Project;\r\n        var pipeline = parsedParams.Pipeline;\r\n        var newBatch = parsedParams.UpdateBatch;\r\n        const pipelineMap = pipeline.map(PipeLine =>`[${PipeLine}]`).join(',');\r\n        //query to fetch complete selected pipelines table  table \r\n        let fetchSelectedPipelineTable = `select(&CWV * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Pipeline].[Pipeline Name].filter(#.Name in {${pipelineMap}})* [o9EKG Table].[Table Name] * [o9EKG Batch Type].[Batch Type] * {Measure.[o9EKG Table Order], Measure.[o9EKG Pipeline Folder Group]}).filter(~isNull(Measure.[o9EKG Table Order]));`;\r\n        let selectedpipelinetableResult = cellsetModule.createCellSet(queryModule.select(fetchSelectedPipelineTable));\r\n        const pipelineRows = selectedpipelinetableResult.rowCount;\r\n        Log.Info('row count  ---' + pipelineRows);\r\n        for (let pipelineIdx = 0; pipelineIdx < pipelineRows; pipelineIdx++) {\r\n            \r\n            let pipelineName = selectedpipelinetableResult.row(pipelineIdx).cell(2).Name;\r\n            let tableName= selectedpipelinetableResult.row(pipelineIdx).cell(3).Name;\r\n            let batchType=selectedpipelinetableResult.row(pipelineIdx).cell(4).Name;\r\n            let tableOrder =selectedpipelinetableResult.row(pipelineIdx).cell(5);\r\n            let pipelineFoldergroup=selectedpipelinetableResult.row(pipelineIdx).cell(6);\r\n\r\n\r\n            let NullifyFolderGroupfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}] * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${batchType}]);\r\n                            Measure.[o9EKG Pipeline Folder Group] = null ;\r\n                            end scope;`;\r\n\r\n            Log.Info('nullify folder group '+NullifyFolderGroupfunction);\r\n            queryModule.update(NullifyFolderGroupfunction);\r\n\r\n\r\n            let NullifyTableOrderfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}] * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${batchType}]*[o9EKG Table].[Table Name]);\r\n                            Measure.[o9EKG Table Order] = null;\r\n                            end scope;`;\r\n\r\n        Log.Info('nullify folder group '+NullifyTableOrderfunction);\r\n        queryModule.update(NullifyTableOrderfunction);\r\n              //delete member \r\n             \r\n        let deleteEarlierIntersection = `DELETE DATA for MODEL [o9EKG Pipeline Properties],[o9EKG Pipeline Table Association] Where { &CWV , [o9EKG Customer].[Project Name].[${project}], [o9EKG Batch Type].[Batch Type].[${batchType}],[o9EKG Pipeline].[Pipeline Name].filter(#.Name in {${pipelineName}}) ,[o9EKG Table].[Table Name]};`;\r\n        queryModule.update(deleteEarlierIntersection);\r\n\r\n        let createbatchTypeMemberQuery = `createmember( [o9EKG Batch Type].[Batch Type] = { , \"${newBatch}\" } );`;\r\n        let populateQuery = `cartesian scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}]  * [o9EKG Table].[Table Name].[${tableName}]* [o9EKG Batch Type].[Batch Type].[${newBatch}]* [o9EKG Customer].[Project Name].[${project}] ) ;\r\n                Measure.[o9EKG Table Order] =  \"${tableOrder}\" ;\r\n                Measure.[o9EKG Pipeline Folder Group] = \"${pipelineFoldergroup}\" ;\r\n                end scope;`;\r\n\r\n       Log.Info(\"createbatchTypeMemberQuery \"+createbatchTypeMemberQuery);\r\n            queryModule.update(createbatchTypeMemberQuery);\r\n            \r\n        Log.Info(\"populateQuery \"+populateQuery);\r\n            queryModule.update(populateQuery);\r\n      \r\n            \r\n        }\r\n                \r\n    };\r\n\r\n    return {\r\n        updatebatch : updatebatch       \r\n    };\r\n});",
    "Code": "define('o9.EKG.batchupdate', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var updatebatch = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        var project = parsedParams.Project;\r\n        var pipeline = parsedParams.Pipeline;\r\n        var newBatch = parsedParams.UpdateBatch;\r\n        const pipelineMap = pipeline.map(PipeLine =>`[${PipeLine}]`).join(',');\r\n        //query to fetch complete selected pipelines table  table \r\n        let fetchSelectedPipelineTable = `select(&CWV * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Pipeline].[Pipeline Name].filter(#.Name in {${pipelineMap}})* [o9EKG Table].[Table Name] * [o9EKG Batch Type].[Batch Type] * {Measure.[o9EKG Table Order], Measure.[o9EKG Pipeline Folder Group]}).filter(~isNull(Measure.[o9EKG Table Order]));`;\r\n        let selectedpipelinetableResult = cellsetModule.createCellSet(queryModule.select(fetchSelectedPipelineTable));\r\n        const pipelineRows = selectedpipelinetableResult.rowCount;\r\n        Log.Info('row count  ---' + pipelineRows);\r\n        for (let pipelineIdx = 0; pipelineIdx < pipelineRows; pipelineIdx++) {\r\n            \r\n            let pipelineName = selectedpipelinetableResult.row(pipelineIdx).cell(2).Name;\r\n            let tableName= selectedpipelinetableResult.row(pipelineIdx).cell(3).Name;\r\n            let batchType=selectedpipelinetableResult.row(pipelineIdx).cell(4).Name;\r\n            let tableOrder =selectedpipelinetableResult.row(pipelineIdx).cell(5);\r\n            let pipelineFoldergroup=selectedpipelinetableResult.row(pipelineIdx).cell(6);\r\n\r\n\r\n            let NullifyFolderGroupfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}] * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${batchType}]);\r\n                            Measure.[o9EKG Pipeline Folder Group] = null ;\r\n                            end scope;`;\r\n\r\n            Log.Info('nullify folder group '+NullifyFolderGroupfunction);\r\n            queryModule.update(NullifyFolderGroupfunction);\r\n\r\n\r\n            let NullifyTableOrderfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}] * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${batchType}]*[o9EKG Table].[Table Name]);\r\n                            Measure.[o9EKG Table Order] = null;\r\n                            end scope;`;\r\n\r\n        Log.Info('nullify folder group '+NullifyTableOrderfunction);\r\n        queryModule.update(NullifyTableOrderfunction);\r\n              //delete member \r\n             \r\n        let deleteEarlierIntersection = `DELETE DATA for MODEL [o9EKG Pipeline Properties],[o9EKG Pipeline Table Association] Where { &CWV , [o9EKG Customer].[Project Name].[${project}], [o9EKG Batch Type].[Batch Type].[${batchType}],[o9EKG Pipeline].[Pipeline Name].filter(#.Name in {${pipelineName}}) ,[o9EKG Table].[Table Name]};`;\r\n        queryModule.update(deleteEarlierIntersection);\r\n\r\n        let createbatchTypeMemberQuery = `createmember( [o9EKG Batch Type].[Batch Type] = { , \"${newBatch}\" } );`;\r\n        let populateQuery = `cartesian scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}]  * [o9EKG Table].[Table Name].[${tableName}]* [o9EKG Batch Type].[Batch Type].[${newBatch}]* [o9EKG Customer].[Project Name].[${project}] ) ;\r\n                Measure.[o9EKG Table Order] =  \"${tableOrder}\" ;\r\n                Measure.[o9EKG Pipeline Folder Group] = \"${pipelineFoldergroup}\" ;\r\n                end scope;`;\r\n\r\n       Log.Info(\"createbatchTypeMemberQuery \"+createbatchTypeMemberQuery);\r\n            queryModule.update(createbatchTypeMemberQuery);\r\n            \r\n        Log.Info(\"populateQuery \"+populateQuery);\r\n            queryModule.update(populateQuery);\r\n      \r\n            \r\n        }\r\n                \r\n    };\r\n\r\n    return {\r\n        updatebatch : updatebatch       \r\n    };\r\n});",
    "ModuleName": "o9.EKG.batchupdate",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "44db3118-92da-9719-6ec7-f3eeefc6914f",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213096,
    "Description": "ValidateFileRename",
    "Documentation": "define('o9.EKG.ValidateFileRename', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var ValidateFileRename = function(o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        const fileName = parsedParams.FileName; // Using fileName instead of newFileName\r\n        const fileType = parsedParams.FileType; // Store the FileType in a variable\r\n\r\n        Log.Info(\"Started validateFileNameAdd Plugin\");\r\n\r\n        // Condition: Check if the file name is already associated with another table\r\n        let duplicateFileNameQuery = `Select([o9EKG Documents].[File Name].[${fileName}]);`;\r\n        let duplicateFileName = cellsetModule.createCellSet(queryModule.select(duplicateFileNameQuery));\r\n\r\n        if (duplicateFileName.rowCount > 0) {\r\n            RuleOutputToUI = { \r\n                Status: 'Error', \r\n                Message: `Invalid File Name: File Name [${fileName}] is already associated with another table. Please enter a different file name.` \r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n          // Condition: File name cannot end with a dot\r\n        if (fileName.endsWith('.')) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot end with a dot.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name type and extension should match (case-insensitive)\r\n        let fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();\r\n        if (fileType !== fileExtension) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Type: File type and extension do not match.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n      \r\n\r\n        // Condition: File name cannot contain only spaces\r\n        if (/^\\s*$/.test(fileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot contain only spaces.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name cannot contain special characters: \\, :, ?, \", <, >, |\r\n        const invalidChars = /[\\\\:\\?\\\"<>\\|]/; // Updated the character list as per the request\r\n        if (invalidChars.test(fileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot contain these characters \"\\\\ : ? \\\" < > |\".'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // If all validations pass\r\n        RuleOutputToUI = {\r\n            Status: 'Success',\r\n            Message: ''\r\n        };\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    return {\r\n        ValidateFileRename : ValidateFileRename  \r\n    };\r\n});",
    "Code": "define('o9.EKG.ValidateFileRename', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var ValidateFileRename = function(o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        const fileName = parsedParams.FileName; // Using fileName instead of newFileName\r\n        const fileType = parsedParams.FileType; // Store the FileType in a variable\r\n\r\n        Log.Info(\"Started validateFileNameAdd Plugin\");\r\n\r\n        // Condition: Check if the file name is already associated with another table\r\n        let duplicateFileNameQuery = `Select([o9EKG Documents].[File Name].[${fileName}]);`;\r\n        let duplicateFileName = cellsetModule.createCellSet(queryModule.select(duplicateFileNameQuery));\r\n\r\n        if (duplicateFileName.rowCount > 0) {\r\n            RuleOutputToUI = { \r\n                Status: 'Error', \r\n                Message: `Invalid File Name: File Name [${fileName}] is already associated with another table. Please enter a different file name.` \r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n          // Condition: File name cannot end with a dot\r\n        if (fileName.endsWith('.')) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot end with a dot.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name type and extension should match (case-insensitive)\r\n        let fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();\r\n        if (fileType !== fileExtension) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Type: File type and extension do not match.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n      \r\n\r\n        // Condition: File name cannot contain only spaces\r\n        if (/^\\s*$/.test(fileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot contain only spaces.'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // Condition: File name cannot contain special characters: \\, :, ?, \", <, >, |\r\n        const invalidChars = /[\\\\:\\?\\\"<>\\|]/; // Updated the character list as per the request\r\n        if (invalidChars.test(fileName)) {\r\n            RuleOutputToUI = {\r\n                Status: 'Error',\r\n                Message: 'Invalid File Name: File name cannot contain these characters \"\\\\ : ? \\\" < > |\".'\r\n            };\r\n            return RuleOutputToUI;\r\n        }\r\n\r\n        // If all validations pass\r\n        RuleOutputToUI = {\r\n            Status: 'Success',\r\n            Message: ''\r\n        };\r\n        return RuleOutputToUI;\r\n    };\r\n\r\n    return {\r\n        ValidateFileRename : ValidateFileRename  \r\n    };\r\n});",
    "ModuleName": "o9.EKG.ValidateFileRename",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "d056bc40-d839-b73a-7c23-e9f12363754f",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213097,
    "Description": "validateProject",
    "Documentation": "define('o9.EKG.validateProject', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n  var validateProject= function(o9Params){\r\n\r\n   var parsedParams = JSON.parse(o9Params);\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   var Project= parsedParams.Cust+\" \"+ parsedParams.Project;\r\n\r\n   var ExistingProject = `Select([o9EKG Customer].[Project Name].[${Project}]);`\r\n    \r\n\r\n   var temp = cellsetModule.createCellSet(queryModule.select(ExistingProject));\r\n\r\n   if(temp.rowCount > 0) {\r\n       RuleOutputToUI={\r\n       Status:'Error',\r\n       Message:'This Project already exists. Please enter a new name'};\r\n   \r\n    \r\n    }\r\n    else {\r\n        RuleOutputToUI={\r\n          Status:'Success',\r\n          Message:'New Project added and details updated'};\r\n      }\r\n      return;\r\n   }\r\n   ;\r\n\r\n\r\n   return{\r\n    validateProject:validateProject\r\n    };\r\n});",
    "Code": "define('o9.EKG.validateProject', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n  var validateProject= function(o9Params){\r\n\r\n   var parsedParams = JSON.parse(o9Params);\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   var Project= parsedParams.Cust+\" \"+ parsedParams.Project;\r\n\r\n   var ExistingProject = `Select([o9EKG Customer].[Project Name].[${Project}]);`\r\n    \r\n\r\n   var temp = cellsetModule.createCellSet(queryModule.select(ExistingProject));\r\n\r\n   if(temp.rowCount > 0) {\r\n       RuleOutputToUI={\r\n       Status:'Error',\r\n       Message:'This Project already exists. Please enter a new name'};\r\n   \r\n    \r\n    }\r\n    else {\r\n        RuleOutputToUI={\r\n          Status:'Success',\r\n          Message:'New Project added and details updated'};\r\n      }\r\n      return;\r\n   }\r\n   ;\r\n\r\n\r\n   return{\r\n    validateProject:validateProject\r\n    };\r\n});",
    "ModuleName": "o9.EKG.validateProject",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "8f9417b8-dc91-6544-cae8-0fc83733a2d8",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213098,
    "Description": "validateBatchType",
    "Documentation": "define('o9.EKG.validateBatchType', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateBatchType = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const project = parsedParams.Project;\r\n        const batchType = parsedParams.BatchType;\r\n\r\n        // check for duplicate batch type\r\n        let duplicateBatchTypeQuery = `select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Batch Type].[Batch Type].[${batchType}] * {Measure.[o9EKG Batch Description], Measure.[o9EKG Batch FTB], Measure.[o9EKG Start Email], Measure.[o9EKG Stop Email], Measure.[o9EKG Tenant Active], Measure.[o9EKG Tenant Inactive]});`;\r\n        let duplicateBatchTypeResult = cellsetModule.createCellSet(queryModule.select(duplicateBatchTypeQuery));\r\n\r\n        let numOfBatches = duplicateBatchTypeResult.rowCount;\r\n\r\n        if (numOfBatches > 0) {\r\n            // return error, duplicate batch found\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Batch already exist' };\r\n            return RuleOutputToUI\r\n        }\r\n\r\n        // check validation on batch type\r\n        const batchNTypeRegex = /^[a-zA-Z0-9_]{1,30}$/;\r\n\r\n        const isValid = batchNTypeRegex.test(batchType);\r\n\r\n        if (isValid) {\r\n            RuleOutputToUI = { Status: 'Success', Message: 'Batch Type Added Successfully!' };\r\n            return RuleOutputToUI\r\n        }\r\n        else {\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Batch Type should be 30 characters or fewer and only include letters, numbers, and underscores.' };\r\n            return RuleOutputToUI\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return {\r\n        validateBatchType: validateBatchType\r\n    }\r\n\r\n})",
    "Code": "define('o9.EKG.validateBatchType', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var validateBatchType = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const project = parsedParams.Project;\r\n        const batchType = parsedParams.BatchType;\r\n\r\n        // check for duplicate batch type\r\n        let duplicateBatchTypeQuery = `select (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Batch Type].[Batch Type].[${batchType}] * {Measure.[o9EKG Batch Description], Measure.[o9EKG Batch FTB], Measure.[o9EKG Start Email], Measure.[o9EKG Stop Email], Measure.[o9EKG Tenant Active], Measure.[o9EKG Tenant Inactive]});`;\r\n        let duplicateBatchTypeResult = cellsetModule.createCellSet(queryModule.select(duplicateBatchTypeQuery));\r\n\r\n        let numOfBatches = duplicateBatchTypeResult.rowCount;\r\n\r\n        if (numOfBatches > 0) {\r\n            // return error, duplicate batch found\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Batch already exist' };\r\n            return RuleOutputToUI\r\n        }\r\n\r\n        // check validation on batch type\r\n        const batchNTypeRegex = /^[a-zA-Z0-9_]{1,30}$/;\r\n\r\n        const isValid = batchNTypeRegex.test(batchType);\r\n\r\n        if (isValid) {\r\n            RuleOutputToUI = { Status: 'Success', Message: 'Batch Type Added Successfully!' };\r\n            return RuleOutputToUI\r\n        }\r\n        else {\r\n            RuleOutputToUI = { Status: 'Error', Message: 'Batch Type should be 30 characters or fewer and only include letters, numbers, and underscores.' };\r\n            return RuleOutputToUI\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return {\r\n        validateBatchType: validateBatchType\r\n    }\r\n\r\n})",
    "ModuleName": "o9.EKG.validateBatchType",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "4361c6d8-4cac-9ec0-b54b-79f4c54fa8f1",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213099,
    "Description": "Add Tenant Instance",
    "Documentation": "define('o9.EKG.addTenantInstance', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var addTenantInstance = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const TenantProfile = parsedParams.TenantProfile;\r\n        const TenantInstance = parsedParams.TenantInstance;\r\n        const OrgName = parsedParams.OrgName;\r\n\r\n        Log.Info(\"Started addTenantInstance Plugin\");\r\n\r\n\r\n        // Query to get the last used Tenant ID\r\n        let ExistingTenantIDQuery = `Select ([o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Tenant].[Profile].[${TenantProfile}].[Tenant] *  {Measure.[o9EKG Central Tenant], Measure.[o9EKG Tenant Org Name]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]} orderby [o9EKGSequence].[o9EKGSequenceNumber].Key desc limit 1;`;\r\n\r\n        let existingIDResult = cellsetModule.createCellSet(queryModule.select(ExistingTenantIDQuery));\r\n\r\n        let ID;\r\n        if (existingIDResult.rowCount > 0) {\r\n            let lastSeqID = existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKGSequence', 'o9EKGSequenceNumber')).Name\r\n\r\n            if (existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKGSequence', 'o9EKGSequenceNumber')) && lastSeqID) {\r\n                ID = lastSeqID;\r\n                Log.Info(`Seq details are Present--------${ID}`);\r\n            } else {\r\n                ID = 0;\r\n                Log.Info(`Seq Details are not present--------${ID}`);\r\n            }\r\n        } else {\r\n            ID = 0;\r\n        }\r\n\r\n        ID = parseInt(ID) + 1;\r\n\r\n        let createTenantMemberQuery = `createmember([o9EKG Tenant].[Profile] = {, \"${TenantProfile}\"}, [o9EKG Tenant].[Tenant] = {, \"${TenantInstance}\"});`\r\n        let populateTenantPropertiesQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Tenant].[${TenantInstance}] * [o9EKGSequence].[o9EKGSequenceNumber].[${ID}]);\r\n            Measure.[o9EKG Central Tenant] = False;\r\n            Measure.[o9EKG Tenant Org Name] = \"${OrgName}\";\r\n            end scope;`\r\n\r\n        Log.Info(createTenantMemberQuery)\r\n        queryModule.update(createTenantMemberQuery)\r\n\r\n        Log.Info(populateTenantPropertiesQuery)\r\n        queryModule.update(populateTenantPropertiesQuery)\r\n\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Tenant added!' };\r\n        return RuleOutputToUI\r\n    };\r\n    return {\r\n        addTenantInstance: addTenantInstance\r\n    };\r\n})",
    "Code": "define('o9.EKG.addTenantInstance', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var addTenantInstance = function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\r\n        const Project = parsedParams.Project;\r\n        const TenantProfile = parsedParams.TenantProfile;\r\n        const TenantInstance = parsedParams.TenantInstance;\r\n        const OrgName = parsedParams.OrgName;\r\n\r\n        Log.Info(\"Started addTenantInstance Plugin\");\r\n\r\n\r\n        // Query to get the last used Tenant ID\r\n        let ExistingTenantIDQuery = `Select ([o9EKGSequence].[o9EKGSequenceNumber] * [o9EKG Tenant].[Profile].[${TenantProfile}].[Tenant] *  {Measure.[o9EKG Central Tenant], Measure.[o9EKG Tenant Org Name]}) where {&CWV, [o9EKG Customer].[Project Name].[${Project}]} orderby [o9EKGSequence].[o9EKGSequenceNumber].Key desc limit 1;`;\r\n\r\n        let existingIDResult = cellsetModule.createCellSet(queryModule.select(ExistingTenantIDQuery));\r\n\r\n        let ID;\r\n        if (existingIDResult.rowCount > 0) {\r\n            let lastSeqID = existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKGSequence', 'o9EKGSequenceNumber')).Name\r\n\r\n            if (existingIDResult.row(0).cell(existingIDResult.memberColumnIndex('o9EKGSequence', 'o9EKGSequenceNumber')) && lastSeqID) {\r\n                ID = lastSeqID;\r\n                Log.Info(`Seq details are Present--------${ID}`);\r\n            } else {\r\n                ID = 0;\r\n                Log.Info(`Seq Details are not present--------${ID}`);\r\n            }\r\n        } else {\r\n            ID = 0;\r\n        }\r\n\r\n        ID = parseInt(ID) + 1;\r\n\r\n        let createTenantMemberQuery = `createmember([o9EKG Tenant].[Profile] = {, \"${TenantProfile}\"}, [o9EKG Tenant].[Tenant] = {, \"${TenantInstance}\"});`\r\n        let populateTenantPropertiesQuery = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${Project}] * [o9EKG Tenant].[Tenant].[${TenantInstance}] * [o9EKGSequence].[o9EKGSequenceNumber].[${ID}]);\r\n            Measure.[o9EKG Central Tenant] = False;\r\n            Measure.[o9EKG Tenant Org Name] = \"${OrgName}\";\r\n            end scope;`\r\n\r\n        Log.Info(createTenantMemberQuery)\r\n        queryModule.update(createTenantMemberQuery)\r\n\r\n        Log.Info(populateTenantPropertiesQuery)\r\n        queryModule.update(populateTenantPropertiesQuery)\r\n\r\n\r\n        RuleOutputToUI = { Status: 'Success', Message: 'New Tenant added!' };\r\n        return RuleOutputToUI\r\n    };\r\n    return {\r\n        addTenantInstance: addTenantInstance\r\n    };\r\n})",
    "ModuleName": "o9.EKG.addTenantInstance",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "85e7caed-4f67-26ad-5ffe-2ec497d92104",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213100,
    "Description": "ignoreValidations",
    "Documentation": "define('o9.ekgconfig.ignoreValidations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var ignoreValidations = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    var project = parsedParams.Project;\r\n    var Select = parsedParams.IgnoredRows;\r\n    var lastSequence = parseInt(parsedParams.lastNumber);\r\n    Log.Info(\"<EKG - Ignore Validation Logs > : Ignoring Mass Validations.\");\r\n    if(isNaN(lastSequence))\r\n    {\r\n        Log.Info(\"<EKG - Ignore Validation Logs > : Initializing from sequence 1.\");\r\n        lastSequence = 0;\r\n    }\r\n    var metadataFlag = false;\r\n    var severityFlag = false;\r\n\r\n    for(var j=0; j<Select.length;j++)\r\n    {\r\n    \r\n    let validationIBPL = 'Select (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] ) on row,({Measure.[o9EKG Validation Error Text],Measure.[o9EKG Validation Type],Measure.[o9EKG Validation Severity],Measure.[o9EKG Error Type]}) on column;';\r\n    let validationRow = cellsetModule.createCellSet(queryModule.select(validationIBPL));\r\n    \r\n\r\n    // var metadataFlag = false;\r\n    // var severityFlag = false ;\r\n    var errorType = validationRow.row(0).cell(7);\r\n\r\n    if (errorType == \"Metadata\")\r\n    {\r\n        metadataFlag = true;\r\n\r\n    }\r\n    else \r\n    {\r\n    var validationType = validationRow.row(0).cell(5);\r\n    var severity = validationRow.row(0).cell(6);\r\n    if (severity == \"Error\" )\r\n    \r\n    {\r\n      \r\n        severityFlag = true;\r\n        \r\n    }\r\n    var queryIgnoreTextUpdate1 = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Validation Error Text] = null ;Measure.[o9EKG Validation Type] = null;Measure.[o9EKG Error Type] = null; Measure.[o9EKG Validation Severity] = null; end scope;';\r\n  \r\n    queryModule.update(queryIgnoreTextUpdate1);\r\n    \r\n    var errorText =  validationRow.row(0).cell(4); \r\n    let escapedErrorText = '';\r\n    Select[j].Seq.Value = lastSequence + j+1;\r\n    if ((errorText.toLowerCase()).includes(\"udf_\") || (errorText.toLowerCase()).includes(\"invalid characters\")) {\r\n        escapedErrorText = errorText.toString().replace(/\"/g, '\\\\\"').replace(/'/g, \"\\'\");\r\n    }\r\n    else {\r\n        escapedErrorText = errorText;\r\n    }\r\n   \r\n    // var queryIgnoreTextUpdate = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Ignored Validation Error Text] = \"'+escapedErrorText+'\" ;Measure.[o9EKG Ignore Validation Type] = \"'+validationType.toString()+'\" ;Measure.[o9EKG Ignore Severity] = \"'+severity.toString()+'\" ;end scope;';\r\n    var queryIgnoreTextUpdate = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Name].[${Select[j].Table.Value}] * [o9EKGSequence].[o9EKGSequenceNumber].[${Select[j].Seq.Value}] );\r\n        Measure.[o9EKG Ignored Validation Error Text] = \"${escapedErrorText}\";\r\n        Measure.[o9EKG Ignore Validation Type] = \"${validationType.toString()}\";\r\n        Measure.[o9EKG Ignore Severity] = \"${severity.toString()}\" ;\r\n    end scope;`\r\n\r\n    // var queryIgnoreTextUpdate = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Ignored Validation Error Text] = \"'+errorText.toString()+'\" ;Measure.[o9EKG Ignore Validation Type] = \"'+validationType.toString()+'\" ;Measure.[o9EKG Ignore Severity] = \"'+severity.toString()+'\" ;end scope;';\r\n    Log.Info(\"<EKG - Ignore Validation Logs > : query formed ====== \" + queryIgnoreTextUpdate);\r\n    queryModule.update(queryIgnoreTextUpdate);\r\n    }\r\n\r\n}\r\n    if (metadataFlag === true || severityFlag === true)\r\n    {\r\n    let errorMessage = '';\r\n\r\n    if (metadataFlag === true && severityFlag === true) {\r\n        errorMessage = (\"You can not ignore MetaData Errors. Some errors were also ignored, which may cause issues later. Please address them.\").fontcolor('red');\r\n    } else if (metadataFlag === true) {\r\n        errorMessage = (\"You can not ignore MetaData Errors.\").fontcolor('red');\r\n    } else if (severityFlag === true) {\r\n        errorMessage = (\"Some errors were ignored, which may cause issues later. Please address them.\").fontcolor('red');\r\n    }\r\n            RuleOutputToUI = { Status: 'Success', Message: errorMessage};\r\n           \r\n    }\r\n    Log.Info(\"<EKG - Ignore Validation Logs > : Execution Complete.\");   \r\n \r\n    \r\n    };\r\n          return {\r\n        ignoreValidations: ignoreValidations\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.ignoreValidations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var ignoreValidations = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    var project = parsedParams.Project;\r\n    var Select = parsedParams.IgnoredRows;\r\n    var lastSequence = parseInt(parsedParams.lastNumber);\r\n    Log.Info(\"<EKG - Ignore Validation Logs > : Ignoring Mass Validations.\");\r\n    if(isNaN(lastSequence))\r\n    {\r\n        Log.Info(\"<EKG - Ignore Validation Logs > : Initializing from sequence 1.\");\r\n        lastSequence = 0;\r\n    }\r\n    var metadataFlag = false;\r\n    var severityFlag = false;\r\n\r\n    for(var j=0; j<Select.length;j++)\r\n    {\r\n    \r\n    let validationIBPL = 'Select (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] ) on row,({Measure.[o9EKG Validation Error Text],Measure.[o9EKG Validation Type],Measure.[o9EKG Validation Severity],Measure.[o9EKG Error Type]}) on column;';\r\n    let validationRow = cellsetModule.createCellSet(queryModule.select(validationIBPL));\r\n    \r\n\r\n    // var metadataFlag = false;\r\n    // var severityFlag = false ;\r\n    var errorType = validationRow.row(0).cell(7);\r\n\r\n    if (errorType == \"Metadata\")\r\n    {\r\n        metadataFlag = true;\r\n\r\n    }\r\n    else \r\n    {\r\n    var validationType = validationRow.row(0).cell(5);\r\n    var severity = validationRow.row(0).cell(6);\r\n    if (severity == \"Error\" )\r\n    \r\n    {\r\n      \r\n        severityFlag = true;\r\n        \r\n    }\r\n    var queryIgnoreTextUpdate1 = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Validation Error Text] = null ;Measure.[o9EKG Validation Type] = null;Measure.[o9EKG Error Type] = null; Measure.[o9EKG Validation Severity] = null; end scope;';\r\n  \r\n    queryModule.update(queryIgnoreTextUpdate1);\r\n    \r\n    var errorText =  validationRow.row(0).cell(4); \r\n    let escapedErrorText = '';\r\n    Select[j].Seq.Value = lastSequence + j+1;\r\n    if ((errorText.toLowerCase()).includes(\"udf_\") || (errorText.toLowerCase()).includes(\"invalid characters\")) {\r\n        escapedErrorText = errorText.toString().replace(/\"/g, '\\\\\"').replace(/'/g, \"\\'\");\r\n    }\r\n    else {\r\n        escapedErrorText = errorText;\r\n    }\r\n   \r\n    // var queryIgnoreTextUpdate = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Ignored Validation Error Text] = \"'+escapedErrorText+'\" ;Measure.[o9EKG Ignore Validation Type] = \"'+validationType.toString()+'\" ;Measure.[o9EKG Ignore Severity] = \"'+severity.toString()+'\" ;end scope;';\r\n    var queryIgnoreTextUpdate = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Table].[Table Name].[${Select[j].Table.Value}] * [o9EKGSequence].[o9EKGSequenceNumber].[${Select[j].Seq.Value}] );\r\n        Measure.[o9EKG Ignored Validation Error Text] = \"${escapedErrorText}\";\r\n        Measure.[o9EKG Ignore Validation Type] = \"${validationType.toString()}\";\r\n        Measure.[o9EKG Ignore Severity] = \"${severity.toString()}\" ;\r\n    end scope;`\r\n\r\n    // var queryIgnoreTextUpdate = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Ignored Validation Error Text] = \"'+errorText.toString()+'\" ;Measure.[o9EKG Ignore Validation Type] = \"'+validationType.toString()+'\" ;Measure.[o9EKG Ignore Severity] = \"'+severity.toString()+'\" ;end scope;';\r\n    Log.Info(\"<EKG - Ignore Validation Logs > : query formed ====== \" + queryIgnoreTextUpdate);\r\n    queryModule.update(queryIgnoreTextUpdate);\r\n    }\r\n\r\n}\r\n    if (metadataFlag === true || severityFlag === true)\r\n    {\r\n    let errorMessage = '';\r\n\r\n    if (metadataFlag === true && severityFlag === true) {\r\n        errorMessage = (\"You can not ignore MetaData Errors. Some errors were also ignored, which may cause issues later. Please address them.\").fontcolor('red');\r\n    } else if (metadataFlag === true) {\r\n        errorMessage = (\"You can not ignore MetaData Errors.\").fontcolor('red');\r\n    } else if (severityFlag === true) {\r\n        errorMessage = (\"Some errors were ignored, which may cause issues later. Please address them.\").fontcolor('red');\r\n    }\r\n            RuleOutputToUI = { Status: 'Success', Message: errorMessage};\r\n           \r\n    }\r\n    Log.Info(\"<EKG - Ignore Validation Logs > : Execution Complete.\");   \r\n \r\n    \r\n    };\r\n          return {\r\n        ignoreValidations: ignoreValidations\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.ignoreValidations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "e117b0ac-b300-28f9-54ec-40c51487fae2",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213101,
    "Description": "validateTableGroup",
    "Documentation": "define('o9.EKG.validateTableGroup', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n  var validateTableGroup= function(o9Params){\r\n\r\n   var parsedParams = JSON.parse(o9Params);\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   var TableGroup= parsedParams.TG;\r\n   Log.Info('o9 PARAMS ---' + TableGroup);\r\n\r\n   var ExistingTableGroup = `Select ( [o9EKG Table].[Table Group].[${TableGroup}]);`\r\n\r\n   var temp = cellsetModule.createCellSet(queryModule.select(ExistingTableGroup));\r\n   Log.Info('PRINT ---'+ExistingTableGroup);\r\n   Log.Info('o9 PARAMS ---' + temp);\r\n\r\n   if(temp.rowCount > 0) {\r\n       RuleOutputToUI={\r\n       Status:'Error',\r\n       Message:'This Table Group already exists. Please enter a new name'};\r\n   \r\n    \r\n    }\r\n    else {\r\n        RuleOutputToUI={\r\n          Status:'Success',\r\n          Message:'New Table Group added and details updated'};\r\n      }\r\n      return;\r\n   }\r\n   ;\r\n\r\n\r\n   return{\r\n    validateTableGroup:validateTableGroup\r\n    };\r\n});",
    "Code": "define('o9.EKG.validateTableGroup', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    \r\n  var validateTableGroup= function(o9Params){\r\n\r\n   var parsedParams = JSON.parse(o9Params);\r\n   var queryModule = require('o9/data/query');\r\n   var cellsetModule = require('o9/data/cellset');\r\n   var TableGroup= parsedParams.TG;\r\n   Log.Info('o9 PARAMS ---' + TableGroup);\r\n\r\n   var ExistingTableGroup = `Select ( [o9EKG Table].[Table Group].[${TableGroup}]);`\r\n\r\n   var temp = cellsetModule.createCellSet(queryModule.select(ExistingTableGroup));\r\n   Log.Info('PRINT ---'+ExistingTableGroup);\r\n   Log.Info('o9 PARAMS ---' + temp);\r\n\r\n   if(temp.rowCount > 0) {\r\n       RuleOutputToUI={\r\n       Status:'Error',\r\n       Message:'This Table Group already exists. Please enter a new name'};\r\n   \r\n    \r\n    }\r\n    else {\r\n        RuleOutputToUI={\r\n          Status:'Success',\r\n          Message:'New Table Group added and details updated'};\r\n      }\r\n      return;\r\n   }\r\n   ;\r\n\r\n\r\n   return{\r\n    validateTableGroup:validateTableGroup\r\n    };\r\n});",
    "ModuleName": "o9.EKG.validateTableGroup",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "5b3de2f5-5116-31f3-07ae-62df6a20d172",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213102,
    "Description": "AddFieldsinBulk",
    "Documentation": "define('o9.EKG.AddFieldsinBulk', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var AddFieldsinBulk =   function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\t\tLog.Info(\"Started AddFieldsinBulk Plugin\");\r\n\t\tvar sequencegenerator=[];\r\n\t\t\r\n\r\n//Run the Nextlabel select queries N times where N is a parameter passed from action button filed ID NewFieldsCount. LS will return N unique values (1 for every time) the select query is run. Pass the list of values LS returns as csv list to FID in the procedure below\r\n\t\tfor (z = 0;z < parsedParams.NewFieldsCount;z++)\r\n\t\t\t        {\r\n\t\t\t\t\tvar GenerateNextSequence =`select (NextLabel([SrNo_FieldID]));`;\r\n\t\t\t\t\tvar GenerateNextSequenceData = queryModule.select(GenerateNextSequence);\r\n\t\t\t\t\t\r\n\t\t\t\t\tLog.Info(\"New Field ID generated in LS \"+ GenerateNextSequenceData.Result+ \" will be passed to createmember\");\r\n\t\t\t\t\t\r\n\t\tvar CreateFieldIDMember = `createmember( [o9EKG Table].[Table Type] = { , \"${parsedParams.TableType}\" }  , [o9EKG Table].[Table Group] = { , \"${parsedParams.TableGroup}\" } , [o9EKG Table].[Table Name] = { , \"${parsedParams.TableName}\" }, [o9EKG Table].[Field ID] = { ,\"${ GenerateNextSequenceData.Result}\"} );`;\r\n\r\n\t\t\t\tqueryModule.update(CreateFieldIDMember);\r\n\r\n\t\t\t\t\t//Change this based on the value format based on the select query\t\r\n\t\t            sequencegenerator.push(GenerateNextSequenceData.Result);\r\n\t\t            Log.Info(\"FieldIDs array list\"+  JSON.stringify(sequencegenerator));\r\n\t\t\t        }\r\n        \r\n\t\t//' + filterclause(StyleColor) + ' pass this inside procedure which sends the data in array format into the procedure . ${parsedParams.Project}\r\n\t\tvar ExecuteIBPLCreateField =`exec procedure EKG_AddFields_InBulk {  \"FieldList\" : [${ filterclause(sequencegenerator)}] ,  \"Project\" : \"${parsedParams.Project}\" , \"Blocklist\" : [${ filterclause(parsedParams.Block)}], \"Caplist\" : [${ filterclause(parsedParams.Cap)}],  \"user\" : \"${parsedParams.user}\",  \"now\" : \"${parsedParams.now}\"  } ;`;\r\n\t\r\n\r\n        queryModule.update(ExecuteIBPLCreateField);\r\n\t\t\r\n\r\n        return;\r\n    };\r\n var filterclause = function(obj) {\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(function(p) {\r\n                return '\"' + p + '\"';\r\n            }).join(',');\r\n        }\r\n        return '\"' + obj + '\"';\r\n      };\r\n    return {\r\n        AddFieldsinBulk: AddFieldsinBulk\r\n    };\r\n});",
    "Code": "define('o9.EKG.AddFieldsinBulk', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n    var AddFieldsinBulk =   function (o9Params) {\r\n\r\n        var parsedParams = JSON.parse(o9Params);\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n\t\tLog.Info(\"Started AddFieldsinBulk Plugin\");\r\n\t\tvar sequencegenerator=[];\r\n\t\t\r\n\r\n//Run the Nextlabel select queries N times where N is a parameter passed from action button filed ID NewFieldsCount. LS will return N unique values (1 for every time) the select query is run. Pass the list of values LS returns as csv list to FID in the procedure below\r\n\t\tfor (z = 0;z < parsedParams.NewFieldsCount;z++)\r\n\t\t\t        {\r\n\t\t\t\t\tvar GenerateNextSequence =`select (NextLabel([SrNo_FieldID]));`;\r\n\t\t\t\t\tvar GenerateNextSequenceData = queryModule.select(GenerateNextSequence);\r\n\t\t\t\t\t\r\n\t\t\t\t\tLog.Info(\"New Field ID generated in LS \"+ GenerateNextSequenceData.Result+ \" will be passed to createmember\");\r\n\t\t\t\t\t\r\n\t\tvar CreateFieldIDMember = `createmember( [o9EKG Table].[Table Type] = { , \"${parsedParams.TableType}\" }  , [o9EKG Table].[Table Group] = { , \"${parsedParams.TableGroup}\" } , [o9EKG Table].[Table Name] = { , \"${parsedParams.TableName}\" }, [o9EKG Table].[Field ID] = { ,\"${ GenerateNextSequenceData.Result}\"} );`;\r\n\r\n\t\t\t\tqueryModule.update(CreateFieldIDMember);\r\n\r\n\t\t\t\t\t//Change this based on the value format based on the select query\t\r\n\t\t            sequencegenerator.push(GenerateNextSequenceData.Result);\r\n\t\t            Log.Info(\"FieldIDs array list\"+  JSON.stringify(sequencegenerator));\r\n\t\t\t        }\r\n        \r\n\t\t//' + filterclause(StyleColor) + ' pass this inside procedure which sends the data in array format into the procedure . ${parsedParams.Project}\r\n\t\tvar ExecuteIBPLCreateField =`exec procedure EKG_AddFields_InBulk {  \"FieldList\" : [${ filterclause(sequencegenerator)}] ,  \"Project\" : \"${parsedParams.Project}\" , \"Blocklist\" : [${ filterclause(parsedParams.Block)}], \"Caplist\" : [${ filterclause(parsedParams.Cap)}],  \"user\" : \"${parsedParams.user}\",  \"now\" : \"${parsedParams.now}\"  } ;`;\r\n\t\r\n\r\n        queryModule.update(ExecuteIBPLCreateField);\r\n\t\t\r\n\r\n        return;\r\n    };\r\n var filterclause = function(obj) {\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(function(p) {\r\n                return '\"' + p + '\"';\r\n            }).join(',');\r\n        }\r\n        return '\"' + obj + '\"';\r\n      };\r\n    return {\r\n        AddFieldsinBulk: AddFieldsinBulk\r\n    };\r\n});",
    "ModuleName": "o9.EKG.AddFieldsinBulk",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "7d427339-c185-42a8-4da2-df19a3669868",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213103,
    "Description": "o9.EKG.validateDiff",
    "Documentation": "define('o9.EKG.validateDiff', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n  var validateDiff = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\r\n    // Condition: Field Name should be unique within a table\r\n    var ExistingIls = `Select (&CWV * [o9EKG Customer].[Project Name].[${parsedParams.CurrentProject}] * [o9EKGSequence].[o9EKGSequenceNumber].[${parsedParams.SeqNumber}] * [o9EKG Table].[Table Name] * [Sequence].[Sequence] ) on row, ({Measure.[o9EKG Diff Attribute], Measure.[o9EKG Diff Difference Type]}) on column where {Measure.[o9EKG Diff Difference Type] like \"Composite (Check Details)\"} ;`;\r\n    Log.Info(\"PRINT --- \" +ExistingIls );\r\n    var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n    Log.Info(\"PRINT ValidateDiff\" +temp.rowCount);\r\n\r\n    if(temp.rowCount > 0) {\r\n      Log.Info(\"\")\r\n      RuleOutputToUI = {\r\n        Status:'Error',\r\n        Message:'Some composite diff rows have been selected, please unselect them to proceed with the merge actions. To merge the particular details for the composite rows, please unhide the diff types “Excluded (hidden)” and “Removed (hidden)” by clearing the pivot filters, then select the exact rows before merging them. '\r\n      };\r\n      return RuleOutputToUI;\r\n    }\r\n\r\n    return RuleOutputToUI;\r\n  };\r\n\r\n  return {\r\n    validateDiff: validateDiff\r\n  };\r\n});",
    "Code": "define('o9.EKG.validateDiff', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n  var validateDiff = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n\r\n\r\n    // Condition: Field Name should be unique within a table\r\n    var ExistingIls = `Select (&CWV * [o9EKG Customer].[Project Name].[${parsedParams.CurrentProject}] * [o9EKGSequence].[o9EKGSequenceNumber].[${parsedParams.SeqNumber}] * [o9EKG Table].[Table Name] * [Sequence].[Sequence] ) on row, ({Measure.[o9EKG Diff Attribute], Measure.[o9EKG Diff Difference Type]}) on column where {Measure.[o9EKG Diff Difference Type] like \"Composite (Check Details)\"} ;`;\r\n    Log.Info(\"PRINT --- \" +ExistingIls );\r\n    var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n    Log.Info(\"PRINT ValidateDiff\" +temp.rowCount);\r\n\r\n    if(temp.rowCount > 0) {\r\n      Log.Info(\"\")\r\n      RuleOutputToUI = {\r\n        Status:'Error',\r\n        Message:'Some composite diff rows have been selected, please unselect them to proceed with the merge actions. To merge the particular details for the composite rows, please unhide the diff types “Excluded (hidden)” and “Removed (hidden)” by clearing the pivot filters, then select the exact rows before merging them. '\r\n      };\r\n      return RuleOutputToUI;\r\n    }\r\n\r\n    return RuleOutputToUI;\r\n  };\r\n\r\n  return {\r\n    validateDiff: validateDiff\r\n  };\r\n});",
    "ModuleName": "o9.EKG.validateDiff",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "ede99209-b569-2527-0bcb-6cb7eaacd7f5",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213104,
    "Description": "o9.EKG.validateNetChange",
    "Documentation": "define('o9.EKG.validateNetChange', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n  var validateNetChange = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info('PRINT ---' + parsedParams.FieldName);\r\n    let stringifiedParams = JSON.stringify(parsedParams);\r\n    Log.Info('PRINTING FOR PROJECT DETAILS: '+ stringifiedParams);\r\n\r\n    if(parsedParams.TableLSType === \"Dimension\" && parsedParams.Type === \"Upsert & Delete\"){\r\n      RuleOutputToUI = {\r\n          Status: 'Error',\r\n          Message: 'Error: A Dimension can only have Net Change Type as \"Upsert Only\"'\r\n        };\r\n        return RuleOutputToUI;\r\n    }\r\n\r\n    if(parsedParams.TableLSType === \"Dimension\" && parsedParams.Flag === \"True\"){\r\n      RuleOutputToUI = {\r\n          Status: 'Error',\r\n          Message: 'Error: A Dimension cannot have Flag Measures, please set \"Generate NC Flag Measures\" to \"False\"'\r\n        };\r\n        return RuleOutputToUI;\r\n    }\r\n\r\n    if(parsedParams.TableLSType === \"Dimension\" && ((parsedParams.Addition !== \"\" && parsedParams.Addition !== null) || (parsedParams.Deletion !== \"\" && parsedParams.Deletion !== null))){\r\n      RuleOutputToUI = {\r\n        Status: 'Error',\r\n        Message: 'Error: A Dimension cannot have Flag Measures, please remove values from \"NC Deletion Measure\" and \"NC Addition Measure\"'\r\n      };\r\n      return RuleOutputToUI;\r\n    }\r\n    \r\n    if(parsedParams.TableLSType === \"Fact\" && parsedParams.Flag === \"False\"){\r\n      if(((parsedParams.Addition !== \"\" && parsedParams.Addition !== null) || (parsedParams.Deletion !== \"\" && parsedParams.Deletion !== null))){\r\n        RuleOutputToUI = {\r\n          Status: 'Error',\r\n          Message: 'Error: Please remove values from \"NC Deletion Measure\" and \"NC Addition Measure\" as \"Generate NC Flag Measures\" is set to \"False\"'\r\n        };\r\n        return RuleOutputToUI;\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    if(parsedParams.TableLSType === \"Fact\" && parsedParams.Flag === \"True\"){\r\n      if((parsedParams.Addition === \"\" || parsedParams.Addition === null) || (parsedParams.Deletion === \"\" || parsedParams.Deletion === null)){\r\n          RuleOutputToUI = {\r\n              Status: 'Error',\r\n              Message: 'Error: The fields \"NC Deletion Measure\" and \"NC Addition Measure\" are madatory if \"Generate NC Flag Measures\" is set to \"True\"'\r\n            };\r\n            return RuleOutputToUI;\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return RuleOutputToUI;\r\n  };\r\n\r\n  return {\r\n    validateNetChange: validateNetChange\r\n  };\r\n});",
    "Code": "define('o9.EKG.validateNetChange', ['o9/data/query', 'o9/data/cellset'], function () {\r\n\r\n  var validateNetChange = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset');\r\n    Log.Info('PRINT ---' + parsedParams.FieldName);\r\n    let stringifiedParams = JSON.stringify(parsedParams);\r\n    Log.Info('PRINTING FOR PROJECT DETAILS: '+ stringifiedParams);\r\n\r\n    if(parsedParams.TableLSType === \"Dimension\" && parsedParams.Type === \"Upsert & Delete\"){\r\n      RuleOutputToUI = {\r\n          Status: 'Error',\r\n          Message: 'Error: A Dimension can only have Net Change Type as \"Upsert Only\"'\r\n        };\r\n        return RuleOutputToUI;\r\n    }\r\n\r\n    if(parsedParams.TableLSType === \"Dimension\" && parsedParams.Flag === \"True\"){\r\n      RuleOutputToUI = {\r\n          Status: 'Error',\r\n          Message: 'Error: A Dimension cannot have Flag Measures, please set \"Generate NC Flag Measures\" to \"False\"'\r\n        };\r\n        return RuleOutputToUI;\r\n    }\r\n\r\n    if(parsedParams.TableLSType === \"Dimension\" && ((parsedParams.Addition !== \"\" && parsedParams.Addition !== null) || (parsedParams.Deletion !== \"\" && parsedParams.Deletion !== null))){\r\n      RuleOutputToUI = {\r\n        Status: 'Error',\r\n        Message: 'Error: A Dimension cannot have Flag Measures, please remove values from \"NC Deletion Measure\" and \"NC Addition Measure\"'\r\n      };\r\n      return RuleOutputToUI;\r\n    }\r\n    \r\n    if(parsedParams.TableLSType === \"Fact\" && parsedParams.Flag === \"False\"){\r\n      if(((parsedParams.Addition !== \"\" && parsedParams.Addition !== null) || (parsedParams.Deletion !== \"\" && parsedParams.Deletion !== null))){\r\n        RuleOutputToUI = {\r\n          Status: 'Error',\r\n          Message: 'Error: Please remove values from \"NC Deletion Measure\" and \"NC Addition Measure\" as \"Generate NC Flag Measures\" is set to \"False\"'\r\n        };\r\n        return RuleOutputToUI;\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    if(parsedParams.TableLSType === \"Fact\" && parsedParams.Flag === \"True\"){\r\n      if((parsedParams.Addition === \"\" || parsedParams.Addition === null) || (parsedParams.Deletion === \"\" || parsedParams.Deletion === null)){\r\n          RuleOutputToUI = {\r\n              Status: 'Error',\r\n              Message: 'Error: The fields \"NC Deletion Measure\" and \"NC Addition Measure\" are madatory if \"Generate NC Flag Measures\" is set to \"True\"'\r\n            };\r\n            return RuleOutputToUI;\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return RuleOutputToUI;\r\n  };\r\n\r\n  return {\r\n    validateNetChange: validateNetChange\r\n  };\r\n});",
    "ModuleName": "o9.EKG.validateNetChange",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4f4687ba-5145-46a8-c5a4-9dd474712a78",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213105,
    "Description": "unignoreValidations",
    "Documentation": "define('o9.ekgconfig.unignoreValidations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var unignoreValidations = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    var project = parsedParams.Project;\r\n    var Select = parsedParams.IgnoredRows;\r\n    var lastSequence = parseInt(parsedParams.lastNumber);\r\n    Log.Info(\"<EKG - Reconsider Error Logs > :  Re-considering ignored validations.\");\r\n    if(isNaN(lastSequence))\r\n    {\r\n        Log.Info(\"<EKG - Reconsider Error Logs > :  Initializing from sequence 1.\");\r\n        lastSequence = 0;\r\n    }\r\n     \r\n    \r\n    Log.Info(\"<EKG - Reconsider Validation Logs > : Last Sequence \" + lastSequence);\r\n    for(var j=0; j<Select.length;j++)\r\n    {\r\n    \r\n    let validationIBPL = 'Select (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] ) on row,({Measure.[o9EKG Ignored Validation Error Text],Measure.[o9EKG Ignore Validation Type],Measure.[o9EKG Ignore Severity]}) on column;';\r\n    let validationRow = cellsetModule.createCellSet(queryModule.select(validationIBPL));\r\n    \r\n\r\n    var queryIgnoreTextUpdate1 = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Ignored Validation Error Text] = null ;Measure.[o9EKG Ignore Validation Type] = null;Measure.[o9EKG Ignore Severity] = null;end scope;';\r\n    // Log.Info(\"<EKG - unIgnore Validation Logs > : Validation Delete Query ====== \" + queryIgnoreTextUpdate1);\r\n    queryModule.update(queryIgnoreTextUpdate1);\r\n    // Log.Info(\"<EKG - unIgnore Validation Logs > : rowwwwwwwwwwwwwwwwww 1 ====== \" + validationRow.row(0).cell(5));\r\n    var validationType = validationRow.row(0).cell(5);\r\n    var severity = validationRow.row(0).cell(6);\r\n    var errorText =  validationRow.row(0).cell(4);   \r\n    Select[j].Seq.Value = lastSequence + j+1;\r\n\r\n    let escapedErrorText = '';\r\n    Select[j].Seq.Value = lastSequence + j+1;\r\n    if ((errorText.toLowerCase()).includes(\"udf_\") || (errorText.toLowerCase()).includes(\"invalid characters\")) {\r\n        escapedErrorText = errorText.toString().replace(/\"/g, '\\\\\"').replace(/'/g, \"\\'\");\r\n    }\r\n    else {\r\n        escapedErrorText = errorText;\r\n    }\r\n    var queryIgnoreTextUpdate = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Validation Error Text] = \"'+escapedErrorText.toString()+'\" ;Measure.[o9EKG Validation Type] = \"'+validationType.toString()+'\" ;Measure.[o9EKG Error Type] = \"Mass Validation\" ;Measure.[o9EKG Validation Severity] =\"'+severity.toString()+'\" ;end scope;';\r\n    // Log.Info(\"<EKG - unIgnore Validation Logs > : query formed ====== \" + queryIgnoreTextUpdate);\r\n    queryModule.update(queryIgnoreTextUpdate);\r\n      \r\n    }\r\n    Log.Info(\"<EKG - Reconsider Error Logs > :  Execution Complete\"); \r\n    };\r\n          return {\r\n        unignoreValidations: unignoreValidations\r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.unignoreValidations', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var unignoreValidations = function(o9Params){\r\n\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require('o9/data/query');\r\n    var cellsetModule = require('o9/data/cellset'); \r\n\r\n    var project = parsedParams.Project;\r\n    var Select = parsedParams.IgnoredRows;\r\n    var lastSequence = parseInt(parsedParams.lastNumber);\r\n    Log.Info(\"<EKG - Reconsider Error Logs > :  Re-considering ignored validations.\");\r\n    if(isNaN(lastSequence))\r\n    {\r\n        Log.Info(\"<EKG - Reconsider Error Logs > :  Initializing from sequence 1.\");\r\n        lastSequence = 0;\r\n    }\r\n     \r\n    \r\n    Log.Info(\"<EKG - Reconsider Validation Logs > : Last Sequence \" + lastSequence);\r\n    for(var j=0; j<Select.length;j++)\r\n    {\r\n    \r\n    let validationIBPL = 'Select (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] ) on row,({Measure.[o9EKG Ignored Validation Error Text],Measure.[o9EKG Ignore Validation Type],Measure.[o9EKG Ignore Severity]}) on column;';\r\n    let validationRow = cellsetModule.createCellSet(queryModule.select(validationIBPL));\r\n    \r\n\r\n    var queryIgnoreTextUpdate1 = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Ignored Validation Error Text] = null ;Measure.[o9EKG Ignore Validation Type] = null;Measure.[o9EKG Ignore Severity] = null;end scope;';\r\n    // Log.Info(\"<EKG - unIgnore Validation Logs > : Validation Delete Query ====== \" + queryIgnoreTextUpdate1);\r\n    queryModule.update(queryIgnoreTextUpdate1);\r\n    // Log.Info(\"<EKG - unIgnore Validation Logs > : rowwwwwwwwwwwwwwwwww 1 ====== \" + validationRow.row(0).cell(5));\r\n    var validationType = validationRow.row(0).cell(5);\r\n    var severity = validationRow.row(0).cell(6);\r\n    var errorText =  validationRow.row(0).cell(4);   \r\n    Select[j].Seq.Value = lastSequence + j+1;\r\n\r\n    let escapedErrorText = '';\r\n    Select[j].Seq.Value = lastSequence + j+1;\r\n    if ((errorText.toLowerCase()).includes(\"udf_\") || (errorText.toLowerCase()).includes(\"invalid characters\")) {\r\n        escapedErrorText = errorText.toString().replace(/\"/g, '\\\\\"').replace(/'/g, \"\\'\");\r\n    }\r\n    else {\r\n        escapedErrorText = errorText;\r\n    }\r\n    var queryIgnoreTextUpdate = 'cartesian scope: (&CWV * [o9EKG Customer].[Project Name].['+project+'] * [o9EKG Table].[Table Name].['+Select[j].Table.Value+'] * [o9EKGSequence].[o9EKGSequenceNumber].['+Select[j].Seq.Value+'] );Measure.[o9EKG Validation Error Text] = \"'+escapedErrorText.toString()+'\" ;Measure.[o9EKG Validation Type] = \"'+validationType.toString()+'\" ;Measure.[o9EKG Error Type] = \"Mass Validation\" ;Measure.[o9EKG Validation Severity] =\"'+severity.toString()+'\" ;end scope;';\r\n    // Log.Info(\"<EKG - unIgnore Validation Logs > : query formed ====== \" + queryIgnoreTextUpdate);\r\n    queryModule.update(queryIgnoreTextUpdate);\r\n      \r\n    }\r\n    Log.Info(\"<EKG - Reconsider Error Logs > :  Execution Complete\"); \r\n    };\r\n          return {\r\n        unignoreValidations: unignoreValidations\r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.unignoreValidations",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "70085f87-b45e-d60b-79d2-242634d59927",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213106,
    "Description": "validateCustomer",
    "Documentation": "define(\"o9.EKG.validateCustomer\", [\r\n  \"o9/data/query\",\r\n  \"o9/data/cellset\",\r\n], function () {\r\n  var validateCustomer = function (o9Params) {\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require(\"o9/data/query\");\r\n    var cellsetModule = require(\"o9/data/cellset\");\r\n\r\n    Log.Info(\"o9 PARAMS ---\" + parsedParams.City);\r\n\r\n    var ExistingIls = `SELECT([o9EKG Customer].[Customer Name].[${parsedParams.Cust}]);`;\r\n\r\n    var ExistingCustomer = `Select([o9EKG Customer].[Customer Name].{[${parsedParams.Cust}]});`;\r\n    var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n\r\n    if (temp.rowCount > 0) {\r\n      RuleOutputToUI = {\r\n        Status: \"Error\",\r\n        Message: \"This Customer already exists. Please enter a new name\",\r\n      };\r\n    } else {\r\n      RuleOutputToUI = {\r\n        Status: \"Success\",\r\n        Message: \"Adding New Customer\",\r\n      };\r\n    }\r\n    return;\r\n  };\r\n\r\n  var addCustomer = function (o9Params) {\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require(\"o9/data/query\");\r\n\r\n    const characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let implementerKey = \"\";\r\n    for (let i = 0; i < 16; i++) {\r\n      implementerKey += characters.charAt(\r\n        Math.floor(Math.random() * characters.length)\r\n      );\r\n    }\r\n\r\n    Log.Info(\"o9 PARAMS ---\" + parsedParams.Cust);\r\n    const customerName = parsedParams.Cust;\r\n\r\n    try {\r\n      // create a new customer member in the o9EKG Customer dimension\r\n      let createCustomer = `createmember( [o9EKG Customer].[Customer Name] = { , \"${customerName}\" } );`;\r\n\r\n      queryModule.update(createCustomer);\r\n\r\n      // populate implementer's key for the new customer\r\n      let populateImplementerKey = `cartesian scope: (&CWV * [o9EKG Customer].[Customer Name].[${customerName}] );\r\n      Measure.[o9EKG Implementer Key] = \"${implementerKey}\";\r\n      end scope;`;\r\n\r\n      queryModule.update(populateImplementerKey);\r\n\r\n      RuleOutputToUI = {\r\n        Status: \"Success\",\r\n        Message: `Added Customer: ${customerName}`,\r\n      };\r\n    } catch (error) {\r\n      RuleOutputToUI = {\r\n        Status: \"Error\",\r\n        Message: `Encountered error while adding Customer:${error}`,\r\n      };\r\n    } finally {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return {\r\n    validateCustomer: validateCustomer,\r\n    addCustomer: addCustomer,\r\n  };\r\n});",
    "Code": "define(\"o9.EKG.validateCustomer\", [\r\n  \"o9/data/query\",\r\n  \"o9/data/cellset\",\r\n], function () {\r\n  var validateCustomer = function (o9Params) {\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require(\"o9/data/query\");\r\n    var cellsetModule = require(\"o9/data/cellset\");\r\n\r\n    Log.Info(\"o9 PARAMS ---\" + parsedParams.City);\r\n\r\n    var ExistingIls = `SELECT([o9EKG Customer].[Customer Name].[${parsedParams.Cust}]);`;\r\n\r\n    var ExistingCustomer = `Select([o9EKG Customer].[Customer Name].{[${parsedParams.Cust}]});`;\r\n    var temp = cellsetModule.createCellSet(queryModule.select(ExistingIls));\r\n\r\n    if (temp.rowCount > 0) {\r\n      RuleOutputToUI = {\r\n        Status: \"Error\",\r\n        Message: \"This Customer already exists. Please enter a new name\",\r\n      };\r\n    } else {\r\n      RuleOutputToUI = {\r\n        Status: \"Success\",\r\n        Message: \"Adding New Customer\",\r\n      };\r\n    }\r\n    return;\r\n  };\r\n\r\n  var addCustomer = function (o9Params) {\r\n    var parsedParams = JSON.parse(o9Params);\r\n    var queryModule = require(\"o9/data/query\");\r\n\r\n    const characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let implementerKey = \"\";\r\n    for (let i = 0; i < 16; i++) {\r\n      implementerKey += characters.charAt(\r\n        Math.floor(Math.random() * characters.length)\r\n      );\r\n    }\r\n\r\n    Log.Info(\"o9 PARAMS ---\" + parsedParams.Cust);\r\n    const customerName = parsedParams.Cust;\r\n\r\n    try {\r\n      // create a new customer member in the o9EKG Customer dimension\r\n      let createCustomer = `createmember( [o9EKG Customer].[Customer Name] = { , \"${customerName}\" } );`;\r\n\r\n      queryModule.update(createCustomer);\r\n\r\n      // populate implementer's key for the new customer\r\n      let populateImplementerKey = `cartesian scope: (&CWV * [o9EKG Customer].[Customer Name].[${customerName}] );\r\n      Measure.[o9EKG Implementer Key] = \"${implementerKey}\";\r\n      end scope;`;\r\n\r\n      queryModule.update(populateImplementerKey);\r\n\r\n      RuleOutputToUI = {\r\n        Status: \"Success\",\r\n        Message: `Added Customer: ${customerName}`,\r\n      };\r\n    } catch (error) {\r\n      RuleOutputToUI = {\r\n        Status: \"Error\",\r\n        Message: `Encountered error while adding Customer:${error}`,\r\n      };\r\n    } finally {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return {\r\n    validateCustomer: validateCustomer,\r\n    addCustomer: addCustomer,\r\n  };\r\n});",
    "ModuleName": "o9.EKG.validateCustomer",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "27ec2736-cef3-f510-5e90-d327cbf27ea9",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213107,
    "Description": "Generate Default Pipelines",
    "Documentation": "define('o9.EKG.generateDefaultPipeline', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var generateDefaultPipeline = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const project = parsedParams.Project;\r\n        const tableNames = parsedParams.TableName;\r\n\r\n        let batchType = \"Default\";\r\n\r\n        const createDefaultBatchType = `createmember( [o9EKG Batch Type].[Batch Type] = { , \"Default\" } );`;\r\n\r\n        Log.Info(createDefaultBatchType)\r\n        queryModule.update(createDefaultBatchType)\r\n\r\n        const createDefaultBatchType2 = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Batch Type].[Batch Type].[Default]);\r\n        Measure.[o9EKG Batch Description] = \"Default Batch Type\";\r\n        end scope;`;\r\n\r\n\r\n        Log.Info(createDefaultBatchType2)\r\n        queryModule.update(createDefaultBatchType2)\r\n\r\n\r\n        tableNames.map((tableName) => {\r\n            const tableGroupNameQuery = `Select ([o9EKG Table].[Table Name].[${tableName}]* [o9EKG Table].[Table Type]);`;\r\n            let tableGroupQueryResult = cellsetModule.createCellSet(queryModule.select(tableGroupNameQuery))\r\n\r\n            Log.Info(tableGroupNameQuery)\r\n\r\n            let tableGroupName = tableGroupQueryResult.row(0).cell(tableGroupQueryResult.memberColumnIndex('o9EKG Table', 'Table Type')).Name\r\n\r\n            let isSampleData = false;\r\n            if (tableGroupName === \"Sample Data\") {\r\n                isSampleData = true;\r\n            }\r\n\r\n            if (tableGroupName === \"IN\") {\r\n                tableGroupName = \"IN\";\r\n            }\r\n            else if (tableGroupName === \"o9 Data Model\") {\r\n                tableGroupName = \"ODM\";\r\n            }\r\n            else if (tableGroupName === \"LS_Upload\") {\r\n                tableGroupName = \"LSU\";\r\n            }\r\n            else if (tableGroupName === \"Sample Data\") {\r\n                tableGroupName = \"IN\"\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n\r\n\r\n            let pipelineName = tableGroupName + '_' + tableName;\r\n            if (isSampleData) {\r\n                pipelineName = \"Sample Data_\" + tableName;\r\n            }\r\n\r\n            const createPipelineMemberQuery = `createmember( [o9EKG Pipeline].[Pipeline Name] = { , \"${pipelineName}\" } );`;\r\n            const populatePipelineAssociationQuery = `cartesian scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}] * [o9EKG Table].[Table Name].[${tableName}]* [o9EKG Batch Type].[Batch Type].[${batchType}]* [o9EKG Customer].[Project Name].[${project}] ) ;\r\n                Measure.[o9EKG Table Order] = 1;\r\n                Measure.[o9EKG Pipeline Folder Group] = \"EKG_${tableGroupName}\" ;\r\n                end scope;`;\r\n\r\n            Log.Info(createPipelineMemberQuery)\r\n            queryModule.update(createPipelineMemberQuery)\r\n\r\n            Log.Info(populatePipelineAssociationQuery)\r\n            queryModule.update(populatePipelineAssociationQuery)\r\n        })\r\n\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        generateDefaultPipeline: generateDefaultPipeline\r\n    };\r\n})",
    "Code": "define('o9.EKG.generateDefaultPipeline', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var generateDefaultPipeline = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const project = parsedParams.Project;\r\n        const tableNames = parsedParams.TableName;\r\n\r\n        let batchType = \"Default\";\r\n\r\n        const createDefaultBatchType = `createmember( [o9EKG Batch Type].[Batch Type] = { , \"Default\" } );`;\r\n\r\n        Log.Info(createDefaultBatchType)\r\n        queryModule.update(createDefaultBatchType)\r\n\r\n        const createDefaultBatchType2 = `cartesian scope: (&CWV * [o9EKG Customer].[Project Name].[${project}] * [o9EKG Batch Type].[Batch Type].[Default]);\r\n        Measure.[o9EKG Batch Description] = \"Default Batch Type\";\r\n        end scope;`;\r\n\r\n\r\n        Log.Info(createDefaultBatchType2)\r\n        queryModule.update(createDefaultBatchType2)\r\n\r\n\r\n        tableNames.map((tableName) => {\r\n            const tableGroupNameQuery = `Select ([o9EKG Table].[Table Name].[${tableName}]* [o9EKG Table].[Table Type]);`;\r\n            let tableGroupQueryResult = cellsetModule.createCellSet(queryModule.select(tableGroupNameQuery))\r\n\r\n            Log.Info(tableGroupNameQuery)\r\n\r\n            let tableGroupName = tableGroupQueryResult.row(0).cell(tableGroupQueryResult.memberColumnIndex('o9EKG Table', 'Table Type')).Name\r\n\r\n            let isSampleData = false;\r\n            if (tableGroupName === \"Sample Data\") {\r\n                isSampleData = true;\r\n            }\r\n\r\n            if (tableGroupName === \"IN\") {\r\n                tableGroupName = \"IN\";\r\n            }\r\n            else if (tableGroupName === \"o9 Data Model\") {\r\n                tableGroupName = \"ODM\";\r\n            }\r\n            else if (tableGroupName === \"LS_Upload\") {\r\n                tableGroupName = \"LSU\";\r\n            }\r\n            else if (tableGroupName === \"Sample Data\") {\r\n                tableGroupName = \"IN\"\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n\r\n\r\n            let pipelineName = tableGroupName + '_' + tableName;\r\n            if (isSampleData) {\r\n                pipelineName = \"Sample Data_\" + tableName;\r\n            }\r\n\r\n            const createPipelineMemberQuery = `createmember( [o9EKG Pipeline].[Pipeline Name] = { , \"${pipelineName}\" } );`;\r\n            const populatePipelineAssociationQuery = `cartesian scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipelineName}] * [o9EKG Table].[Table Name].[${tableName}]* [o9EKG Batch Type].[Batch Type].[${batchType}]* [o9EKG Customer].[Project Name].[${project}] ) ;\r\n                Measure.[o9EKG Table Order] = 1;\r\n                Measure.[o9EKG Pipeline Folder Group] = \"EKG_${tableGroupName}\" ;\r\n                end scope;`;\r\n\r\n            Log.Info(createPipelineMemberQuery)\r\n            queryModule.update(createPipelineMemberQuery)\r\n\r\n            Log.Info(populatePipelineAssociationQuery)\r\n            queryModule.update(populatePipelineAssociationQuery)\r\n        })\r\n\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        generateDefaultPipeline: generateDefaultPipeline\r\n    };\r\n})",
    "ModuleName": "o9.EKG.generateDefaultPipeline",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "ce1cda17-ce6c-220d-e890-560752c429d5",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213108,
    "Description": "Batch update",
    "Documentation": "define('o9.ekgconfig.batchupdate', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var updatebatch = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        var project = parsedParams.Project;\r\n        var pipeline = parsedParams.Pipeline;\r\n        var foldergroup = parsedParams.FolderGroup;\r\n        var oldBatch = parsedParams.SelectedBatchType;\r\n        var newBatch = parsedParams.UpdateBatch;\r\n        var tableNames = parsedParams.TableName;\r\n\r\n        const formattedTables = tableNames.map(table => `[${table}]`).join(',');\r\n\r\n        let NullifyFolderGroupfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipeline}]  * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${oldBatch}]);\r\n                            Measure.[o9EKG Pipeline Folder Group] = null ;\r\n                            end scope;`;\r\n                            \r\n        Log.Info('nullify folder group '+NullifyFolderGroupfunction);\r\n        queryModule.update(NullifyFolderGroupfunction);\r\n                                       \r\n                            \r\n        let NullifyTableOrderfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipeline}] * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${oldBatch}]*[o9EKG Table].[Table Name]);\r\n                            Measure.[o9EKG Table Order] = null;\r\n                            end scope;`;\r\n\r\n        Log.Info('nullify folder group '+NullifyTableOrderfunction);\r\n        queryModule.update(NullifyTableOrderfunction);\r\n      \r\n\r\n        //cartesian scope= create member \r\n\r\n        let createbatchTypeMemberQuery = `createmember( [o9EKG Batch Type].[Batch Type] = { , \"${newBatch}\" } );`;\r\n        let populateQuery = `cartesian scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipeline}] * [o9EKG Table].[Table Name].filter(#.Name in {${formattedTables}})* [o9EKG Batch Type].[Batch Type].[${newBatch}]* [o9EKG Customer].[Project Name].[${project}] ) ;\r\n                Measure.[o9EKG Table Order] =  \"<not defined>\";\r\n                Measure.[o9EKG Pipeline Folder Group] = \"${foldergroup}\" ;\r\n                end scope;`;\r\n\r\n       Log.Info(\"createbatchTypeMemberQuery \"+createbatchTypeMemberQuery);\r\n            queryModule.update(createbatchTypeMemberQuery);\r\n\r\n        Log.Info(\"populate final query \"+populateQuery);\r\n            queryModule.update(populateQuery);\r\n\r\n\r\n        //delete member \r\n        let deleteEarlierIntersection = `DELETE DATA for MODEL [o9EKG Pipeline Properties],[o9EKG Pipeline Table Association] Where { &CWV , [o9EKG Customer].[Project Name].[${project}], [o9EKG Batch Type].[Batch Type].[${oldBatch}],[o9EKG Pipeline].[Pipeline Name].[${pipeline}] ,[o9EKG Table].[Table Name]};`;\r\n        queryModule.update(deleteEarlierIntersection);\r\n       \r\n\r\n        \r\n    };\r\n\r\n\r\n\r\n\r\n    return {\r\n        updatebatch : updatebatch       \r\n    };\r\n});",
    "Code": "define('o9.ekgconfig.batchupdate', ['o9/data/query', 'o9/data/cellset'], function() {\r\n    var updatebatch = function(o9Params) {\r\n\r\n        var queryModule = require('o9/data/query');\r\n        var cellsetModule = require('o9/data/cellset');\r\n        var parsedParams = JSON.parse(o9Params);\r\n        Log.Info('o9 params ---' + o9Params);\r\n\r\n        var project = parsedParams.Project;\r\n        var pipeline = parsedParams.Pipeline;\r\n        var foldergroup = parsedParams.FolderGroup;\r\n        var oldBatch = parsedParams.SelectedBatchType;\r\n        var newBatch = parsedParams.UpdateBatch;\r\n        var tableNames = parsedParams.TableName;\r\n\r\n        const formattedTables = tableNames.map(table => `[${table}]`).join(',');\r\n\r\n        let NullifyFolderGroupfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipeline}]  * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${oldBatch}]);\r\n                            Measure.[o9EKG Pipeline Folder Group] = null ;\r\n                            end scope;`;\r\n                            \r\n        Log.Info('nullify folder group '+NullifyFolderGroupfunction);\r\n        queryModule.update(NullifyFolderGroupfunction);\r\n                                       \r\n                            \r\n        let NullifyTableOrderfunction = `scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipeline}] * [o9EKG Customer].[Project Name].[${project}]*[o9EKG Batch Type].[Batch Type].[${oldBatch}]*[o9EKG Table].[Table Name]);\r\n                            Measure.[o9EKG Table Order] = null;\r\n                            end scope;`;\r\n\r\n        Log.Info('nullify folder group '+NullifyTableOrderfunction);\r\n        queryModule.update(NullifyTableOrderfunction);\r\n      \r\n\r\n        //cartesian scope= create member \r\n\r\n        let createbatchTypeMemberQuery = `createmember( [o9EKG Batch Type].[Batch Type] = { , \"${newBatch}\" } );`;\r\n        let populateQuery = `cartesian scope: ( &CWV * [o9EKG Pipeline].[Pipeline Name].[${pipeline}] * [o9EKG Table].[Table Name].filter(#.Name in {${formattedTables}})* [o9EKG Batch Type].[Batch Type].[${newBatch}]* [o9EKG Customer].[Project Name].[${project}] ) ;\r\n                Measure.[o9EKG Table Order] =  \"<not defined>\";\r\n                Measure.[o9EKG Pipeline Folder Group] = \"${foldergroup}\" ;\r\n                end scope;`;\r\n\r\n       Log.Info(\"createbatchTypeMemberQuery \"+createbatchTypeMemberQuery);\r\n            queryModule.update(createbatchTypeMemberQuery);\r\n\r\n        Log.Info(\"populate final query \"+populateQuery);\r\n            queryModule.update(populateQuery);\r\n\r\n\r\n        //delete member \r\n        let deleteEarlierIntersection = `DELETE DATA for MODEL [o9EKG Pipeline Properties],[o9EKG Pipeline Table Association] Where { &CWV , [o9EKG Customer].[Project Name].[${project}], [o9EKG Batch Type].[Batch Type].[${oldBatch}],[o9EKG Pipeline].[Pipeline Name].[${pipeline}] ,[o9EKG Table].[Table Name]};`;\r\n        queryModule.update(deleteEarlierIntersection);\r\n       \r\n\r\n        \r\n    };\r\n\r\n\r\n\r\n\r\n    return {\r\n        updatebatch : updatebatch       \r\n    };\r\n});",
    "ModuleName": "o9.ekgconfig.batchupdate",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "bc168152-3066-7c30-f0e9-af2d601dfc20",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213109,
    "Description": "validateCentralTenant",
    "Documentation": "define('o9.EKG.validateCentralTenant', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validateCentralTenant = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const project = parsedParams.Project;\r\n        const selectedTenants = parsedParams.SelectedTenants;\r\n\r\n        selectedTenants.map((tenant) => {\r\n            const selectQuery = `Select ([o9EKG Tenant].[Tenant ID].[${tenant}] * {Measure.[o9EKG Driver Tenant]}) where {&CWV, [o9EKG Customer].[Project Name].[${project}], Measure.[o9EKG Driver Tenant] == true};`;\r\n\r\n            const centralTenantCellSet = cellsetModule.createCellSet(queryModule.select(selectQuery));\r\n\r\n            if (centralTenantCellSet.rowCount > 0) {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'One of the selected profiles is a central tenant. Please choose another central tenant before removing these.' };\r\n                return;\r\n            }\r\n\r\n        });\r\n\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        validateCentralTenant: validateCentralTenant\r\n    };\r\n})",
    "Code": "define('o9.EKG.validateCentralTenant', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var validateCentralTenant = function (o9Params) {\r\n\r\n        const queryModule = require('o9/data/query');\r\n        const cellsetModule = require('o9/data/cellset');\r\n        const parsedParams = JSON.parse(o9Params);\r\n\r\n        Log.Info('O9 PARAMS ---' + o9Params);\r\n\r\n        const project = parsedParams.Project;\r\n        const selectedTenants = parsedParams.SelectedTenants;\r\n\r\n        selectedTenants.map((tenant) => {\r\n            const selectQuery = `Select ([o9EKG Tenant].[Tenant ID].[${tenant}] * {Measure.[o9EKG Driver Tenant]}) where {&CWV, [o9EKG Customer].[Project Name].[${project}], Measure.[o9EKG Driver Tenant] == true};`;\r\n\r\n            const centralTenantCellSet = cellsetModule.createCellSet(queryModule.select(selectQuery));\r\n\r\n            if (centralTenantCellSet.rowCount > 0) {\r\n                RuleOutputToUI = { Status: 'Error', Message: 'One of the selected profiles is a central tenant. Please choose another central tenant before removing these.' };\r\n                return;\r\n            }\r\n\r\n        });\r\n\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        validateCentralTenant: validateCentralTenant\r\n    };\r\n})",
    "ModuleName": "o9.EKG.validateCentralTenant",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {},
    "CodeFileId": null,
    "TenantPlugInId": "a41aecd5-6547-3aec-767c-87fca6d2db0c",
    "ModuleId": "b7824156-8448-4b9b-8b7e-6397b69f9391"
  },
  {
    "Id": 213110,
    "Description": "Generate Delete Data (Truncate) commands for those Measure Groups for which the flag is set false.",
    "Documentation": "define('o9.referencesupplyplanning.NetChangeDeleteData', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var NetChangeFlag = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencesupplyplanning.NetChangeDeleteData\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Scenario = ParsedParams.Version;\r\n\tvar getNCMeasureGroups = 'Select ([Version].[Version Name].['+Scenario+'] * [Out Table Structure].[Table Name] * [Out Files].[Serial No]) on row, ({Measure.[Output Category Validated], Measure.[Output Measure Group Validated], Measure.[Output NC Enabled Validated]}) on column;';\r\n\tvar NCMG = queryModule.select(getNCMeasureGroups);\r\n\tvar MeasureGroups = cellsetModule.createCellSet(NCMG);\r\n\tvar string1;\r\n\tvar query = \"\";\r\n\tfor (var i = 0; i < MeasureGroups.rowCount ; i++){\r\n\t\tvar NCFlag = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('Output NC Enabled Validated'));\r\n\t\tvar MG = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('Output Measure Group Validated'));\r\n\t\tvar category = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('Output Category Validated'));\r\n\t\t//Log.Info(NCFlag);\r\n\t\t//Log.Info(MG);\r\n\t\tif (NCFlag === \"No\"){\r\n\t\tif (category === \"Fact\"){\r\n\t\tstring1 = 'TRUNCATE DATA FOR MODEL ['+MG+'] with Versionname ['+Scenario+'];\\n';\r\n\t\tquery = query.concat(string1);\r\n\t\tLog.Info(query);\r\n\t\tqueryModule.update(query);\r\n\t\t}\r\n\t\t}\t\r\n\t}\r\n};   \r\n\t\r\nreturn {\r\n\tNetChangeFlag:NetChangeFlag\r\n\t};\r\n});",
    "Code": "define('o9.referencesupplyplanning.NetChangeDeleteData', ['o9/data/query', 'o9/data/cellset'], function () {\r\n    var NetChangeFlag = function(o9Params){\r\n\tLog.Info(\"Started Java Script o9.referencesupplyplanning.NetChangeDeleteData\");\r\n\tvar queryModule = require('o9/data/query');\r\n\tvar cellsetModule = require('o9/data/cellset');\r\n\tvar ParsedParams = JSON.parse(o9Params);\r\n\tLog.Info('Passed Fields'+ JSON.stringify(ParsedParams));\r\n\tvar Scenario = ParsedParams.Version;\r\n\tvar getNCMeasureGroups = 'Select ([Version].[Version Name].['+Scenario+'] * [Out Table Structure].[Table Name] * [Out Files].[Serial No]) on row, ({Measure.[Output Category Validated], Measure.[Output Measure Group Validated], Measure.[Output NC Enabled Validated]}) on column;';\r\n\tvar NCMG = queryModule.select(getNCMeasureGroups);\r\n\tvar MeasureGroups = cellsetModule.createCellSet(NCMG);\r\n\tvar string1;\r\n\tvar query = \"\";\r\n\tfor (var i = 0; i < MeasureGroups.rowCount ; i++){\r\n\t\tvar NCFlag = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('Output NC Enabled Validated'));\r\n\t\tvar MG = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('Output Measure Group Validated'));\r\n\t\tvar category = MeasureGroups.row(i).cell(MeasureGroups.measureColumnIndex('Output Category Validated'));\r\n\t\t//Log.Info(NCFlag);\r\n\t\t//Log.Info(MG);\r\n\t\tif (NCFlag === \"No\"){\r\n\t\tif (category === \"Fact\"){\r\n\t\tstring1 = 'TRUNCATE DATA FOR MODEL ['+MG+'] with Versionname ['+Scenario+'];\\n';\r\n\t\tquery = query.concat(string1);\r\n\t\tLog.Info(query);\r\n\t\tqueryModule.update(query);\r\n\t\t}\r\n\t\t}\t\r\n\t}\r\n};   \r\n\t\r\nreturn {\r\n\tNetChangeFlag:NetChangeFlag\r\n\t};\r\n});",
    "ModuleName": "o9.referencesupplyplanning.NetChangeDeleteData",
    "TenantId": 7496,
    "Language": "Javascript",
    "HostEnvironment": "WebApi",
    "ConfigSchema": {
      "ClassNames": []
    },
    "CodeFileId": null,
    "TenantPlugInId": "4230b4ba-e252-4356-b412-5bd435fe3ad9",
    "ModuleId": "4c075c57-6f44-464e-a1ec-c23fe53c4d44"
  }
]